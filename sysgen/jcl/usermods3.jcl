//*
//*        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*        !!                                     !!
//*        !! DO NOT RENUMBER THIS JOBSTREAM FILE !!
//*        !!                                     !!
//*        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*
//*
//ZP60005  JOB (SYSGEN),'J01 M20: ZP60005',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  ZAP TO ALWAYS MAINTAIN CHANNEL AND DEVICE SIO COUNTERS.
//*
//RECEIVE EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  *
++USERMOD(ZP60005)       /* IOS SIO COUNTERS */  .
++VER(Z038) FMID(FBB1221) PRE(UZ68196)
 /*
   PROBLEM DESCRIPTION:
     IOS DOES NOT MAINTAIN CHANNEL AND DEVICE SIO COUNTS BY DEFAULT.
       THE HALFWORD WRAP-AROUND SIO COUNTERS FOR CHANNELS (IN
       THE CHANNEL AVAILABILITY TABLE) AND DEVICES (IN THE UNIT
       CONTROL BLOCK COMMON EXTENSION) ARE NOT MAINTAINED UNLESS
       MF/1 IS ACTIVE.  MF/1 ACTIVATION AND DEACTIVATION OVERLAYS
       THE "HOOK" INSTRUCTION WITH AN APPROPRIATE INSTRUCTION.
       BY REPLACING THE DEACTIVATION INSTRUCTION WITH THE ACTIVATION
       INSTRUCTION, SIO COUNTS WILL BE MAINTAINED AS SOON AS NUCLEUS
       INITIALIZATION DISABLES I/O TRACE.  FURTHER, BY REPLACING THE
       ASSEMBLED "HOOK" INSTRUCTION WITH THE ACTIVATION INSTRUCTION
       SIO COUNTS WILL BE MAINTAINED FROM THE START OF THE IPL.  TO
       COVER ALL POSSIBILITIES, THE I/O TRACE HOOK IS ALSO CHANGED
       SO THAT THE SIO COUNTER CODE IS NOT BYPASSED IF AN I/O TRACE
       IS PERFORMED.

       THIS USERMOD UPDATES THE ASSEMBLED HOOK INSTRUCTION AND THE
       MF/1 DEACTIVATION INSTRUCTION IN IOS TO MATCH THE MF/1 IOS
       ACTIVATION INSTRUCTION.

   SPECIAL CONDITIONS:
     ACTION:
       AN IPL MUST BE PERFORMED FOR THIS SYSMOD TO BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 5.

     ORIGINALLY FOR UZ64419 (DEC 2001).
     THIS REWORK FOR UZ68196 (NOV 2002).

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IECIOSAM
 */.
++ZAP(IECIOSAM) DISTLIB(AOSC5).
 NAME IECIOSCN
 IDRDATA ZP60005
VER 0A24 47F0,5A92    ESIO3    B     ISIO050      TRACE ON, MF/1 INACT
VER 0A40 47F0,5A50    ESIO4    B     ISIO030      MF/1 ACTIVE
VER 0A44 58B0,32F0    ISIO41   L     IOQR,IRTIOQ  MF/1 INACTIVE
VER 0A48 47F0,5A92    ISI042   B     ISIO050      TRACE ON, MF/1 INACT
REP 0A24 47F0,5A50    ESIO3    B     ISIO030
REP 0A44 47F0,5A50    ISIO41   B     ISIO030
REP 0A48 47F0,5A50    ISIO42   B     ISIO030
/*
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60005)
          .
/*
//*
//APPLYCK EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60005)
        CHECK
        .
/*
//*
//APPLY   EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60005)
        DIS(WRITE)
        .
/*
//
//ZP60006  JOB (SYSGEN),'J02 M21: ZP60006',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  ZAP TO SHOW EXCP COUNT ON DATA SET DISPOSITION MESSAGES.
//*
//RECEIVE EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  *
++USERMOD(ZP60006)         /* DATA SET DEALLOCATION MESSAGES */  .
++VER(Z038) FMID(EBB1102) PRE(UZ75723)
 /*
   PROBLEM DESCRIPTION:
     THERE IS NO FEEDBACK IN JOB MESSAGES ABOUT EXCP ACTIVITY.
       STANDARD JOB MESSAGE OUTPUT DOES NOT CONTAIN ANY DATA
       ABOUT I/O ACTIVITY PERFORMED BY THE JOB.  VERY USEFUL
       PERFORMANCE AND DEBUGGING INFORMATION CAN BE DEDUCED
       BY SHOWING THE NUMBER OF EXCPS TO EACH DATA SET.

       THIS USERMOD CHANGES THE SYSTEM GENERATED DATA SET
       DEALLOCATION MESSAGE IEF285I BY SHOWING THE EXCP COUNT
       AFTER THE DATA SET NAME.  UP TO 9,999,999 CAN BE SHOWN
       CORRECTLY.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 6.
     THIS IS MERELY A REPACKAGING FOR MVS 3.8J OF THE FAMOUS
     "I/O COUNT ZAP" DOCUMENTED IN DETAIL BY SAM GOLOB IN HIS
     "MVS TOOLS AND TRICKS OF THE TRADE" COLUMN IN THE JULY 1989
     ISSUE OF THE NASPA TECHNICAL SUPPORT MAGAZINE.  THE ARTICLE
     IS SHIPPED IN MEMBER CL8907JL OF CBT FILE 120, AND THE USERMODS
     FOR VARIOUS LEVELS OF MVS ARE SHIPPED IN CBT FILE 369.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IEFAB4A2 (TO VERIFY DATA OFFSET)
       IEFAB4B0
 */.
++ZAP(IEFAB4A2) DISTLIB(AOSB3).
 NAME IEFAB4A2
 IDRDATA ZP60006
VER 0005 C9C5C6C1C2F4C1F2    DC    C'IEFAB4A2'
VER 0086 D203,A138,8094      MVC   DSABPTR(4),SIOTETIO(@08)
REP 0005 C9C5C6C1C2F4C1F2    DC    C'IEFAB4A2'
++ZAP(IEFAB4B0) DISTLIB(AOSB3).
 NAME IEFAB4B0
 EXPAND IEFAB4B0(128)
 IDRDATA ZP60006
*                            ORG   CLRKEY
VER 0052 4220,B10B           STC   @02,@OLDKEY
*                            ORG   CLRTXT
VER 0076 D248,B0C1,B0C0      MVC   MSGBUFFR+1(73),MSGBUFFR  BLANK ENTIRE BUFFER
*                            ORG   STEAL
VER 0156 9240,B0F8           MVI   MSGDISP+1,C' '      DISPLACED INSTRUCTION
*                            ORG   @EL00001
VER 02EE 4320,B10B           IC    @02,@OLDKEY
*                            ORG   @SIZDATD
VER 03E8 E600,010C           DC    AL1(230),AL3(@ENDATD-@DATD)
*                            ORG   PATCH
VER 045C 0000,0000,0000,0000 DC    4F'0'
VER 0464 0000,0000,0000,0000
*                            ORG   CLRKEY
REP 0052 4220,B120           STC   @02,@NEWKEY
*                            ORG   CLRTXT
REP 0076 D24D,B0C1,B0C0      MVC   MSGBUFFR+1(78),MSGBUFFR  BLANK ENTIRE BUFFER
*                            ORG   STEAL
REP 0156 47F0,C440           B     PATCH
*                   MAINLINE EQU   *
*                            ORG   @EL00001
REP 02EE 4320,B120           IC    @02,@NEWKEY
*                            ORG   @SIZDATD
REP 03E8 E600,0130           DC    AL1(230),AL3(@NEWDATD-@DATD)
*                            ORG   PATCH
*                   PATCHOUT EQU   *
REP 045C 924F,B0B7           MVI   MSGLNGTH+3,79       SET MSGLNGTH TO 79
REP 0460 58A0,B048           L     @10,@PC00001        ADDR OF MSGID
REP 0464 9101,A000           TM    0(@10),X'01'        MSGID=1 ?
REP 0468 47E0,C4C6           BNO   PATEXIT                 NO ==> WE EXIT.
REP 046C 58A0,D004           L     @10,4(,@13)         ADDR OF IEFAB4A2'S SAVE A
REP 0470 58A0,A03C           L     @10,X'3C'(,@10)     IEFAB4A2'S R10
REP 0474 BFAF,A138           ICM   @10,15,X'138'(@10)  ADDR OF DSAB (IEFAB4A2
*                               DSABPTR LEVEL JBB1329 RMID UZ75725 - SAME AS
*                               DSABPTR LEVEL EBB1102 RMID UZ75723)
REP 0478 4780,C4C6           BZ    PATEXIT             EXIT IF NO DSAB
REP 047C 58A0,A010           L     @10,DSABTIOT(,@10)  ADDR OF TIOT ENTRY
REP 0480 1F66                SLR   @06,@06             CLEAR WORK REG
REP 0482 4960,A012           CH    @06,TIOPSTTB(,@10)  IS THERE A UCB ENTRY IN T
REP 0486 4780,C4C6           BZ    PATEXIT                NO ==> WE QUIT.
REP 048A 5810,B058           L     @01,@PC00001+16     ADDR OF JSCB PTR
REP 048E 5810,1000           L     @01,0(,@01)         ADDR OF JSCB
REP 0492 5840,10D0           L     @04,JSCBTCBP(,@01)  ADDR OF INIT'S TCB
REP 0496 5810,114C           L     @01,JSCTMCOR(,@01)  ADDR OF TIOT MGMT AREA
REP 049A 5BA0,1018           S     @10,X'18'(,@01)     CALC TIOT ENTRY OFFSET
REP 049E BF4F,40A4           ICM   @04,15,TCBTCT(@04)  ADDR OF TIMING CONTROL TA
REP 04A2 4780,C4C6           BZ    PATEXIT             EXIT IF NONE
REP 04A6 5840,400C           L     @04,TCTIOTBL(,@04)  ADDR OF TCT I/O TABLE
REP 04AA 4150,4008           LA    @05,TCTDCBTD(,@04)  ADDR OF 1ST DD LOOKUP TAB
*                   PATDDLOP EQU   *
REP 04AE 4960,5000           CH    @06,0(,@05)         LAST ENTRY IS ZERO
*
REP 04B2 4780,C4C6           BZ    PATEXIT                  EXIT IF ZERO.
REP 04B6 49A0,5000           CH    @10,0(,@05)         DO THE TIOT DISPLACEMENTS
REP 04BA 4780,C4AA           BE    PATPRINT                 YES ==> PRINT I/O CO
REP 04BE 4150,5004           LA    @05,4(,@05)         BUMP TO NEXT DD TABLE ENT
REP 04C2 47F0,C492           B     PATDDLOP
*                   PATPRINT EQU   *
REP 04C6 4A40,5002           AH    @04,TCTIOTSD(,@05)  OFFSET TO THE DEVICE ENTR
*                                  (TCTDDENT OR TCBUCBP)
REP 04CA 5860,4004           L     @06,TCTDCTR(,@04)   GET THE I/O COUNT
REP 04CE 4E60,B0F8           CVD   @06,MSGDISP+1       INTO PACKED FORMAT
REP 04D2 D209,B105,C4CE      MVC   MSGCOUNT(L'EDMSK1),EDMSK1 PREPARE TO EDIT
REP 04D8 DE09,B105,B0FC      ED    MSGCOUNT(L'EDMSK1),MSGDISP+5 STICK IN SOME CO
REP 04DE 925C,B105           MVI   MSGCOUNT,C'*'       MARK WITH A SPLAT
*                   PATEXIT  EQU   *
REP 04E2 9240,B0F8           MVI   MSGDISP+1,C' '      DISPLACED INSTRUCTION
REP 04E6 47F0,C13E           B     MAINLINE
*
*                   EDMSK1   EQU   *
REP 04EA 6020,6B20,2020,6B20 DC    X'60206B2020206B202120'
REP 04F2 2120
* DECK PRODUCED BY THE ASMTOZAP UTILITY 85/12/16 165820
/*
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60006)
          .
/*
//*
//APPLYCK EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60006)
        CHECK
        .
/*
//*
//APPLY   EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60006)
        DIS(WRITE)
        .
/*
//
//ZP60007  JOB (SYSGEN),'J03 M22: ZP60007',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  ADD CONFTXT PARAMETER SUPPORT TO TSO/VTAM INITIALIZATION.
//*
//STEP1   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
++USERMOD(ZP60007)           /* ADD CONFTXT SUPPORT TO TSO */  .
++VER(Z038) FMID(ETV0108) PRE(UZ28155,UZ28257,UZ33846)
 /*
   PROBLEM DESCRIPTION:
     TSO/VTAM 3270 DATA STREAMS CANNOT BE TRACED BY GTF.
       WHEN ATTEMPTING TO DIAGNOSE PROBLEMS WITH TSO APPLICATIONS
       IT IS A USEFUL TECHNIQUE TO TRACE THE VTAM DATA TRAFFIC
       TO AND FROM THE TSO TERMINAL.  HOWEVER, TSO/VTAM SPECIFIES
       PROC=CONFTXT IN THE VTAM NIB WHICH INSTRUCTS VTAM TO TREAT
       TERMINAL TRAFFIC AS CONFIDENTIAL TEXT WHICH SHOULD NOT BE
       REPORTED BY A TRACE.  IBM HAS ADDED THE CONFTXT PARMLIB
       PARAMETER TO LATER VERSIONS OF VTAM SO THAT AN INSTALLATION
       CAN CONTROL THIS SETTING, BUT THIS FEATURE IS NOT SUPPORTED
       BY THE FREELY AVAILABLE VERSION OF TSO/VTAM.

       THIS USERMOD ADDS SUPPORT TO CORRECTLY PROCESS THE CONFTXT
       PARAMETER IN THE PARMLIB FILE OF THE TSO STARTED TASK,
       WHICH IS USUALLY A TSOKEY__ MEMBER OF SYS1.PARMLIB.
       FURTHER, TSO APPLICATION NIB INITIALISATION WILL ALTER THE
       NIB CONTENTS ACCORDING TO THE PARAMETER SETTING.  THE
       TCAST CONTROL BLOCK DSECT MACRO IS UPDATED TO REFLECT WHERE
       THIS SETTING IS STORED.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.
     DOC:
       CONFTXT=YES OR CONFTXT=NO CAN NOW BE SPECIFIED IN THE
       TSOKEY__ MEMBER OF SYS1.PARMLIB.  CONFTXT=YES IS THE DEFAULT.
       CONFTXT=YES WILL PREVENT THE TRACING OF TERMINAL DATA STREAMS.
       CONFTXT=NO WILL ALLOW THE TRACING OF TERMINAL DATA STREAMS.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 7.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKTCAS54
       IKTXINIT
     MACROS:
       IKTTCAST
 */.
++MOD(IKTCAS54) DISTLIB(AOST3).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSALLDA,
//             SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//*
//STEP2   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '*** IKTCAS54 - PARAMETER PROCESSOR SCANNER'
*
*  MODIFIED BY GREG PRICE 30TH NOVEMBER 2002 FOR USERMOD ZP60007
*           TO SUPPORT THE CONFTXT PARMLIB SETTING
*
IKTCAS54 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKTCAS54  79.255'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @08,4095(,@12)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@08                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @10,@01                                             0001
         USING @DATD,@10                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @10,8(,@13)                                         0001
         LR    @13,@10                                             0001
         EJECT
*                                                                  0119
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS PROGRAM IS ORGANIZED AS FOLLOWS:                         */
*/*                                                                  */
*/*        A - HOUSEKEEPING                                          */
*/*                                                                  */
*/*        B - MAINLINE, WHICH CONSISTS OF THE FOLLOWING:            */
*/*            1)  IF DATA IS IN A CIB, MOVE IT INTO A WORK BUFFER   */
*/*                AND RELEASE THE CIB WITH THE QEDIT MACRO          */
*/*            2)  VALIDITY CHECKING OF INPUT OPTIONS.  IF ANY       */
*/*                INCONSISTENCIES ARE FOUND, TERMINATE WITH A RETURN*/
*/*                CODE OF 4.                                        */
*/*            3)  SCAN PARAMETERS, FROM EITHER A DATA OR WORK       */
*/*                BUFFER.                                           */
*/*            4)  IF PARAMETERS FROM A PARMLIB ARE DESIRED, READ IN */
*/*                THE DESIRED MEMBER AND PROCESS ITS PARAMETERS.    */
*/*            5)  IF NECESSARY, OVERLAY MEMBER PARAMETERS WITH      */
*/*                BUFFER PARAMETERS.                                */
*/*            6)  IF REQUESTED, UPDATE TCAS TABLE                   */
*/*            7)  IF REQUESTED, WRITE OUT PARAMETERS                */
*/*                                                                  */
*/*        C - CLEANUP AND RETURN                                    */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0119
*   SCANERR='0'B;                   /* INITIALIZE SW                 */
*   GOSW1='1'B;                     /* INITIALIZE SW                 */
         OI    GOSW1,B'00100000'                                   0120
         NI    SCANERR,B'01111111'                                 0120
*   PRNTPTR=ADDR(PRNTDAT5);         /* 1ST CHAR IN PRINT LINE        */
         LA    PRNTPTR,PRNTDAT5                                    0121
*   PRNTEND=PRNTPTR+67;             /* LAST CHAR IN PRINT LINE       */
         LA    @15,67                                              0122
         ALR   @15,PRNTPTR                                         0122
         ST    @15,PRNTEND                                         0122
*   SYNADSW1='N';                   /* INITIALIZE                    */
         MVI   SYNADSW1,C'N'                                       0123
*   SYNADSW2='N';                   /* ERROR                         */
         MVI   SYNADSW2,C'N'                                       0124
*   DCBABSW1='N';                   /* HANDLING                      */
         MVI   DCBABSW1,C'N'                                       0125
*   DCBABSW2='N';                   /* SWITCHES                      */
         MVI   DCBABSW2,C'N'                                       0126
*   CALL CHKOPTNS;                  /* CHECK INPUT OPTIONS, ETC      */
         BAL   @14,CHKOPTNS                                        0127
*   IF MLPMINV='1'B THEN            /* ERRORS                        */
         TM    MLPMINV(MLPMPTR),B'01000000'                        0128
         BNO   @RF00128                                            0128
*     RTNCODE=4;                    /* YES - NON-ZERO RTN CODE       */
         MVC   RTNCODE(2),@CH00063                                 0129
*   ELSE                                                           0130
*     DO;                           /* NO - CONTINUE ON WITH         */
         B     @RC00128                                            0130
@RF00128 DS    0H                                                  0131
*       RTNCODE=0;                  /* ZERO RETURN CODE              */
         SLR   @02,@02                                             0131
         STH   @02,RTNCODE                                         0131
*       CALL SCANPARM;              /* SCAN BUFFER PARAMETERS        */
         BAL   @14,SCANPARM                                        0132
*       IF MLPMINV='0'B THEN        /* ALL THE PARMS OK              */
         TM    MLPMINV(MLPMPTR),B'01000000'                        0133
         BNZ   @RF00133                                            0133
*         DO;                       /* YES - CONTINUE ON             */
*           CALL READMBR;           /* READ AND PROCESS PARMLIB      */
         BAL   @14,READMBR                                         0135
*           CALL OVERLAY;           /* MERGE PARMS                   */
         BAL   @14,OVERLAY                                         0136
*           CALL TCASUPDT;          /* UPDATE TCAS TABLE PARMS       */
         BAL   @14,TCASUPDT                                        0137
*           CALL WRITEOUT;          /* PRINT TCAS TABLE PARMS        */
         BAL   @14,WRITEOUT                                        0138
*         END;                                                     0139
*       ELSE                        /* NO - ERROR FOUND              */
*         IF PRINTSW='1'B THEN      /* DOING A PRINTOUT              */
         B     @RC00133                                            0140
@RF00133 TM    PRINTSW,B'00001000'                                 0140
         BNO   @RF00140                                            0140
*           DO;                     /* YES                           */
*             GEN(CLOSE PRINTOUT)   /* CLOSE PRINTOUT                */
*             REFS(R0,R1,R14,R15,PRINTOUT);                        0142
         CLOSE PRINTOUT
*           END;                                                   0143
*     END;                                                         0144
@RF00140 DS    0H                                                  0144
@RC00133 DS    0H                                                  0145
*   RESPECIFY                                                      0145
*    (R15) RESTRICTED;                                             0145
@RC00128 DS    0H                                                  0146
*   R15=RTNCODE;                    /* INSERT RETURN CODE            */
         LH    R15,RTNCODE                                         0146
*   RESPECIFY                                                      0147
*    (R15) UNRESTRICTED;                                           0147
*   RETURN;                         /* FINISHED                      */
@EL00001 L     @13,4(,@13)                                         0148
@EF00001 L     @00,@SIZDATD                                        0148
         LR    @01,@10                                             0148
         FREEMAIN R,LV=(0),A=(1)
@ER00001 L     @14,12(,@13)                                        0148
         LM    @00,@12,20(@13)                                     0148
         BR    @14                                                 0148
         EJECT
*CHKOPTNS:                                                         0149
*   PROC OPTIONS(SAVE(14));                                        0149
CHKOPTNS ST    @14,@SA00002                                        0149
*                                                                  0150
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE DOES THREE THINGS:                            */
*/*                                                                  */
*/*    -   IF PARAMETERS ARE IN A CIB BUFFER, MOVE THEM INTO A WORK  */
*/*        BUFFER AND FREE THE CIB BUFFER                            */
*/*    -   MAKE SURE THE INPUT OPTIONS ARE CONSISTENT.               */
*/*    -   IF A PRINTOUT WANTED, OPEN THE PRINTOUT DCB               */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0150
*   CIBUFFER='';                    /* CLEAR WORK BUFFER             */
         MVI   CIBUFFER,C' '                                       0150
         MVC   CIBUFFER+1(47),CIBUFFER                             0150
*   IF MLPMCIB='0'B MLPMSCA=0 THEN                                 0151
         TM    MLPMCIB(MLPMPTR),B'00000001'                        0151
         BZ    @RT00151                                            0151
         L     @15,MLPMSCA(,MLPMPTR)                               0151
         LTR   @15,@15                                             0151
         BZ    @RT00151                                            0151
*     ;                             /* SKIP IF NO CIB BUFFER         */
*   ELSE                            /* A CIB BUFFER                  */
*     DO;                           /* YES                           */
*       RESPECIFY                                                  0154
*        (CIBNAME)                  /* SET UP NEW BASE FOR CIB       */
*             BASED(MLPMSCA);                                      0154
*       IF CIBDATLN>0 THEN          /* IF DATA, MOVE INTO            */
         L     @15,MLPMSCA(,MLPMPTR)                               0155
         LH    @14,CIBDATLN(,@15)                                  0155
         LTR   @14,@14                                             0155
         BNP   @RF00155                                            0155
*         MVC(CIBUFFER(1:CIBDATLN),CIBDATA);/* WORK BUFFER           */
         L     @01,MLPMSCA(,MLPMPTR)                               0156
         LH    @14,CIBDATLN(,@01)                                  0156
         BCTR  @14,0                                               0156
         EX    @14,@SM01645                                        0156
*       RESPECIFY                                                  0157
*        (CIBNAME);                 /* REVERT TO OLD BASE            */
@RF00155 DS    0H                                                  0158
*       RESPECIFY                                                  0158
*        (R2,                                                      0158
*         R3) RESTRICTED;                                          0158
*       R2=ADDR(CHCIBP);            /* ADDR OF CIB PTR               */
         L     R2,CSCBPTR(,TWAPTR)                                 0159
         LA    R2,CHCIBP(,R2)                                      0159
*       R3=MLPMSCA;                 /* ADDR OF CIB TO BE FREED       */
         L     R3,MLPMSCA(,MLPMPTR)                                0160
*       GEN(QEDIT ORIGIN=(R2),BLOCK=(R3))/* FREE CIB                 */
*       REFS(R0,R1,R2,R3,R14,R15);                                 0161
         QEDIT ORIGIN=(R2),BLOCK=(R3)
*       RESPECIFY                                                  0162
*        (R2,                                                      0162
*         R3) UNRESTRICTED;                                        0162
*     END;                                                         0163
*   IF MLPMFL1='00'X                /* CHECK                         */
*       (MLPMBUF='1'B&MLPMCIB='1'B) /* OBVIOUS                       */
*     THEN                                                         0164
@RT00151 CLI   MLPMFL1(MLPMPTR),X'00'                              0164
         BE    @RT00164                                            0164
         TM    MLPMBUF(MLPMPTR),B'00000011'                        0164
         BNO   @RF00164                                            0164
@RT00164 DS    0H                                                  0165
*     DO;                           /* INPUT                         */
*       MLPMINV='1'B;               /* ERRORS                        */
         OI    MLPMINV(MLPMPTR),B'01000000'                        0166
*       RETURN;                     /* .                             */
@EL00002 DS    0H                                                  0167
@EF00002 DS    0H                                                  0167
@ER00002 L     @14,@SA00002                                        0167
         BR    @14                                                 0167
*     END;                          /* .                             */
*   IF MLPMWPM='1'B THEN            /* PRINTOUT WANTED               */
@RF00164 TM    MLPMWPM(MLPMPTR),B'00010000'                        0169
         BNO   @RF00169                                            0169
*     DO;                           /* YES                           */
*       GEN(OPEN  (PRINTOUT,OUTPUT))                               0171
*       REFS(R0,R1,R14,R15,PRINTOUT);                              0171
         OPEN  (PRINTOUT,OUTPUT)
*       DCBPTR=ADDR(PRINTOUT);      /* SETUP PTR                     */
         LA    DCBPTR,PRINTOUT                                     0172
*       IF DCBABSW2='Y' DCBOFOPN='0'B THEN/* GOOD OPEN               */
         CLI   DCBABSW2,C'Y'                                       0173
         BE    @RT00173                                            0173
         TM    DCBOFOPN+40(DCBPTR),B'00010000'                     0173
         BNZ   @RF00173                                            0173
@RT00173 DS    0H                                                  0174
*         DO;                       /* NO                            */
*           RESPECIFY                                              0175
*            (R1) RESTRICTED;                                      0175
*           R1=17;                  /* MESSAGE NUMBER                */
         LA    R1,17                                               0176
*           CALL MSGBLK;            /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0177
         BALR  @14,@15                                             0177
*           R1=ADDR(IKT017I);       /* ADDR OF LIST FORM             */
         LA    @00,IKT017I(,R1)                                    0178
         LR    R1,@00                                              0178
*           GEN(WTO   MF=(E,(1)))   /* ISSUE WTO                     */
*           REFS(R0,R1,R14,R15);                                   0179
         WTO   MF=(E,(1))
*           RESPECIFY                                              0180
*            (R1) UNRESTRICTED;                                    0180
*           PRINTSW='0'B;           /* TURN OFF PRINT SW             */
         NI    PRINTSW,B'11110111'                                 0181
*         END;                                                     0182
*       ELSE                                                       0183
*         PRINTSW='1'B;             /* TURN ON PRINT SW              */
         B     @RC00173                                            0183
@RF00173 OI    PRINTSW,B'00001000'                                 0183
*     END;                                                         0184
*   ELSE                                                           0185
*     PRINTSW='0'B;                 /* TURN OFF PRINT SW             */
         B     @RC00169                                            0185
@RF00169 NI    PRINTSW,B'11110111'                                 0185
*   END CHKOPTNS;                                                  0186
         B     @EL00002                                            0186
         EJECT
*SCANPARM:                                                         0187
*   PROC OPTIONS(SAVE(14));                                        0187
SCANPARM ST    @14,@SA00003                                        0187
*                                                                  0188
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE PROCESSES THE PARAMETERS ENTERED BY THE       */
*/*    OPERATOR ON THE VARIOUS COMMANDS.  THE FOLLOWING THINGS ARE   */
*/*    DONE:                                                         */
*/*                                                                  */
*/*    -   INITIALIZE THE BUFFER SAVE AREA                           */
*/*    -   SET UP POINTER TO PROPER INPUT BUFFER                     */
*/*    -   IF BUFFER EMPTY, EXIT                                     */
*/*    -   EXCEPTION CODING                                          */
*/*    -   PROCESS THE PARMS FOUND IN THE BUFFER.  IF ANY PARMS ARE  */
*/*        IN ERROR, SET THE ERROR SWITCH AND EXIT.                  */
*/*    -   IF THE OPERATOR WANTS TO USE A DIFFERENT MEMBER NAME      */
*/*        WHEN ACCESSING PARMLIB, SET UP THE NEW NAME               */
*/*    -   IF CERTAIN OPTIONS ARE SPECIFIED BY THE OPERATOR, SET     */
*/*        SWITCHES TO INDICATE WHAT THEY ARE                        */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0188
*   SAVEBUFR=SAVES1;                /* INITIALIZE SAVE AREA          */
         MVC   SAVEBUFR(24),SAVES1                                 0188
*   IF MLPMBUF='1'B THEN            /* DATA BUFFER                   */
         TM    MLPMBUF(MLPMPTR),B'00000010'                        0189
         BNO   @RF00189                                            0189
*     SCANPTR=MLPMSCA;              /* YES                           */
         L     SCANPTR,MLPMSCA(,MLPMPTR)                           0190
*   ELSE                                                           0191
*     SCANPTR=ADDR(CIBUFFER);       /* NO                            */
         B     @RC00189                                            0191
@RF00189 LA    SCANPTR,CIBUFFER                                    0191
*   IF PRINTSW='1'B THEN            /* PRINTOUT WANTED               */
@RC00189 TM    PRINTSW,B'00001000'                                 0192
         BNO   @RF00192                                            0192
*     DO;                           /* YES                           */
*       PRNTCC='1';                 /* SKIP TO TOP OF PAGE           */
         MVI   PRNTCC,C'1'                                         0194
*       PRNTDATA='CONSOLE VALUES ENTERED:';/* HEADER LINE            */
         MVI   PRNTDATA+23,C' '                                    0195
         MVC   PRNTDATA+24(108),PRNTDATA+23                        0195
         MVC   PRNTDATA(23),@CC01526                               0195
*       CALL PRINTIT;               /* PRINT THE HEADER              */
         BAL   @14,PRINTIT                                         0196
*       PRNTLINE='';                /* SKIP TO NEXT LINE             */
         MVI   PRNTLINE,C' '                                       0197
         MVC   PRNTLINE+1(132),PRNTLINE                            0197
*       IF WORKCHAR=' ' THEN        /* DATA                          */
         CLI   WORKCHAR(SCANPTR),C' '                              0198
         BNE   @RF00198                                            0198
*         PRNTDAT5='*NONE ENTERED*';/* FROM                          */
         MVI   PRNTDAT5+14,C' '                                    0199
         MVC   PRNTDAT5+15(113),PRNTDAT5+14                        0199
         MVC   PRNTDAT5(14),@CC01529                               0199
*       ELSE                        /* THE                           */
*         PRNTDAT5=DATABUF;         /* BUFFER                        */
         B     @RC00198                                            0200
@RF00198 MVI   PRNTDAT5+48,C' '                                    0200
         MVC   PRNTDAT5+49(79),PRNTDAT5+48                         0200
         MVC   PRNTDAT5(48),DATABUF(SCANPTR)                       0200
*       CALL PRINTIT;               /* PRINT THE BUFFER              */
@RC00198 BAL   @14,PRINTIT                                         0201
*     END;                                                         0202
*   IF WORKCHAR=' ' THEN            /* FIRST CHARACTER BLANK         */
@RF00192 CLI   WORKCHAR(SCANPTR),C' '                              0203
         BE    @RT00203                                            0203
*     RETURN;                       /* YES - EXIT                    */
*                                                                  0205
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SECTION OF CODE HANDLES INPUT DATA THAT IS NOT IN        */
*/*    KEYWORD NAME, EQUAL SIGN, KEYWORD PARAMETER, SEQUENCE.        */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0205
*   IF DATA2='U ' DATA7='IGNORE ' THEN/* IGNORE RESPONSE             */
         CLC   DATA2(2,SCANPTR),@CC01531                           0205
         BE    @RT00205                                            0205
         CLC   DATA7(7,SCANPTR),@CC01532                           0205
         BNE   @RF00205                                            0205
@RT00205 DS    0H                                                  0206
*     DO;                           /* YES                           */
*       MLPMIGN='1'B;               /* SET SWITCH                    */
         OI    MLPMIGN(MLPMPTR),B'00000001'                        0207
*       RETURN;                     /* EXIT                          */
@EL00003 DS    0H                                                  0208
@EF00003 DS    0H                                                  0208
@ER00003 L     @14,@SA00003                                        0208
         BR    @14                                                 0208
*     END;                                                         0209
*   IF DATA6='FSTOP ' THEN          /* 'FSTOP' BY ITSELF             */
@RF00205 CLC   DATA6(6,SCANPTR),@CC01533                           0210
         BNE   @RF00210                                            0210
*     DATA11='USER=FSTOP ';         /* YES - ADD KEYWORD NAME        */
         MVC   DATA11(11,SCANPTR),@CC01534                         0211
*   ELSE                                                           0212
*     IF DATA4='SIC ' THEN          /* 'SIC' BY ITSELF               */
         B     @RC00210                                            0212
@RF00210 CLC   DATA4(4,SCANPTR),@CC01536                           0212
         BNE   @RF00212                                            0212
*       DATA9='USER=SIC ';          /* YES - ADD KEYWORD NAME        */
         MVC   DATA9(9,SCANPTR),@CC01537                           0213
*   DO WHILE(WORKCHAR^=' ');        /* PROCESS PARMS                 */
@RF00212 DS    0H                                                  0214
@RC00210 B     @DE00214                                            0214
@DL00214 DS    0H                                                  0215
*     TABLEPTR=ADDR(VERIBUFR);      /* INITIALIZE                    */
         LA    TABLEPTR,VERIBUFR                                   0215
*     SAVEPTR=ADDR(SAVEBUFR);       /* POINTERS                      */
         LA    SAVEPTR,SAVEBUFR                                    0216
*     CALL FNDNMTCH;                /* GET A KEYWORD NAME            */
         BAL   @14,FNDNMTCH                                        0217
*     IF SCANERR='1'B THEN          /* WAS AN ERROR FOUND            */
         TM    SCANERR,B'10000000'                                 0218
         BNO   @RF00218                                            0218
*       DO;                         /* YES                           */
*         MLPMINV='1'B;             /* SHOW IT                       */
         OI    MLPMINV(MLPMPTR),B'01000000'                        0220
*         RETURN;                   /* AND EXIT                      */
         B     @EL00003                                            0221
*       END;                                                       0222
*     CALL PRCSPARM;                /* VERIFY KEYWORD PARAMETER      */
@RF00218 BAL   @14,PRCSPARM                                        0223
*     IF SAVECHAR=HEXFF THEN        /* WAS THE PARM INVALID          */
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0224
         BNE   @RF00224                                            0224
*       DO;                         /* YES                           */
*         MLPMINV='1'B;             /* SHOW IT                       */
         OI    MLPMINV(MLPMPTR),B'01000000'                        0226
*         RETURN;                   /* AND EXIT                      */
         B     @EL00003                                            0227
*       END;                                                       0228
*     IF WORKCHAR^=' ' THEN         /* IF NOT THE END                */
@RF00224 CLI   WORKCHAR(SCANPTR),C' '                              0229
         BE    @RF00229                                            0229
*       SCANPTR=SCANPTR+1;          /* PT PAST THE COMMA             */
         AL    SCANPTR,@CF00057                                    0230
*   END;                                                           0231
@RF00229 DS    0H                                                  0231
@DE00214 CLI   WORKCHAR(SCANPTR),C' '                              0231
         BNE   @DL00214                                            0231
*   CALL GETMBRNM;                  /* SETUP PARMLIB MBR NAME        */
         BAL   @14,GETMBRNM                                        0232
*   IF PRINTSW='1'B THEN            /* PRINTOUT WANTED               */
         TM    PRINTSW,B'00001000'                                 0233
         BNO   @RF00233                                            0233
*     DO;                           /* YES - PRNT ACCPTD VALUES      */
*       PRNTCC='0';                 /* SKIP AN EXTRA LINE            */
         MVI   PRNTCC,C'0'                                         0235
*       PRNTDATA='CONSOLE VALUES ACCEPTED:';/* SUB-HEADER LINE       */
         MVI   PRNTDATA+24,C' '                                    0236
         MVC   PRNTDATA+25(107),PRNTDATA+24                        0236
         MVC   PRNTDATA(24),@CC01543                               0236
*       CALL PRINTIT;               /* PRINT SUB-HEADER              */
         BAL   @14,PRINTIT                                         0237
*       PRNTLINE='';                /* CLEAR PRINT LINE              */
         MVI   PRNTLINE,C' '                                       0238
         MVC   PRNTLINE+1(132),PRNTLINE                            0238
*       TABLEPTR=ADDR(VERIBUFR);    /* SETUP POINTER                 */
         LA    TABLEPTR,VERIBUFR                                   0239
*       L=(LENGTH(SAVEBUFR))/8;     /* NUMBER OF PARMS               */
         MVC   L(2),@CH00118                                       0240
*       DO M=1 TO L;                /* PRINT BUFFER PARMS            */
         LA    @04,1                                               0241
         B     @DE00241                                            0241
@DL00241 DS    0H                                                  0242
*         SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* SAVE AREA PTR      */
         LA    SAVEPTR,SAVEBUFR                                    0242
         LH    @04,TBLDISP(,TABLEPTR)                              0242
         BCTR  @04,0                                               0242
         SLA   @04,3                                               0242
         ALR   SAVEPTR,@04                                         0242
*         IF SAVECHAR^=HEXBC&SAVECHAR^=HEXFF THEN/* GOOD ENTRY       */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0243
         BE    @RF00243                                            0243
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0243
         BE    @RF00243                                            0243
*           DO;                     /* YES                           */
*             WORKPARM=SAVAREA;     /* PRINT GOOD                    */
         MVC   WORKPARM(8),SAVAREA(SAVEPTR)                        0245
*             CALL EDITIT;          /* ENTRY                         */
         BAL   @14,EDITIT                                          0246
*           END;                                                   0247
*         ELSE                                                     0248
*           TABLEPTR=TABLEPTR+20;   /* NO - PT TO NEXT ENTRY         */
         B     @RC00243                                            0248
@RF00243 AL    TABLEPTR,@CF00144                                   0248
*       END;                                                       0249
@RC00243 LA    @04,1                                               0249
         AH    @04,M                                               0249
@DE00241 STH   @04,M                                               0249
         CH    @04,L                                               0249
         BNH   @DL00241                                            0249
*       EDFIELD(1)=HEXFF;           /* CAUSE LAST LINE               */
         MVI   EDFIELD,X'FF'                                       0250
*       CALL NSRTNPRT;              /* TO BE PRINTED                 */
         BAL   @14,NSRTNPRT                                        0251
*     END;                                                         0252
*   KEYWDNM='USER    ';             /* KEYWORD NAME WANTED           */
@RF00233 MVC   KEYWDNM(8),@CC00340                                 0253
*   TABLEPTR=ADDR(VERIBUFR);        /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0254
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00255                                            0255
@DL00255 DS    0H                                                  0256
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0256
*   END;                            /* ENTRY                         */
@DE00255 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0257
         BNE   @DL00255                                            0257
*   SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* ADDR OF WORK AREA        */
         LA    SAVEPTR,SAVEBUFR                                    0258
         LH    @04,TBLDISP(,TABLEPTR)                              0258
         BCTR  @04,0                                               0258
         SLA   @04,3                                               0258
         ALR   SAVEPTR,@04                                         0258
*   IF SAVECHAR^=HEXBC THEN         /* USER= ENTERED                 */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0259
         BE    @RF00259                                            0259
*     IF SAVAREA='FSTOP   ' THEN    /* YES -                         */
         CLC   SAVAREA(8,SAVEPTR),@CC00302                         0260
         BNE   @RF00260                                            0260
*       MLPMFS='1'B;                /* SET                           */
         OI    MLPMFS(MLPMPTR),B'00000100'                         0261
*     ELSE                          /* PROPER                        */
*       MLPMSIC='1'B;               /* SWITCH                        */
         B     @RC00260                                            0262
@RF00260 OI    MLPMSIC(MLPMPTR),B'00000010'                        0262
*   KEYWDNM='USERMAX ';             /* KEYWORD NAME WANTED           */
@RC00260 DS    0H                                                  0263
@RF00259 MVC   KEYWDNM(8),@CC00350                                 0263
*   TABLEPTR=ADDR(VERIBUFR);        /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0264
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00265                                            0265
@DL00265 DS    0H                                                  0266
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0266
*   END;                            /* ENTRY                         */
@DE00265 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0267
         BNE   @DL00265                                            0267
*   SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* ADDR OF WORK AREA        */
         LA    SAVEPTR,SAVEBUFR                                    0268
         LH    @04,TBLDISP(,TABLEPTR)                              0268
         BCTR  @04,0                                               0268
         SLA   @04,3                                               0268
         ALR   SAVEPTR,@04                                         0268
*   IF SAVECHAR^=HEXBC THEN         /* USERMAX= ENTERED              */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0269
         BE    @RF00269                                            0269
*     IF SAVAREAF=0 THEN            /* YES -                         */
         L     @15,SAVAREAF(,SAVEPTR)                              0270
         LTR   @15,@15                                             0270
         BNZ   @RF00270                                            0270
*       MLPMUZ='1'B;                /* SET                           */
         OI    MLPMUZ(MLPMPTR),B'00010000'                         0271
*     ELSE                          /* PROPER                        */
*       MLPMUNZ='1'B;               /* SWITCH                        */
         B     @RC00270                                            0272
@RF00270 OI    MLPMUNZ(MLPMPTR),B'00001000'                        0272
*   END SCANPARM;                                                  0273
         B     @EL00003                                            0273
         EJECT
*GETMBRNM:                                                         0274
*   PROC OPTIONS(SAVE(14));                                        0274
GETMBRNM ST    @14,12(,@13)                                        0274
*                                                                  0275
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE DETERMINES WHAT MEMBER NAME THE OPERATOR      */
*/*    WANTS USED IN ACCESSING PARMLIB.                              */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0275
*   KEYWDNM='MEMBER  ';             /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00329                                 0275
*   TABLEPTR=ADDR(VERIBUFR);        /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0276
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00277                                            0277
@DL00277 DS    0H                                                  0278
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0278
*   END;                            /* ENTRY                         */
@DE00277 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0279
         BNE   @DL00277                                            0279
*   SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* ADDR OF WORK AREA        */
         LA    SAVEPTR,SAVEBUFR                                    0280
         LH    @04,TBLDISP(,TABLEPTR)                              0280
         BCTR  @04,0                                               0280
         SLA   @04,3                                               0280
         ALR   SAVEPTR,@04                                         0280
*   IF SAVECHAR=HEXBC THEN                                         0281
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0281
         BE    @RT00281                                            0281
*     ;                             /* MEMBER= ENTERED NO - USE NAME
*                                      IN PROC                       */
*   ELSE                                                           0283
*     DO;                           /* YES - GET MEMBER NAME         */
*       WORKPARM=SAVAREA;           /* GET NAME ENTERED BY THE     0284
*                                      OPERATOR IF ITS 2 DIGITS, ADD
*                                      THEM TO 'MEMDEFLT', ELSE USE
*                                      THE NAME AS IS                */
         MVC   WORKPARM(8),SAVAREA(SAVEPTR)                        0284
*       IF(WORKPRM(1)>='0'&WORKPRM(1)<='9')&(WORKPRM(2)>='0'&WORKPRM(2)
*           <='9') THEN                                            0285
         CLI   WORKPRM,C'0'                                        0285
         BL    @RF00285                                            0285
         CLI   WORKPRM,C'9'                                        0285
         BH    @RF00285                                            0285
         CLI   WORKPRM+1,C'0'                                      0285
         BL    @RF00285                                            0285
         CLI   WORKPRM+1,C'9'                                      0285
         BH    @RF00285                                            0285
*         DO;                                                      0286
*           TSO=MEMDEFLT;                                          0287
         MVC   TSO(6),@CC00181                                     0287
*           TSO1=WORKPRM(1);                                       0288
         MVC   TSO1(1),WORKPRM                                     0288
*           TSO2=WORKPRM(2);                                       0289
         MVC   TSO2(1),WORKPRM+1                                   0289
*           SAVAREA=TSOKEYNN;                                      0290
         MVC   SAVAREA(8,SAVEPTR),TSOKEYNN                         0290
*         END;                                                     0291
*     END;                                                         0292
*   END GETMBRNM;                                                  0293
@EL00004 DS    0H                                                  0293
@EF00004 DS    0H                                                  0293
@ER00004 L     @14,12(,@13)                                        0293
         BR    @14                                                 0293
         EJECT
*READMBR:                                                          0294
*   PROC OPTIONS(SAVE(14));                                        0294
READMBR  ST    @14,@SA00005                                        0294
*                                                                  0295
*/*  *****************************************************************/
*/*                                                                  */
*/*    THE PURPOSE OF THIS SUBROUTINE IS TO READ AND PROCESS THE     */
*/*    MEMBER OF PARMLIB WHICH THE OPERATOR WANTS TO USE IN          */
*/*    BRINGING UP TCAS.  THE FOLLOWING THINGS ARE DONE:             */
*/*                                                                  */
*/*    -   INITIALIZE THE MEMBER SAVE AREA                           */
*/*    -   EXIT IF PARMLIB NOT WANTED                                */
*/*    -   OPEN THE PARMLIB WITH THE PROPER MEMBER NAME.  IF AN      */
*/*        ERROR IS ENCOUNTERED, ISSUE AN ERROR MESSAGE AND EXIT     */
*/*    -   PROCESS THE PARMS FOUND IN THE MEMBER.  NOTE THAT THEY    */
*/*        MAY BE CONTINUED FROM ONE CARD TO THE NEXT.  THE ONLY     */
*/*        REQUIREMENT FOR CONTINUING A CARD IS TO HAVE ', ' AFTER   */
*/*        THE LAST PARAMETER ON THE CARD.  THE NEXT CARD CAN START  */
*/*        ANYPLACE.                                                 */
*/*    -   CLOSE PARMLIB                                             */
*/*    -   MAKE ANY CONSISTENCY CHECKS THAT ARE NEEDED               */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0295
*   SAVEMBR=SAVES2;                 /* INITIALIZE WORK AREA          */
         MVC   SAVEMBR(208),SAVES2                                 0295
*   IF MLPMRLIB='0'B THEN           /* SHOULD WE READ PARMLIB        */
         TM    MLPMRLIB(MLPMPTR),B'00000100'                       0296
         BZ    @RT00296                                            0296
*     RETURN;                       /* NO - EXIT                     */
*   RESPECIFY                                                      0298
*    (R15) RESTRICTED;                                             0298
*   GEN(RDJFCB PARMLIB)             /* READ THE JFCB INTO CORE       */
*   REFS(R0,R1,R14,R15,PARMLIB);                                   0299
         RDJFCB PARMLIB
*   IF R15=4 THEN                   /* GOOD READ                     */
         C     R15,@CF00063                                        0300
         BNE   @RF00300                                            0300
*     DO;                           /* NO                            */
*       RESPECIFY                                                  0302
*        (R1) RESTRICTED;                                          0302
*       R1=13;                      /* MESSAGE NUMBER                */
         LA    R1,13                                               0303
*       CALL MSGBLK;                /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0304
         BALR  @14,@15                                             0304
*       R1=ADDR(IKT013I);           /* ADDR OF LIST FORM             */
         LA    @14,IKT013I(,R1)                                    0305
         LR    R1,@14                                              0305
*       GEN(WTO   MF=(E,(1)))       /* ISSUE WTO                     */
*       REFS(R0,R1,R14,R15);                                       0306
         WTO   MF=(E,(1))
*       RESPECIFY                                                  0307
*        (R1) UNRESTRICTED;                                        0307
*       RETURN;                                                    0308
@EL00005 DS    0H                                                  0308
@EF00005 DS    0H                                                  0308
@ER00005 L     @14,@SA00005                                        0308
         BR    @14                                                 0308
*     END;                                                         0309
*   RESPECIFY                                                      0310
*    (R15) UNRESTRICTED;                                           0310
@RF00300 DS    0H                                                  0311
*   KEYWDNM='MEMBER  ';             /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00329                                 0311
*   TABLEPTR=ADDR(VERIBUFR);        /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0312
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00313                                            0313
@DL00313 DS    0H                                                  0314
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0314
*   END;                            /* ENTRY                         */
@DE00313 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0315
         BNE   @DL00313                                            0315
*   SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* ADDR OF MBR SAVE AREA    */
         LA    SAVEPTR,SAVEBUFR                                    0316
         LH    @15,TBLDISP(,TABLEPTR)                              0316
         BCTR  @15,0                                               0316
         SLA   @15,3                                               0316
         ALR   SAVEPTR,@15                                         0316
*   JFCBPTR=ADDR(JFCBAREA);         /* ADDR OF JFCB                  */
         LA    JFCBPTR,JFCBAREA                                    0317
*   IF SAVECHAR^=HEXBC THEN         /* MEMBER= ENTERED               */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0318
         BE    @RF00318                                            0318
*     JFCBELNM=SAVAREA;             /* YES - MOVE IN NEW NAME        */
         MVC   JFCBELNM(8,JFCBPTR),SAVAREA(SAVEPTR)                0319
*   ELSE                            /* NO                            */
*     IF JFCBELNM=BLANK THEN        /* DEFAULT MBR NAME NEEDED       */
         B     @RC00318                                            0320
@RF00318 CLC   JFCBELNM(8,JFCBPTR),@CC00097                        0320
         BNE   @RF00320                                            0320
*       JFCBELNM=MBRDEFLT;          /* YES - SUPPLY IT               */
         MVC   JFCBELNM(8,JFCBPTR),@CC00179                        0321
*   GEN(OPEN  (PARMLIB),TYPE=J)     /* OPEN PARMLIB                  */
*   REFS(R0,R1,R14,R15,PARMLIB);                                   0322
@RF00320 DS    0H                                                  0322
@RC00318 DS    0H                                                  0322
         OPEN  (PARMLIB),TYPE=J
*   DCBPTR=ADDR(PARMLIB);           /* PTR TO DCB                    */
         LA    DCBPTR,PARMLIB                                      0323
*   IF DCBABSW1='Y' DCBOFOPN='0'B THEN/* GOOD OPEN                   */
         CLI   DCBABSW1,C'Y'                                       0324
         BE    @RT00324                                            0324
         TM    DCBOFOPN+40(DCBPTR),B'00010000'                     0324
         BNZ   @RF00324                                            0324
@RT00324 DS    0H                                                  0325
*     DO;                           /* NO                            */
*       RESPECIFY                                                  0326
*        (R1) RESTRICTED;                                          0326
*       R1=13;                      /* MESSAGE NUMBER                */
         LA    R1,13                                               0327
*       CALL MSGBLK;                /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0328
         BALR  @14,@15                                             0328
*       R1=ADDR(IKT013I);           /* ADDR OF LIST FORM             */
         LA    @06,IKT013I(,R1)                                    0329
         LR    R1,@06                                              0329
*       GEN(WTO   MF=(E,(1)))       /* ISSUE WTO                     */
*       REFS(R0,R1,R14,R15);                                       0330
         WTO   MF=(E,(1))
*       RESPECIFY                                                  0331
*        (R1) UNRESTRICTED;                                        0331
*       RETURN;                                                    0332
         B     @EL00005                                            0332
*     END;                                                         0333
*   IF PRINTSW='1'B THEN            /* PRINTOUT WANTED               */
@RF00324 TM    PRINTSW,B'00001000'                                 0334
         BNO   @RF00334                                            0334
*     DO;                           /* YES                           */
*       PRNTCC='-';                 /* SKIP                          */
         MVI   PRNTCC,C'-'                                         0336
*       PRNTDATA='';                /* TWO                           */
         MVI   PRNTDATA,C' '                                       0337
         MVC   PRNTDATA+1(131),PRNTDATA                            0337
*       CALL PRINTIT;               /* LINES                         */
         BAL   @14,PRINTIT                                         0338
*       PRNTDATA='PARMLIB VALUES ENTERED:';/* SUB-HEADER LINE        */
         MVI   PRNTDATA+23,C' '                                    0339
         MVC   PRNTDATA+24(108),PRNTDATA+23                        0339
         MVC   PRNTDATA(23),@CC01556                               0339
*       CALL PRINTIT;               /* PRINT THE SUB-HEADER          */
         BAL   @14,PRINTIT                                         0340
*       PRNTLINE='';                /* CLEAR THE LINE                */
         MVI   PRNTLINE,C' '                                       0341
         MVC   PRNTLINE+1(132),PRNTLINE                            0341
*     END;                                                         0342
*   DUMPCNT=0;                      /* INITIALIZE RCFBDUMP KEY- WORD
*                                      COUNTER               @ZM20856*/
@RF00334 SLR   @02,@02                                             0343
         STH   @02,DUMPCNT                                         0343
*   DO WHILE(GOSW1='1'B);           /* PROCESS ALL RECDS IN MBR      */
         B     @DE00344                                            0344
@DL00344 DS    0H                                                  0345
*     READSW1='1'B;                 /* SET READ SW                   */
         OI    READSW1,B'01000000'                                 0345
*     DO WHILE(READSW1='1'B);       /* FIND A NON-BLANK RECD         */
         B     @DE00346                                            0346
@DL00346 DS    0H                                                  0347
*       GEN(GET   PARMLIB,MBRRECD)  /* READ A MBR RECD               */
*       REFS(R0,R1,R14,R15,PARMLIB,MBRRECD);                       0347
         GET   PARMLIB,MBRRECD
*       IF SYNADSW1='Y' THEN        /* I/O ERROR DETECTED            */
         CLI   SYNADSW1,C'Y'                                       0348
         BE    @RT00348                                            0348
*         GOTO SYNAD;               /* YES - IGNORE REST OF MBR      */
*       IF PRINTSW='1'B THEN        /* PRINTOUT WANTED               */
         TM    PRINTSW,B'00001000'                                 0350
         BNO   @RF00350                                            0350
*         DO;                       /* YES                           */
*           PRNTDAT5=MBRRECD;       /* PARMLIB RECORD                */
         MVI   PRNTDAT5+80,C' '                                    0352
         MVC   PRNTDAT5+81(47),PRNTDAT5+80                         0352
         MVC   PRNTDAT5(80),MBRRECD                                0352
*           CALL PRINTIT;           /* PRINT RECORD                  */
         BAL   @14,PRINTIT                                         0353
*         END;                                                     0354
*       MBR7380=BLANK;              /* BLANK OUT SEQUENCE NBR        */
@RF00350 MVC   MBR7380(8),@CC00097                                 0355
*       MBR80=HEXFF;                /* SCAN ENDING CHARACTER         */
         MVI   MBR80,X'FF'                                         0356
*       SCANPTR=ADDR(MBRRECD);      /* START OF RECORD               */
         LA    SCANPTR,MBRRECD                                     0357
*       DO WHILE(WORKCHAR=' ');     /* SKIP BLANKS                   */
         B     @DE00358                                            0358
@DL00358 DS    0H                                                  0359
*         SCANPTR=SCANPTR+1;                                       0359
         AL    SCANPTR,@CF00057                                    0359
*       END;                                                       0360
@DE00358 CLI   WORKCHAR(SCANPTR),C' '                              0360
         BE    @DL00358                                            0360
*       IF WORKCHAR^=HEXFF THEN     /* GOOD RECORD                   */
         CLI   WORKCHAR(SCANPTR),X'FF'                             0361
         BE    @RF00361                                            0361
*         READSW1='0'B;             /* YES                           */
         NI    READSW1,B'10111111'                                 0362
*     END;                                                         0363
@RF00361 DS    0H                                                  0363
@DE00346 TM    READSW1,B'01000000'                                 0363
         BO    @DL00346                                            0363
*     GOSW2='1'B;                   /* SET GO SW                     */
         OI    GOSW2,B'00010000'                                   0364
*     DO WHILE(GOSW2='1'B);         /* PROCESS RECORD                */
         B     @DE00365                                            0365
@DL00365 DS    0H                                                  0366
*       TABLEPTR=ADDR(VERIMBR);     /* SETUP                         */
         LA    TABLEPTR,VERIMBR                                    0366
*       SAVEPTR=ADDR(SAVEMBR);      /* POINTERS                      */
         LA    SAVEPTR,SAVEMBR                                     0367
*       CALL FNDNMTCH;              /* GET A KEYWORD NAME            */
         BAL   @14,FNDNMTCH                                        0368
*       IF SCANERR='1'B THEN        /* ERROR                         */
         TM    SCANERR,B'10000000'                                 0369
         BNO   @RF00369                                            0369
*         CALL MBRERROR;            /* YES                           */
         BAL   @14,MBRERROR                                        0370
*       ELSE                                                       0371
*         DO;                       /* NO                            */
         B     @RC00369                                            0371
@RF00369 DS    0H                                                  0372
*           CALL PRCSPARM;          /* VERIFY KEYWORD PARAMETER SEE
*                                      IF MORE PARMS                 */
         BAL   @14,PRCSPARM                                        0372
*           IF WORKCHAR=' ' DATA2=', ' THEN                        0373
         CLI   WORKCHAR(SCANPTR),C' '                              0373
         BE    @RT00373                                            0373
         CLC   DATA2(2,SCANPTR),@CC01560                           0373
         BNE   @RF00373                                            0373
@RT00373 DS    0H                                                  0374
*             GOSW2='0'B;                                          0374
         NI    GOSW2,B'11101111'                                   0374
*           ELSE                                                   0375
*             SCANPTR=SCANPTR+1;                                   0375
         B     @RC00373                                            0375
@RF00373 AL    SCANPTR,@CF00057                                    0375
*         END;                                                     0376
@RC00373 DS    0H                                                  0377
*     END;                                                         0377
@RC00369 DS    0H                                                  0377
@DE00365 TM    GOSW2,B'00010000'                                   0377
         BO    @DL00365                                            0377
*     IF WORKCHAR=' ' THEN          /* END OF ALL PARMS              */
         CLI   WORKCHAR(SCANPTR),C' '                              0378
         BNE   @RF00378                                            0378
*       GOSW1='0'B;                 /* YES                           */
         NI    GOSW1,B'11011111'                                   0379
*   END;                                                           0380
@RF00378 DS    0H                                                  0380
@DE00344 TM    GOSW1,B'00100000'                                   0380
         BO    @DL00344                                            0380
*   GOTO EOF;                       /* SKIP SYNAD RTN                */
         B     EOF                                                 0381
*SYNAD:                                                            0382
*   ;                                                              0382
SYNAD    DS    0H                                                  0383
*   RESPECIFY                                                      0383
*    (R1) RESTRICTED;                                              0383
*   R1=14;                          /* MESSAGE NUMBER                */
         LA    R1,14                                               0384
*   CALL MSGBLK;                    /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0385
         BALR  @14,@15                                             0385
*   R1=ADDR(IKT014I);               /* ADDR OF LIST FORM             */
         LA    @00,IKT014I(,R1)                                    0386
         LR    R1,@00                                              0386
*   GEN(WTO   MF=(E,(1)))           /* ISSUE WTO                     */
*   REFS(R0,R1,R14,R15);                                           0387
         WTO   MF=(E,(1))
*   RESPECIFY                                                      0388
*    (R1) UNRESTRICTED;                                            0388
*EOF:                                                              0389
*   ;                               /* ENTRY FOR EODAD               */
EOF      DS    0H                                                  0390
*   GEN(CLOSE PARMLIB)              /* CLOSE PARMLIB                 */
*   REFS(R0,R1,R14,R15,PARMLIB);                                   0390
         CLOSE PARMLIB
*   KEYWDNM='HIBFREXT';             /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00394                                 0391
*   TABLEPTR=ADDR(VERIMBR);         /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIMBR                                    0392
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00393                                            0393
@DL00393 DS    0H                                                  0394
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0394
*   END;                            /* ENTRY                         */
@DE00393 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0395
         BNE   @DL00393                                            0395
*   SAVEPTR=ADDR(SAVEMBR)+8*(TBLDISP-1);/* ADDR OF WORK AREA         */
         LA    SAVEPTR,SAVEMBR                                     0396
         LH    @04,TBLDISP(,TABLEPTR)                              0396
         BCTR  @04,0                                               0396
         SLA   @04,3                                               0396
         ALR   SAVEPTR,@04                                         0396
*   IF SAVECHAR^=HEXBC&SAVECHAR^=HEXFF THEN/* VALID ENTRY            */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0397
         BE    @RF00397                                            0397
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0397
         BE    @RF00397                                            0397
*     DO;                           /* YES                           */
*       WORKPARM=SAVAREA;           /* SAVE VALUE                    */
         MVC   WORKPARM(8),SAVAREA(SAVEPTR)                        0399
*       TEMPPTR=SAVEPTR;            /* SAVE PTR                      */
         LR    TEMPPTR,SAVEPTR                                     0400
*       KEYWDNM='LOBFREXT';         /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00403                                 0401
*       TABLEPTR=ADDR(VERIMBR);     /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIMBR                                    0402
*       DO WHILE(TBLNAME^=KEYWDNM); /* FIND                          */
         B     @DE00403                                            0403
@DL00403 DS    0H                                                  0404
*         TABLEPTR=TABLEPTR+20;     /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0404
*       END;                        /* ENTRY                         */
@DE00403 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0405
         BNE   @DL00403                                            0405
*       SAVEPTR=ADDR(SAVEMBR)+8*(TBLDISP-1);/* ADDR OF WORK AREA     */
         LA    SAVEPTR,SAVEMBR                                     0406
         LH    @04,TBLDISP(,TABLEPTR)                              0406
         BCTR  @04,0                                               0406
         SLA   @04,3                                               0406
         ALR   SAVEPTR,@04                                         0406
*       IF SAVECHAR^=HEXBC&SAVECHAR^=HEXFF THEN/* VALID ENTRY        */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0407
         BE    @RF00407                                            0407
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0407
         BE    @RF00407                                            0407
*         DO;                       /* YES                           */
*           IF WRKPRMF2<=SAVAREAF THEN/* HIBFREXT <= LOBFREXT        */
         L     @15,WRKPRMF2                                        0409
         C     @15,SAVAREAF(,SAVEPTR)                              0409
         BH    @RF00409                                            0409
*             DO;                   /* YES                           */
*               SAVECHAR=HEXFF;     /* FLAG LOBFREXT                 */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0411
*               TEMPPTR->SAVECHAR=HEXFF;/* FLAG HIBFREXT             */
         MVI   SAVECHAR(TEMPPTR),X'FF'                             0412
*             END;                                                 0413
*         END;                                                     0414
@RF00409 DS    0H                                                  0415
*     END;                                                         0415
@RF00407 DS    0H                                                  0416
*   IF PRINTSW='1'B THEN            /* PRINTOUT WANTED               */
@RF00397 TM    PRINTSW,B'00001000'                                 0416
         BNO   @RF00416                                            0416
*     DO;                           /* YES                           */
*       PRNTCC='0';                 /* SKIP AN EXTRA LINE            */
         MVI   PRNTCC,C'0'                                         0418
*       PRNTDATA='PARMLIB VALUES ACCEPTED:';/* SUB-HEADER            */
         MVI   PRNTDATA+24,C' '                                    0419
         MVC   PRNTDATA+25(107),PRNTDATA+24                        0419
         MVC   PRNTDATA(24),@CC01564                               0419
*       CALL PRINTIT;               /* PRINT SUB-HEADER              */
         BAL   @14,PRINTIT                                         0420
*       PRNTLINE='';                /* CLEAR THE PRINT LINE          */
         MVI   PRNTLINE,C' '                                       0421
         MVC   PRNTLINE+1(132),PRNTLINE                            0421
*       TABLEPTR=ADDR(VERIMBR);     /* SETUP POINTER                 */
         LA    TABLEPTR,VERIMBR                                    0422
*       L=(LENGTH(SAVEMBR))/8;      /* NUMBER OF PARMS               */
         MVC   L(2),@CH00189                                       0423
*       DO M=1 TO L;                /* PRINT PARMLIB PARMS           */
         LA    @04,1                                               0424
         B     @DE00424                                            0424
@DL00424 DS    0H                                                  0425
*         SAVEPTR=ADDR(SAVEMBR)+8*(TBLDISP-1);/* SAVE AREA ADDR      */
         LA    SAVEPTR,SAVEMBR                                     0425
         LH    @04,TBLDISP(,TABLEPTR)                              0425
         BCTR  @04,0                                               0425
         SLA   @04,3                                               0425
         ALR   SAVEPTR,@04                                         0425
*         IF SAVECHAR^=HEXBC&SAVECHAR^=HEXFF THEN/* GOOD ENTRY       */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0426
         BE    @RF00426                                            0426
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0426
         BE    @RF00426                                            0426
*           DO;                     /* YES                           */
*             IF TBLNAME=RCFBDUMP THEN                             0428
         CLC   TBLNAME(8,TABLEPTR),RCFBDUMP                        0428
         BNE   @RF00428                                            0428
*               DO;                 /* PROCESS DUMP          @ZM20856*/
*                 DUMPPTR=SAVEPTR+5;/* SKIP TO CODES         @ZM21059*/
         LA    @04,5                                               0430
         ALR   @04,SAVEPTR                                         0430
         ST    @04,DUMPPTR                                         0430
*                 CALL EDITIT;      /* PRINT KEYWORD         @ZM20856*/
         BAL   @14,EDITIT                                          0431
*               END;                /* END RCFBDUMP PROCESSING     0432
*                                                            @ZM20856*/
*             ELSE                                                 0433
*               DO;                 /* OTHER KEYWORDS        @ZM20856*/
         B     @RC00428                                            0433
@RF00428 DS    0H                                                  0434
*                 WORKPARM=SAVAREA; /* PRINT GOOD                    */
         MVC   WORKPARM(8),SAVAREA(SAVEPTR)                        0434
*                 CALL EDITIT;      /* ENTRY                         */
         BAL   @14,EDITIT                                          0435
*               END;                /*                       @ZM20856*/
*           END;                                                   0437
*         ELSE                                                     0438
*           TABLEPTR=TABLEPTR+20;   /* NO - PT TO NEXT ENTRY         */
         B     @RC00426                                            0438
@RF00426 AL    TABLEPTR,@CF00144                                   0438
*       END;                                                       0439
@RC00426 LA    @04,1                                               0439
         AH    @04,M                                               0439
@DE00424 STH   @04,M                                               0439
         CH    @04,L                                               0439
         BNH   @DL00424                                            0439
*       EDFIELD(1)=HEXFF;           /* CAUSE LAST LINE               */
         MVI   EDFIELD,X'FF'                                       0440
*       CALL NSRTNPRT;              /* TO BE PRINTED                 */
         BAL   @14,NSRTNPRT                                        0441
*     END;                                                         0442
*   END READMBR;                                                   0443
         B     @EL00005                                            0443
         EJECT
*MBRERROR:                                                         0444
*   PROC OPTIONS(SAVE(14));                                        0444
MBRERROR ST    @14,12(,@13)                                        0444
*                                                                  0445
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE HANDLES THE ERRORS FOUND BY 'FNDNMTCH' WHEN   */
*/*    WORKING WITH A PARMLIB MEMBER.                                */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0445
*   SCANERR='0'B;                   /* TURN OFF ERROR SW             */
         NI    SCANERR,B'01111111'                                 0445
*   DO WHILE(GOSW2='1'B);           /* GO THRU ONCE OR TWICE         */
         B     @DE00446                                            0446
@DL00446 DS    0H                                                  0447
*     IF WORKCHAR=' ' DATA2=', ' THEN/* END OF A RECORD              */
         CLI   WORKCHAR(SCANPTR),C' '                              0447
         BE    @RT00447                                            0447
         CLC   DATA2(2,SCANPTR),@CC01560                           0447
         BNE   @RF00447                                            0447
@RT00447 DS    0H                                                  0448
*       DO;                         /* YES                           */
*         GOSW2='0'B;               /* END RECORD LOOP               */
         NI    GOSW2,B'11101111'                                   0449
*         RETURN;                   /* EXIT                          */
@EL00006 DS    0H                                                  0450
@EF00006 DS    0H                                                  0450
@ER00006 L     @14,12(,@13)                                        0450
         BR    @14                                                 0450
*       END;                                                       0451
*     IF WORKCHAR=',' THEN          /* END OF A PARM                 */
@RF00447 CLI   WORKCHAR(SCANPTR),C','                              0452
         BNE   @RF00452                                            0452
*       DO;                         /* YES                           */
*         SCANPTR=SCANPTR+1;        /* POINT PAST ','                */
         AL    SCANPTR,@CF00057                                    0454
*         RETURN;                   /* EXIT                          */
         B     @EL00006                                            0455
*       END;                                                       0456
*     DO WHILE(WORKCHAR^=' '&WORKCHAR^=',');                       0457
@RF00452 B     @DE00457                                            0457
@DL00457 DS    0H                                                  0458
*       SCANPTR=SCANPTR+1;          /* SKIP TO NEXT PARM             */
         AL    SCANPTR,@CF00057                                    0458
*     END;                                                         0459
@DE00457 CLI   WORKCHAR(SCANPTR),C' '                              0459
         BE    @DC00457                                            0459
         CLI   WORKCHAR(SCANPTR),C','                              0459
         BNE   @DL00457                                            0459
@DC00457 DS    0H                                                  0460
*   END;                                                           0460
@DE00446 TM    GOSW2,B'00010000'                                   0460
         BO    @DL00446                                            0460
*   END MBRERROR;                                                  0461
         B     @EL00006                                            0461
         EJECT
*OVERLAY:                                                          0462
*   PROC OPTIONS(SAVE(14));                                        0462
OVERLAY  ST    @14,12(,@13)                                        0462
*                                                                  0463
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE BUILDS A TABLE OF PARM VALUES THAT MAY BE     */
*/*    USED TO UPDATE THE TCAS TABLE.  NOTE THAT THE TABLE 'DEFAULTS'*/
*/*    IS DEPENDENT ON THE ORDER OF THE KEYWORD NAMES AS SET UP IN   */
*/*    'VERIMBR'.                                                    */
*/*                                                                  */
*/*    THE PROCESS OF UPDATTING THE TCAS TABLE WITH NEW VALUES IS    */
*/*    DONE IN THE FOLLOWING MANNER:                                 */
*/*                                                                  */
*/*    -   INITIALIZE THE BUFFER SAVE AREA (DONE IN 'SCANPARM').     */
*/*    -   MOVE VALIDATED PARAMETERS INTO THEIR PROPER SPOT IN THE   */
*/*        BUFFER SAVE AREA (DONE IN 'SCANPARM').                    */
*/*    -   INITIALIZE THE MEMBER SAVE AREA (DONE IN 'READMBR').      */
*/*    -   MOVE VALIDATED PARAMETERS INTO THEIR PROPER SPOT IN THE   */
*/*        MEMBER SAVE AREA (DONE IN 'READMBR').                     */
*/*    -   INITIALIZE THE MERGE AREA.  IF NO PARMLIB WAS READ, THE   */
*/*        AREA IS NULL'ED OUT, OTHERWISE, HARD-CODED DEFAULT VALUES */
*/*        ARE MOVED INTO THE MERGE AREA.  NOTE THAT THE MERGE AREA  */
*/*        HAS THE SAME ORGANIZATION AS THE MEMBER SAVE AREA.        */
*/*    -   SCAN THE MEMBER SAVE AREA.  IF A VALIDATED PARAMETER IS   */
*/*        ENCOUNTERED, MOVE IT TO ITS PROPER SPOT IN THE MERGE AREA.*/
*/*    -   SCAN THE BUFFER SAVE AREA.  IF A VALIDATED PARAMETER IS   */
*/*        ENCOUNTERED, MOVE IT TO ITS PROPER SPOT IN THE MERGE AREA.*/
*/*        NOTE THAT THE ABOVE 3 STATEMENTS IMPLY THAT OPERATOR      */
*/*        ENTERED PARAMETERS OVERRIDE PARMLIB MEMBER PARAMETERS,    */
*/*        WHICH IN TURN OVERRIDE HARD-CODED DEFAULTS.               */
*/*    -   SCAN THE MERGE AREA.  IF A VALIDATED PARAMETER IS         */
*/*        ENCOUNTERED, MOVE IT TO ITS PROPER SPOT IN THE TCAS       */
*/*        TABLE (DONE IN 'TCASUPDT').                               */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0463
*   IF MLPMRLIB='0'B THEN           /* PARMLIB MEMBER READ           */
         TM    MLPMRLIB(MLPMPTR),B'00000100'                       0463
         BNZ   @RF00463                                            0463
*     MERGAREA=SAVES2;              /* NO                            */
         MVC   MERGAREA(208),SAVES2                                0464
*   ELSE                                                           0465
*     DO;                           /* YES                           */
         B     @RC00463                                            0465
@RF00463 DS    0H                                                  0466
*       MERGAREA=DEFAULTS;          /* SETUP DEFAULT VALUES          */
         MVI   MERGAREA+80,C' '                                    0466
         MVC   MERGAREA+81(127),MERGAREA+80                        0466
         MVC   MERGAREA(88),DEFAULTS                       ZP60007 0466
*       SAVEPTR=ADDR(SAVEMBR);      /* INITIALIZE PTR                */
         LA    SAVEPTR,SAVEMBR                                     0467
*       J=(LENGTH(SAVEMBR))/8;      /* NUMBER OF PARMS               */
         LA    J,26                                                0468
*       DO I=1 TO J;                /* MOVE IN MBR PARMS             */
         LA    I,1                                                 0469
         B     @DE00469                                            0469
@DL00469 DS    0H                                                  0470
*         IF SAVECHAR^=HEXFF&SAVECHAR^=HEXBC THEN                  0470
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0470
         BE    @RF00470                                            0470
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0470
         BE    @RF00470                                            0470
*           MERGE(I)=SAVAREA;                                      0471
         LR    @05,I                                               0471
         SLA   @05,3                                               0471
         LA    @03,MERGE-8(@05)                                    0471
         MVC   0(8,@03),SAVAREA(SAVEPTR)                           0471
*         SAVEPTR=SAVEPTR+8;                                       0472
@RF00470 AL    SAVEPTR,@CF00034                                    0472
*       END;                                                       0473
         AL    I,@CF00057                                          0473
@DE00469 CR    I,J                                                 0473
         BNH   @DL00469                                            0473
*     END;                                                         0474
*   IF MLPMUZ='1'B MLPMUNZ='1'B THEN/* OPERATOR ENTER USERMAX=       */
@RC00463 TM    MLPMUZ(MLPMPTR),B'00011000'                         0475
         BZ    @RF00475                                            0475
*     DO;                           /* YES                           */
*       KEYWDNM='USERMAX ';         /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00350                                 0477
*       TABLEPTR=ADDR(VERIBUFR);    /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0478
*       DO WHILE(TBLNAME^=KEYWDNM); /* FIND                          */
         B     @DE00479                                            0479
@DL00479 DS    0H                                                  0480
*         TABLEPTR=TABLEPTR+20;     /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0480
*       END;                        /* ENTRY                         */
@DE00479 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0481
         BNE   @DL00479                                            0481
*       SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* USERMAX SAVE AREA    */
         LA    SAVEPTR,SAVEBUFR                                    0482
         LH    @06,TBLDISP(,TABLEPTR)                              0482
         BCTR  @06,0                                               0482
         SLA   @06,3                                               0482
         ALR   SAVEPTR,@06                                         0482
*       TABLEPTR=ADDR(VERIMBR);     /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIMBR                                    0483
*       DO WHILE(TBLNAME^=KEYWDNM); /* FIND                          */
         B     @DE00484                                            0484
@DL00484 DS    0H                                                  0485
*         TABLEPTR=TABLEPTR+20;     /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0485
*       END;                        /* ENTRY                         */
@DE00484 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0486
         BNE   @DL00484                                            0486
*       MERGE(TBLDISP)=SAVAREA;     /* MOVE IN OPERATOR'S VALUE      */
         LH    @06,TBLDISP(,TABLEPTR)                              0487
         SLA   @06,3                                               0487
         LA    @04,MERGE-8(@06)                                    0487
         MVC   0(8,@04),SAVAREA(SAVEPTR)                           0487
*     END;                                                         0488
*   END OVERLAY;                                                   0489
@EL00007 DS    0H                                                  0489
@EF00007 DS    0H                                                  0489
@ER00007 L     @14,12(,@13)                                        0489
         BR    @14                                                 0489
         EJECT
*TCASUPDT:                                                         0490
*   PROC OPTIONS(SAVE(14));                                        0490
TCASUPDT ST    @14,12(,@13)                                        0490
*                                                                  0491
*/*  *****************************************************************/
*/*                                                                  */
*/*    THE PURPOSE OF THIS SUBROUTINE IS TO UPDATE THE TCAS TABLE    */
*/*    WITH ANY VALUES THAT HAVE CHANGED.  NOTE THAT THE CODING IS   */
*/*    DEPENDENT ON THE ORDER OF THE KEYWORD NAMES AS SET UP IN      */
*/*    'VERIMBR'.                                                    */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0491
*   IF MLPMUPTB='0'B THEN           /* UPDATE WANTED                 */
         TM    MLPMUPTB(MLPMPTR),B'00001000'                       0491
         BZ    @RT00491                                            0491
*     RETURN;                       /* NO - EXIT                     */
*   SAVEPTR=ADDR(MERGAREA);         /* SET UP PTR                    */
         LA    SAVEPTR,MERGAREA                                    0493
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'USERMAX'              */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0494
         BE    @RF00494                                            0494
*     DO;                           /* YES                           */
*LOOP1:                             /* COMPARE AND SWAP LOOP         */
*       WRKPRMF1=TCASUSER;          /* CURRENT VALUE                 */
LOOP1    L     @06,TCASTPTR(,TWAPTR)                               0496
         L     @03,TCASUSER(,@06)                                  0496
         ST    @03,WRKPRMF1                                        0496
*       WRKPRMF2=WRKPRMF1;          /* VALUE TO WORK WITH            */
         ST    @03,WRKPRMF2                                        0497
*       WRKPRMH=SAVAREAH;           /* NEW 'USERMAX' VALUE           */
         LH    @15,SAVAREAH(,SAVEPTR)                              0498
         STH   @15,WRKPRMH                                         0498
*       CS(WRKPRMF1,WRKPRMF2,TCASUSER);/* 'USERMAX' STILL OK         */
         L     @15,WRKPRMF2                                        0499
         CS    @03,@15,TCASUSER(@06)                               0499
         BZ    @BC00499                                            0499
         ST    @03,WRKPRMF1                                        0499
@BC00499 DS    0H                                                  0500
*       BC(7,LOOP1);                /* NO - TRY AGAIN                */
         BC    7,LOOP1                                             0500
*     END;                                                         0501
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00494 AL    SAVEPTR,@CF00034                                    0502
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'ACBPW'                */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0503
         BE    @RF00503                                            0503
*     TCASACBP=SAVAREA;             /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0504
         MVC   TCASACBP(8,@06),SAVAREA(SAVEPTR)                    0504
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00503 AL    SAVEPTR,@CF00034                                    0505
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'RECONLIM'             */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0506
         BE    @RF00506                                            0506
*     TCASRCON=SAVAREAH;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0507
         LH    @03,SAVAREAH(,SAVEPTR)                              0507
         STH   @03,TCASRCON(,@06)                                  0507
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00506 AL    SAVEPTR,@CF00034                                    0508
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'BUFRSIZE'             */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0509
         BE    @RF00509                                            0509
*     TCASCLSZ=SAVAREAH;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0510
         LH    @03,SAVAREAH(,SAVEPTR)                              0510
         STH   @03,TCASCLSZ(,@06)                                  0510
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00509 AL    SAVEPTR,@CF00034                                    0511
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'HIBFREXT'             */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0512
         BE    @RF00512                                            0512
*     TCASHBUF=SAVAREAF;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0513
         L     @03,SAVAREAF(,SAVEPTR)                              0513
         ST    @03,TCASHBUF(,@06)                                  0513
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00512 AL    SAVEPTR,@CF00034                                    0514
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'LOBFREXT'             */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0515
         BE    @RF00515                                            0515
*     TCASLBUF=SAVAREAF;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0516
         L     @03,SAVAREAF(,SAVEPTR)                              0516
         ST    @03,TCASLBUF(,@06)                                  0516
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00515 AL    SAVEPTR,@CF00034                                    0517
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'SCRSIZE'              */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0518
         BE    @RF00518                                            0518
*     TCASCRSZ=SAVAREAH;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0519
         LH    @03,SAVAREAH(,SAVEPTR)                              0519
         STH   @03,TCASCRSZ(,@06)                                  0519
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00518 AL    SAVEPTR,@CF00034                                    0520
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'CHNLEN'               */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0521
         BE    @RF00521                                            0521
*     TCASCHNL=SAVAREAC;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0522
         IC    @03,SAVAREAC(,SAVEPTR)                              0522
         STC   @03,TCASCHNL(,@06)                                  0522
*   SAVEPTR=SAVEPTR+8;              /* PT TO NEXT ENTY       @G58AK3A*/
@RF00521 AL    SAVEPTR,@CF00034                                    0523
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'MODE'         @G58AK3A*/
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0524
         BE    @RF00524                                            0524
*     IF SAVAREA=BREAK THEN         /*                       @G58AK3A*/
         CLC   SAVAREA(8,SAVEPTR),BREAK                            0525
         BNE   @RF00525                                            0525
*       TCASBKMD='1'B;              /* YES                   @G58AK3A*/
         L     @06,TCASTPTR(,TWAPTR)                               0526
         OI    TCASBKMD(@06),B'10000000'                           0526
*     ELSE                                                         0527
*       ;                           /*                       @G58AK3A*/
@RF00525 DS    0H                                                  0528
*   ELSE                                                           0528
*     ;                             /*                       @G58AK3A*/
@RF00524 DS    0H                                                  0529
*   SAVEPTR=SAVEPTR+8;              /* PT TO NEXT ENTY       @G58AK3A*/
         AL    SAVEPTR,@CF00034                                    0529
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'MODESW'       @G58AK3A*/
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0530
         BE    @RF00530                                            0530
*     IF SAVAREA=YES THEN           /*                       @G58AK3A*/
         CLC   SAVAREA(8,SAVEPTR),YES                              0531
         BNE   @RF00531                                            0531
*       TCASMDSW='1'B;              /* YES                   @G58AK3A*/
         L     @06,TCASTPTR(,TWAPTR)                               0532
         OI    TCASMDSW(@06),B'01000000'                           0532
*     ELSE                                                         0533
*       ;                           /*                       @G58AK3A*/
@RF00531 DS    0H                                                  0534
*   ELSE                                                           0534
*     ;                             /*                       @G58AK3A*/
@RF00530 DS    0H                                                  0535
*   SAVEPTR=SAVEPTR+8;              /* PT TO NEXT ENTY       @ZM20856*/
         AL    SAVEPTR,@CF00034                                    0535
*                                      CHANGE 'CONFTXT'         ZP60007
         CLC   SAVAREA(8,SAVEPTR),NO  WAS NO SPECIFIED?         ZP60007
         BE    CFTXOKAY               YES, LEAVE FLAG OFF       ZP60007
         L     @06,TCASTPTR(,TWAPTR)  POINT TO THE TCAS TABLE   ZP60007
         OI    TCASCONF(@06),X'01'    YES, SET FLAG ON          ZP60007
CFTXOKAY AL    SAVEPTR,@CF00034       POINT TO NEXT ENTRY       ZP60007
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE RCFBDUMP       @ZM20856*/
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0536
         BE    @RF00536                                            0536
*     DO;                           /* UPDATE RC TABLE       @ZM20856*/
*       DUMPPTR=(TCASDUMP+3);       /* INCREMENT PAST COUNT AND    0538
*                                      RESERVED FIELDS       @ZM20856*/
         L     @06,TCASTPTR(,TWAPTR)                               0538
         LA    @03,3                                               0538
         AL    @03,TCASDUMP(,@06)                                  0538
         ST    @03,DUMPPTR                                         0538
*       RFY                                                        0539
*         DMPCD BASED(DUMPPTR);     /* RESPECIFY PAST COUNT AND    0539
*                                      RESERVED              @ZM20856*/
*       DO I=1 TO DUMPCNT;          /*                       @ZM20856*/
         LA    I,1                                                 0540
         B     @DE00540                                            0540
@DL00540 DS    0H                                                  0541
*         DMPCD(1:3)=SAVAREAI;      /* UPDATE CODE TABL      @ZM20856*/
         L     @03,DUMPPTR                                         0541
         MVC   DMPCD(3,@03),SAVAREAI(SAVEPTR)                      0541
*         DUMPPTR=DUMPPTR+3;        /* NEXT TABLE ENTY       @ZM20856*/
         AL    @03,@CF00118                                        0542
         ST    @03,DUMPPTR                                         0542
*         SAVEPTR=SAVEPTR+8;        /* NEXT SAVE ENTRY       @ZM20856*/
         AL    SAVEPTR,@CF00034                                    0543
*       END;                        /* END PROCESS           @ZM20856*/
         AL    I,@CF00057                                          0544
@DE00540 CH    I,DUMPCNT                                           0544
         BNH   @DL00540                                            0544
*       RFY                                                        0545
*         DMPCD BASED(TCASDUMP);    /* RFY TO TOP TABL       @ZM20856*/
*       DMPRCCT=DUMPCNT;            /* TOTAL COUNT OF KEYWORD      0546
*                                      'RCFBDUMP' SPECFIED.NOTE:   0546
*                                      DUMPCNT WAS UPDATED IN PROC 0546
*                                      SPLITPRM              @ZM20856*/
         L     @06,TCASTPTR(,TWAPTR)                               0546
         L     @06,TCASDUMP(,@06)                                  0546
         LH    @15,DUMPCNT                                         0546
         STC   @15,DMPRCCT(,@06)                                   0546
*     END;                          /* END 'RCFBDUMP'        @ZM20856
*                                      UPDATING              @ZM20856*/
*   ELSE                                                           0548
*     ;                                                            0548
@RF00536 DS    0H                                                  0549
*   END TCASUPDT;                                                  0549
@EL00008 DS    0H                                                  0549
@EF00008 DS    0H                                                  0549
@ER00008 L     @14,12(,@13)                                        0549
         BR    @14                                                 0549
         EJECT
*WRITEOUT:                                                         0550
*   PROC OPTIONS(SAVE(14));                                        0550
WRITEOUT ST    @14,@SA00009                                        0550
*                                                                  0551
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE PRINTS OUT ALL OF THE PARMLIB VALUES FROM THE */
*/*    TCAS TABLE.  NOTE THAT THE CODING IS DEPENDENT ON THE ORDER   */
*/*    OF THE KEYWORD NAMES AS SET UP IN 'VERIMBR':                  */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0551
*   IF PRINTSW='0'B THEN            /* PRINTOUT WANTED               */
         TM    PRINTSW,B'00001000'                                 0551
         BZ    @RT00551                                            0551
*     RETURN;                       /* NO - EXIT                     */
*   PRNTCC='-';                     /* SKIP                          */
         MVI   PRNTCC,C'-'                                         0553
*   PRNTDATA='';                    /* TWO                           */
         MVI   PRNTDATA,C' '                                       0554
         MVC   PRNTDATA+1(131),PRNTDATA                            0554
*   CALL PRINTIT;                   /* LINES                         */
         BAL   @14,PRINTIT                                         0555
*   PRNTDATA='CURRENT TCAS PARAMETERS:';/* SUB-HEADER LINE           */
         MVI   PRNTDATA+24,C' '                                    0556
         MVC   PRNTDATA+25(107),PRNTDATA+24                        0556
         MVC   PRNTDATA(24),@CC01585                               0556
*   CALL PRINTIT;                   /* PRINT THE SUB-HEADER          */
         BAL   @14,PRINTIT                                         0557
*   PRNTLINE='';                    /* CLEAR THE LINE                */
         MVI   PRNTLINE,C' '                                       0558
         MVC   PRNTLINE+1(132),PRNTLINE                            0558
*   TABLEPTR=ADDR(VERIMBR);         /* SETUP POINTER                 */
         LA    TABLEPTR,VERIMBR                                    0559
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0560
*   WRKPRMH=TCASUMAX;               /* USERMAX=                      */
         L     @04,TCASTPTR(,TWAPTR)                               0561
         LH    @04,TCASUMAX(,@04)                                  0561
         STH   @04,WRKPRMH                                         0561
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0562
*   WORKPARM=TCASACBP;              /* PRINTOUT                      */
         L     @04,TCASTPTR(,TWAPTR)                               0563
         MVC   WORKPARM(8),TCASACBP(@04)                           0563
*   CALL EDITIT;                    /* ACBPW= VALUE                  */
         BAL   @14,EDITIT                                          0564
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0565
*   WRKPRMH=TCASRCON;               /* RECONLIM=                     */
         L     @04,TCASTPTR(,TWAPTR)                               0566
         LH    @04,TCASRCON(,@04)                                  0566
         STH   @04,WRKPRMH                                         0566
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0567
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0568
*   WRKPRMH=TCASCLSZ;               /* BUFRSIZE=                     */
         L     @04,TCASTPTR(,TWAPTR)                               0569
         LH    @04,TCASCLSZ(,@04)                                  0569
         STH   @04,WRKPRMH                                         0569
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0570
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0571
*   WRKPRMF2=TCASHBUF;              /* HIBFREXT=                     */
         L     @04,TCASTPTR(,TWAPTR)                               0572
         L     @04,TCASHBUF(,@04)                                  0572
         ST    @04,WRKPRMF2                                        0572
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0573
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0574
*   WRKPRMF2=TCASLBUF;              /* LOBFREXT=                     */
         L     @04,TCASTPTR(,TWAPTR)                               0575
         L     @04,TCASLBUF(,@04)                                  0575
         ST    @04,WRKPRMF2                                        0575
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0576
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0577
*   WRKPRMH=TCASCRSZ;               /* SCRSIZE=                      */
         L     @04,TCASTPTR(,TWAPTR)                               0578
         LH    @04,TCASCRSZ(,@04)                                  0578
         STH   @04,WRKPRMH                                         0578
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0579
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0580
*   WRKPRMC=TCASCHNL;               /* CHNLEN=                       */
         L     @04,TCASTPTR(,TWAPTR)                               0581
         IC    @02,TCASCHNL(,@04)                                  0581
         STC   @02,WRKPRMC                                         0581
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0582
*   IF TCASBKMD='1'B THEN           /* PRINTOUT              @G58AK3A*/
         L     @06,TCASTPTR(,TWAPTR)                               0583
         TM    TCASBKMD(@06),B'10000000'                           0583
         BNO   @RF00583                                            0583
*     WORKPARM=BREAK;               /* MODE=                 @G58AK3A*/
         MVC   WORKPARM(8),BREAK                                   0584
*   ELSE                            /* VALUE                 @G58AK3A*/
*     WORKPARM=NOBREAK;             /*                       @G58AK3A*/
         B     @RC00583                                            0585
@RF00583 MVC   WORKPARM(8),NOBREAK                                 0585
*   CALL EDITIT;                    /*                       @G58AK3A*/
@RC00583 BAL   @14,EDITIT                                          0586
*   IF TCASMDSW='1'B THEN           /* PRINTOUT              @G58AK3A*/
         L     @06,TCASTPTR(,TWAPTR)                               0587
         TM    TCASMDSW(@06),B'01000000'                           0587
         BNO   @RF00587                                            0587
*     WORKPARM=YES;                 /* MODESW=               @G58AK3A*/
         MVC   WORKPARM(8),YES                                     0588
*   ELSE                            /* VALUE                 @G58AK3A*/
*     WORKPARM=NO;                  /*                       @G58AK3A*/
         B     @RC00587                                            0589
@RF00587 MVC   WORKPARM(8),NO                                      0589
*   CALL EDITIT;                    /*                       @G58AK3A*/
@RC00587 BAL   @14,EDITIT                                          0590
*   IF TCASCONF='1'B THEN           /*                       ZP60007 */
         L     @06,TCASTPTR(,TWAPTR)                         ZP60007
         TM    TCASCONF(@06),B'00000001'                     ZP60007
         BNO   CONFOFF                                       ZP60007
*     WORKPARM=YES;                 /* CONFTXT=              ZP60007 */
         MVC   WORKPARM(8),YES                               ZP60007
*   ELSE                            /* VALUE                 ZP60007 */
*     WORKPARM=NO;                  /*                       ZP60007 */
         B     SHOWCONF                                      ZP60007
CONFOFF  MVC   WORKPARM(8),NO                                ZP60007
*   CALL EDITIT;                    /*                       ZP60007 */
SHOWCONF BAL   @14,EDITIT                                    ZP60007
*   DUMPPTR=(TCASDUMP+3);           /* SKIP TO CODES         @ZM20856*/
         L     @04,TCASTPTR(,TWAPTR)                               0591
         LA    @15,3                                               0591
         AL    @15,TCASDUMP(,@04)                                  0591
         ST    @15,DUMPPTR                                         0591
*   DO N=1 TO DUMPCNT;              /* EDIT PARAMETER FOR EACH VALID
*                                      'RCFBDUMP' KEYWORD SPECIFIED
*                                                            @ZM20856*/
         LA    @04,1                                               0592
         B     @DE00592                                            0592
@DL00592 DS    0H                                                  0593
*     CALL EDITIT;                  /* EDIT KEYWORDS         @ZM20856*/
         BAL   @14,EDITIT                                          0593
*     DUMPPTR=DUMPPTR+3;            /* NEXT ENTRY            @ZM20856*/
         LA    @04,3                                               0594
         AL    @04,DUMPPTR                                         0594
         ST    @04,DUMPPTR                                         0594
*   END;                            /*                       @ZM20856*/
         LA    @04,1                                               0595
         AH    @04,N                                               0595
@DE00592 STH   @04,N                                               0595
         CH    @04,DUMPCNT                                         0595
         BNH   @DL00592                                            0595
*   EDFIELD(1)=HEXFF;               /* CAUSE LAST LINE               */
         MVI   EDFIELD,X'FF'                                       0596
*   CALL NSRTNPRT;                  /* TO BE PRINTED                 */
         BAL   @14,NSRTNPRT                                        0597
*   GEN(CLOSE PRINTOUT)                                            0598
*   REFS(R0,R1,R14,R15,PRINTOUT);                                  0598
         CLOSE PRINTOUT
*   END WRITEOUT;                                                  0599
@EL00009 DS    0H                                                  0599
@EF00009 DS    0H                                                  0599
@ER00009 L     @14,@SA00009                                        0599
         BR    @14                                                 0599
         EJECT
*EDITIT:                                                           0600
*   PROC OPTIONS(SAVE(14));                                        0600
EDITIT   ST    @14,@SA00010                                        0600
*                                                                  0601
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE TAKES A KEYWORD NAME, ITS VALUE, PLACES THEM  */
*/*    INTO AN EDITTED FORMAT, AND PRINTS THEM.  UPON ENTRY,         */
*/*    'TABLEPTR' POINTS AT THE TABLE ENTRY, AND 'WORKPARM' CONTAINS */
*/*    THE PARAMETER VALUE, WITH THE EXCEPTION OF THE RCFBDUMP       */
*/*    KEYWORD, WHICH SETS UP 'WORKPARM' HERE.                       */
*/*  *****************************************************************/
*                                                                  0601
*   EDITFLD='';                     /* CLEAR WORK FIELD              */
         MVI   EDITFLD,C' '                                        0601
         MVC   EDITFLD+1(19),EDITFLD                               0601
*   SCANPTR=TABLEPTR;               /* SETUP PTR                     */
         LR    SCANPTR,TABLEPTR                                    0602
*   DO I=1 TO 8 WHILE(WORKCHAR^=' ');/* MOVE IN KEYWORD NAME         */
         LA    I,1                                                 0603
@DL00603 CLI   WORKCHAR(SCANPTR),C' '                              0603
         BE    @DC00603                                            0603
*     EDFIELD(I)=WORKCHAR;                                         0604
         LA    @04,EDFIELD-1(I)                                    0604
         MVC   0(1,@04),WORKCHAR(SCANPTR)                          0604
*     SCANPTR=SCANPTR+1;                                           0605
         AL    SCANPTR,@CF00057                                    0605
*   END;                                                           0606
         AL    I,@CF00057                                          0606
         C     I,@CF00034                                          0606
         BNH   @DL00603                                            0606
@DC00603 DS    0H                                                  0607
*   EDFIELD(I)='=';                 /* ADD '=' SIGN                  */
         LA    @04,EDFIELD-1(I)                                    0607
         MVI   0(@04),C'='                                         0607
*   I=I+1;                          /* POINT PAST '=' SIGN           */
         LA    @04,1                                               0608
         ALR   I,@04                                               0608
*   IF TBLNAME=RCFBDUMP THEN        /* 'RCFBDUMP'            @ZM20856*/
         CLC   TBLNAME(8,TABLEPTR),RCFBDUMP                        0609
         BNE   @RF00609                                            0609
*     DO;                           /* PROCESS PARM          @ZM20856*/
*       RFY                                                        0611
*         DMPCD BASED(DUMPPTR);                                    0611
*       WRKPRMF=''B;                /* ZERO WORK FIELD       @ZM20856*/
         XC    WRKPRMF(8),WRKPRMF                                  0612
*       WORKPARM(8:8)=DMPCD(1:1);   /* EXTRACT RC            @ZM20856*/
         L     @02,DUMPPTR                                         0613
         MVC   WORKPARM+7(1),DMPCD(@02)                            0613
*       TEMPAREA(8)=WORKPARM(8);    /* SAVE RC               @ZM20856*/
         MVC   TEMPAREA+7(1),WORKPARM+7                            0614
*       SLDL(TEMPAREA,4);           /* SHIFT RC TO PROPER POSITION 0615
*                                                            @ZM21059*/
         LM    @00,@01,TEMPAREA                                    0615
         SLDL  @00,4                                               0615
         STM   @00,@01,TEMPAREA                                    0615
*       WORKPARM(8:8)=WORKPARM(8:8)&'0F'X;/* ELIMINATE ZONED PORTION
*                                      OF BYTE RC            @ZM20856*/
         NI    WORKPARM+7,X'0F'                                    0616
*       TEMPAREA(7:8)=TEMPAREA(7:8)&'0F00'X;/* ELIMINATE DIGIT     0617
*                                      PORTION OF BYTE RC    @ZM21059*/
         NC    TEMPAREA+6(2),@CB01595                              0617
*       WRKPRMF=WRKPRMF TEMPAREA;   /* MERGE BYTES           @ZM20856*/
         OC    WRKPRMF(8),TEMPAREA                                 0618
*       TR(WORKPARM(7:8),TABDEC);   /* TO PRINTABLES         @ZM20856*/
         TR    WORKPARM+6(2),TABDEC                                0619
*       EDITFLD(I:(I+1))=WORKPARM(7:8);/* TO EDIT FIELD      @ZM21059*/
         LA    @01,EDITFLD-1(I)                                    0620
         MVC   0(2,@01),WORKPARM+6                                 0620
*       I=I+2;                      /* UPDATE 2 BYTES        @ZM20856*/
         LA    @15,2                                               0621
         ALR   I,@15                                               0621
*       WRKPRMF=''B;                /* ZERO WORK FIELD       @ZM20856*/
         XC    WRKPRMF(8),WRKPRMF                                  0622
*       WORKPARM(8:8)=DMPCD(2:2);   /* EXTRACT FB            @ZM20856*/
         MVC   WORKPARM+7(1),DMPCD+1(@02)                          0623
*       TEMPAREA(8)=WORKPARM(8);    /* SAVE FB               @ZM20856*/
         MVC   TEMPAREA+7(1),WORKPARM+7                            0624
*       SLDL(TEMPAREA,4);           /* SHIFT FB TO PROPER POSITION 0625
*                                                            @ZM21059*/
         LM    @00,@01,TEMPAREA                                    0625
         SLDL  @00,4                                               0625
         STM   @00,@01,TEMPAREA                                    0625
*       WORKPARM(8:8)=WORKPARM(8:8)&'0F'X;/* ELIMINATE ZONED PORTION
*                                      OF BYTE FB            @ZM20856*/
         NI    WORKPARM+7,X'0F'                                    0626
*       TEMPAREA(7:8)=TEMPAREA(7:8)&'0F00'X;/* ELIMINATE DIGIT     0627
*                                      PORTION OF BYTE FB    @ZM21059*/
         NC    TEMPAREA+6(2),@CB01595                              0627
*       WRKPRMF=WRKPRMF TEMPAREA;   /* MERGE BYTES           @ZM20856*/
         OC    WRKPRMF(8),TEMPAREA                                 0628
*       TR(WORKPARM(7:8),TABDEC);   /* TO PRINTABLES         @ZM20856*/
         TR    WORKPARM+6(2),TABDEC                                0629
*       EDITFLD(I:(I+1))=WORKPARM(7:8);/* TO EDIT FIELD      @ZM21059*/
         LA    @01,EDITFLD-1(I)                                    0630
         MVC   0(2,@01),WORKPARM+6                                 0630
*       I=I+2;                      /* UPDATE 2 BYTES        @ZM20856*/
         ALR   I,@15                                               0631
*       WRKPRMF=''B;                /* ZERO WORK FIELD       @ZM20856*/
         XC    WRKPRMF(8),WRKPRMF                                  0632
*       WORKPARM(8:8)=DMPCD(3:3);   /* EXTRACT SDUMP         @ZM20856*/
         MVC   WORKPARM+7(1),DMPCD+2(@02)                          0633
*       CVD(WRKPRMF2,TEMPAREA);     /* TO DECIMAL            @ZM20856*/
         L     @02,WRKPRMF2                                        0634
         CVD   @02,TEMPAREA                                        0634
*       UNPK(WORKPARM,TEMPAREA(8)); /* UNPACK                @ZM20856*/
         UNPK  WORKPARM(8),TEMPAREA+7(1)                           0635
*       WORKPARM(8)=WORKPARM(8) 'F0'X;/* REMOVE SIGN         @ZM20856*/
         OI    WORKPARM+7,X'F0'                                    0636
*       EDFIELD(I)=WORKPARM(8);     /* TO EDIT FIELD         @ZM20856*/
         LA    @02,EDFIELD-1(I)                                    0637
         MVC   0(1,@02),WORKPARM+7                                 0637
*       I=I+1;                      /* UPDATE 1 BYTES        @ZM20856*/
         ALR   I,@04                                               0638
*       RFY                                                        0639
*         DMPCD BASED(TCASDUMP);    /*                       @ZM20856*/
*     END;                          /* END RCFBDUMP          @ZM20856*/
*   ELSE                                                           0641
*     DO;                           /* OTHER KEYWORDS        @ZM20856*/
         B     @RC00609                                            0641
@RF00609 DS    0H                                                  0642
*       IF TBLBINRY='1'B THEN       /* PARM VALUE A NUMBER           */
         TM    TBLBINRY(TABLEPTR),B'00100000'                      0642
         BNO   @RF00642                                            0642
*         CALL PARMMOV;             /* PROCESS ALL OTHER KEYWORDS  0643
*                                                            @ZM20856*/
         BAL   @14,PARMMOV                                         0643
*       ELSE                                                       0644
*         DO;                       /* NO - ALPHANUMERIC             */
         B     @RC00642                                            0644
@RF00642 DS    0H                                                  0645
*           SCANPTR=ADDR(WORKPARM); /* SETUP PTR                     */
         LA    SCANPTR,WORKPARM                                    0645
*           DO J=1 TO 8 WHILE(WORKCHAR^=' ');/* MOVE IN VALUE        */
         LA    J,1                                                 0646
@DL00646 CLI   WORKCHAR(SCANPTR),C' '                              0646
         BE    @DC00646                                            0646
*             EDFIELD(I)=WORKCHAR;                                 0647
         LA    @02,EDFIELD-1(I)                                    0647
         MVC   0(1,@02),WORKCHAR(SCANPTR)                          0647
*             I=I+1;                                               0648
         LA    @02,1                                               0648
         ALR   I,@02                                               0648
*             SCANPTR=SCANPTR+1;                                   0649
         ALR   SCANPTR,@02                                         0649
*           END;                                                   0650
         AL    J,@CF00057                                          0650
         C     J,@CF00034                                          0650
         BNH   @DL00646                                            0650
@DC00646 DS    0H                                                  0651
*         END;                                                     0651
*     END;                          /*                       @ZM20856*/
@RC00642 DS    0H                                                  0653
*   I=I-1;                          /* LENGTH OF EDITTED DATA        */
@RC00609 BCTR  I,0                                                 0653
*   CALL NSRTNPRT;                  /* INSERT & PRINT VALUE          */
         BAL   @14,NSRTNPRT                                        0654
*   TABLEPTR=TABLEPTR+20;           /* PT AT NEXT TABLE ENTRY        */
         AL    TABLEPTR,@CF00144                                   0655
*   END EDITIT;                                                    0656
@EL00010 DS    0H                                                  0656
@EF00010 DS    0H                                                  0656
@ER00010 L     @14,@SA00010                                        0656
         BR    @14                                                 0656
         EJECT
*NSRTNPRT:                                                         0657
*   PROC OPTIONS(SAVE(14));                                        0657
NSRTNPRT ST    @14,@SA00011                                        0657
*                                                                  0658
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE BUILDS UP A PRINT LINE FROM DATA FOUND IN     */
*/*    'EDITFLD', AND WHEN THE PRINT LINE IS FULL, PRINTS IT.        */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0658
*   IF EDFIELD(1)=HEXFF THEN        /* PRINT LAST LINE               */
         CLI   EDFIELD,X'FF'                                       0658
         BNE   @RF00658                                            0658
*     DO;                           /* YES                           */
*       CALL PRINTIT;               /* PRINT IT                      */
         BAL   @14,PRINTIT                                         0660
*       PRNTDAT5='';                /* BLANK OUT LINE                */
         MVI   PRNTDAT5,C' '                                       0661
         MVC   PRNTDAT5+1(127),PRNTDAT5                            0661
*       PRNTPTR=ADDR(PRNTDAT5);     /* RE-SET PTR                    */
         LA    PRNTPTR,PRNTDAT5                                    0662
*     END;                                                         0663
*   ELSE                                                           0664
*     DO;                                                          0664
         B     @RC00658                                            0664
@RF00658 DS    0H                                                  0665
*       IF PRNTPTR>ADDR(PRNTDAT5) THEN/* VALUE ALREADY THERE         */
         LA    @04,PRNTDAT5                                        0665
         CR    PRNTPTR,@04                                         0665
         BNH   @RF00665                                            0665
*         DO;                       /* YES                           */
*           PRNTCHAR=',';           /* PUT COMMA AFTER IT            */
         MVI   PRNTCHAR(PRNTPTR),C','                              0667
*           PRNTPTR=PRNTPTR+1;      /* PT PAST COMMA                 */
         AL    PRNTPTR,@CF00057                                    0668
*         END;                                                     0669
*       IF(PRNTPTR+I)>PRNTEND THEN  /* ROOM LEFT ON PRINT LINE       */
@RF00665 LR    @04,PRNTPTR                                         0670
         ALR   @04,I                                               0670
         C     @04,PRNTEND                                         0670
         BNH   @RF00670                                            0670
*         DO;                       /* NO                            */
*           CALL PRINTIT;           /* PRINT IT                      */
         BAL   @14,PRINTIT                                         0672
*           PRNTDAT5='';            /* BLANK OUT LINE                */
         MVI   PRNTDAT5,C' '                                       0673
         MVC   PRNTDAT5+1(127),PRNTDAT5                            0673
*           PRNTPTR=ADDR(PRNTDAT5); /* RE-SET PTR                    */
         LA    PRNTPTR,PRNTDAT5                                    0674
*         END;                                                     0675
*       DO J=1 TO I;                /* MOVE EDITTED                  */
@RF00670 LA    J,1                                                 0676
         B     @DE00676                                            0676
@DL00676 DS    0H                                                  0677
*         PRNTCHAR=EDFIELD(J);      /* DATA                          */
         LA    @02,EDFIELD-1(J)                                    0677
         MVC   PRNTCHAR(1,PRNTPTR),0(@02)                          0677
*         PRNTPTR=PRNTPTR+1;        /* INTO                          */
         AL    PRNTPTR,@CF00057                                    0678
*       END;                        /* PRINT LINE                    */
         AL    J,@CF00057                                          0679
@DE00676 CR    J,I                                                 0679
         BNH   @DL00676                                            0679
*     END;                                                         0680
*   END NSRTNPRT;                                                  0681
@EL00011 DS    0H                                                  0681
@EF00011 DS    0H                                                  0681
@ER00011 L     @14,@SA00011                                        0681
         BR    @14                                                 0681
         EJECT
*PRINTIT:                                                          0682
*   PROC OPTIONS(SAVE(14));                                        0682
PRINTIT  ST    @14,@SA00012                                        0682
*                                                                  0683
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE PRINTS A LINE OF DATA.  IN ADDITION, IF A     */
*/*    SYNAD ERROR IS DETECTED, THE 'PRINTSW' IS TURNED OFF AND THE  */
*/*    FILE IS CLOSED.                                               */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0683
*   IF PRINTSW='0'B THEN            /* PRINTOUT WANTED               */
         TM    PRINTSW,B'00001000'                                 0683
         BZ    @RT00683                                            0683
*     RETURN;                       /* NO - EXIT                     */
*   GEN(PUT   PRINTOUT,PRNTLINE)                                   0685
*   REFS(R0,R1,R14,R15,PRINTOUT,PRNTLINE);                         0685
         PUT   PRINTOUT,PRNTLINE
*   IF SYNADSW2='Y' THEN            /* SYNAD ERROR                   */
         CLI   SYNADSW2,C'Y'                                       0686
         BNE   @RF00686                                            0686
*     DO;                           /* YES                           */
*       RESPECIFY                                                  0688
*        (R1) RESTRICTED;                                          0688
*       R1=18;                      /* MESSAGE NUMBER                */
         LA    R1,18                                               0689
*       CALL MSGBLK;                /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0690
         BALR  @14,@15                                             0690
*       R1=ADDR(IKT018I);           /* ADDR OF LIST FORM             */
         LA    @04,IKT018I(,R1)                                    0691
         LR    R1,@04                                              0691
*       GEN(WTO   MF=(E,(1)))       /* ISSUE WTO                     */
*       REFS(R0,R1,R14,R15);                                       0692
         WTO   MF=(E,(1))
*       RESPECIFY                                                  0693
*        (R1) UNRESTRICTED;                                        0693
*       PRINTSW='0'B;               /* TURN OFF PRINT SW             */
         NI    PRINTSW,B'11110111'                                 0694
*       GEN(CLOSE PRINTOUT)         /* CLOSE FILE                    */
*       REFS(R0,R1,R14,R15,PRINTOUT);                              0695
         CLOSE PRINTOUT
*     END;                                                         0696
*   END PRINTIT;                                                   0697
@EL00012 DS    0H                                                  0697
@EF00012 DS    0H                                                  0697
@ER00012 L     @14,@SA00012                                        0697
         BR    @14                                                 0697
         EJECT
*                                                                  0698
*/*  *****************************************************************/
*/*                                                                  */
*/*    IN ORDER TO MAKE PARAMETER VALIDATION AS INDEPENDENT AS       */
*/*    POSSIBLE, THE ROUTINES WHICH DO THIS ARE PRIMARILY            */
*/*    TABLE-DRIVEN.  THE MAIN TABLES WHICH ACCOMPLISH THIS ARE      */
*/*    CALLED VERIFY TABLES ('VERIBUFR', 'VERIMBR', ETC.).  THEY     */
*/*    CONTAIN THE CONTROL INFORMATION REGARDING EACH KEYWORD.       */
*/*                                                                  */
*/*    AN ELEMENT IN A VERIFY TABLE IS ORGANIZED AS FOLLOWS (SEE     */
*/*    'SCANTBL'):                                                   */
*/*    -   KEYWORD NAME                                              */
*/*    -   DISPLACEMENT INDEX INTO A SAVE AREA WHERE THE VALUE       */
*/*        ENTERED WITH THE KEYWORD NAME IS SAVED.                   */
*/*    -   FLAGS, WHICH SHOW WHAT KIND OF EDITTING TO DO ON THE      */
*/*        ENTERED VALUE.                                            */
*/*    -   IF THE ENTERED VALUE HAS TO BE ONE OF A SET OF VALUES, A  */
*/*        POINTER TO A LIST OF THE VALUES,                          */
*/*      OR                                                          */
*/*        A LOW NUMBER AND A HIGH NUMBER USED FOR A RANGE CHECK.    */
*/*                                                                  */
*/*    THE SUBROUTINES WHICH ACTUALLY DO THE VALIDATION ARE          */
*/*    'FNDNMTCH', 'PRCSPARM', 'NBRXTRCT', AND 'REGXTRCT'.           */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0698
         EJECT
*FNDNMTCH:                                                         0698
*   PROC OPTIONS(SAVE(14));                                        0698
FNDNMTCH ST    @14,12(,@13)                                        0698
*                                                                  0699
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE HAS TWO FUNCTIONS: 1) SCAN A BUFFER LOOKING   */
*/*    FOR A KEYWORD NAME, AND 2) MATCH THAT KEYWORD NAME AGAINST THE*/
*/*    ENTRIES IN A TABLE.  UPON ENTRY, 'SCANPTR' SHOULD POINT AT THE*/
*/*    BUFFER TO BE SCANNED, AND 'TABLEPTR' SHOULD POINT AT THE      */
*/*    TABLE USED FOR MATCHING.  UPON EXIT, 'SCANPTR' WILL POINT AT  */
*/*    THE FIRST CHARACTER PAST THE '=' SIGN, 'WORKPARM' WILL        */
*/*    CONTAIN THE KEYWORD NAME LEFT-JUSTIFIED AND BLANK-FILLED, AND */
*/*    'TABLEPTR' WILL POINT AT EITHER THE MATCHING TABLE ENTRY, OR  */
*/*    THE END OF THE TABLE IF NO MATCH WAS FOUND.                   */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0699
*   WORKPARM=BLANK;                 /* BLANK OUT WORK AREA           */
         MVC   WORKPARM(8),@CC00097                                0699
*   I=0;                            /* ZERO OUT COUNTER MOVE KEYWORD
*                                      NAME INTO WORK AREA, AND ALSO
*                                      CHECK ITS LENGTH              */
         SLR   I,I                                                 0700
*   DO WHILE(WORKCHAR^='='&WORKCHAR^=' '&WORKCHAR^=',');           0701
         B     @DE00701                                            0701
@DL00701 DS    0H                                                  0702
*     I=I+1;                                                       0702
         AL    I,@CF00057                                          0702
*     IF I<9 THEN                                                  0703
         C     I,@CF00069                                          0703
         BNL   @RF00703                                            0703
*       WORKPRM(I)=WORKCHAR;                                       0704
         LA    @04,WORKPRM-1(I)                                    0704
         MVC   0(1,@04),WORKCHAR(SCANPTR)                          0704
*     SCANPTR=SCANPTR+1;                                           0705
@RF00703 AL    SCANPTR,@CF00057                                    0705
*   END;                                                           0706
@DE00701 CLI   WORKCHAR(SCANPTR),C'='                              0706
         BE    @DC00701                                            0706
         CLI   WORKCHAR(SCANPTR),C' '                              0706
         BE    @DC00701                                            0706
         CLI   WORKCHAR(SCANPTR),C','                              0706
         BNE   @DL00701                                            0706
@DC00701 DS    0H                                                  0707
*   IF I=0                          /* ERROR IN                      */
*       I>8                         /* LENGTH OR                     */
*       WORKCHAR=' '                /* ENDING                        */
*       WORKCHAR=',' THEN           /* CHARACTER                     */
         LTR   I,I                                                 0707
         BZ    @RT00707                                            0707
         C     I,@CF00034                                          0707
         BH    @RT00707                                            0707
         CLI   WORKCHAR(SCANPTR),C' '                              0707
         BE    @RT00707                                            0707
         CLI   WORKCHAR(SCANPTR),C','                              0707
         BNE   @RF00707                                            0707
@RT00707 DS    0H                                                  0708
*     DO;                           /* YES                           */
*       SCANERR='1'B;               /* SHOW ERROR                    */
         OI    SCANERR,B'10000000'                                 0709
*       RETURN;                     /* EXIT                          */
@EL00013 DS    0H                                                  0710
@EF00013 DS    0H                                                  0710
@ER00013 L     @14,12(,@13)                                        0710
         BR    @14                                                 0710
*     END;                                                         0711
*   ELSE                            /* NO                            */
*     SCANPTR=SCANPTR+1;            /* POINT PAST '=' SIGN SCAN TABLE
*                                      LOOKING FOR A MATCH, OR THE 0712
*                                      END OF THE TABLE              */
@RF00707 AL    SCANPTR,@CF00057                                    0712
*   DO WHILE(TBLNAME1^='FF'X&TBLNAME^=WORKPARM);                   0713
         B     @DE00713                                            0713
@DL00713 DS    0H                                                  0714
*     TABLEPTR=TABLEPTR+20;                                        0714
         AL    TABLEPTR,@CF00144                                   0714
*   END;                                                           0715
@DE00713 CLI   TBLNAME1(TABLEPTR),X'FF'                            0715
         BE    @DC00713                                            0715
         CLC   TBLNAME(8,TABLEPTR),WORKPARM                        0715
         BNE   @DL00713                                            0715
@DC00713 DS    0H                                                  0716
*   IF TBLNAME1='FF'X THEN          /* END OF TABLE                  */
         CLI   TBLNAME1(TABLEPTR),X'FF'                            0716
         BNE   @RF00716                                            0716
*     SCANERR='1'B;                 /* YES - SHOW ERROR              */
         OI    SCANERR,B'10000000'                                 0717
*   END FNDNMTCH;                                                  0718
         B     @EL00013                                            0718
         EJECT
*PRCSPARM:                                                         0719
*   PROC OPTIONS(SAVE(14));                                        0719
PRCSPARM ST    @14,@SA00014                                        0719
*                                                                  0720
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE WILL VERIFY THAT THE PARAMETER FOLLOWING A    */
*/*    KEYWORD NAME IS A LEGAL PARAMETER.  UPON ENTRY, 'SCANPTR'     */
*/*    SHOULD POINT TO THE FIRST CHARACTER OF THE PARAMETER,         */
*/*    'TABLEPTR' SHOULD POINT AT THE TABLE ENTRY WE WILL USE FOR    */
*/*    VALIDATION, AND 'SAVEPTR' SHOULD POINT AT TABLE WHICH WILL BE */
*/*    USED TO SAVE THE EDITED AND VERIFIED PARAMETER.               */
*/*    UPON EXIT, 'SCANPTR' WILL POINT AT THE CHARACTER WHICH STOPPED*/
*/*    THE SCANNING OF THE PARAMETER, 'TABLEPTR' WILL BE UNCHANGED,  */
*/*    AND 'SAVEPTR' WILL POINT AT THE SAVE AREA WHERE THE EDITED    */
*/*    AND VERIFIED PARAMETER IS.  NOTES: - IF THE PARAMETER IS      */
*/*    INVALID, THE FIRST BYTE OF THE SAVE AREA WILL BE 'FF'X.       */
*/*                                       - IF MORE THAN ONE         */
*/*    PARAMETER IS ENTERED FOR A SINGLE KEYWORD, THEN THAT          */
*/*    KEYWORD WILL BE FLAGGED AS AN ERROR, WITH THE EXCEPTION OF    */
*/*    THE 'RCFBDUMP' KEYWORD.                                       */
*/*  *****************************************************************/
*                                                                  0720
*   IF TBLZERO='1'B THEN            /* ZERO-FILL                     */
         TM    TBLZERO(TABLEPTR),B'00001000'                       0720
         BNO   @RF00720                                            0720
*     WORKPARM=ZERO;                /* YES                           */
         MVC   WORKPARM(8),@CC00103                                0721
*   ELSE                                                           0722
*     WORKPARM=BLANK;               /* NO - BLANK-FILL               */
         B     @RC00720                                            0722
@RF00720 MVC   WORKPARM(8),@CC00097                                0722
*   IF TBLNAME=RCFBDUMP THEN        /* 'RCFBDUMP             @ZM20856*/
@RC00720 CLC   TBLNAME(8,TABLEPTR),RCFBDUMP                        0723
         BNE   @RF00723                                            0723
*     DO;                                                          0724
*       SAVEPTR=SAVEPTR+8*(TBLDISP-1+DUMPCNT);/* ADDRESS PROPER WORK
*                                      AREA                  @ZM20856*/
         LH    @04,DUMPCNT                                         0725
         LH    @15,TBLDISP(,TABLEPTR)                              0725
         BCTR  @15,0                                               0725
         ALR   @15,@04                                             0725
         SLA   @15,3                                               0725
         ALR   SAVEPTR,@15                                         0725
*       IF DUMPCNT>16 THEN          /* MAX '16' PARMS        @ZM20856
*                                      NOTE: DUMPCNT INITIALIZED IN
*                                      PROC 'READMBR' TO 0.  @ZM20856*/
         C     @04,@CF00176                                        0726
         BNH   @RF00726                                            0726
*         DO;                       /* POSITION SCAN         @ZM20856*/
*           DO WHILE(WORKPARM^=','&WORKPARM^=' ');/*         @ZM20856*/
         B     @DE00728                                            0728
@DL00728 DS    0H                                                  0729
*             SCANPTR=SCANPTR+1;    /* NEXT CHAR             @ZM20856*/
         AL    SCANPTR,@CF00057                                    0729
*           END;                    /* PT PAST PARM          @ZM20856*/
@DE00728 CLI   WORKPARM,C','                                       0730
         BE    @DC00728                                            0730
         CLI   WORKPARM,C' '                                       0730
         BNE   @DL00728                                            0730
@DC00728 DS    0H                                                  0731
*           RETURN;                 /* IGNORE > 16           @ZM20856*/
@EL00014 DS    0H                                                  0731
@EF00014 DS    0H                                                  0731
@ER00014 L     @14,@SA00014                                        0731
         BR    @14                                                 0731
*         END;                      /*                       @ZM20856*/
*       ELSE                        /* INCREMENT COUNT       @ZM20856*/
*         CALL SPLITPRM;            /* SPLIT PARMS           @ZM20856*/
@RF00726 BAL   @14,SPLITPRM                                        0733
*     END;                          /* END PROCESS           @ZM20856*/
*   ELSE                                                           0735
*     DO;                           /* OTHER KEYWORD         @ZM20856*/
         B     @RC00723                                            0735
@RF00723 DS    0H                                                  0736
*       SAVEPTR=SAVEPTR+8*(TBLDISP-1);/* ADDRESS PROPER WORK AREA  0736
*                                                            @ZM20856*/
         LH    @04,TBLDISP(,TABLEPTR)                              0736
         BCTR  @04,0                                               0736
         SLA   @04,3                                               0736
         ALR   SAVEPTR,@04                                         0736
*       IF SAVECHAR^=HEXBC THEN     /* PARAMETER ALREADY THERE       */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0737
         BE    @RF00737                                            0737
*         DO;                       /* YES                           */
*           SAVECHAR=HEXFF;         /* FLAG AS AN ERROR              */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0739
*           RETURN;                 /* EXIT                          */
         B     @EL00014                                            0740
*         END;                                                     0741
*       IF TBLNUMRC='1'B THEN       /* VALUE MUST BE NUMERIC         */
@RF00737 TM    TBLNUMRC(TABLEPTR),B'01000000'                      0742
         BNO   @RF00742                                            0742
*         CALL NBRXTRCT;            /* YES                           */
         BAL   @14,NBRXTRCT                                        0743
*       ELSE                                                       0744
*         CALL REGXTRCT;            /* NO                            */
         B     @RC00742                                            0744
@RF00742 BAL   @14,REGXTRCT                                        0744
*       IF SAVECHAR=HEXFF THEN      /* ERROR DETECTED                */
@RC00742 CLI   SAVECHAR(SAVEPTR),X'FF'                             0745
         BE    @RT00745                                            0745
*         RETURN;                   /* YES                           */
*       IF TBLRIGHT='1'B&I<8 THEN   /* RIGHT-JUSTIFY                 */
         TM    TBLRIGHT(TABLEPTR),B'00010000'                      0747
         BNO   @RF00747                                            0747
         C     I,@CF00034                                          0747
         BNL   @RF00747                                            0747
*         DO;                       /* YES                           */
*           IF TBLZERO='1'B THEN    /* FILL TEMPORARY                */
         TM    TBLZERO(TABLEPTR),B'00001000'                       0749
         BNO   @RF00749                                            0749
*             TEMPAREA=ZERO;        /* AREA WITH                     */
         MVC   TEMPAREA(8),@CC00103                                0750
*           ELSE                    /* PROPER FILL                   */
*             TEMPAREA=BLANK;       /* CHARACTER                     */
         B     @RC00749                                            0751
@RF00749 MVC   TEMPAREA(8),@CC00097                                0751
*           I=9-I;                  /* STARTING PT IN TEMPAREA       */
@RC00749 LA    @04,9                                               0752
         SLR   @04,I                                               0752
         LR    I,@04                                               0752
*           MVC(TEMPAREA(I:8),WORKPARM);/* SHIFT RIGHT INTO AREA     */
         LA    @04,TEMPAREA-1(I)                                   0753
         LA    @15,8                                               0753
         SLR   @15,I                                               0753
         EX    @15,@SM01657                                        0753
*           WORKPARM=TEMPAREA;      /* MOVE BACK                     */
         MVC   WORKPARM(8),TEMPAREA                                0754
*         END;                                                     0755
*       IF TBLRSTD='1'B THEN        /* RESTRICTED VALUES             */
@RF00747 TM    TBLRSTD(TABLEPTR),B'10000000'                       0756
         BNO   @RF00756                                            0756
*         DO;                       /* YES                           */
*           RSTDPTR=TBLPTR;         /* PTR TO RSTD TABLE             */
         L     RSTDPTR,TBLPTR(,TABLEPTR)                           0758
*           DO WHILE(RSTDCHAR^=HEXFF&RSTDNAME^=WORKPARM);/* SEARCH   */
         B     @DE00759                                            0759
@DL00759 DS    0H                                                  0760
*             RSTDPTR=RSTDPTR+8;    /* FOR A                         */
         AL    RSTDPTR,@CF00034                                    0760
*           END;                    /* MATCH                         */
@DE00759 CLI   RSTDCHAR(RSTDPTR),X'FF'                             0761
         BE    @DC00759                                            0761
         CLC   RSTDNAME(8,RSTDPTR),WORKPARM                        0761
         BNE   @DL00759                                            0761
@DC00759 DS    0H                                                  0762
*           IF RSTDCHAR=HEXFF THEN  /* FIND ONE                      */
         CLI   RSTDCHAR(RSTDPTR),X'FF'                             0762
         BNE   @RF00762                                            0762
*             SAVECHAR=HEXFF;       /* NOPE                          */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0763
*         END;                                                     0764
@RF00762 DS    0H                                                  0765
*       IF SAVECHAR^=HEXFF THEN     /* STILL GOOD VALUE              */
@RF00756 CLI   SAVECHAR(SAVEPTR),X'FF'                             0765
         BE    @RF00765                                            0765
*         IF TBLBINRY='1'B THEN     /* CONVERT TO BINARY             */
         TM    TBLBINRY(TABLEPTR),B'00100000'                      0766
         BNO   @RF00766                                            0766
*           DO;                                                    0767
*             PACK(TEMPAREA,WORKPARM);/* PACK THE NUMBER             */
         PACK  TEMPAREA(8),WORKPARM(8)                             0768
*             WORKPARM=''B;         /* ZERO OUT RECEIVNG FIELD       */
         XC    WORKPARM(8),WORKPARM                                0769
*             CVB(WRKPRMF2,TEMPAREA);/* CVB INTO WORKPARM            */
         CVB   @04,TEMPAREA                                        0770
         ST    @04,WRKPRMF2                                        0770
*             IF TBLRANGE='1'B THEN /* DO A RANGE CHECK              */
         TM    TBLRANGE(TABLEPTR),B'00000100'                      0771
         BNO   @RF00771                                            0771
*               DO;                 /* YES                           */
*                 IF WRKPRMF2<TBLLOW WRKPRMF2>TBLHIGH THEN         0773
         C     @04,TBLLOW(,TABLEPTR)                               0773
         BL    @RT00773                                            0773
         C     @04,TBLHIGH(,TABLEPTR)                              0773
         BNH   @RF00773                                            0773
@RT00773 DS    0H                                                  0774
*                   SAVECHAR=HEXFF;                                0774
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0774
*               END;                                               0775
@RF00773 DS    0H                                                  0776
*           END;                                                   0776
@RF00771 DS    0H                                                  0777
*       IF SAVECHAR^=HEXFF THEN     /* STILL OK                      */
@RF00766 DS    0H                                                  0777
@RF00765 CLI   SAVECHAR(SAVEPTR),X'FF'                             0777
         BE    @RF00777                                            0777
*         SAVAREA=WORKPARM;         /* YES - MOVE IN GOOD VALUE      */
         MVC   SAVAREA(8,SAVEPTR),WORKPARM                         0778
*     END;                          /* ALL OTHER KEYWORDS    @ZM20856*/
*   END PRCSPARM;                                                  0780
         B     @EL00014                                            0780
         EJECT
*NBRXTRCT:                                                         0781
*   PROC OPTIONS(SAVE(14));                                        0781
NBRXTRCT ST    @14,12(,@13)                                        0781
*                                                                  0782
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE MOVES A PARAMETER INTO A WORKAREA, VERIFIES   */
*/*    THAT IT IS NUMERIC, AND CHECKS ITS LENGTH.                    */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0782
*   I=0;                            /* ZERO OUT LENGTH COUNTER       */
         SLR   I,I                                                 0782
*   DO WHILE(WORKCHAR^=','&WORKCHAR^=' ');                         0783
         B     @DE00783                                            0783
@DL00783 DS    0H                                                  0784
*     I=I+1;                        /* ADD 1 TO LENGTH               */
         AL    I,@CF00057                                          0784
*     IF I<9 THEN                   /* LENGTH STILL GOOD             */
         C     I,@CF00069                                          0785
         BNL   @RF00785                                            0785
*       DO;                         /* YES                           */
*         WORKPRM(I)=WORKCHAR;      /* MOVE NEXT CHARACTER           */
         LA    @04,WORKPRM-1(I)                                    0787
         MVC   0(1,@04),WORKCHAR(SCANPTR)                          0787
*         IF WORKCHAR<'0'           /* IS IT                         */
*             WORKCHAR>'9' THEN     /* NON-NUMERIC                   */
         CLI   WORKCHAR(SCANPTR),C'0'                              0788
         BL    @RT00788                                            0788
         CLI   WORKCHAR(SCANPTR),C'9'                              0788
         BNH   @RF00788                                            0788
@RT00788 DS    0H                                                  0789
*           I=9;                    /* YES - FORCE ERROR             */
         LA    I,9                                                 0789
*       END;                                                       0790
@RF00788 DS    0H                                                  0791
*     SCANPTR=SCANPTR+1;            /* PT AT NEXT CHARACTER          */
@RF00785 AL    SCANPTR,@CF00057                                    0791
*   END;                                                           0792
@DE00783 CLI   WORKCHAR(SCANPTR),C','                              0792
         BE    @DC00783                                            0792
         CLI   WORKCHAR(SCANPTR),C' '                              0792
         BNE   @DL00783                                            0792
@DC00783 DS    0H                                                  0793
*   IF I=0 I>8 THEN                 /* ANY ERRORS DISCOVERED         */
         LTR   I,I                                                 0793
         BZ    @RT00793                                            0793
         C     I,@CF00034                                          0793
         BNH   @RF00793                                            0793
@RT00793 DS    0H                                                  0794
*     SAVECHAR=HEXFF;               /* YES                           */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0794
*   END NBRXTRCT;                                                  0795
@EL00015 DS    0H                                                  0795
@EF00015 DS    0H                                                  0795
@ER00015 L     @14,12(,@13)                                        0795
         BR    @14                                                 0795
         EJECT
*REGXTRCT:                                                         0796
*   PROC OPTIONS(SAVE(14));                                        0796
REGXTRCT ST    @14,12(,@13)                                        0796
*                                                                  0797
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE MOVES A PARAMETER INTO A WORKAREA, AND        */
*/*    CHECKS ITS LENGTH.                                            */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0797
*   I=0;                            /* ZERO OUT LENGTH COUNTER       */
         SLR   I,I                                                 0797
*   DO WHILE(WORKCHAR^=','&WORKCHAR^=' ');                         0798
         B     @DE00798                                            0798
@DL00798 DS    0H                                                  0799
*     I=I+1;                        /* ADD 1 TO LENGTH               */
         AL    I,@CF00057                                          0799
*     IF I<9 THEN                   /* LENGTH STILL GOOD             */
         C     I,@CF00069                                          0800
         BNL   @RF00800                                            0800
*       WORKPRM(I)=WORKCHAR;        /* YES - MOVE CHARACTER          */
         LA    @04,WORKPRM-1(I)                                    0801
         MVC   0(1,@04),WORKCHAR(SCANPTR)                          0801
*     SCANPTR=SCANPTR+1;            /* PT AT NEXT CHARACTER          */
@RF00800 AL    SCANPTR,@CF00057                                    0802
*   END;                                                           0803
@DE00798 CLI   WORKCHAR(SCANPTR),C','                              0803
         BE    @DC00798                                            0803
         CLI   WORKCHAR(SCANPTR),C' '                              0803
         BNE   @DL00798                                            0803
@DC00798 DS    0H                                                  0804
*   IF I=0 I>8 THEN                 /* IF BAD LENGTH                 */
         LTR   I,I                                                 0804
         BZ    @RT00804                                            0804
         C     I,@CF00034                                          0804
         BNH   @RF00804                                            0804
@RT00804 DS    0H                                                  0805
*     SAVECHAR=HEXFF;               /* SHOW IT                       */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0805
*   END REGXTRCT;                                                  0806
@EL00016 DS    0H                                                  0806
@EF00016 DS    0H                                                  0806
@ER00016 L     @14,12(,@13)                                        0806
         BR    @14                                                 0806
         EJECT
*SPLITPRM:                                                         0807
*   PROC OPTIONS(SAVE(14));                                        0807
SPLITPRM ST    @14,12(,@13)                                        0807
*                                                                  0808
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE SPLITS THE KEYWORD 'RCFBDUMP' INTO 3 LOGICAL  */
*/*    VALUES AND TRANSLATES THEM TO BINARY. VALUES:                 */
*/*            1. VTAM RETURN CODE                                   */
*/*            2. VTAM FEEDBACK CODE                                 */
*/*            3. DUMP OPTION - 0=LOCAL, 1=ALL                       */
*/*  *****************************************************************/
*                                                                  0808
*   I=0;                            /* ZERO LENGTH COUNT     @ZM20856*/
         SLR   I,I                                                 0808
*   SAVAREAD=SAVAREAD&&SAVAREAD;    /* INITIALIZE AREA       @ZM20856*/
         XC    SAVAREAD(8,SAVEPTR),SAVAREAD(SAVEPTR)               0809
*   DO WHILE(WORKCHAR^=','&WORKCHAR^=' ');/*                 @ZM20856*/
         B     @DE00810                                            0810
@DL00810 DS    0H                                                  0811
*     I=I+1;                        /* 1 TO LENGTH           @ZM20856*/
         AL    I,@CF00057                                          0811
*     IF I<6 THEN                   /* GOOD LENGTH           @ZM20856*/
         C     I,@CF00065                                          0812
         BNL   @RF00812                                            0812
*       WORKPARM(I)=WORKCHAR;       /* MOVE NEXT CHAR        @ZM20856*/
         LA    @01,WORKPARM-1(I)                                   0813
         MVC   0(1,@01),WORKCHAR(SCANPTR)                          0813
*     SCANPTR=SCANPTR+1;            /* PT NEXT CHAR          @ZM20856*/
@RF00812 AL    SCANPTR,@CF00057                                    0814
*   END;                            /* END DO WHILE          @ZM20856*/
@DE00810 CLI   WORKCHAR(SCANPTR),C','                              0815
         BE    @DC00810                                            0815
         CLI   WORKCHAR(SCANPTR),C' '                              0815
         BNE   @DL00810                                            0815
@DC00810 DS    0H                                                  0816
*   IF I^=5 THEN                    /* INVALID PARM          @ZM20856*/
         C     I,@CF00248                                          0816
         BE    @RF00816                                            0816
*     DO;                           /* YES                   @ZM20856*/
*       SAVECHAR=HEXFF;             /* YES                   @ZM20856*/
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0818
*       RETURN;                     /* NEXT KEYWORD          @ZM20856*/
@EL00017 DS    0H                                                  0819
@EF00017 DS    0H                                                  0819
@ER00017 L     @14,12(,@13)                                        0819
         BR    @14                                                 0819
*     END;                          /*                       @ZM20856*/
*   ELSE                                                           0821
*     ;                             /* VALID                 @ZM20856*/
*                                                                  0821
@RF00816 DS    0H                                                  0822
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS VTAM RETURN CODE                              @ZM20856*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0822
*   SPLIT(5:6)=WORKPARM(1:2);       /* EXTRACT RC            @ZM21059*/
         MVC   SPLIT+4(2),WORKPARM                                 0822
*   TR(SPLIT(5:6),TABBINRY);        /* TRANS TO BINARY-ALSO TRANS  0823
*                                      INVALIDS              @ZM20856*/
         TR    SPLIT+4(2),TABBINRY                                 0823
*   CHKFIELD(5:6)=SPLIT(5:6)&'F0F0'X;/* INVALIDS             @ZM20856*/
         MVC   CHKFIELD+4(2),SPLIT+4                               0824
         NC    CHKFIELD+4(2),@CB01628                              0824
*   IF CHKFIELD(5:6)^=0 THEN        /* INVALID RC            @ZM20856*/
         ICM   @15,3,CHKFIELD+4                                    0825
         BZ    @RF00825                                            0825
*     DO;                           /* YES                   @ZM20856*/
*       SAVECHAR=HEXFF;             /* FLAG ERROR            @ZM20856*/
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0827
*       RETURN;                     /*                       @ZM20856*/
         B     @EL00017                                            0828
*     END;                          /*                       @ZM20856*/
*   ELSE                                                           0830
*     DO;                           /* VALID RC              @ZM20856*/
@RF00825 DS    0H                                                  0831
*       PACK(TEMPAREA(7:8),SPLIT(5:7));/* COMBINE            @ZM21059*/
         PACK  TEMPAREA+6(2),SPLIT+4(3)                            0831
*       VTAMRC=TEMPAREA(7);         /* WORKAREA UPT          @ZM21059*/
         MVC   VTAMRC(1,SAVEPTR),TEMPAREA+6                        0832
*     END;                                                         0833
*                                                                  0833
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS VTAM FEEDBACK CODE                            @ZM20856*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0834
*   SPLIT(5:6)=WORKPARM(3:4);       /* EXTRACT FEEDBCK       @ZM21059*/
         MVC   SPLIT+4(2),WORKPARM+2                               0834
*   TR(SPLIT(5:6),TABBINRY);        /* TRANS TO BINARY- ALSO TRANS 0835
*                                      INVALIDS              @ZM20856*/
         TR    SPLIT+4(2),TABBINRY                                 0835
*   CHKFIELD(5:6)=SPLIT(5:6)&'F0F0'X;/* INVALIDS             @ZM20856*/
         MVC   CHKFIELD+4(2),SPLIT+4                               0836
         NC    CHKFIELD+4(2),@CB01628                              0836
*   IF CHKFIELD(5:6)^=0 THEN        /* INVALID FB            @ZM20856*/
         ICM   @15,3,CHKFIELD+4                                    0837
         BZ    @RF00837                                            0837
*     DO;                           /* YES                   @ZM20856*/
*       SAVECHAR=HEXFF;             /* FLAG ERROR            @ZM20856*/
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0839
*       RETURN;                     /*                       @ZM20856*/
         B     @EL00017                                            0840
*     END;                          /*                       @ZM20856*/
*   ELSE                                                           0842
*     DO;                           /* VALID FB              @ZM20856*/
@RF00837 DS    0H                                                  0843
*       PACK(TEMPAREA(7:8),SPLIT(5:7));/* COMBINE            @ZM21059*/
         PACK  TEMPAREA+6(2),SPLIT+4(3)                            0843
*       VTAMFB=TEMPAREA(7);         /* WORKAREA UPT          @ZM21059*/
         MVC   VTAMFB(1,SAVEPTR),TEMPAREA+6                        0844
*     END;                                                         0845
*                                                                  0845
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS DUMP OPTION CODE                              @ZM20856*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0846
*   IF WORKPARM(5)^='F1'X&WORKPARM(5)^='F0'X THEN/* DUMP OPTION HAS
*                                      TO BE EITHER 1 OR 0   @ZM21059*/
         CLI   WORKPARM+4,X'F1'                                    0846
         BE    @RF00846                                            0846
         CLI   WORKPARM+4,X'F0'                                    0846
         BE    @RF00846                                            0846
*     SAVECHAR=HEXFF;               /* FLAG AS ERROR         @ZM20856*/
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0847
*   ELSE                            /* OK PARM               @ZM20856*/
*     DUMPCNT=DUMPCNT+1;            /* BUMP COUNT            @ZM20856*/
         B     @RC00846                                            0848
@RF00846 LH    @01,DUMPCNT                                         0848
         LA    @01,1(,@01)                                         0848
         STH   @01,DUMPCNT                                         0848
*   IF WORKPARM(5)='F1'X THEN       /* '1'                   @ZM21059*/
@RC00846 CLI   WORKPARM+4,X'F1'                                    0849
         BNE   @RF00849                                            0849
*     SDUMP=1;                      /* WORKAREA UPT 1        @ZM20856*/
         MVI   SDUMP(SAVEPTR),X'01'                                0850
*   ELSE                            /*                       @ZM20856*/
*     SDUMP=0;                      /* WORKAREA UPT 0        @ZM20856*/
         B     @RC00849                                            0851
@RF00849 MVI   SDUMP(SAVEPTR),X'00'                                0851
*   END SPLITPRM;                                                  0852
         B     @EL00017                                            0852
         EJECT
*PARMMOV:                                                          0853
*   PROC OPTIONS(SAVE(14));                                        0853
PARMMOV  ST    @14,12(,@13)                                        0853
*                                                                  0854
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE MOVES THE PARMS ENTERED FOR EACH KEYWORD INTO */
*/*    A EDIT FIELD SUITABLE FOR PRINTING. NOTE: THIS PROC IS NOT    */
*/*    INVOKED FOR THE 'RCFBDUMP' KEYWORD.                           */
*/*  *****************************************************************/
*                                                                  0854
*   CVD(WRKPRMF2,TEMPAREA);         /* TO DECIMAL            @ZM20856*/
         L     @04,WRKPRMF2                                        0854
         CVD   @04,TEMPAREA                                        0854
*   UNPK(WORKPARM,TEMPAREA);        /* UNPACK                @ZM20856*/
         UNPK  WORKPARM(8),TEMPAREA(8)                             0855
*   WORKPARM(8)=WORKPARM(8) 'F0'X;  /* REMOVE SIGN           @ZM20856*/
         OI    WORKPARM+7,X'F0'                                    0856
*   SCANPTR=ADDR(WORKPARM);         /* START SCAN            @ZM20856*/
         LA    SCANPTR,WORKPARM                                    0857
*   DO J=1 TO 8 WHILE(WORKCHAR='0');/* FIND LEADING DIGIT            */
         LA    J,1                                                 0858
@DL00858 CLI   WORKCHAR(SCANPTR),C'0'                              0858
         BNE   @DC00858                                            0858
*     SCANPTR=SCANPTR+1;            /* NEXT BYTE             @ZM20856*/
         AL    SCANPTR,@CF00057                                    0859
*   END;                            /*                       @ZM20856*/
         AL    J,@CF00057                                          0860
         C     J,@CF00034                                          0860
         BNH   @DL00858                                            0860
@DC00858 DS    0H                                                  0861
*   IF J=9 THEN                     /* ALL ZERO              @ZM20856*/
         C     J,@CF00069                                          0861
         BNE   @RF00861                                            0861
*     J=8;                          /* PRINT 1 ZERO          @ZM20856*/
         LA    J,8                                                 0862
*   DO K=J TO 8;                    /* MOVE CORRECT          @ZM20856*/
@RF00861 LR    K,J                                                 0863
         B     @DE00863                                            0863
@DL00863 DS    0H                                                  0864
*     EDFIELD(I)=WORKPARM(K);       /* NUMBER TO FIELD       @ZM20856*/
         LA    @01,EDFIELD-1(I)                                    0864
         LA    @15,WORKPARM-1(K)                                   0864
         MVC   0(1,@01),0(@15)                                     0864
*     I=I+1;                        /*                       @ZM20856*/
         AL    I,@CF00057                                          0865
*   END;                            /*                       @ZM20856*/
         AL    K,@CF00057                                          0866
@DE00863 C     K,@CF00034                                          0866
         BNH   @DL00863                                            0866
*   END PARMMOV;                    /*                       @ZM20856*/
@EL00018 DS    0H                                                  0867
@EF00018 DS    0H                                                  0867
@ER00018 L     @14,12(,@13)                                        0867
         BR    @14                                                 0867
         EJECT
*                                                                  0868
*/*  *****************************************************************/
*/*                                                                  */
*/*    THESE 2 PAGES CONTAIN THE ASSEMBLER CODING FOR THE PARMLIB    */
*/*    DCB, THE PRINTOUT DCB, THE SYNAD EXITS, THE DCB ABEND EXITS,  */
*/*    THE EXIT LISTS, AND THE JFCB AREA.                            */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0868
*   GENERATE DATA DEFS(PARMLIB,EXITLST1,SYNAD1,DCBABND1,JFCBAREA); 0868
*   GENERATE DATA DEFS(PRINTOUT,EXITLST2,SYNAD2,DCBABND2);         0869
         EJECT
*   END IKTCAS54                                                   0870
*                                                                  0870
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEECHAIN)                                       */
*/*%INCLUDE SYSLIB  (IEZCIB  )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IKTTCAST)                                       */
*/*%INCLUDE SYSLIB  (IKTDMPCD)                                       */
*/*%INCLUDE SYSLIB  (IKTCASWA)                                       */
*                                                                  0870
*       ;                                                          0870
         B     @EL00001                                            0870
@DATA    DS    0H
@CH00189 DC    H'26'
@SM01645 MVC   CIBUFFER(0),CIBDATA(@15)
@SM01657 MVC   0(0,@04),WORKPARM
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00002 DS    1F
@SA00003 DS    1F
@SA00005 DS    1F
@SA00009 DS    1F
@SA00012 DS    1F
@SA00014 DS    1F
@SA00010 DS    1F
@SA00011 DS    1F
IKTCAS54 CSECT
         DS    0F
@CF00057 DC    F'1'
@CF00118 DC    F'3'
@CH00118 EQU   @CF00118+2
@CF00063 DC    F'4'
@CH00063 EQU   @CF00063+2
@CF00248 DC    F'5'
@CF00065 DC    F'6'
@CF00034 DC    F'8'
@CF00069 DC    F'9'
@CF00176 DC    F'16'
@CF00144 DC    F'20'
@DATD    DSECT
         DS    0D
DUMPPTR  DS    A
PRNTEND  DS    A
L        DS    H
M        DS    H
N        DS    H
RTNCODE  DS    H
DUMPCNT  DS    H
         DS    CL6
TEMPAREA DS    CL8
CHKFIELD DS    CL8
CIBUFFER DS    CL48
KEYWDNM  DS    CL8
SPLIT    DS    CL8
SYNADSW1 DS    CL1
SYNADSW2 DS    CL1
DCBABSW1 DS    CL1
DCBABSW2 DS    CL1
SWITCHES DS    CL1
         ORG   SWITCHES
SCANERR  DS    BL1
READSW1  EQU   SWITCHES+0
GOSW1    EQU   SWITCHES+0
GOSW2    EQU   SWITCHES+0
PRINTSW  EQU   SWITCHES+0
@NM00001 EQU   SWITCHES+0
         ORG   SWITCHES+1
         DS    CL3
WORKPARM DS    CL8
         ORG   WORKPARM
WORKPRM  DS    8CL1
         ORG   WORKPARM+8
MBRRECD  DS    CL80
         ORG   MBRRECD
@NM00004 DS    CL72
MBR7380  DS    CL8
         ORG   MBR7380
@NM00005 DS    CL7
MBR80    DS    CL1
         ORG   MBRRECD+80
PRNTLINE DS    CL133
         ORG   PRNTLINE
PRNTCC   DS    CL1
PRNTDATA DS    CL132
         ORG   PRNTDATA
@NM00006 DS    CL4
PRNTDAT5 DS    CL128
         ORG   PRNTLINE+133
EDITFLD  DS    CL20
         ORG   EDITFLD
EDFIELD  DS    20CL1
         ORG   EDITFLD+20
TSOKEYNN DS    CL8
         ORG   TSOKEYNN
TSO      DS    CL6
TSO1     DS    CL1
TSO2     DS    CL1
         ORG   TSOKEYNN+8
MERGAREA DS    CL208
         ORG   MERGAREA
MERGE    DS    26CL8
         ORG   MERGAREA+208
         DS    CL3
SAVEBUFR DS    CL24
SAVEMBR  DS    CL208
IKTCAS54 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC01543 DC    C'CONSOLE VALUES ACCEPTED:'
@CC01564 DC    C'PARMLIB VALUES ACCEPTED:'
@CC01585 DC    C'CURRENT TCAS PARAMETERS:'
@CC01526 DC    C'CONSOLE VALUES ENTERED:'
@CC01556 DC    C'PARMLIB VALUES ENTERED:'
@CC01529 DC    C'*NONE ENTERED*'
@CC01534 DC    C'USER=FSTOP '
@CC01537 DC    C'USER=SIC '
@CC00097 DC    C'        '
@CC00103 DC    C'00000000'
@CC00179 DC    C'TSOKEY00'
@CC00302 DC    C'FSTOP   '
@CC00329 DC    C'MEMBER  '
@CC00340 DC    C'USER    '
@CC00350 DC    C'USERMAX '
@CC00394 DC    C'HIBFREXT'
@CC00403 DC    C'LOBFREXT'
@CC01532 DC    C'IGNORE '
@CC00181 EQU   @CC00179
@CC01533 EQU   @CC00302
@CC01536 DC    C'SIC '
@CC01531 DC    C'U '
@CC01560 DC    C', '
@CB01595 DC    X'0F00'
@CB01628 DC    X'F0F0'
RCFBDUMP DC    CL8'RCFBDUMP'
         DS    CL1
DEFAULTS DS    CL88                                           ZP60007
         ORG   DEFAULTS
@NM00011 DS    CL8
         ORG   @NM00011
@NM00012 DC    F'0'
@NM00013 DC    F'40'
         ORG   DEFAULTS+8
@NM00014 DS    CL8
         ORG   @NM00014
@NM00015 DC    CL8'        '
         ORG   DEFAULTS+16
@NM00016 DS    CL8
         ORG   @NM00016
@NM00017 DC    F'0'
@NM00018 DC    F'3'
         ORG   DEFAULTS+24
@NM00019 DS    CL8
         ORG   @NM00019
@NM00020 DC    F'0'
@NM00021 DC    F'132'
         ORG   DEFAULTS+32
@NM00022 DS    CL8
         ORG   @NM00022
@NM00023 DC    F'0'
@NM00024 DC    F'48000'
         ORG   DEFAULTS+40
@NM00025 DS    CL8
         ORG   @NM00025
@NM00026 DC    F'0'
@NM00027 DC    F'24000'
         ORG   DEFAULTS+48
@NM00028 DS    CL8
         ORG   @NM00028
@NM00029 DC    F'0'
@NM00030 DC    F'480'
         ORG   DEFAULTS+56
@NM00031 DS    CL8
         ORG   @NM00031
@NM00032 DC    F'0'
@NM00033 DC    F'4'
         ORG   DEFAULTS+64
@NM00034 DS    CL8
         ORG   @NM00034
@NM00035 DC    CL8'NOBREAK '
         ORG   DEFAULTS+72
@NM00036 DS    CL8
         ORG   @NM00036
@NM00037 DC    CL8'NO      '
         ORG   DEFAULTS+80
         DC    CL8'YES     '                                   ZP60007
         ORG   DEFAULTS+88                                     ZP60007
SAVES2   DS    CL208
         ORG   SAVES2
SAVES1   DS    CL24
         ORG   SAVES1
@NM00038 DC    24X'BC'
         ORG   SAVES2+24
@NM00039 DS    CL56
         ORG   @NM00039
@NM00040 DC    56X'BC'
         ORG   SAVES2+80
@NM00041 DS    CL128
         ORG   @NM00041
@NM00042 DC    128X'BC'
         ORG   SAVES2+208
         DS    CL4
TABBINRY DS    CL256
         ORG   TABBINRY
@NM00048 DC    X'F0F0F0F0F0F0F0F0'
@NM00049 DC    X'F0F0F0F0F0F0F0F0'
@NM00050 DC    X'F0F0F0F0F0F0F0F0'
@NM00051 DC    X'F0F0F0F0F0F0F0F0'
@NM00052 DC    X'F0F0F0F0F0F0F0F0'
@NM00053 DC    X'F0F0F0F0F0F0F0F0'
@NM00054 DC    X'F0F0F0F0F0F0F0F0'
@NM00055 DC    X'F0F0F0F0F0F0F0F0'
@NM00056 DC    X'F0F0F0F0F0F0F0F0'
@NM00057 DC    X'F0F0F0F0F0F0F0F0'
@NM00058 DC    X'F0F0F0F0F0F0F0F0'
@NM00059 DC    X'F0F0F0F0F0F0F0F0'
@NM00060 DC    X'F0F0F0F0F0F0F0F0'
@NM00061 DC    X'F0F0F0F0F0F0F0F0'
@NM00062 DC    X'F0F0F0F0F0F0F0F0'
@NM00063 DC    X'F0F0F0F0F0F0F0F0'
@NM00064 DC    X'F0F0F0F0F0F0F0F0'
@NM00065 DC    X'F0F0F0F0F0F0F0F0'
@NM00066 DC    X'F0F0F0F0F0F0F0F0'
@NM00067 DC    X'F0F0F0F0F0F0F0F0'
@NM00068 DC    X'F0F0F0F0F0F0F0F0'
@NM00069 DC    X'F0F0F0F0F0F0F0F0'
@NM00070 DC    X'F0F0F0F0F0F0F0F0'
@NM00071 DC    X'F0F0F0F0F0F0F0F0'
@NM00072 DC    X'F00A0B0C0D0E0FF0'
@NM00073 DC    X'F0F0F0F0F0F0F0F0'
@NM00074 DC    X'F0F0F0F0F0F0F0F0'
@NM00075 DC    X'F0F0F0F0F0F0F0F0'
@NM00076 DC    X'F0F0F0F0F0F0F0F0'
@NM00077 DC    X'F0F0F0F0F0F0F0F0'
@NM00078 DC    X'0001020304050607'
@NM00079 DC    X'0809F0F0F0F0F0F0'
         ORG   TABBINRY+256
TABDEC   DS    CL16
         ORG   TABDEC
ALPHANUM DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
         ORG   TABDEC+16
RSTDUSER DS    CL17
         ORG   RSTDUSER
@NM00080 DC    CL8'FSTOP   '
@NM00081 DC    CL8'SIC     '
@NM00082 DC    X'FF'
         ORG   RSTDUSER+17
RSTDSCRN DS    CL17
         ORG   RSTDSCRN
@NM00083 DC    CL8'00000480'
@NM00084 DC    CL8'00001920'
@NM00085 DC    X'FF'
         ORG   RSTDSCRN+17
RSTDMODE DS    CL17
         ORG   RSTDMODE
NOBREAK  DC    CL8'NOBREAK '
BREAK    DC    CL8'BREAK   '
@NM00086 DC    X'FF'
         ORG   RSTDMODE+17
RSTDMDSW DS    CL17
         ORG   RSTDMDSW
NO       DC    CL8'NO      '
YES      DC    CL8'YES     '
@NM00087 DC    X'FF'
         ORG   RSTDMDSW+17
VERIBUFR DS    CL61
         ORG   VERIBUFR
@NM00089 DS    CL20
         ORG   @NM00089
@NM00090 DC    CL8'MEMBER  '
@NM00091 DC    H'1'
@NM00092 DC    CL1' '
@NM00093 DC    B'00000000'
@NM00094 DC    CL4'    '
@NM00095 DC    CL4'    '
         ORG   VERIBUFR+20
@NM00096 DS    CL20
         ORG   @NM00096
@NM00097 DC    CL8'USER    '
@NM00098 DC    H'2'
@NM00099 DC    CL1' '
@NM00100 DC    B'10000000'
@NM00101 DC    AL4(RSTDUSER)
@NM00102 DC    CL4'    '
         ORG   VERIBUFR+40
@NM00103 DS    CL20
         ORG   @NM00103
@NM00104 DC    CL8'USERMAX '
@NM00105 DC    H'3'
@NM00106 DC    CL1' '
@NM00107 DC    B'01111100'
@NM00108 DC    F'0'
@NM00109 DC    F'32767'
         ORG   VERIBUFR+60
@NM00110 DC    X'FF'
         ORG   VERIBUFR+61
         DS    CL3
VERIMBR  DS    CL521
         ORG   VERIMBR
@NM00111 DS    CL20
         ORG   @NM00111
@NM00112 DC    CL8'USERMAX '
@NM00113 DC    H'1'
@NM00114 DC    CL1' '
@NM00115 DC    B'01111100'
@NM00116 DC    F'0'
@NM00117 DC    F'32767'
         ORG   VERIMBR+20
@NM00118 DS    CL20
         ORG   @NM00118
@NM00119 DC    CL8'ACBPW   '
@NM00120 DC    H'2'
@NM00121 DC    CL1' '
@NM00122 DC    B'00000000'
@NM00123 DC    CL4'    '
@NM00124 DC    CL4'    '
         ORG   VERIMBR+40
@NM00125 DS    CL20
         ORG   @NM00125
@NM00126 DC    CL8'RECONLIM'
@NM00127 DC    H'3'
@NM00128 DC    CL1' '
@NM00129 DC    B'01111100'
@NM00130 DC    F'0'
@NM00131 DC    F'32767'
         ORG   VERIMBR+60
@NM00132 DS    CL20
         ORG   @NM00132
@NM00133 DC    CL8'BUFRSIZE'
@NM00134 DC    H'4'
@NM00135 DC    CL1' '
@NM00136 DC    B'01111100'
@NM00137 DC    F'4'
@NM00138 DC    F'4092'
         ORG   VERIMBR+80
@NM00139 DS    CL20
         ORG   @NM00139
@NM00140 DC    CL8'HIBFREXT'
@NM00141 DC    H'5'
@NM00142 DC    CL1' '
@NM00143 DC    B'01111100'
@NM00144 DC    F'1'
@NM00145 DC    F'16777215'
         ORG   VERIMBR+100
@NM00146 DS    CL20
         ORG   @NM00146
@NM00147 DC    CL8'LOBFREXT'
@NM00148 DC    H'6'
@NM00149 DC    CL1' '
@NM00150 DC    B'01111100'
@NM00151 DC    F'0'
@NM00152 DC    F'16777215'
         ORG   VERIMBR+120
@NM00153 DS    CL20
         ORG   @NM00153
@NM00154 DC    CL8'SCRSIZE '
@NM00155 DC    H'7'
@NM00156 DC    CL1' '
@NM00157 DC    B'11111000'
@NM00158 DC    AL4(RSTDSCRN)
@NM00159 DC    CL4'    '
         ORG   VERIMBR+140
@NM00160 DS    CL20
         ORG   @NM00160
@NM00161 DC    CL8'CHNLEN  '
@NM00162 DC    H'8'
@NM00163 DC    CL1' '
@NM00164 DC    B'01111100'
@NM00165 DC    F'1'
@NM00166 DC    F'10'
         ORG   VERIMBR+160
@NM00167 DS    CL20
         ORG   @NM00167
@NM00168 DC    CL8'MODE    '
@NM00169 DC    H'9'
@NM00170 DC    CL1' '
@NM00171 DC    B'10000000'
@NM00172 DC    AL4(RSTDMODE)
@NM00173 DC    CL4'    '
         ORG   VERIMBR+180
@NM00174 DS    CL20
         ORG   @NM00174
@NM00175 DC    CL8'MODESW  '
@NM00176 DC    H'10'
@NM00177 DC    CL1' '
@NM00178 DC    B'10000000'
@NM00179 DC    AL4(RSTDMDSW)
@NM00180 DC    CL4'    '
         ORG   VERIMBR+200
@NM00181 DS    CL20
         ORG   @NM00181
@NM00182 DC    CL8'CONFTXT '                                   ZP60007
@NM00183 DC    H'11'
@NM00184 DC    CL1' '
@NM00185 DC    B'10000000'                                     ZP60007
@NM00186 DC    AL4(RSTDMDSW)                                   ZP60007
@NM00187 DC    CL4'    '
         ORG   VERIMBR+220
@NM00188 DS    CL20
         ORG   @NM00188
@NM00189 DC    CL8'RCFBDUMP'
@NM00190 DC    H'12'
@NM00191 DC    CL1' '
@NM00192 DC    B'00001000'
@NM00193 DC    CL4'    '
@NM00194 DC    CL4'    '
         ORG   VERIMBR+240
@NM00195 DS    CL20
         ORG   @NM00195
@NM00196 DC    CL8'RCFBDUMP'
@NM00197 DC    H'13'
@NM00198 DC    CL1' '
@NM00199 DC    B'00001000'
@NM00200 DC    CL4'    '
@NM00201 DC    CL4'    '
         ORG   VERIMBR+260
@NM00202 DS    CL20
         ORG   @NM00202
@NM00203 DC    CL8'RCFBDUMP'
@NM00204 DC    H'14'
@NM00205 DC    CL1' '
@NM00206 DC    B'00001000'
@NM00207 DC    CL4'    '
@NM00208 DC    CL4'    '
         ORG   VERIMBR+280
@NM00209 DS    CL20
         ORG   @NM00209
@NM00210 DC    CL8'RCFBDUMP'
@NM00211 DC    H'15'
@NM00212 DC    CL1' '
@NM00213 DC    B'00001000'
@NM00214 DC    CL4'    '
@NM00215 DC    CL4'    '
         ORG   VERIMBR+300
@NM00216 DS    CL20
         ORG   @NM00216
@NM00217 DC    CL8'RCFBDUMP'
@NM00218 DC    H'16'
@NM00219 DC    CL1' '
@NM00220 DC    B'00001000'
@NM00221 DC    CL4'    '
@NM00222 DC    CL4'    '
         ORG   VERIMBR+320
@NM00223 DS    CL20
         ORG   @NM00223
@NM00224 DC    CL8'RCFBDUMP'
@NM00225 DC    H'17'
@NM00226 DC    CL1' '
@NM00227 DC    B'00001000'
@NM00228 DC    CL4'    '
@NM00229 DC    CL4'    '
         ORG   VERIMBR+340
@NM00230 DS    CL20
         ORG   @NM00230
@NM00231 DC    CL8'RCFBDUMP'
@NM00232 DC    H'18'
@NM00233 DC    CL1' '
@NM00234 DC    B'00001000'
@NM00235 DC    CL4'    '
@NM00236 DC    CL4'    '
         ORG   VERIMBR+360
@NM00237 DS    CL20
         ORG   @NM00237
@NM00238 DC    CL8'RCFBDUMP'
@NM00239 DC    H'19'
@NM00240 DC    CL1' '
@NM00241 DC    B'00001000'
@NM00242 DC    CL4'    '
@NM00243 DC    CL4'    '
         ORG   VERIMBR+380
@NM00244 DS    CL20
         ORG   @NM00244
@NM00245 DC    CL8'RCFBDUMP'
@NM00246 DC    H'20'
@NM00247 DC    CL1' '
@NM00248 DC    B'00001000'
@NM00249 DC    CL4'    '
@NM00250 DC    CL4'    '
         ORG   VERIMBR+400
@NM00251 DS    CL20
         ORG   @NM00251
@NM00252 DC    CL8'RCFBDUMP'
@NM00253 DC    H'21'
@NM00254 DC    CL1' '
@NM00255 DC    B'00001000'
@NM00256 DC    CL4'    '
@NM00257 DC    CL4'    '
         ORG   VERIMBR+420
@NM00258 DS    CL20
         ORG   @NM00258
@NM00259 DC    CL8'RCFBDUMP'
@NM00260 DC    H'22'
@NM00261 DC    CL1' '
@NM00262 DC    B'00001000'
@NM00263 DC    CL4'    '
@NM00264 DC    CL4'    '
         ORG   VERIMBR+440
@NM00265 DS    CL20
         ORG   @NM00265
@NM00266 DC    CL8'RCFBDUMP'
@NM00267 DC    H'23'
@NM00268 DC    CL1' '
@NM00269 DC    B'00001000'
@NM00270 DC    CL4'    '
@NM00271 DC    CL4'    '
         ORG   VERIMBR+460
@NM00272 DS    CL20
         ORG   @NM00272
@NM00273 DC    CL8'RCFBDUMP'
@NM00274 DC    H'24'
@NM00275 DC    CL1' '
@NM00276 DC    B'00001000'
@NM00277 DC    CL4'    '
@NM00278 DC    CL4'    '
         ORG   VERIMBR+480
@NM00279 DS    CL20
         ORG   @NM00279
@NM00280 DC    CL8'RCFBDUMP'
@NM00281 DC    H'25'
@NM00282 DC    CL1' '
@NM00283 DC    B'00001000'
@NM00284 DC    CL4'    '
@NM00285 DC    CL4'    '
         ORG   VERIMBR+500
@NM00286 DS    CL20
         ORG   @NM00286
@NM00287 DC    CL8'RCFBDUMP'
@NM00288 DC    H'26'
@NM00289 DC    CL1' '
@NM00290 DC    B'00001000'
@NM00291 DC    CL4'    '
@NM00292 DC    CL4'    '
         ORG   VERIMBR+520
@NM00293 DC    X'FF'
         ORG   VERIMBR+521
IKTCAS54 CSECT
PARMLIB  DCB   DSORG=PS,MACRF=GM,EXLST=EXITLST1,EODAD=EOF,            XX
               SYNAD=SYNAD1,EROPT=ACC,DDNAME=PARMLIB
EXITLST1 DS    0F
         DC    X'07'
         DC    AL3(JFCBAREA)
         DC    X'91'
         DC    AL3(DCBABND1)
JFCBAREA DS    0F,CL176
SYNAD1   DS    0F
         MVI   SYNADSW1,C'Y'       TURN SW ON
         RETURN
DCBABND1 DS    0F
         MVI   DCBABSW1,C'Y'      SHOW EXIT ENTERED
         TM    3(1),B'00000100'   IGNORE BIT ON
         BZ    *+12               NO
         MVI   3(1),4             YES - IGNORE ERROR
         B     *+8                EXIT
         MVI   3(1),0             ACCEPT ABEND
         RETURN
IKTCAS54 CSECT
PRINTOUT DCB   DSORG=PS,MACRF=PM,EXLST=EXITLST2,LRECL=133,RECFM=FA,   XX
               SYNAD=SYNAD2,EROPT=ACC,DDNAME=PRINTOUT,BLKSIZE=133
SYNAD2   DS    0F
         MVI   SYNADSW2,C'Y'
         RETURN
EXITLST2 DS    0F
         DC    X'91'
         DC    AL3(DCBABND2)
DCBABND2 DS    0F
         MVI   DCBABSW2,C'Y'
         TM    3(1),B'00000100'
         BZ    *+12
         MVI   3(1),4
         B     *+8
         MVI   3(1),0
         RETURN
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKTCAS54 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TABLEPTR EQU   @05
RSTDPTR  EQU   @04
SAVEPTR  EQU   @02
K        EQU   @02
J        EQU   @04
I        EQU   @06
SCANPTR  EQU   @03
PRNTPTR  EQU   @07
TEMPPTR  EQU   @03
JFCBPTR  EQU   @04
DCBPTR   EQU   @02
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
MLPMPTR  EQU   @09
TWAPTR   EQU   @11
R14      EQU   @14
R15      EQU   @15
PRNTCHAR EQU   0
WORKCHAR EQU   0
DATA2    EQU   0
DATA4    EQU   0
DATA6    EQU   0
DATA7    EQU   0
DATA9    EQU   0
DATA11   EQU   0
DATABUF  EQU   0
@NM00007 EQU   0
MSGDATA  EQU   @NM00007+4
MSGBLK   EQU   0
MLPMPML  EQU   0
MLPMFL1  EQU   MLPMPML
MLPMWPM  EQU   MLPMFL1
MLPMUPTB EQU   MLPMFL1
MLPMRLIB EQU   MLPMFL1
MLPMBUF  EQU   MLPMFL1
MLPMCIB  EQU   MLPMFL1
MLPMFL2  EQU   MLPMPML+1
MLPMINV  EQU   MLPMFL2
MLPMUZ   EQU   MLPMFL2
MLPMUNZ  EQU   MLPMFL2
MLPMFS   EQU   MLPMFL2
MLPMSIC  EQU   MLPMFL2
MLPMIGN  EQU   MLPMFL2
MLPMSCA  EQU   MLPMPML+4
SAVAREA  EQU   0
SAVECHAR EQU   SAVAREA
RSTDNAME EQU   0
RSTDCHAR EQU   RSTDNAME
SCANTBL  EQU   0
TBLNAME  EQU   SCANTBL
TBLNAME1 EQU   TBLNAME
TBLDISP  EQU   SCANTBL+8
TBLFLAG  EQU   SCANTBL+11
TBLRSTD  EQU   TBLFLAG
TBLNUMRC EQU   TBLFLAG
TBLBINRY EQU   TBLFLAG
TBLRIGHT EQU   TBLFLAG
TBLZERO  EQU   TBLFLAG
TBLRANGE EQU   TBLFLAG
TBLPTR   EQU   SCANTBL+12
TBLLOW   EQU   TBLPTR
TBLHIGH  EQU   SCANTBL+16
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHPKE    EQU   CHAIN+28
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
CIBNAME  EQU   0
CIBASID  EQU   CIBNAME+10
CIBDATLN EQU   CIBNAME+14
CIBDATA  EQU   CIBNAME+16
IHADCB   EQU   0
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
DCBCNTRL EQU   IHADCS40+12
DCBEROPT EQU   DCBCNTRL
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
TCAST    EQU   0
TCASUSER EQU   TCAST+4
TCASUMAX EQU   TCASUSER+2
TCASACBP EQU   TCAST+8
TCASRCON EQU   TCAST+16
TCASCLSZ EQU   TCAST+18
TCASHBUF EQU   TCAST+20
TCASLBUF EQU   TCAST+24
TCASCRSZ EQU   TCAST+28
TCASCHNL EQU   TCAST+30
TCASFLG1 EQU   TCAST+88
TCASBKMD EQU   TCASFLG1
TCASMDSW EQU   TCASFLG1
TCASCONF EQU   TCASFLG1                                        ZP60007
TCASDUMP EQU   TCAST+132
DMPCD    EQU   0
DMPRCCT  EQU   DMPCD
DMPCD01  EQU   DMPCD+3
DMPCD02  EQU   DMPCD+6
DMPCD03  EQU   DMPCD+9
DMPCD04  EQU   DMPCD+12
DMPCD05  EQU   DMPCD+15
DMPCD06  EQU   DMPCD+18
DMPCD07  EQU   DMPCD+21
DMPCD08  EQU   DMPCD+24
DMPCD09  EQU   DMPCD+27
DMPCD10  EQU   DMPCD+30
DMPCD11  EQU   DMPCD+33
DMPCD12  EQU   DMPCD+36
DMPCD13  EQU   DMPCD+39
DMPCD14  EQU   DMPCD+42
DMPCD15  EQU   DMPCD+45
DMPCD16  EQU   DMPCD+48
TWAR     EQU   0
TWACSCB  EQU   TWAR+16
TWATCAST EQU   TWAR+20
TWAMSG   EQU   TWAR+48
TWAMFL   EQU   TWAR+80
TWAVFL   EQU   TWAR+81
TWAUFL   EQU   TWAR+82
TWACFL   EQU   TWAR+83
TWAM     EQU   TWAR+84
TWAME    EQU   TWAM+68
TWAMEI   EQU   TWAME
TWAV     EQU   TWAR+184
TWAVE    EQU   TWAV+68
TWAVEI   EQU   TWAVE
TWAVI    EQU   TWAR+284
TWAU     EQU   TWAR+300
TWAUE    EQU   TWAU+68
TWAUEI   EQU   TWAUE
TWAUI    EQU   TWAR+400
TWAC     EQU   TWAR+408
TWACE    EQU   TWAC+68
TWACEI   EQU   TWACE
TWACI    EQU   TWAR+508
CIBPTR   EQU   CHCIBP
CSCBPTR  EQU   TWACSCB
TCASTPTR EQU   TWATCAST
WRKPRMF  EQU   WORKPARM
WRKPRMF1 EQU   WRKPRMF
WRKPRMF2 EQU   WRKPRMF+4
WRKPRMH  EQU   WRKPRMF2+2
WRKPRMC  EQU   WRKPRMH+1
IKT013I  EQU   MSGDATA
IKT014I  EQU   MSGDATA
IKT017I  EQU   MSGDATA
IKT018I  EQU   MSGDATA
SAVAREAB EQU   SAVAREA
SAVAREAF EQU   SAVAREAB+4
SAVAREAH EQU   SAVAREAF+2
SAVAREAC EQU   SAVAREAH+1
SAVAREAD EQU   SAVAREA
SAVAREAI EQU   SAVAREAD+5
VTAMRC   EQU   SAVAREAI
VTAMFB   EQU   SAVAREAI+1
SDUMP    EQU   SAVAREAI+2
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBSPNM EQU   JFCBS001+45
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCRSV41 EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00327 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00326 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00325 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00300 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
@NM00047 EQU   SAVAREAD
@NM00046 EQU   SAVAREAH
@NM00045 EQU   SAVAREAF
@NM00044 EQU   SAVAREAB
@NM00003 EQU   WRKPRMH
@NM00002 EQU   WRKPRMF2
TWAEND   EQU   TWAR+536
TWAWORKE EQU   TWAR+524
@NM00340 EQU   TWACI+13
TWACSKIP EQU   TWACI+12
TWACMODQ EQU   TWACI+8
TWACSTPQ EQU   TWACI+4
TWACECB  EQU   TWACI
TWACERRS EQU   TWACE+4
TWACERA  EQU   TWACEI+1
TWACEIFC EQU   TWACEI
TWACRTFC EQU   TWAC+60
TWACABFC EQU   TWAC+56
TWACTWA  EQU   TWAC+52
TWACEWA  EQU   TWAC+4
TWACID   EQU   TWAC
TWAUACQH EQU   TWAUI+4
TWAUECB  EQU   TWAUI
TWAUERRS EQU   TWAUE+4
TWAUERA  EQU   TWAUEI+1
TWAUEIFC EQU   TWAUEI
TWAURTFC EQU   TWAU+60
TWAUABFC EQU   TWAU+56
TWAUTWA  EQU   TWAU+52
TWAUEWA  EQU   TWAU+4
TWAUID   EQU   TWAU
TWAVACQH EQU   TWAVI+12
TWAVTHQH EQU   TWAVI+8
TWAVTEQH EQU   TWAVI+4
TWAVECB  EQU   TWAVI
TWAVERRS EQU   TWAVE+4
TWAVERA  EQU   TWAVEI+1
TWAVEIFC EQU   TWAVEI
TWAVRTFC EQU   TWAV+60
TWAVABFC EQU   TWAV+56
TWAVTWA  EQU   TWAV+52
TWAVEWA  EQU   TWAV+4
TWAVID   EQU   TWAV
TWAMERRS EQU   TWAME+4
TWAMERA  EQU   TWAMEI+1
TWAMEIFC EQU   TWAMEI
TWAMRTFC EQU   TWAM+60
TWAMABFC EQU   TWAM+56
TWAMTWA  EQU   TWAM+52
TWAMEWA  EQU   TWAM+4
TWAMID   EQU   TWAM
@NM00339 EQU   TWACFL
TWACFL4  EQU   TWACFL
TWACFL2  EQU   TWACFL
TWACFL1  EQU   TWACFL
@NM00338 EQU   TWAUFL
TWAUFL4  EQU   TWAUFL
TWAUFL3  EQU   TWAUFL
TWAUFL2  EQU   TWAUFL
TWAUFL1  EQU   TWAUFL
@NM00337 EQU   TWAVFL
TWAVFL6  EQU   TWAVFL
TWAVFL5  EQU   TWAVFL
TWAVFL4  EQU   TWAVFL
TWAVFL3  EQU   TWAVFL
TWAVFL2  EQU   TWAVFL
TWAVFL1  EQU   TWAVFL
@NM00336 EQU   TWAMFL
TWAMFL1  EQU   TWAMFL
TWACCOMP EQU   TWAR+76
TWAUCOMP EQU   TWAR+72
TWAVCOMP EQU   TWAR+68
TWAMECB  EQU   TWAR+64
TWACTCB  EQU   TWAR+60
TWAUTCB  EQU   TWAR+56
TWAVTCB  EQU   TWAR+52
TWADEQAS EQU   TWAR+44
TWAEESR  EQU   TWAR+40
TWAPPSR  EQU   TWAR+36
TWATCSR  EQU   TWAR+32
TWATTSR  EQU   TWAR+28
TWAINIT  EQU   TWAR+24
TWAASCB  EQU   TWAR+12
TWAPASQH EQU   TWAR+8
TWASYNQH EQU   TWAR+4
TWARSON  EQU   TWAR+2
TWACOMP  EQU   TWAR
DMPOP16  EQU   DMPCD16+2
DMPFB16  EQU   DMPCD16+1
DMPRC16  EQU   DMPCD16
DMPOP15  EQU   DMPCD15+2
DMPFB15  EQU   DMPCD15+1
DMPRC15  EQU   DMPCD15
DMPOP14  EQU   DMPCD14+2
DMPFB14  EQU   DMPCD14+1
DMPRC14  EQU   DMPCD14
DMPOP13  EQU   DMPCD13+2
DMPFB13  EQU   DMPCD13+1
DMPRC13  EQU   DMPCD13
DMPOP12  EQU   DMPCD12+2
DMPFB12  EQU   DMPCD12+1
DMPRC12  EQU   DMPCD12
DMPOP11  EQU   DMPCD11+2
DMPFB11  EQU   DMPCD11+1
DMPRC11  EQU   DMPCD11
DMPOP10  EQU   DMPCD10+2
DMPFB10  EQU   DMPCD10+1
DMPRC10  EQU   DMPCD10
DMPOP09  EQU   DMPCD09+2
DMPFB09  EQU   DMPCD09+1
DMPRC09  EQU   DMPCD09
DMPOP08  EQU   DMPCD08+2
DMPFB08  EQU   DMPCD08+1
DMPRC08  EQU   DMPCD08
DMPOP07  EQU   DMPCD07+2
DMPFB07  EQU   DMPCD07+1
DMPRC07  EQU   DMPCD07
DMPOP06  EQU   DMPCD06+2
DMPFB06  EQU   DMPCD06+1
DMPRC06  EQU   DMPCD06
DMPOP05  EQU   DMPCD05+2
DMPFB05  EQU   DMPCD05+1
DMPRC05  EQU   DMPCD05
DMPOP04  EQU   DMPCD04+2
DMPFB04  EQU   DMPCD04+1
DMPRC04  EQU   DMPCD04
DMPOP03  EQU   DMPCD03+2
DMPFB03  EQU   DMPCD03+1
DMPRC03  EQU   DMPCD03
DMPOP02  EQU   DMPCD02+2
DMPFB02  EQU   DMPCD02+1
DMPRC02  EQU   DMPCD02
DMPOP01  EQU   DMPCD01+2
DMPFB01  EQU   DMPCD01+1
DMPRC01  EQU   DMPCD01
@NM00335 EQU   DMPCD+1
TCASTEND EQU   TCAST+148
TCASTTYO EQU   TCAST+144
TCAS767O EQU   TCAST+140
TCAS767I EQU   TCAST+136
TCASSCHD EQU   TCAST+128
TCASTPND EQU   TCAST+124
TCASOMJR EQU   TCAST+120
@NM00334 EQU   TCAST+118
TCASBR14 EQU   TCAST+116
TCASATTN EQU   TCAST+112
TCASASCI EQU   TCAST+108
TCASTTQH EQU   TCAST+104
@NM00333 EQU   TCAST+102
@NM00332 EQU   TCAST+100
@NM00331 EQU   TCAST+98
@NM00330 EQU   TCAST+96
TCASASCB EQU   TCAST+92
TCASFLG4 EQU   TCAST+91
TCASFLG3 EQU   TCAST+90
TCASFLG2 EQU   TCAST+89
@NM00329 EQU   TCASFLG1
TCASNACT EQU   TCASFLG1
TCASVSD  EQU   TCASFLG1
TCASABND EQU   TCASFLG1
TCASLTE  EQU   TCAST+84
TCASEXIT EQU   TCAST+80
TCASOQM  EQU   TCAST+76
TCASIQM  EQU   TCAST+72
TCASTSB  EQU   TCAST+68
TCASTTL  EQU   TCAST+64
TCASWA   EQU   TCAST+60
TCASFRR  EQU   TCAST+56
TCASMSGS EQU   TCAST+52
TCASDATO EQU   TCAST+48
TCASDATI EQU   TCAST+44
TCASXECB EQU   TCAST+40
TCASTID  EQU   TCAST+32
@NM00328 EQU   TCAST+31
TCASUSEC EQU   TCASUSER
TCASID   EQU   TCAST
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00324 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00323 EQU   IHADCS40+16
DCBCNTRA EQU   DCBCNTRL+1
@NM00322 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
DCBLRECL EQU   IHADCS40+10
@NM00321 EQU   IHADCS40+9
@NM00320 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00319 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
@NM00318 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00317 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00316 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00315 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00314 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00313 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBSYNA  EQU   DCBSYNAD+1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
DCBOPTJ  EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00312 EQU   DCBPUT
DCBDEBA  EQU   DCBDEBAD+1
@NM00311 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00310 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00309 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00308 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00307 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00306 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00305 EQU   DCBDSRG1
@NM00304 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
@NM00303 EQU   IHADCB
@NM00302 EQU   CIBNAME+13
CIBCONID EQU   CIBNAME+12
CIBTJID  EQU   CIBASID
@NM00301 EQU   CIBNAME+6
CIBLEN   EQU   CIBNAME+5
CIBVERB  EQU   CIBNAME+4
CIBNEXT  EQU   CIBNAME
CHARSV16 EQU   CHSHORT+100
CHARSV15 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00299 EQU   CHSHORT+84
@NM00298 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00297 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHUCMP   EQU   CHAIN+29
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPCOI   EQU   CHPARM
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
@NM00296 EQU   TBLFLAG
@NM00295 EQU   SCANTBL+10
@NM00294 EQU   TBLNAME+1
@NM00088 EQU   RSTDNAME+1
@NM00043 EQU   SAVAREA+1
@NM00010 EQU   MLPMPML+2
MLPMERR  EQU   MLPMFL2
@NM00009 EQU   MLPMFL2
MLPMSTRT EQU   MLPMFL1
@NM00008 EQU   MLPMFL1
MSGLNGTH EQU   @NM00007
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00169 EQU   @EL00002
@RT00203 EQU   @EL00003
@RC00270 EQU   @EL00003
@RF00269 EQU   @EL00003
@RT00281 EQU   @EL00004
@RF00285 EQU   @EL00004
@RT00296 EQU   @EL00005
@RT00348 EQU   SYNAD
@RC00428 EQU   @RC00426
@RF00416 EQU   @EL00005
@RF00475 EQU   @EL00007
@RT00491 EQU   @EL00008
@RT00551 EQU   @EL00009
@RC00658 EQU   @EL00011
@RT00683 EQU   @EL00012
@RF00686 EQU   @EL00012
@RF00716 EQU   @EL00013
@RT00745 EQU   @EL00014
@RC00723 EQU   @EL00014
@RF00777 EQU   @EL00014
@RF00793 EQU   @EL00015
@RF00804 EQU   @EL00016
@RC00849 EQU   @EL00017
@RC00173 EQU   @RC00169
@ENDDATA EQU   *
         END   IKTCAS54,(C'PLS2030',0702,79255)
/*
//*
//STEP3   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKTCAS54('ZP60007')
++ZAP(IKTXINIT) DISTLIB(AOST4).
 NAME IKTXINIT
 IDRDATA ZP60007
VER 001A 05C0                BALR  @12,0
VER 058E D23F,9000,CB54      MVC   ISTNIB(64,@09),DUMNIB
VER 0594 D207,900C,1068      MVC   NIBSYM(8,@09),TSBTRMID(@01)
VER 059A 58A0,A03C           L     @10,ASCBTSB(,@10)
VER 059E 50A0,9008           ST    @10,NIBUSER(,@09)
VER 05A2 9504,F048           CLI   TSBXTMTP(@15),4
VER 09FC 0000,0000  PATAREA  ***   PATCH AREA   ***
VER 0A00 0000,0000           ***   PATCH AREA   ***
VER 0A04 0000,0000           ***   PATCH AREA   ***
VER 0A08 0000,0000           ***   PATCH AREA   ***
VER 0A0C 0000,0000           ***   PATCH AREA   ***
VER 0A10 0000,0000           ***   PATCH AREA   ***
VER 0A14 0000,0000           ***   PATCH AREA   ***
VER 0B70 D000       DUMNIB   NIB
VER 0B94 0201                (CHECK CONFTXT IS ON)
REP 059E 47F0,C9E0           B     PATAREA
REP 09FC 50A0,9008           ST    @10,NIBUSER(,@09)
REP 0A00 58A0,0010           L     @10,CVTPTR
REP 0A04 58A0,A3F4           L     @10,CVTTCASP
REP 0A08 9101,A058           TM    TCASFLG1,TCASCONF
REP 0A0C 4710,C586           BO    **BACK-TO-INLINE-CODE**
REP 0A10 94FE,9025           NI    PROPROC2,255-PROCFTX
REP 0A14 47F0,C586           B     **BACK-TO-INLINE-CODE**
++MACUPD(IKTTCAST) DISTLIB(ATSOMAC).
./ CHANGE NAME=IKTTCAST
TCASCONF EQU   X'01'              RESTRICTED BUFFERS           ZP60007  04009000
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP4   EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60007)
          .
/*
//*
//STEP5CK EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60007)
        CHECK
        .
/*
//*
//STEP5   EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60007)
        DIS(WRITE)
        .
/*
//
//ZP60008  JOB (SYSGEN),'J04 M23: ZP60008',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  ADD EWA AND WSF SUPPORT FOR LOCAL NON-SNA 3270 TO VTAM.
//*
//STEP1   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
++USERMOD(ZP60008)         /* ADD VTAM EWA AND WSF SUPPORT */  .
++VER(Z038) FMID(EVT0108)
 /*
   PROBLEM DESCRIPTION:
     ERASE/WRITE ALTERNATE AND WRITE STRUCTURED FIELD NOT SUPPORTED.
       VTAM APPLICATIONS CANNOT USE EXTENDED 3270 FACILITIES SINCE
       VTAM DOES NOT SUPPORT THE WRITE STRUCTURED FIELD (WSF)
       COMMAND NECESSARY TO ISSUE A READ PARTITION (QUERY) TO THE
       TERMINAL, AND THE ERASE/WRITE ALTERNATE (EWA) COMMAND
       NECESSARY TO SWITCH A 3270 SCREEN INTO ITS ALTERNATE AND
       USUALLY LARGER SCREEN SIZE.

       THIS USERMOD ADDS SUPPORT TO VTAM FOR THE WSF AND EWA COMMANDS
       FOR LOCAL NON-SNA 3270 TERMINALS ONLY.  THE RELEVANT COMMAND
       CODES (X'7E' FOR EWA AND X'F3' FOR WSF) HAVE NON-ZERO ENTRIES
       INSERTED INTO THE TRANSLATE TABLE OF THE 3270 SEND/RECEIVE LOCAL
       TRANSLATION CONTROLLER ISTZBF0L WHICH ARE DECODED BY THE 3270
       LOCAL WRITE CCW PROCESSOR ISTZBFBA SO THAT THE CORRECT CCW
       OPCODES ARE SET.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.
     DOC:
       WSF AND EWA ARE NOW VALID VTAM WRITE COMMANDS FOR LOCAL NON-SNA
       3270 TERMINALS.  IT IS UP TO THE VTAM APPLICATION TO DETERMINE
       IF THE USE OF EITHER OF THESE COMMANDS IS APPROPRIATE FOR THE
       3270 HARDWARE (OR EMULATION(S) THEREOF) INVOLVED.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 8.
       THE ZAP DOES NOT VERIFY THAT THE TRANSLATE TABLE ENTRIES BEING
       REPLACED ARE NULL, SO THIS USERMOD CAN BE REAPPLIED IF NECESSARY.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       ISTZBFBA
       ISTZBF0L
 */.
++MOD(ISTZBFBA) DISTLIB(AOS24).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSALLDA,
//             SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//*
//STEP2   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'ISTZBFBA/ABA-VS1/MBA-VS2 - 3270 LOCAL WRITE CCW PROCESS*
               SOR      '
*
*  MODIFIED BY GREG PRICE 15TH DECEMBER 2002 FOR USERMOD ZP60008
*           TO ADD EWA AND WSF SUPPORT FOR LOCAL NON-SNA 3270
*
ISTZBFBA CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTZBFBA  75.153'                                 0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
*                                                                  0536
*/* TPZSAVE (8,12,14) AC(BCBA)BASE                                   */
*                                                                  0536
*   DO;                                                            0536
*     RFY                                                          0537
*      (GPR01P,                                                    0537
*       GPR12P,                                                    0537
*       GPR13P,                                                    0537
*       GPR14P) RSTD;                                              0537
*     GEN(PRINT OFF);                                              0538
*                                                                  0538
         PRINT OFF
*/* ATBUILD (ISTZSAVE)                                               */
*/* END OF ATBUILD                                                   */
*                                                                  0539
*     GEN(PRINT ON);                                               0539
         PRINT ON
*     RFY                                                          0540
*       ISTZSAVE BASED(GPR13P);                                    0540
*     GEN SETS(ZSAZSVVR)(STM   8,12,ZSAZSVVR+4(13));               0541
         STM   8,12,ZSAZSVVR+4(13)
*     GEN SETS(GPR12P);                                            0542
         BALR  GPR12P,0
@TSTART  DS    0H
         USING @TSTART,GPR12P
*     GEN(PRINT OFF);                                              0543
*                                                                  0543
         PRINT OFF
*/* ATBUILD (ISTZCRR,ISTRPH,ISTCRA) EJECT(NO)                        */
*/* END OF ATBUILD                                                   */
*                                                                  0544
*     GEN(PRINT ON);                                               0544
         PRINT ON
*     GPR01P->RPHCRR->CRACRR->ZCREBCBA='1'B;                       0545
         L     @15,RPHCRR(,GPR01P)                                 0545
         L     @15,CRACRR(,@15)                                    0545
         OI    ZCREBCBA(@15),B'00100000'                           0545
*     ZSAZACTV='1'B;                                               0546
         OI    ZSAZACTV(GPR13P),B'10000000'                        0546
*     ZSAZTRAC='BCBA';                                             0547
         MVC   ZSAZTRAC(4,GPR13P),@CC04296                         0547
*     ZSAZSVRR=GPR14P;                                             0548
         ST    GPR14P,ZSAZSVRR(,GPR13P)                            0548
*     GPR13P=ZSAZSVFC;                                             0549
         L     GPR13P,ZSAZSVFC(,GPR13P)                            0549
*     RFY                                                          0550
*      (GPR01P) UNRSTD;                                            0550
*     RFY                                                          0551
*      (GPR14P) UNRSTD;                                            0551
*   END;                                                           0552
*                                                                  0552
*/* END TPZSAVE                                                      */
*                                                                  0553
*   ZLBLNG2=ZLBLNG1;                /* SET ZLB LENGTH                */
         LH    @09,ZLBLNG1(,PTRZLB)                                0553
         N     @09,@CF04326                                        0553
         STH   @09,ZLBLNG2(,PTRZLB)                                0553
*   FDBDATAA=ADDR(ZLBTEXT1);        /* SET DATA ADDRESS              */
         LA    @09,ZLBTEXT1(,PTRZLB)                               0554
         ST    @09,FDBDATAA(,PTRZLB)                               0554
*   FDBDATCT=0;                     /* SET DATA COUNT TO ZERO        */
         SLR   @09,@09                                             0555
         STH   @09,FDBDATCT(,PTRZLB)                               0555
*   ZLBLSTST=ZCRBFPTR;              /* SET LAST BUFFER POINTER       */
         L     @09,RPHCRR(,PTRRPH)                                 0556
         L     @09,CRACRR(,@09)                                    0556
         L     @09,ZCRBFPTR(,@09)                                  0556
         ST    @09,ZLBLSTST(,PTRZLB)                               0556
*   IF FMCMODE=FMCRCD THEN                                         0557
         CLC   FMCMODE(8,PTRFMC),@CC03533                          0557
         BE    @RT00557                                            0557
*     ;                             /* IF RECORD, IGNORE CHECK     0558
*                                                            #3270S/R*/
*   ELSE                            /* ELSE CHECK DIALOG SEQ #3270S/R*/
*     IF LCCWSI='1'B                /* IF START DIALOG               */
*         &FMCZFA06='1'B THEN       /* & DEVICE IN DIALOG            */
         L     @09,LCPNXLCW(,PTRLCP)                               0559
         TM    LCCWSI(@09),B'10000000'                             0559
         BNO   @RF00559                                            0559
************************************** START OF BLOCK 1 OF 5 ZP60008 **
         TM    LCCWSD(@09),B'01000000' ALSO END DIALOG?               *
         BO    @RF00565                YES, REALLY EWA OR WSF         *
************************************** END OF BLOCK 1 OF 5 ZP60008 ****
         TM    FMCZFA06(PTRFMC),B'00000100'                        0559
         BNO   @RF00559                                            0559
*       DO;                         /* SET CONFLICTING DIALOG ERR    */
*         LCPZRT00='1'B;            /* INDICATE LOGICAL ERROR        */
         OI    LCPZRT00(PTRLCP),B'10000000'                        0561
*         LCPMNRCD=FRMCDITS;        /* INDICATE CONFLICTING DIALOG   */
         MVI   LCPMNRCD(PTRLCP),X'A6'                              0562
*       END;                        /* DIALOG SEQUENCE ERROR         */
*     ELSE                                                         0564
*       ;                           /* NOT DIALOG SEQUENCE ERROR     */
@RF00559 DS    0H                                                  0565
*   IF LCCWSD='1'B THEN             /* IF END DIALOG SPECIFIED       */
@RT00557 L     @09,LCPNXLCW(,PTRLCP)                               0565
         TM    LCCWSD(@09),B'01000000'                             0565
         BNO   @RF00565                                            0565
************************************** START OF BLOCK 2 OF 5 ZP60008 **
         TM    LCCWSI(@09),B'10000000' ALSO START DIALOG?             *
         BO    @RF00565                YES, REALLY EWA OR WSF         *
************************************** END OF BLOCK 2 OF 5 ZP60008 ****
*     IF LCCWMODE=LMM               /* IF MESSAGE MODE               */
*          LCCWRWOP=LWR THEN        /*   WRITE CONVERSATIONAL        */
         TM    LCCWMODE(@09),B'00001000'                           0566
         BNO   @GL00002                                            0566
         TM    LCCWMODE(@09),B'00000100'                           0566
         BZ    @RT00566                                            0566
@GL00002 L     @09,LCPNXLCW(,PTRLCP)                               0566
         TM    LCCWRWOP(@09),B'00000001'                           0566
         BNO   @RF00566                                            0566
         TM    LCCWRWOP(@09),B'00111110'                           0566
         BNZ   @RF00566                                            0566
@RT00566 DS    0H                                                  0567
*       DO;                         /* SET CONFLICTING DIALOG ERR    */
*         LCPZRT00='1'B;            /* INDICATE LOGICAL ERROR        */
         OI    LCPZRT00(PTRLCP),B'10000000'                        0568
*         LCPMNRCD=FRMCDITS;        /* INDICATE CONFLICTING DIALOG   */
         MVI   LCPMNRCD(PTRLCP),X'A6'                              0569
*       END;                        /* DIALOG SEQUENCE ERROR         */
*     ELSE                          /* NOT MSG MODE OR WR CONV.      */
*       DO;                         /* TURN ON THE FLAGS             */
         B     @RC00566                                            0571
@RF00566 DS    0H                                                  0572
*         ZLBRT02='1'B;             /* INDICATE EOB                  */
*         ZLBRT05='1'B;             /* INDICATE DECREMENT COUNT      */
*         ZLBRT06='1'B;             /* INDICATE WRITE REQUEST        */
*         ZLBRT07='1'B;             /* INDICATE SCHEDULE             */
         OI    ZLBRT02(PTRZLB),B'00100111'                         0575
*         ZCRTPDIS='1'B;            /* INDICATE DO DISCONNECT        */
         L     @09,RPHCRR(,PTRRPH)                                 0576
         L     @09,CRACRR(,@09)                                    0576
         OI    ZCRTPDIS(@09),B'00100000'                           0576
*       END;                        /* END FLAG SETTING              */
*   ELSE                            /* END DIALOG NOT SPECIFIED      */
*     DO;                           /* TURN OFF DISCONNECT PENDING   */
         B     @RC00565                                            0578
@RF00565 DS    0H                                                  0579
*       FMCZFD06='0'B;              /* FMCB DISCONNECT NOT PENDING   */
         NI    FMCZFD06(PTRFMC),B'01111111'                        0579
*     END;                          /* DISCONNECT NOT PENDING        */
*   IF LCPZRT00='1'B                /* IF LOGICAL ERROR              */
*        LCPZRT01='1'B THEN                                        0581
@RC00565 TM    LCPZRT00(PTRLCP),B'11000000'                        0581
         BNZ   @RT00581                                            0581
*     ;                             /*   CONTROL BLOCK ERROR THEN NO
*                                      FURTHER WORK REQ'D            */
*   ELSE                            /* ERROR FLAGS NOT SET           */
*     DO;                           /* NO PRELIMINARY ERROR          */
*       IF FMCMODE=FMCRCD THEN                                     0584
         CLC   FMCMODE(8,PTRFMC),@CC03533                          0584
         BNE   @RF00584                                            0584
*         DO;                       /* IF RECORD MODE        #3270S/R*/
*           FMCOSSN=FMCOSSN+1;      /* INCREMENT SEQ NO      #3270S/R*/
         LA    @09,1                                               0586
         LH    @00,FMCOSSN(,PTRFMC)                                0586
         N     @00,@CF04326                                        0586
         ALR   @09,@00                                             0586
         STH   @09,FMCOSSN(,PTRFMC)                                0586
*           LCPSEQ=FMCOSSN;         /* SEQ NO IN LCPB        #3270S/R*/
         STH   @09,LCPSEQ(,PTRLCP)                                 0587
*         END;                      /* END RECORD MODE       #3270S/R*/
*       ELSE                                                       0589
*         ;                         /* IF NOT RECORD MODE    #3270S/R*/
@RF00584 DS    0H                                                  0590
*       IF LCCWRWOP=LEAU THEN       /* IF ERASE ALL UNPROTECTED      */
         L     @09,LCPNXLCW(,PTRLCP)                               0590
         TM    LCCWRWOP(@09),B'00010001'                           0590
         BNO   @RF00590                                            0590
         TM    LCCWRWOP(@09),B'00101110'                           0590
         BNZ   @RF00590                                            0590
*         DO;                       /* PROCESS ERASE ALL UNPROTECT   */
*           PTRCCW=ADDR(ZLBCCW1);   /* ADDRESS CCW                   */
         LA    PTRCCW,ZLBCCW1(,PTRZLB)                             0592
*           CCWCODE=EAU;            /* SET CCW OP CODE               */
         MVI   CCWCODE(PTRCCW),X'0F'                               0593
*           CCWCOUNT=1;             /* SET CCW COUNT                 */
         MVC   CCWCOUNT(2,PTRCCW),@CH00035                         0594
*           ZLBRT02='1'B;           /* INDICATE EOB                  */
*           ZLBRT05='1'B;           /* INDICATE DECREMENT COUNT      */
*           ZLBRT06='1'B;           /* INDICATE WRITE REQUEST        */
*           ZLBRT07='1'B;           /* INDICATE SCHEDULE             */
         OI    ZLBRT02(PTRZLB),B'00100111'                         0598
*           IF LCCWLSI='1'B THEN    /* IF LCCW SYNCH FLAG ON         */
         TM    LCCWLSI(@09),B'00000100'                            0599
         BNO   @RF00599                                            0599
*             CALL ATCZPSVT->ZPSZBFY0;/* CALL LCCW SYNCH ROUTINE     */
         L     @09,ATCZPSVT(,PTRATC)                               0600
         L     @15,ZPSZBFY0(,@09)                                  0600
         BALR  @14,@15                                             0600
*         END;                      /* END ERASE ALL UNPROTECTED     */
*       ELSE                        /* NOT ERASE ALL UNPROTECTED     */
*         IF LCCWMODE=LMB THEN      /* IF BLOCK MODE                 */
         B     @RC00590                                            0602
@RF00590 L     @09,LCPNXLCW(,PTRLCP)                               0602
         TM    LCCWMODE(@09),B'00000100'                           0602
         BNO   @RF00602                                            0602
         TM    LCCWMODE(@09),B'00001000'                           0602
         BNZ   @RF00602                                            0602
*           DO;                     /* SET INVALID OP CODE ERROR     */
*             LCPZRT01='1'B;        /* INDICATE CONTROL BLOCK ERR    */
         OI    LCPZRT01(PTRLCP),B'01000000'                        0604
*             LCPMNRCD=FRMINVL;     /* INDICATE INVALID OP CODE      */
         MVI   LCPMNRCD(PTRLCP),X'A3'                              0605
*           END;                    /* INVALID OPERATION CODE        */
*         ELSE                                                     0607
*           DO;                     /* NOT BLOCK MODE                */
         B     @RC00602                                            0607
@RF00602 DS    0H                                                  0608
*             IF LCCWCNT=0 THEN                                    0608
         L     @09,LCPNXLCW(,PTRLCP)                               0608
         LH    @09,LCCWCNT(,@09)                                   0608
         N     @09,@CF04326                                        0608
         LTR   @09,@09                                             0608
         BNZ   @RF00608                                            0608
*               DO;                 /* IF COUNT IN CURRENT LCCW=0  0609
*                                                            @XL03XFZ*/
*                 ZLBTEXT1(1)='00'X;/* SET ZERO WCC CHARACTER        */
         MVI   ZLBTEXT1(PTRZLB),X'00'                              0610
*                 FDBDATCT=1;       /* SET COUNT TO INCLUDE WCC      */
         MVC   FDBDATCT(2,PTRZLB),@CH00035                         0611
*               END;                /* END CCW COUNT 0       @XL03HFZ*/
*             ELSE                                                 0613
*               ;                   /* NOT CCW COUNT 0       @XL03HFZ*/
*                                                                  0613
@RF00608 DS    0H                                                  0614
*             /*******************************************************/
*             /*                                                     */
*             /* SEGMENT(WRCCW)REQUEST                               */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0614
*             DO;                                                  0614
*               GOTO WRCCW;                                        0615
         B     WRCCW                                               0615
*WRCCW#:                                                           0616
*             END;                  /* MOVE DATA AND FORMAT CCW      */
WRCCW#   DS    0H                                                  0617
*           END;                    /* END NOT BLOCK MODE            */
*       IF LCCWRFI='1'B             /* IF FEEDBACK REQUIRED          */
*           &ZLBRT03='0'B THEN      /* & NOT WRITE CONVERSATIONAL    */
@RC00602 DS    0H                                                  0618
@RC00590 L     @09,LCPNXLCW(,PTRLCP)                               0618
         TM    LCCWRFI(@09),B'00000010'                            0618
         BNO   @RF00618                                            0618
         TM    ZLBRT03(PTRZLB),B'00010000'                         0618
         BNZ   @RF00618                                            0618
*         DO;                       /* SET FLAGS IN REQ TAG          */
*           ZLBRT02='1'B;           /* INDICATE EOB                  */
*           ZLBRT04='1'B;           /* INDICATE FEEDBACK REQUIRED    */
         OI    ZLBRT02(PTRZLB),B'00101000'                         0621
*         END;                      /* FLAGS SET IN REQUEST TAG      */
*       ELSE                                                       0623
*         ;                         /* FEEDBACK NOT REQUIRED         */
@RF00618 DS    0H                                                  0624
*       ZLBECI='1'B;                /* INDICATE ECI                  */
*       ZLBEBI='0'B;                /* CLEAR EBI FLAG                */
*       ZLBEMI='0'B;                /* CLEAR EMI FLAG                */
*       ZLBETI='0'B;                /* CLEAR ETI FLAG                */
*       ZLBFBMI='0'B;               /* CLEAR FBMI FLAG               */
         OI    ZLBECI(PTRZLB),B'01000000'                          0628
         NI    ZLBEBI(PTRZLB),B'11000011'                          0628
*     END;                          /* END NO PRELIMINARY ERROR      */
*/* TPZRETN                                                          */
*                                                                  0630
*   DO;                                                            0630
@RT00581 DS    0H                                                  0631
*     RFY                                                          0631
*      (GPR08P,                                                    0631
*       GPR14P,                                                    0631
*       GPR15P) RSTD;                                              0631
*     GPR13P=ZSAZSVBC;                                             0632
         L     GPR13P,ZSAZSVBC(,GPR13P)                            0632
*     IF GPR13P=0 THEN                                             0633
         LTR   GPR13P,GPR13P                                       0633
         BZ    @RT00633                                            0633
*       ;                           /* TPDVTS ISTZFARR               */
*     ELSE                                                         0635
*       GPR14P=ZSAZSVRR;                                           0635
         L     GPR14P,ZSAZSVRR(,GPR13P)                            0635
*     GEN REFS(ZSAZSVVR)(LM    8,12,ZSAZSVVR+4(13));               0636
@RT00633 DS    0H                                                  0636
         LM    8,12,ZSAZSVVR+4(13)
*     GEN REFS(GPR14P) EXIT NOSEQFLOW(BR    GPR14P);               0637
         BR    GPR14P
*     RFY                                                          0638
*      (GPR08P,                                                    0638
*       GPR14P,                                                    0638
*       GPR15P) UNRSTD;                                            0638
*   END;                                                           0639
*                                                                  0639
*/* END TPZRETN                                                      */
*                                                                  0640
*   GEN NOSETS NOREFS NODEFS(EJECT);                               0640
         EJECT
*                                                                  0641
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT-                                                         */
*/*      WRCCW                                                       */
*/*                                                                  */
*/* FUNCTION-                                                        */
*/*      MOVE DATA AND FORMAT CCW                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0641
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT(WRCCW)START                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0641
*   DO;                                                            0641
*     GOTO WRCCW@;                                                 0642
         B     WRCCW@                                              0642
*WRCCW:                                                            0643
*   END;                                                           0643
WRCCW    DS    0H                                                  0644
*   RFY                                                            0644
*     PTRG15 RSTD;                  /* FOR RETURN CODE CHECK         */
*   CALL ATCZPSVT->ZPSZDFC0;        /* CALL MOVE DATA ROUTINE        */
         L     @09,ATCZPSVT(,PTRATC)                               0645
         L     @15,ZPSZDFC0(,@09)                                  0645
         BALR  @14,@15                                             0645
*   IF PTRG15=RC00 THEN             /* IF GOOD RETURN CODE           */
         LTR   PTRG15,PTRG15                                       0646
         BNZ   @RF00646                                            0646
*     CALL FORMCCW;                 /* FORMAT THE CCWS               */
         BAL   @14,FORMCCW                                         0647
*   ELSE                            /* DATA MOVE RC ^= 0             */
*                                                                  0648
*     /***************************************************************/
*     /*                                                             */
*     /* IF USER ERROR FOUND                                 @XL03HQV*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0648
*     IF PTRG15=12 THEN             /* USER ERROR -          @XL03HFZ*/
         B     @RC00646                                            0648
@RF00646 C     PTRG15,@CF01716                                     0648
         BNE   @RF00648                                            0648
*       IF FMCMODE=FMCRCD THEN                                     0649
         CLC   FMCMODE(8,PTRFMC),@CC03533                          0649
         BNE   @RF00649                                            0649
*         DO;                       /* IF RECORD MODE        @XL03HFZ*/
*           LCPZRT01='1'B;          /* FLAG CB ERROR         @XL03HFZ*/
         OI    LCPZRT01(PTRLCP),B'01000000'                        0651
*           LCPMNRCD=FRMINDTR;      /* SET FRMINDTR RETURN CODE IN 0652
*                                      LCPB                  @XL03HFZ*/
         MVI   LCPMNRCD(PTRLCP),X'17'                              0652
*         END;                      /* END RECORD MODE       @XL03HFZ*/
*       ELSE                                                       0654
*         DO;                       /* NOT RECORD MODE       @XL03HFZ*/
         B     @RC00649                                            0654
@RF00649 DS    0H                                                  0655
*           LCPZRT00='1'B;          /* LOGIC ERROR           @XL03HQV*/
         OI    LCPZRT00(PTRLCP),B'10000000'                        0655
*           LCPMNRCD=FRMINDAT;      /* INVALID DATA          @XL03HQV*/
         MVI   LCPMNRCD(PTRLCP),X'97'                              0656
*         END;                                                     0657
*     ELSE                                                         0658
*       DO;                         /* NOT USER ERROR -      @XL03HQV*/
         B     @RC00648                                            0658
@RF00648 DS    0H                                                  0659
*         LCPZRT00='1'B;            /* INDICATE LOGIC ERROR          */
         OI    LCPZRT00(PTRLCP),B'10000000'                        0659
*         LCPMNRCD=FRMVTAME;        /* INDICATE VTAM ERROR           */
         MVI   LCPMNRCD(PTRLCP),X'A0'                              0660
*       END;                                                       0661
*   PTRZLB=ZCRZLB;                  /* ADDRESS 1ST CHAINED BUFFER    */
@RC00648 DS    0H                                                  0662
@RC00646 L     @14,RPHCRR(,PTRRPH)                                 0662
         L     @14,CRACRR(,@14)                                    0662
         L     PTRZLB,ZCRZLB(,@14)                                 0662
*   ZLBLCCWA=LCPNXLCW;              /* SET LCCW POINTER IN ZLBUF     */
         L     @09,LCPNXLCW(,PTRLCP)                               0663
         ST    @09,ZLBLCCWA(,PTRZLB)                               0663
*   ZLBLSTST=ZCRBFPTR;              /* ADDRESS LAST BUFFER OF SET    */
*                                                                  0664
         L     @14,ZCRBFPTR(,@14)                                  0664
         ST    @14,ZLBLSTST(,PTRZLB)                               0664
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT(WRCCW)FINISH                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0665
*   DO;                                                            0665
*     GOTO WRCCW#;                                                 0666
         B     WRCCW#                                              0666
*WRCCW@:                                                           0667
*   END;                            /* END OF SUBROUTINE             */
*                                                                  0668
*/********************************************************************/
*/*                                                                  */
*/* SUBROUTINE-                                                      */
*/*      FORMCCW                                                     */
*/*                                                                  */
*/* FUNCTION-                                                        */
*/*      FORMAT A WRITE CCW LIST FOR LOCAL BUFFERS.                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0668
*FORMCCW:                                                          0668
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0668
         B     @PB00002                                            0668
FORMCCW  DS    0H                                                  0669
*   RFY                                                            0669
*     PTRG14 RSTD;                  /* TO SAVE RETURN REG            */
*   ZCRSVWK1=PTRG14;                /* SAVE RETURN REGISTER          */
         L     @09,RPHCRR(,PTRRPH)                                 0670
         L     @09,CRACRR(,@09)                                    0670
         ST    PTRG14,ZCRSVWK1(,@09)                               0670
*   RFY                                                            0671
*     PTRG14 UNRSTD;                /* SAVED                         */
*   PTRCCW=ADDR(ZLBCCW1);           /* ADDRESS CCW                   */
         LA    PTRCCW,ZLBCCW1(,PTRZLB)                             0672
*   PTRG15=FDBDATAA;                /* GET DATA ADDRESS              */
         L     PTRG15,FDBDATAA(,PTRZLB)                            0673
*   GEN;                                                           0674
*                                      /* CONVERT TO REAL ADDRESS    */
         LRA   PTRG15,0(0,PTRG15)      CONVERT TO REAL ADDRESS
*   ZLBCPAD1=PTRG15;                /* SET REAL ADDRESS IN CCW       */
         STCM  PTRG15,7,ZLBCPAD1(PTRZLB)                           0675
*   IF LCCWSOP='1'B THEN            /* IF ERASE WRITE                */
         L     @14,LCPNXLCW(,PTRLCP)                               0676
************************************** START OF BLOCK 3 OF 5 ZP60008 **
         TM    LCCWSOP(@14),B'11000000'                               *
         BO    @ZP68LBL                PROCESS EWA OR WSF             *
************************************** END OF BLOCK 3 OF 5 ZP60008 ****
         TM    LCCWSOP(@14),B'00010000'                            0676
         BNO   @RF00676                                            0676
************************************** START OF BLOCK 4 OF 5 ZP60008 **
@ZP68LBL DS    0H                                                     *
************************************** END OF BLOCK 4 OF 5 ZP60008 ****
*     DO;                           /* PROCESS ERASE WRITE           */
*       LDNZARM=LDNZRM;             /* SET MAX DATA FOR ATTN READ    */
         LH    @14,LDNZRM(,PTRLDN)                                 0678
         N     @14,@CF04326                                        0678
         STH   @14,LDNZARM(,PTRLDN)                                0678
*       CCWCODE=EWRITE;             /* SET CCW OPCODE = ERASE WR     */
         MVI   CCWCODE(PTRCCW),X'05'                               0679
*       CCWCOUNT=FDBDATCT;          /* SET CCW DATA COUNT            */
         LH    @14,FDBDATCT(,PTRZLB)                               0680
         STH   @14,CCWCOUNT(,PTRCCW)                               0680
************************************** START OF BLOCK 5 OF 5 ZP60008 **
         L     @14,LCPNXLCW(,PTRLCP)                                  *
         TM    LCCWSOP(@14),B'11000000'                               *
         BNO   @RC00676                CORRECT CCW OPCODE WAS SET     *
         MVI   CCWCODE(PTRCCW),X'0D'   SET CCW OPCODE = ERASE WR ALT  *
         TM    LCCWSOP(@14),B'00010000'                               *
         BO    @RC00676                CORRECT CCW OPCODE WAS SET     *
         MVI   CCWCODE(PTRCCW),X'11'   SET CCW OPCODE = WR STRUC FLD  *
************************************** END OF BLOCK 5 OF 5 ZP60008 ****
*     END;                          /* END ERASE WRITE               */
*   ELSE                            /* NOT ERASE WRITE               */
*     DO;                           /* PROCESS NON ERASE WRITE       */
         B     @RC00676                                            0682
@RF00676 DS    0H                                                  0683
*       IF ZCRTIC='0'B THEN         /* IF 1ST CCW IN CHAN PGM        */
         L     @14,RPHCRR(,PTRRPH)                                 0683
         L     @14,CRACRR(,@14)                                    0683
         TM    ZCRTIC(@14),B'10000000'                             0683
         BNZ   @RF00683                                            0683
*         DO;                       /* FIRST CCW IN CHANNEL PGM      */
*           ZLBCPAD2=ZLBCPAD1;      /* MOVE ADDRESS TO 2ND CCW       */
         MVC   ZLBCPAD2(3,PTRZLB),ZLBCPAD1(PTRZLB)                 0685
*           ZLBCPTC2=FDBDATCT;      /* MOVE DATA COUNT TO 2ND CCW    */
         LH    @14,FDBDATCT(,PTRZLB)                               0686
         STH   @14,ZLBCPTC2(,PTRZLB)                               0686
*           ZLBCCW1=ZLBSEL;         /* SET 1ST CCW TO SELECT         */
         MVC   ZLBCCW1(8,PTRZLB),@CB04143                          0687
*           PTRCCW=PTRCCW+LENGTH(ISTCCW);/* ADDRESS NEXT CCW         */
         AL    PTRCCW,@CF00072                                     0688
*         END;                      /* END FIRST CCW IN CHAN PGM     */
*       ELSE                        /* NOT FIRST CCW IN CHAN PGM     */
*         CCWCOUNT=FDBDATCT;        /* SET UP DATA COUNT             */
         B     @RC00683                                            0690
@RF00683 LH    @14,FDBDATCT(,PTRZLB)                               0690
         STH   @14,CCWCOUNT(,PTRCCW)                               0690
*       CCWCODE=WRITE;              /* SET CCW OPERATION CODE        */
@RC00683 MVI   CCWCODE(PTRCCW),X'01'                               0691
*     END;                          /* END NON ERASE WRITE           */
*   IF LCCWMODE=LMS THEN            /* IF WRITE CONVERSATIONAL       */
@RC00676 L     @14,LCPNXLCW(,PTRLCP)                               0693
         TM    LCCWMODE(@14),B'00001100'                           0693
         BNZ   @RF00693                                            0693
*     DO;                           /* SET WRITE CONV. FLAGS         */
*       ZLBRT02='1'B;               /* INDICATE EOB                  */
*       ZLBRT03='1'B;               /* INDICATE WRITE/READ           */
*       ZLBRT05='1'B;               /* INDICATE DECREMENT SCHED      */
*       ZLBRT06='1'B;               /* INDICATE WRITE                */
*       ZLBRT07='1'B;               /* INDICATE SCHEDULE             */
         OI    ZLBRT02(PTRZLB),B'00110111'                         0699
*       IF ADDR(PTRDNC->NCBDEVCH)->DEVTCODE=DEV3284 ADDR(PTRDNC->  0700
*           NCBDEVCH)->DEVTCODE=DEV3286 THEN/* IF DEVICE 3284   3286 */
         LA    @14,36                                              0700
         ALR   @14,PTRDNC                                          0700
         CLI   DEVTCODE(@14),X'1A'                                 0700
         BE    @RT00700                                            0700
         CLI   DEVTCODE(@14),X'1B'                                 0700
         BNE   @RF00700                                            0700
@RT00700 DS    0H                                                  0701
*         DO;                       /* PROCESS 3270 PRINTER DEVICE   */
*           LCPZRT00='1'B;          /* FLAG LOGICAL ERROR            */
         OI    LCPZRT00(PTRLCP),B'10000000'                        0702
*           LCPMNRCD=FRMUSELE;      /* FLAG USER ERROR               */
         MVI   LCPMNRCD(PTRLCP),X'A3'                              0703
*         END;                      /* END 3270 PRINTER              */
*       ELSE                                                       0705
*         ;                         /* NOT 3270 PRINTER              */
@RF00700 DS    0H                                                  0706
*     END;                          /* END WRITE CONVERSATIONAL      */
*   ELSE                            /* NOT WRITE CONVERSATIONAL      */
*     IF ZLBWCCSP='1'B THEN         /* IF START PRINT INDICATED      */
         B     @RC00693                                            0707
@RF00693 TM    ZLBWCCSP(PTRZLB),B'00001000'                        0707
         BNO   @RF00707                                            0707
*       DO;                         /* SET START PRINT FLAGS         */
*         ZLBRT02='1'B;             /* INDICATE EOB                  */
*         ZLBRT05='1'B;             /* INDICATE DECREMENT SCHED      */
*         ZLBRT06='1'B;             /* INDICATE WRITE                */
*         ZLBRT07='1'B;             /* INDICATE SCHEDULE             */
         OI    ZLBRT02(PTRZLB),B'00100111'                         0712
*       END;                        /* END START PRINT FLAG SETS     */
*     ELSE                          /* START PRINT BIT OFF           */
*       ZLBRT06='1'B;               /* INDICATE START PRINT          */
         B     @RC00707                                            0714
@RF00707 OI    ZLBRT06(PTRZLB),B'00000010'                         0714
*   DO WHILE(FDBFDBA^=0);           /* CHAIN IN FDB'S TO I/O CHAIN   */
@RC00707 DS    0H                                                  0715
@RC00693 B     @DE00715                                            0715
@DL00715 DS    0H                                                  0716
*     CCWFLAGS=ZLBDC;               /* INDICATE CHAIN DATA           */
         MVI   CCWFLAGS(PTRCCW),X'80'                              0716
*     PTRCCW=PTRCCW+LENGTH(ISTCCW); /* POINT AT NEXT CCW             */
         AL    PTRCCW,@CF00072                                     0717
*     CCWCODE=TIC;                  /* SET COMMAND TO TIC            */
         MVI   CCWCODE(PTRCCW),X'08'                               0718
*     PTRG15=FDBFDBA+ZLBCPOFS;      /* ADDRESS NEXT CCW PACKAGE      */
         LA    PTRG15,4                                            0719
         AL    PTRG15,FDBFDBA(,PTRZLB)                             0719
*     GEN;                                                         0720
*                                      /* CONVERT TO REAL ADDRESS    */
         LRA   PTRG15,0(0,PTRG15)      CONVERT TO REAL ADDRESS
*     CCWADDR=PTRG15;               /* SET REAL ADDRESS IN CCW       */
         STCM  PTRG15,7,CCWADDR(PTRCCW)                            0721
*     PTRZLB=FDBFDBA;               /* ADDRESS NEXT BUFFER           */
         L     PTRZLB,FDBFDBA(,PTRZLB)                             0722
*     PTRCCW=ADDR(ZLBCCW1);         /* ADDRESS CCW IN BUFFER         */
         LA    PTRCCW,ZLBCCW1(,PTRZLB)                             0723
*     PTRG15=FDBDATAA;              /* ADDRESS OF BUFFER DATA        */
         L     PTRG15,FDBDATAA(,PTRZLB)                            0724
*     GEN;                                                         0725
*                                      /* CONVERT TO REAL ADDRESS    */
         LRA   PTRG15,0(0,PTRG15)      CONVERT TO REAL ADDRESS
*     CCWADDR=PTRG15;               /* SET REAL ADDRESS IN CCW       */
         STCM  PTRG15,7,CCWADDR(PTRCCW)                            0726
*     CCWCODE=WRITE;                /* SET CCW OPERATION CODE        */
         MVI   CCWCODE(PTRCCW),X'01'                               0727
*     CCWCOUNT=FDBDATCT;            /* SET DATA COUNT IN CCW         */
         LH    @14,FDBDATCT(,PTRZLB)                               0728
         STH   @14,CCWCOUNT(,PTRCCW)                               0728
*   END;                            /* FDB'S IN CHAIN ARE CHAINED    */
@DE00715 L     @14,FDBFDBA(,PTRZLB)                                0729
         LTR   @14,@14                                             0729
         BNZ   @DL00715                                            0729
*   CCWFLAGS=ZLBSLI;                /* SET SLI FLAG IN LASW CCW      */
         MVI   CCWFLAGS(PTRCCW),X'20'                              0730
*   ZCRBFPTR=PTRZLB;                /* SET BUFFER POINTER IN ZCR     */
         L     @14,RPHCRR(,PTRRPH)                                 0731
         L     @14,CRACRR(,@14)                                    0731
         ST    PTRZLB,ZCRBFPTR(,@14)                               0731
*   ZCRCCWA=PTRCCW;                 /* ADDRESS OF LAST CCW           */
         ST    PTRCCW,ZCRCCWA(,@14)                                0732
*BUG01:                                                            0733
*   ZCRTIC='1'B;                    /* SET ZCR TIC FLAG              */
BUG01    L     @14,RPHCRR(,PTRRPH)                                 0733
         L     @14,CRACRR(,@14)                                    0733
         OI    ZCRTIC(@14),B'10000000'                             0733
*   RFY                                                            0734
*     PTRG14 RSTD;                  /* TO RESTORE RETURN REG         */
*BUG02:                                                            0735
*   PTRG14=ZCRSVWK1;                /* RESTORE RETURN REG            */
BUG02    L     @09,RPHCRR(,PTRRPH)                                 0735
         L     @09,CRACRR(,@09)                                    0735
         L     PTRG14,ZCRSVWK1(,@09)                               0735
*   RFY                                                            0736
*     PTRG14 UNRSTD;                /* RESTORED                      */
*   END FORMCCW;                    /* END OF SUBROUTINE             */
@EL00002 DS    0H                                                  0737
@EF00002 DS    0H                                                  0737
@ER00002 BR    @14                                                 0737
@PB00002 DS    0H                                                  0738
*/* TPEPILOG                                                         */
*                                                                  0738
*   GEN(PRINT OFF);                                                0738
         PRINT OFF
*   GEN(PRINT ON);                                                 0739
*                                                                  0739
         PRINT ON
*/* END OF TPEPILOG                                                  */
*                                                                  0740
*   END ISTZBFBA                    /* END OF COMPILATION            */
*                                                                  0740
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*                                                                  0740
*       ;                                                          0740
@EL00001 DS    0H                                                  0740
@EF00001 DS    0H                                                  0740
@ER00001 BR    @14                                                 0740
@DATA    DS    0H
@CH00035 DC    H'1'
@DATD    DSECT
         DS    0F
ISTZBFBA CSECT
         DS    0F
@CF00072 DC    F'8'
@CF01716 DC    F'12'
@CF04326 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IOSBPTR  DS    A
SRBPTR   DS    A
CVTPTR   DS    A
LCPBPTR  DS    A
LDNCBPTR DS    A
DNCBPTR  DS    A
FMCBPTR  DS    A
FSBPTR   DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTZBFBA CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC03533 DC    C'RECORD  '
@CC04296 DC    C'BCBA'
@CB04143 DC    X'0B00000060000001'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RPHPTR   EQU   @01
GPR01P   EQU   @01
GPR08P   EQU   @08
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
GPR15P   EQU   @15
PTRRPH   EQU   @01
PTRATC   EQU   @02
PTRLDN   EQU   @03
PTRDNC   EQU   @04
PTRFMC   EQU   @05
PTRZLB   EQU   @06
PTRLCP   EQU   @07
PTRLSC   EQU   @07
PTRCCW   EQU   @08
PTRG12   EQU   @12
PTRG13   EQU   @13
PTRG14   EQU   @14
PTRG15   EQU   @15
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR01F   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR04F   EQU   @04
GPR04P   EQU   @04
GPR05F   EQU   @05
GPR05P   EQU   @05
GPR06F   EQU   @06
GPR06P   EQU   @06
GPR07F   EQU   @07
GPR07P   EQU   @07
GPR08F   EQU   @08
GPR09F   EQU   @09
GPR09P   EQU   @09
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR13F   EQU   @13
GPR14F   EQU   @14
GPR15F   EQU   @15
PTRG00   EQU   @00
PTRG09   EQU   @09
PTRG10   EQU   @10
PTRG11   EQU   @11
ATCLCPTR EQU   1032
ISTZPSVT EQU   0
ZPSZDFC0 EQU   ISTZPSVT+4
ZPSZBFY0 EQU   ISTZPSVT+24
ISTZFSVT EQU   0
ZFSZEFBB EQU   ISTZFSVT
ZFSZEABB EQU   ZFSZEFBB
ZFSZEFAB EQU   ISTZFSVT+4
ZFSZEAAB EQU   ZFSZEFAB
ISTZLBVT EQU   0
ISTCCW   EQU   0
CCWVADDR EQU   ISTCCW
CCWCODE  EQU   CCWVADDR
CCWADDR  EQU   CCWVADDR+1
CCWFLAGS EQU   ISTCCW+4
CCWSPARE EQU   ISTCCW+5
CCWCOUNT EQU   ISTCCW+6
ISTRPH   EQU   0
RPHFLAGS EQU   ISTRPH+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   ISTRPH+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ZSAZACTV EQU   ZSAZSVMS
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZTRAC EQU   ISTZSAVE+36
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWSI   EQU   LCCWOP
LCCWSD   EQU   LCCWOP
LCCWRWOP EQU   LCCWOP
LCCWSOP  EQU   LCCWRWOP
LCCWCTL  EQU   LCCWRWOP
LCCWMODE EQU   LCCWCTL
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWCNT  EQU   ISTLCCW+2
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZRT00 EQU   LCPFLAGS
LCPZRT01 EQU   LCPFLAGS
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPNXLCW EQU   ISTLCPB+20
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRTIC   EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRCCWA  EQU   ISTZCRR+40
ZCRBFPTR EQU   ISTZCRR+44
ZCRZLB   EQU   ISTZCRR+48
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRSVWK1 EQU   ZCRWKARA
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCREBCBA EQU   ZCRENTER+1
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTDCCRR EQU   0
CRRSPACE EQU   ISTDCCRR+12
CRRSAREA EQU   0
CRRMAS   EQU   CRRSAREA+148
CRRMAS1  EQU   CRRMAS
CRRMAS2  EQU   CRRMAS+1
CRRMAS3  EQU   CRRMAS+2
CRRMAS4  EQU   CRRMAS+3
CRRRMAS1 EQU   CRRMAS+4
CRRRMAS2 EQU   CRRMAS+5
CRRRMAS3 EQU   CRRMAS+6
CRRSMAS  EQU   CRRRMAS3
CRRATS   EQU   CRRSAREA+156
CRRATS1  EQU   CRRATS
CRRATS2  EQU   CRRATS+1
CRRATS3  EQU   CRRATS+2
CRRATS4  EQU   CRRATS+3
CRRRATS1 EQU   CRRATS+4
CRRRATS2 EQU   CRRATS+5
CRRRATS3 EQU   CRRATS+6
CRRSATS  EQU   CRRRATS3
CRRFLGS1 EQU   CRRSAREA+164
CRRFLGS2 EQU   CRRSAREA+165
CRRFLGS3 EQU   CRRSAREA+166
CRRFLGS4 EQU   CRRSAREA+167
CRRFLGS  EQU   CRRSAREA+168
CRRRFLG1 EQU   CRRSAREA+169
CRRRTYPE EQU   CRRRFLG1
CRRFDBK1 EQU   CRRSAREA+170
CRRFDB2  EQU   CRRFDBK1+1
CRRFDB3  EQU   CRRFDBK1+2
CRRFDBK2 EQU   CRRSAREA+176
CRRDSB   EQU   CRRFDBK2
CRRESR   EQU   CRRFDBK2+2
CRRTRBUF EQU   CRRSAREA+204
CRRBFLGS EQU   CRRSAREA+280
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTRIA   EQU   0
RIAABRGS EQU   ISTRIA+16
RIAFLGS  EQU   ISTRIA+80
RIAFLG1  EQU   RIAFLGS
RIAFLG2  EQU   RIAFLGS+1
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTDYPAB EQU   0
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00037 EQU   LOKCHNG+2
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCHPGM  EQU   ISTATCVT+384
ATCVLCNT EQU   ISTATCVT+772
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCZPSVT EQU   ATCAOSM+72
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCHAR3 EQU   DEVFLAGS
ISTNCB   EQU   0
NCBFLAGS EQU   ISTNCB+24
NCBFRAS  EQU   NCBFLAGS+1
NCBFTRIO EQU   NCBFRAS
NCBFLAG1 EQU   NCBFLAGS+2
NCBDEVCH EQU   ISTNCB+36
ISTLDNCB EQU   0
LDNCFLAG EQU   ISTLDNCB+54
LDNZRM   EQU   ISTLDNCB+102
LDNZARM  EQU   ISTLDNCB+104
LDNFLAGS EQU   ISTLDNCB+107
LDNFLAG2 EQU   ISTLDNCB+110
LDNZIOLK EQU   ISTLDNCB+184
LDNZERPF EQU   ISTLDNCB+185
LDNZCPAN EQU   LDNZERPF
LDNZEPIN EQU   LDNZERPF
LDNZLPC  EQU   ISTLDNCB+186
LDNDCDEB EQU   ISTLDNCB+304
LDNZSAV3 EQU   ISTLDNCB+376
LDNZSAV4 EQU   LDNZSAV3+8
LDNZH003 EQU   ISTLDNCB+577
ISTDNCB  EQU   0
DNCOS    EQU   ISTDNCB+56
DNCZFLGS EQU   DNCOS
DNCBSCED EQU   DNCOS+2
ISTPROCD EQU   0
PROPROC  EQU   ISTPROCD
PROPROC1 EQU   PROPROC
PROPROC2 EQU   PROPROC+1
PROPROC3 EQU   PROPROC+2
PROPROC4 EQU   PROPROC+3
PROPROCS EQU   0
PROSETMS EQU   PROPROCS+1
PROSETM2 EQU   PROSETMS
PROSETM3 EQU   PROSETMS+1
PROSETM4 EQU   PROSETMS+2
ISTFMCB  EQU   0
FMCSTAT  EQU   ISTFMCB+28
FMCSTAT1 EQU   ISTFMCB+29
FMCCMDFL EQU   ISTFMCB+31
FMCCMPS1 EQU   ISTFMCB+36
FMCMODE  EQU   ISTFMCB+52
FMCSIPA  EQU   ISTFMCB+148
FMCNXOSQ EQU   ISTFMCB+152
FMCNXCFM EQU   FMCNXOSQ
FMCOSSN  EQU   FMCNXCFM
FMCNXOSC EQU   FMCNXOSQ+2
FMCSSTAT EQU   ISTFMCB+159
FMCPACE  EQU   ISTFMCB+160
FMCPACEN EQU   FMCPACE
FMCPACEM EQU   FMCPACE+1
FMCPACPC EQU   FMCPACE+2
FMCCVAL  EQU   FMCPACE+3
FMCOBCE  EQU   FMCCVAL
FMCCLEXT EQU   ISTFMCB+164
FMCRPLA  EQU   FMCCLEXT
FMCFBA   EQU   FMCCLEXT+4
FMCCMPS2 EQU   FMCCLEXT+16
FMCFLGA  EQU   FMCCMPS2
FMCFLGCL EQU   FMCCMPS2+1
FMCPSCMD EQU   FMCCMPS2+2
FMCPSTAT EQU   FMCCMPS2+3
FMCSTAT2 EQU   ISTFMCB+186
FMCMODEB EQU   ISTFMCB+189
FMCCLSEQ EQU   ISTFMCB+190
FMCRRESP EQU   ISTFMCB+195
FMCSSEGQ EQU   ISTFMCB+200
FMCFBAS  EQU   ISTFMCB+216
FMCZV002 EQU   FMCFBAS
FMCSNCTL EQU   ISTFMCB+224
FMCSCFLG EQU   FMCSNCTL
FMCVS1   EQU   ISTFMCB+232
FMCZFLAG EQU   FMCVS1
FMCZF006 EQU   FMCZFLAG
FMCZFA06 EQU   FMCZF006
FMCZFD06 EQU   FMCZF006+1
FMCLBXM  EQU   FMCVS1+12
FMCSHEAQ EQU   FMCLBXM
FMCLCPBQ EQU   FMCVS1+16
FMCLCPAQ EQU   FMCVS1+20
FMCSEQ1  EQU   FMCVS1+34
FMCZFLG2 EQU   FMCVS1+35
FMCCVFLG EQU   FMCVS1+44
FMCFLAG  EQU   0
FMCFLGB  EQU   FMCFLAG
ISTFDB   EQU   0
FDBFDBA  EQU   ISTFDB
FDBDATAA EQU   ISTFDB+4
FDBDATCT EQU   ISTFDB+8
ISTFSB   EQU   0
FSBFSB   EQU   ISTFSB
FSBMNRCD EQU   FSBFSB+2
FSBSFLGS EQU   FSBFSB+3
FSBFSBA  EQU   FSBFSB+4
FSBBTH   EQU   FSBFSB+8
FSBCID   EQU   FSBBTH
FSBRQTAG EQU   FSBBTH+4
FSBSEQID EQU   FSBRQTAG
FSBFLAGS EQU   FSBSEQID
FSBSEQ   EQU   FSBSEQID+1
FSBCSWST EQU   FSBBTH+6
FSBTHFLD EQU   FSBCSWST
FSBTH1   EQU   FSBTHFLD
FSBSYSRS EQU   FSBTH1
FSBTH2   EQU   FSBTHFLD+1
FSBEXTRS EQU   FSBTH2
FSBXFSTS EQU   FSBEXTRS
FSBXCODE EQU   FSBEXTRS
FSBNETRS EQU   FSBFSB+16
FSBSRCAT EQU   FSBNETRS
FSBERC   EQU   FSBNETRS+1
FSBFBMI  EQU   FSBERC
FSBDMGRS EQU   FSBFSB+18
FSBSS1   EQU   FSBDMGRS
FSBSS2   EQU   FSBDMGRS+1
FSBLCPB  EQU   FSBFSB+20
FSBMSGID EQU   FSBLCPB
FSBLCCWA EQU   FSBFSB+24
FSBRLSTS EQU   FSBLCCWA
ISTZLBUF EQU   0
ZLBFSM   EQU   ISTZLBUF+4
ZLBLNG1  EQU   ZLBFSM
ISTLSCB  EQU   0
LSC1WORD EQU   ISTLSCB
LSCREQTG EQU   LSC1WORD+2
LSCZRT02 EQU   LSCREQTG
LSCZRT03 EQU   LSCREQTG
LSCZRT04 EQU   LSCREQTG
LSCZRT05 EQU   LSCREQTG
LSCZRT06 EQU   LSCREQTG
LSCZRT07 EQU   LSCREQTG
LSCZMNRC EQU   LSCREQTG+1
LSCZRT08 EQU   LSCZMNRC
LSCZRT09 EQU   LSCZMNRC
LSCCHAIN EQU   ISTLSCB+4
LSCCHAI1 EQU   LSCCHAIN
LSCRUCNT EQU   ISTLSCB+8
LSCFLGS  EQU   ISTLSCB+9
LSCSEQ   EQU   ISTLSCB+10
LSCFDBA  EQU   ISTLSCB+24
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
FSBCOMBN EQU   FSBNETRS
FSBRHFLD EQU   FSBCOMBN+1
FSBRH3   EQU   FSBRHFLD+2
FSBLDFLG EQU   FSBRH3
@NM00057 EQU   FSBRQTAG
ZLBBTRAN EQU   ISTZLBUF
ZLBFDBZ  EQU   ZLBBTRAN
ZLBLNG2  EQU   ZLBBTRAN+14
ZLBAIO   EQU   ZLBBTRAN+16
ZLBDTIO  EQU   ZLBFSM
ZLBCCW1  EQU   ZLBDTIO
ZLBCPAD1 EQU   ZLBCCW1+1
ZLBCCW2  EQU   ZLBDTIO+8
ZLBCPAD2 EQU   ZLBCCW2+1
ZLBCPTC2 EQU   ZLBCCW2+6
ZLBCCW3  EQU   ZLBDTIO+16
ZLBSNS   EQU   ZLBDTIO+28
ZLBERC   EQU   ZLBDTIO+29
ZLBECI   EQU   ZLBERC
ZLBEBI   EQU   ZLBERC
ZLBEMI   EQU   ZLBERC
ZLBETI   EQU   ZLBERC
ZLBFBMI  EQU   ZLBERC
ZLBLCCWA EQU   ZLBDTIO+36
ZLBSAF   EQU   ZLBDTIO+48
ZLBSTAT  EQU   ZLBSAF
ZLBDEVST EQU   ZLBSTAT
ZLBRQTG  EQU   ZLBDTIO+50
ZLBRQFLG EQU   ZLBRQTG
ZLBRT02  EQU   ZLBRQFLG
ZLBRT03  EQU   ZLBRQFLG
ZLBRT04  EQU   ZLBRQFLG
ZLBRT05  EQU   ZLBRQFLG
ZLBRT06  EQU   ZLBRQFLG
ZLBRT07  EQU   ZLBRQFLG
ZLBLSTST EQU   ZLBDTIO+52
ZLBFLAGS EQU   ZLBDTIO+56
ZLBWCCSP EQU   ZLBFLAGS
ZLBTEXTA EQU   ZLBCCW3
ZLBTEXTB EQU   ZLBFLAGS
ZLBTEXT1 EQU   ZLBTEXTB
ZLBTEXTC EQU   ZLBFLAGS
ZLBPPL   EQU   ZLBTEXTC
ZLBFAIO  EQU   ZLBAIO
ZLBFSB   EQU   ZLBFAIO
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
ZLBFDBS  EQU   ZLBFAIO+32
ZLBPPCSC EQU   ZLBPPL+14
ZLBPPRS1 EQU   ZLBPPL+13
ZLBPPRSV EQU   ZLBPPL+12
ZLBPPCLG EQU   ZLBPPL+12
ZLBPPCC  EQU   ZLBPPL+12
ZLBPPINT EQU   ZLBPPL+12
ZLBPPHIO EQU   ZLBPPL+12
ZLBPP    EQU   ZLBPPL+4
ZLBPPLDB EQU   ZLBPPL+1
ZLBPPLF  EQU   ZLBPPL
ZLBTEXT  EQU   ZLBTEXTA+8
ZLBRSV0A EQU   ZLBTEXTA
ZLBTCP   EQU   ZLBFLAGS+8
ZLBTCSW  EQU   ZLBFLAGS+1
ZLBRSV09 EQU   ZLBFLAGS
ZLBRSV07 EQU   ZLBFLAGS
ZLBRQSEQ EQU   ZLBRQTG+1
ZLBRT0B  EQU   ZLBRQFLG+1
ZLBRT0A  EQU   ZLBRQFLG+1
ZLBRT09  EQU   ZLBRQFLG+1
ZLBRT08  EQU   ZLBRQFLG+1
ZLBRT01  EQU   ZLBRQFLG
ZLBRT00  EQU   ZLBRQFLG
ZLBCHNST EQU   ZLBSTAT+1
ZLBUCST  EQU   ZLBDEVST
ZLBDEST  EQU   ZLBDEVST
ZLBRSV10 EQU   ZLBDEVST
ZLBLSTBF EQU   ZLBDTIO+44
ZLBRSV11 EQU   ZLBDTIO+40
ZLBLCPBA EQU   ZLBDTIO+32
ZLBCOMP  EQU   ZLBDTIO+31
ZLBRSV08 EQU   ZLBDTIO+30
ZLBRSV05 EQU   ZLBERC
ZLBELI   EQU   ZLBERC
ZLBSOC   EQU   ZLBSNS
ZLBSCC   EQU   ZLBSNS
ZLBSUS   EQU   ZLBSNS
ZLBSDC   EQU   ZLBSNS
ZLBSEQCK EQU   ZLBSNS
ZLBSBOL  EQU   ZLBSNS
ZLBSIR   EQU   ZLBSNS
ZLBSCR   EQU   ZLBSNS
ZLBRSV12 EQU   ZLBDTIO+24
ZLBCPTC3 EQU   ZLBCCW3+6
ZLBRSV04 EQU   ZLBCCW3+5
ZLBCPFL3 EQU   ZLBCCW3+4
ZLBCPAD3 EQU   ZLBCCW3+1
ZLBCPCF3 EQU   ZLBCCW3
ZLBRSV03 EQU   ZLBCCW2+5
ZLBCPFL2 EQU   ZLBCCW2+4
ZLBCPCF2 EQU   ZLBCCW2
ZLBCPTC1 EQU   ZLBCCW1+6
ZLBCMOD  EQU   ZLBCCW1+5
ZLBCPFL1 EQU   ZLBCCW1+4
ZLBCPCF1 EQU   ZLBCCW1
ZLBRSV01 EQU   ZLBBTRAN+12
FSBRT0B  EQU   @NM00057+1
FSBRT0A  EQU   @NM00057+1
FSBRT09  EQU   @NM00057+1
FSBRT08  EQU   @NM00057+1
FSBRT07  EQU   @NM00057
FSBRT06  EQU   @NM00057
FSBRT05  EQU   @NM00057
FSBRT04  EQU   @NM00057
FSBRT03  EQU   @NM00057
FSBRT02  EQU   @NM00057
FSBRT01  EQU   @NM00057
FSBRT00  EQU   @NM00057
FSBLDCUF EQU   FSBLDFLG
FSBLDSIF EQU   FSBLDFLG
FSBLDSOF EQU   FSBLDFLG
FSBLDEBF EQU   FSBLDFLG
FSBLDBBF EQU   FSBLDFLG
FSBLDFME EQU   FSBLDFLG
FSBLDSCF EQU   FSBLDFLG
FSBLDRMF EQU   FSBLDFLG
FSBRH2   EQU   FSBRHFLD+1
FSBRH1   EQU   FSBRHFLD
FSBALIGN EQU   FSBCOMBN
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
LSCTLBAD EQU   ISTLSCB+28
LSCFDB2  EQU   LSCFDBA+1
LSCFDB1  EQU   LSCFDBA
LSCLCCWA EQU   ISTLSCB+20
LSCLCPBA EQU   ISTLSCB+16
LSCLCCW1 EQU   ISTLSCB+12
LSCRRCNT EQU   LSCSEQ+1
LSCRRCCT EQU   LSCSEQ
LSCATOP  EQU   LSCFLGS
LSCFREE  EQU   LSCFLGS
LSCDSTAT EQU   LSCFLGS
LSCEXRES EQU   LSCFLGS
LSCZRIMM EQU   LSCFLGS
LSCRSV01 EQU   LSCFLGS
LSCSMODE EQU   LSCFLGS
LSCZMIRC EQU   LSCRUCNT
LSCCHAI2 EQU   LSCCHAIN+1
LSCCHNG  EQU   LSCCHAI1
LSCZRTSC EQU   LSCZMNRC
LSCZRT0B EQU   LSCZMNRC
LSCZRT0A EQU   LSCZMNRC
LSCZRTL9 EQU   LSCZRT09
LSCZRTL8 EQU   LSCZRT08
LSCZRTL7 EQU   LSCZRT07
LSCZRTL6 EQU   LSCZRT06
LSCZRTL5 EQU   LSCZRT05
LSCZRTL4 EQU   LSCZRT04
LSCZRTL3 EQU   LSCZRT03
LSCZRTL2 EQU   LSCZRT02
LSCZRT01 EQU   LSCREQTG
LSCZRT00 EQU   LSCREQTG
LSCLNGTH EQU   LSC1WORD+1
LSCTYPE  EQU   LSC1WORD
ZLBCHAIN EQU   ISTZLBUF
FSBFDB   EQU   ISTFSB+32
FSBRSV01 EQU   FSBFSB+30
FSBTHCNT EQU   FSBFSB+28
FSBRLRSV EQU   FSBRLSTS
FSBCFTX  EQU   FSBRLSTS
FSBICNCB EQU   FSBMSGID
FSBSSOC  EQU   FSBSS2
FSBSSCC  EQU   FSBSS2
FSBSSDC  EQU   FSBSS2
FSBSSEC  EQU   FSBSS2
FSBSSIR  EQU   FSBSS2
FSBSSCR  EQU   FSBSS2
@NM00056 EQU   FSBSS2
@NM00055 EQU   FSBSS1
FSBSSDE  EQU   FSBSS1
FSBSSUS  EQU   FSBSS1
@NM00054 EQU   FSBSS1
FSBSOHI  EQU   FSBERC
FSBLGI   EQU   FSBERC
FSBLMRI  EQU   FSBFBMI
FSBETI   EQU   FSBERC
FSBEMI   EQU   FSBERC
FSBEBI   EQU   FSBERC
FSBECI   EQU   FSBERC
FSBELI   EQU   FSBERC
FSBMJRCD EQU   FSBSRCAT
FSBXLCI  EQU   FSBXCODE
FSBXFINS EQU   FSBXCODE
FSBXNORM EQU   FSBXFSTS
FSBSCODE EQU   FSBSYSRS
FSBSPHSE EQU   FSBSYSRS
FSBSERR  EQU   FSBSYSRS
FSBCMD   EQU   FSBSEQ
FSBDTRCE EQU   FSBFLAGS
FSBASBTU EQU   FSBFLAGS
FSBINPET EQU   FSBFLAGS
FSBNONCB EQU   FSBFLAGS
FSBLBIND EQU   FSBFLAGS
FSBFFIND EQU   FSBFLAGS
FSBACIND EQU   FSBFLAGS
FSBRFIND EQU   FSBFLAGS
FSBDAF   EQU   FSBCID+2
FSBSAF   EQU   FSBCID
FSBGATE  EQU   FSBFSBA
FSBRSV02 EQU   FSBSFLGS
FSBPGBUF EQU   FSBSFLGS
FSBMNSDA EQU   FSBMNRCD
FSBMNOA  EQU   FSBMNRCD
FSBMNDIF EQU   FSBMNRCD
FSBMNEOP EQU   FSBMNRCD
FSBMNDNU EQU   FSBMNRCD
FSBMNATN EQU   FSBMNRCD
FSBMNRVI EQU   FSBMNRCD
FSBMNELI EQU   FSBMNRCD
FSBLNGTH EQU   FSBFSB+1
FSBTYPE  EQU   FSBFSB
FDBOFSET EQU   ISTFDB+10
FMCFLRSV EQU   FMCFLGB
FMCFLGA8 EQU   FMCFLGB
FMCCLRPH EQU   FMCVS1+45
FMCRSV0X EQU   FMCCVFLG
FMCVYRPH EQU   FMCCVFLG
FMCZV004 EQU   FMCVS1+40
FMCLOCK2 EQU   FMCVS1+36
@NM00053 EQU   FMCZFLG2
FMCZF027 EQU   FMCZFLG2
FMCZF026 EQU   FMCZFLG2
FMCSEQ1B EQU   FMCSEQ1
FMCSEQ1T EQU   FMCSEQ1
FMCZX006 EQU   FMCVS1+33
FMCZX005 EQU   FMCVS1+32
FMCZX004 EQU   FMCVS1+31
FMCZX003 EQU   FMCVS1+30
FMCZX002 EQU   FMCVS1+29
FMCZX001 EQU   FMCVS1+28
FMCZV001 EQU   FMCVS1+24
FMCAWATQ EQU   FMCLCPAQ+1
@NM00052 EQU   FMCLCPAQ
FMCLCPB2 EQU   FMCLCPBQ+1
FMCLCPB1 EQU   FMCLCPBQ
FMCASCDQ EQU   FMCSHEAQ+1
@NM00051 EQU   FMCSHEAQ
FMCSHEDQ EQU   FMCVS1+8
FMCZFCSQ EQU   FMCVS1+6
FMCZH001 EQU   FMCVS1+4
FMCZF025 EQU   FMCZFLAG+3
FMCZF024 EQU   FMCZFLAG+3
FMCZF023 EQU   FMCZFLAG+3
FMCZF022 EQU   FMCZFLAG+3
FMCZF021 EQU   FMCZFLAG+3
FMCZF020 EQU   FMCZFLAG+3
FMCZF019 EQU   FMCZFLAG+3
FMCZF018 EQU   FMCZFLAG+3
FMCZF017 EQU   FMCZFLAG+2
FMCZF016 EQU   FMCZFLAG+2
FMCZF015 EQU   FMCZFLAG+2
FMCZF014 EQU   FMCZFLAG+2
FMCZF013 EQU   FMCZFLAG+2
FMCZF012 EQU   FMCZFLAG+2
FMCZF011 EQU   FMCZFLAG+2
FMCZF010 EQU   FMCZFLAG+2
FMCZF00F EQU   FMCZFLAG+1
FMCZF00E EQU   FMCZFLAG+1
FMCZF00D EQU   FMCZFLAG+1
FMCZF00C EQU   FMCZFLAG+1
FMCZF00B EQU   FMCZFLAG+1
FMCRSV10 EQU   FMCZFLAG+1
FMCZF009 EQU   FMCZFLAG+1
FMCZFC06 EQU   FMCZF006
FMCZFB06 EQU   FMCZF006
FMCZF005 EQU   FMCZFLAG
FMCZF004 EQU   FMCZFLAG
FMCZF003 EQU   FMCZFLAG
FMCZF002 EQU   FMCZFLAG
FMCZF001 EQU   FMCZFLAG
FMCFRESA EQU   ISTFMCB+228
FMCSCSQN EQU   FMCSNCTL+2
FMCSCCTL EQU   FMCSNCTL+1
FMCSTCTL EQU   FMCSCFLG
FMCSCCLO EQU   FMCSCFLG
FMCAPRO  EQU   FMCSCFLG
FMCLURO  EQU   FMCSCFLG
FMCOBSAC EQU   FMCSCFLG
FMCIBSAC EQU   FMCSCFLG
FMCFBRE  EQU   ISTFMCB+220
FMCFBXM  EQU   FMCZV002
FMCASEGQ EQU   ISTFMCB+212
FMCRDTPT EQU   ISTFMCB+208
FMCLOCK  EQU   ISTFMCB+204
FMCSEGD  EQU   FMCSSEGQ
FMCRSPLM EQU   ISTFMCB+198
FMCPSTRS EQU   ISTFMCB+196
@NM00050 EQU   FMCRRESP
FMCTSLHA EQU   FMCRRESP
FMCFRRN  EQU   FMCRRESP
FMCFME   EQU   FMCRRESP
FMCFEX   EQU   FMCRRESP
FMCFPE   EQU   FMCRRESP
FMCCTLB  EQU   ISTFMCB+194
FMCBSQNO EQU   FMCCLSEQ+2
FMCTSQNO EQU   FMCCLSEQ
FMCOBPRG EQU   FMCMODEB
FMCIBPRG EQU   FMCMODEB
FMCRESOT EQU   FMCMODEB
FMCRSTSR EQU   FMCMODEB
FMCLUQ   EQU   FMCMODEB
FMCAPQ   EQU   FMCMODEB
FMCCLEAR EQU   FMCMODEB
FMCHOLD  EQU   FMCMODEB
FMCIPSEQ EQU   ISTFMCB+188
FMCLUSTR EQU   ISTFMCB+187
FMCRSV87 EQU   FMCSTAT2
FMCSEQI  EQU   FMCSTAT2
FMCCPIP  EQU   FMCSTAT2
FMCALIPR EQU   FMCSTAT2
FMCIAIO  EQU   FMCSTAT2
FMCZF00A EQU   FMCSTAT2
FMCVPIP  EQU   FMCSTAT2
FMCBHSET EQU   ISTFMCB+185
FMCPRMRC EQU   FMCCLEXT+20
FMCRSV89 EQU   FMCPSTAT
FMCPCLSD EQU   FMCPSTAT
FMCDDOCD EQU   FMCPSTAT
FMCIDVFD EQU   FMCPSTAT
FMCELKST EQU   FMCPSTAT
FMCRSV88 EQU   FMCPSCMD
FMCRDBLK EQU   FMCPSCMD
FMCDSEOC EQU   FMCPSCMD
FMCPURGE EQU   FMCPSCMD
FMCRESTI EQU   FMCPSCMD
FMCCNTCT EQU   FMCPSCMD
FMCINVT  EQU   FMCPSCMD
FMCFLGB7 EQU   FMCFLGCL
FMCFLGB6 EQU   FMCFLGCL
FMCFLGB5 EQU   FMCFLGCL
FMCFLGB4 EQU   FMCFLGCL
FMCFLGB3 EQU   FMCFLGCL
FMCFLGB2 EQU   FMCFLGCL
FMCFLGB1 EQU   FMCFLGCL
FMCFLGB0 EQU   FMCFLGCL
FMCFLGA7 EQU   FMCFLGA
FMCFLGA6 EQU   FMCFLGA
FMCFLGA5 EQU   FMCFLGA
FMCFLGA4 EQU   FMCFLGA
FMCFLGA3 EQU   FMCFLGA
FMCFLGA2 EQU   FMCFLGA
FMCFLGA1 EQU   FMCFLGA
FMCFLGA0 EQU   FMCFLGA
FMCDCLOK EQU   FMCCLEXT+12
FMCRAFM  EQU   FMCCLEXT+8
FMCFBPTR EQU   FMCFBA+1
FMCFBRSV EQU   FMCFBA
FMCRPLPT EQU   FMCRPLA+1
FMCRPLRS EQU   FMCRPLA
FMCPRCLS EQU   FMCCVAL
FMCIBCE  EQU   FMCCVAL
FMCONLY  EQU   FMCOBCE
FMCLAST  EQU   FMCOBCE
FMCMIDLE EQU   FMCOBCE
FMCFIRST EQU   FMCOBCE
FMCCPCNT EQU   FMCPACPC
FMCMPCNT EQU   FMCPACEM
FMCNPCNT EQU   FMCPACEN
FMCCONF  EQU   FMCSSTAT
FMCPURCH EQU   FMCSSTAT
FMCNSALU EQU   FMCSSTAT
FMCBIP   EQU   FMCSSTAT
FMCSDTR  EQU   FMCSSTAT
FMCUIPI  EQU   FMCSSTAT
FMCCIPI  EQU   FMCSSTAT
FMCSNBI  EQU   FMCSSTAT
FMCRVD01 EQU   ISTFMCB+158
FMCISSN  EQU   ISTFMCB+156
FMCOASN  EQU   FMCNXOSC
FMCSIP   EQU   FMCSIPA
FMCEXLST EQU   ISTFMCB+144
FMCPAB5  EQU   ISTFMCB+128
FMCPAB4  EQU   ISTFMCB+112
FMCPAB3  EQU   ISTFMCB+96
FMCPAB2  EQU   ISTFMCB+80
FMCPAB1  EQU   ISTFMCB+64
FMCFASYA EQU   ISTFMCB+60
FMCPROCD EQU   ISTFMCB+48
FMCVWT   EQU   ISTFMCB+44
FMCRPLH  EQU   ISTFMCB+40
FMCBUFNB EQU   FMCCMPS1+2
FMCBUFLM EQU   FMCCMPS1
FMCDEBA  EQU   ISTFMCB+32
@NM00049 EQU   FMCCMDFL
FMCSNA   EQU   FMCCMDFL
FMCVSNA  EQU   FMCCMDFL
FMCCMDR  EQU   FMCCMDFL
@NM00048 EQU   ISTFMCB+30
@NM00047 EQU   FMCSTAT1
FMCHPURG EQU   FMCSTAT1
FMCVSP2  EQU   FMCSTAT1
FMCVSP1  EQU   FMCSTAT
FMCLTEAS EQU   FMCSTAT
FMCZF007 EQU   FMCSTAT
FMCDEDSC EQU   FMCSTAT
FMCDEVOF EQU   FMCSTAT
FMCDAPT  EQU   FMCSTAT
FMCPRMTE EQU   FMCSTAT
FMCPRMTR EQU   FMCSTAT
FMCUSFLD EQU   ISTFMCB+24
FMCFMCBA EQU   ISTFMCB+20
FMCDNCBA EQU   ISTFMCB+16
FMCDVTA  EQU   ISTFMCB+12
FMCTSKID EQU   ISTFMCB+8
FMCNXTCB EQU   ISTFMCB+4
FMCSAF   EQU   ISTFMCB+2
FMCLNGTH EQU   ISTFMCB+1
FMCTYPE  EQU   ISTFMCB
PROSRDEF EQU   PROSETM4
PRORSV47 EQU   PROSETM4
PROSCON  EQU   PROSETM4
PRORSV46 EQU   PROSETM3
PROSMONT EQU   PROSETM3
PRORSV45 EQU   PROSETM3
PROSNTO  EQU   PROSETM3
PRORSV44 EQU   PROSETM3
PRORSV43 EQU   PROSETM2
PROSNTFL EQU   PROSETM2
PRORSV42 EQU   PROSETM2
PRORSV41 EQU   PROPROCS
PROMODC  EQU   PROPROC4
PROMODT  EQU   PROPROC4
PROMODM  EQU   PROPROC4
PROMODB  EQU   PROPROC4
PRORSV14 EQU   PROPROC4
PRORSV13 EQU   PROPROC4
PRORSV12 EQU   PROPROC4
PROEIB   EQU   PROPROC4
PRORSV11 EQU   PROPROC3
PROMONT2 EQU   PROPROC3
PROMONIT EQU   PROPROC3
PROSUBLK EQU   PROPROC3
PRONTO   EQU   PROPROC3
PROLGIN  EQU   PROPROC3
PROERPI  EQU   PROPROC3
PRORSV07 EQU   PROPROC3
PROCFTX  EQU   PROPROC2
PROEMLC  EQU   PROPROC2
PRONTFL  EQU   PROPROC2
PRORSV05 EQU   PROPROC2
PRORSV04 EQU   PROPROC2
PROLGOT  EQU   PROPROC2
PROERPO  EQU   PROPROC2
PRORSV03 EQU   PROPROC2
PRORPLC  EQU   PROPROC1
PROCS    EQU   PROPROC1
PROCA    EQU   PROPROC1
PRORESPX EQU   PROPROC1
PRODFASY EQU   PROPROC1
PROXPOPT EQU   PROPROC1
PROTRUNC EQU   PROPROC1
PROASYIP EQU   PROPROC1
DNCZC001 EQU   DNCOS+40
DNCLOCK  EQU   DNCOS+36
DNCZV005 EQU   DNCOS+32
DNCZV004 EQU   DNCOS+28
DNCZV003 EQU   DNCOS+24
DNCZV002 EQU   DNCOS+21
DNCZX001 EQU   DNCOS+20
DNCZV001 EQU   DNCOS+17
DNCZX003 EQU   DNCOS+16
DNCZV000 EQU   DNCOS+12
DNCSESCQ EQU   DNCOS+8
DNCSESIQ EQU   DNCOS+4
DNCACIP  EQU   DNCBSCED+1
DNCLICP  EQU   DNCBSCED
DNCZF008 EQU   DNCZFLGS+1
DNCZPSRD EQU   DNCZFLGS+1
DNCPSOL  EQU   DNCZFLGS+1
DNCZF007 EQU   DNCZFLGS+1
DNCZF006 EQU   DNCZFLGS+1
DNCZF005 EQU   DNCZFLGS+1
DNCZF004 EQU   DNCZFLGS+1
DNCZF003 EQU   DNCZFLGS
DNCZF002 EQU   DNCZFLGS
DNCZRSCH EQU   DNCZFLGS
DNCDISC  EQU   DNCZFLGS
DNCCONT  EQU   DNCZFLGS
DNCINVIT EQU   DNCZFLGS
DNCSESS  EQU   DNCZFLGS
DNCZF001 EQU   DNCZFLGS
DNCMODE  EQU   ISTDNCB+49
DNCBHSET EQU   ISTDNCB+48
DNCNCB   EQU   ISTDNCB
LDNZS00F EQU   LDNZH003+1
LDNZS00E EQU   LDNZH003+1
LDNZS00D EQU   LDNZH003+1
LDNZS00C EQU   LDNZH003+1
LDNZS00B EQU   LDNZH003+1
LDNZS007 EQU   LDNZH003
LDNZS006 EQU   LDNZH003
LDNZS005 EQU   LDNZH003
LDNZS004 EQU   LDNZH003
LDNZS003 EQU   LDNZH003
LDNZS002 EQU   LDNZH003
LDNZS001 EQU   LDNZH003
LDNZS000 EQU   LDNZH003
LDNZX006 EQU   ISTLDNCB+576
LDNZC001 EQU   ISTLDNCB+569
LDNZX005 EQU   ISTLDNCB+568
LDNZV006 EQU   ISTLDNCB+564
LDNSRB   EQU   ISTLDNCB+520
LDNIOSB  EQU   ISTLDNCB+412
@NM00046 EQU   LDNZSAV3+28
LDNRSV06 EQU   LDNZSAV4+16
LDNZSAV6 EQU   LDNZSAV4+12
LDNZSAV5 EQU   LDNZSAV4
LDNZSAVE EQU   LDNZSAV3
LDNZSAV2 EQU   ISTLDNCB+368
LDNZSAV1 EQU   ISTLDNCB+352
LDNZ3RR  EQU   ISTLDNCB+348
LDNZ2RR  EQU   ISTLDNCB+344
LDNZ1RR  EQU   ISTLDNCB+340
LDNRSV0B EQU   ISTLDNCB+336
LDNRSV0A EQU   ISTLDNCB+332
LDNRSV09 EQU   ISTLDNCB+328
LDNRSV08 EQU   ISTLDNCB+324
LDNRSV07 EQU   ISTLDNCB+320
LDNDEAD  EQU   LDNDCDEB+12
LDNUCBAD EQU   LDNDCDEB+8
LDNAPPAD EQU   LDNDCDEB+5
LDNEXSCL EQU   LDNDCDEB+4
LDNDCBAD EQU   LDNDCDEB+1
LDNDEBID EQU   LDNDCDEB
LDNZRIND EQU   ISTLDNCB+300
LDNRPH   EQU   ISTLDNCB+192
LDNZTCP  EQU   ISTLDNCB+188
LDNZCHNC EQU   ISTLDNCB+187
LDNZLPC7 EQU   LDNZLPC
LDNZLPC6 EQU   LDNZLPC
LDNZLPC5 EQU   LDNZLPC
LDNZLPC4 EQU   LDNZLPC
LDNZLPC3 EQU   LDNZLPC
LDNZLPC2 EQU   LDNZLPC
LDNZLPC1 EQU   LDNZLPC
LDNZLPC0 EQU   LDNZLPC
LDNRSV05 EQU   LDNZERPF
LDNZCTOV EQU   LDNZEPIN
LDNZF001 EQU   LDNZEPIN
LDNZFRDW EQU   LDNZCPAN
LDNZFRD  EQU   LDNZCPAN
LDNZNARD EQU   LDNZCPAN
LDNRSV04 EQU   LDNZIOLK
LDNZATBF EQU   LDNZIOLK
LDNZERLK EQU   LDNZIOLK
LDNZDSIC EQU   LDNZIOLK
LDNZPAB1 EQU   ISTLDNCB+168
LDNZV005 EQU   ISTLDNCB+160
LDNZS1VR EQU   ISTLDNCB+136
LDNZS1RR EQU   ISTLDNCB+132
LDNZS1FC EQU   ISTLDNCB+128
LDNZS1BC EQU   ISTLDNCB+124
LDNZLOCK EQU   ISTLDNCB+120
LDNZFBUF EQU   ISTLDNCB+116
LDNZLAST EQU   ISTLDNCB+112
LDNRSV02 EQU   LDNFLAG2
LDNZFF04 EQU   LDNFLAG2
LDNZFF69 EQU   LDNFLAGS+2
LDNTPBIO EQU   LDNFLAGS+2
LDNZFF03 EQU   LDNFLAGS+2
LDNZFF02 EQU   LDNFLAGS+2
LDNZFF01 EQU   LDNFLAGS+2
LDNZFF00 EQU   LDNFLAGS+2
LDNCLOSD EQU   LDNFLAGS+2
LDNZENTR EQU   LDNFLAGS+2
LDNZICCW EQU   LDNFLAGS+1
LDNZREC  EQU   LDNFLAGS+1
LDNZCTXT EQU   LDNFLAGS+1
LDNZATLK EQU   LDNFLAGS+1
LDNZCHNE EQU   LDNFLAGS+1
LDNZATTP EQU   LDNFLAGS+1
LDNZIOBY EQU   LDNFLAGS+1
LDNZF00A EQU   LDNFLAGS+1
LDNZF009 EQU   LDNFLAGS
LDNZF008 EQU   LDNFLAGS
LDNZF007 EQU   LDNFLAGS
LDNZF006 EQU   LDNFLAGS
LDNZF005 EQU   LDNFLAGS
LDNZF004 EQU   LDNFLAGS
LDNZF003 EQU   LDNFLAGS
LDNZF002 EQU   LDNFLAGS
LDNZHDCC EQU   ISTLDNCB+106
LDNZRB   EQU   ISTLDNCB+100
LDNCPQ   EQU   ISTLDNCB+96
LDNSIOQ  EQU   ISTLDNCB+92
LDNZX002 EQU   ISTLDNCB+91
LDNZX001 EQU   ISTLDNCB+90
LDNZH002 EQU   ISTLDNCB+88
LDNZV001 EQU   ISTLDNCB+84
LDNZACSW EQU   ISTLDNCB+76
LDNZC002 EQU   ISTLDNCB+68
LDNCSWSV EQU   ISTLDNCB+60
LDNCHFLD EQU   ISTLDNCB+56
LDNRESRV EQU   ISTLDNCB+55
@NM00045 EQU   LDNCFLAG
LDNRMF   EQU   LDNCFLAG
LDNIBI   EQU   LDNCFLAG
LDNTSAF  EQU   ISTLDNCB+52
LDNCUUA  EQU   ISTLDNCB+48
LDNCB    EQU   ISTLDNCB
NCBRSV01 EQU   ISTNCB+46
NCBSWDAF EQU   ISTNCB+44
NCBFMCBP EQU   ISTNCB+32
NCBLTRC  EQU   ISTNCB+30
NCBRVPT1 EQU   ISTNCB+28
NCBNMLLN EQU   NCBFLAGS+3
@NM00044 EQU   NCBFLAG1
@NM00043 EQU   NCBFLAG1
NCBTTF   EQU   NCBFLAG1
NCBRSYNC EQU   NCBFLAG1
NCBRSTRT EQU   NCBFLAG1
NCBCONF  EQU   NCBFLAG1
NCBSNAI  EQU   NCBFLAG1
NCBFLTIO EQU   NCBFTRIO
NCBCSTAT EQU   NCBFLAGS
NCBNCSL  EQU   ISTNCB+22
NCBNCBA  EQU   ISTNCB+20
NCBFMCBA EQU   ISTNCB+16
NCBNSNA  EQU   ISTNCB+12
NCBTSKID EQU   ISTNCB+8
NCBRDTE  EQU   ISTNCB+4
NCBDAF   EQU   ISTNCB+2
NCBLNGTH EQU   ISTNCB+1
NCBTYPE  EQU   ISTNCB
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCSWL  EQU   DEVFCCTL
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVSUBND EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
ATCAOS   EQU   ISTATCVT+1584
ATCPOPAB EQU   ATCAOSM+640
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00042 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
ATCRPT26 EQU   ATCAOSM+332
ATCRPT25 EQU   ATCAOSM+328
ATCRPT24 EQU   ATCAOSM+324
ATCRPT23 EQU   ATCAOSM+320
ATCRPT22 EQU   ATCAOSM+316
ATCRPT21 EQU   ATCAOSM+312
ATCRPT20 EQU   ATCAOSM+308
ATCRPT19 EQU   ATCAOSM+304
ATCRPT18 EQU   ATCAOSM+300
ATCRPT17 EQU   ATCAOSM+296
ATCRPT16 EQU   ATCAOSM+292
ATCRPT15 EQU   ATCAOSM+288
ATCRPT14 EQU   ATCAOSM+284
ATCRPT13 EQU   ATCAOSM+280
ATCRPT12 EQU   ATCAOSM+276
ATCRPT11 EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCAP37  EQU   ATCAOSM+264
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP34  EQU   ATCAOSM+32
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
ATCRSVBB EQU   ISTATCVT+908
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCINCW3 EQU   ISTATCVT+832
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00041 EQU   ISTATCVT+818
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ISTATCVT+788
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCRDTLK EQU   ISTATCVT+472
ATCVOCLK EQU   ISTATCVT+468
ATCCDFDN EQU   ISTATCVT+464
ATCCDFIN EQU   ISTATCVT+460
ATCDVTLK EQU   ISTATCVT+456
ATCAP36  EQU   ISTATCVT+452
ATCAP35  EQU   ISTATCVT+448
ATCAP33  EQU   ISTATCVT+444
ATCRSV99 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCMSGP  EQU   ISTATCVT+344
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCCDFND EQU   ISTATCVT+284
ATCCDDEL EQU   ISTATCVT+280
ATCCDADD EQU   ISTATCVT+276
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCCIDM  EQU   ATCCOM+266
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTDF EQU   ATCCOM+208
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00040 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00039 EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
LOKXCL   EQU   @NM00037
LOKPRY   EQU   @NM00037
@NM00038 EQU   @NM00037
@NM00036 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL3PTR EQU   CRABASIC+20
CRAL2PTR EQU   CRABASIC+16
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
RIARSV03 EQU   RIAFLGS+2
RIARSV02 EQU   RIAFLG2
RIABR15  EQU   RIAFLG2
RIARSPCC EQU   RIAFLG2
RIARTPXT EQU   RIAFLG2
RIACONT  EQU   RIAFLG2
RIAFABN  EQU   RIAFLG2
RIARSV01 EQU   RIAFLG1
RIACTIVE EQU   RIAFLG1
RIACTL   EQU   RIAFLG1
RIAABR15 EQU   RIAABRGS+60
RIAABR14 EQU   RIAABRGS+56
RIAABR13 EQU   RIAABRGS+52
RIAABR12 EQU   RIAABRGS+48
RIAABR11 EQU   RIAABRGS+44
RIAABR10 EQU   RIAABRGS+40
RIAABR09 EQU   RIAABRGS+36
RIAABR08 EQU   RIAABRGS+32
RIAABR07 EQU   RIAABRGS+28
RIAABR06 EQU   RIAABRGS+24
RIAABR05 EQU   RIAABRGS+20
RIAABR04 EQU   RIAABRGS+16
RIAABR03 EQU   RIAABRGS+12
RIAABR02 EQU   RIAABRGS+8
RIAABR01 EQU   RIAABRGS+4
RIAABR00 EQU   RIAABRGS
RIARSV04 EQU   ISTRIA+14
RIAABPSW EQU   ISTRIA+4
RIAABCD  EQU   ISTRIA
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
CRRRVPT5 EQU   CRRSAREA+316
CRRRVPT4 EQU   CRRSAREA+312
CRRRVPT3 EQU   CRRSAREA+308
CRRRVPT2 EQU   CRRSAREA+304
CRRRVPT1 EQU   CRRSAREA+300
CRRRVCR2 EQU   CRRSAREA+292
CRRRVCR1 EQU   CRRSAREA+291
CRRXFNCD EQU   CRRSAREA+290
CRRLDOCT EQU   CRRSAREA+288
CRRBTLEN EQU   CRRSAREA+284
CRRBLEN  EQU   CRRSAREA+282
CRRBRTCD EQU   CRRSAREA+281
@NM00035 EQU   CRRBFLGS
CRRBFLG1 EQU   CRRBFLGS
CRRBLDAD EQU   CRRSAREA+276
CRRBARAD EQU   CRRSAREA+272
CRRRTN12 EQU   CRRSAREA+268
CRRRTN11 EQU   CRRSAREA+264
CRRRTN10 EQU   CRRSAREA+260
CRRRTN9  EQU   CRRSAREA+256
CRRRTN8  EQU   CRRSAREA+252
CRRRTN7  EQU   CRRSAREA+248
CRRRTN6  EQU   CRRSAREA+244
CRRRTN5  EQU   CRRSAREA+240
CRRRTN4  EQU   CRRSAREA+236
CRRRTN3  EQU   CRRSAREA+232
CRRRTN2  EQU   CRRSAREA+228
CRRRTN1  EQU   CRRSAREA+224
CRRRES1  EQU   CRRSAREA+222
CRRLCNT  EQU   CRRSAREA+220
CRRATCVT EQU   CRRSAREA+216
CRRVALCK EQU   CRRSAREA+212
CRRARPL  EQU   CRRTRBUF+4
CRRBIND  EQU   CRRTRBUF+3
CRRTRRES EQU   CRRTRBUF
CRRCLDO  EQU   CRRSAREA+200
CRRUECB  EQU   CRRSAREA+196
CRRLCPB  EQU   CRRSAREA+192
CRRCMDAD EQU   CRRSAREA+188
CRRFMCB  EQU   CRRSAREA+184
CRRCLCCW EQU   CRRSAREA+180
CRRESR2  EQU   CRRESR+1
CRRESR1  EQU   CRRESR
CRRDSB2  EQU   CRRDSB+1
CRRDSB1  EQU   CRRDSB
CRRDTACT EQU   CRRSAREA+174
CRRRSV99 EQU   CRRSAREA+173
CRRRDSOH EQU   CRRFDB3
CRRRLG   EQU   CRRFDB3
CRRLGFRC EQU   CRRFDB3
CRRRDEOT EQU   CRRFDB3
CRRRDEOM EQU   CRRFDB3
CRRRDEOB EQU   CRRFDB3
CRRUNUSD EQU   CRRFDB3
CRRUINPT EQU   CRRFDB3
CRRSTSAV EQU   CRRFDB2
CRRCUERR EQU   CRRFDB2
CRRDLGFL EQU   CRRFDB2
CRRIOERR EQU   CRRFDB2
CRRDVUNS EQU   CRRFDB2
CRRATND  EQU   CRRFDB2
CRRRVID  EQU   CRRFDB2
CRRERLK  EQU   CRRFDB2
CRRRTNCD EQU   CRRFDBK1
CRRNSNA  EQU   CRRRTYPE
CRRDFSYN EQU   CRRRTYPE
CRRRESP  EQU   CRRRTYPE
CRRDFASY EQU   CRRRTYPE
CRRDBLCK EQU   CRRRFLG1
CRRRPSBD EQU   CRRRFLG1
CRRRPLOQ EQU   CRRRFLG1
CRRRPLS  EQU   CRRRFLG1
CRRSW7   EQU   CRRFLGS
CRRSW6   EQU   CRRFLGS
CRRSW5   EQU   CRRFLGS
CRRSW4   EQU   CRRFLGS
CRRSW3   EQU   CRRFLGS
CRRSW2   EQU   CRRFLGS
CRRSW1   EQU   CRRFLGS
CRRSW0   EQU   CRRFLGS
CRRRSV04 EQU   CRRFLGS4
CRRDLCCW EQU   CRRFLGS3
CRRRESET EQU   CRRFLGS3
CRRSUBBK EQU   CRRFLGS3
CRRRSV08 EQU   CRRFLGS3
CRRDEBQ  EQU   CRRFLGS3
CRRSTSPR EQU   CRRFLGS3
CRRDREQ  EQU   CRRFLGS3
CRRDFDBK EQU   CRRFLGS3
CRRDFSB  EQU   CRRFLGS2
CRRDPROC EQU   CRRFLGS2
CRREXTS  EQU   CRRFLGS2
CRRELSRI EQU   CRRFLGS2
CRRPOST  EQU   CRRFLGS2
CRRENDLW EQU   CRRFLGS2
CRRPRGIP EQU   CRRFLGS2
CRRDEXP  EQU   CRRFLGS2
CRRSOLRQ EQU   CRRFLGS1
CRRREQP  EQU   CRRFLGS1
CRRCPROC EQU   CRRFLGS1
CRRFINI  EQU   CRRFLGS1
CRRPREIO EQU   CRRFLGS1
CRRINIO  EQU   CRRFLGS1
CRRFLDOS EQU   CRRFLGS1
CRRDOCUR EQU   CRRFLGS1
CRRRATS4 EQU   CRRATS+7
@NM00034 EQU   CRRSATS
CRRASC51 EQU   CRRSATS
CRRASC40 EQU   CRRSATS
CRRASC30 EQU   CRRSATS
CRRASC21 EQU   CRRSATS
CRRASC10 EQU   CRRSATS
CRRASC01 EQU   CRRSATS
@NM00033 EQU   CRRRATS2
CRRPLIC  EQU   CRRRATS2
CRRRC81  EQU   CRRRATS2
CRRRC80  EQU   CRRRATS2
CRRRC65  EQU   CRRRATS2
CRRRC63  EQU   CRRRATS2
CRRRC55  EQU   CRRRATS2
CRRRC54  EQU   CRRRATS2
CRRRC53  EQU   CRRRATS1
CRRRC52  EQU   CRRRATS1
CRRRC51  EQU   CRRRATS1
CRRRC30  EQU   CRRRATS1
CRRRC26  EQU   CRRRATS1
CRRRC23  EQU   CRRRATS1
CRRRC22  EQU   CRRRATS1
CRRRC21  EQU   CRRRATS1
@NM00032 EQU   CRRATS4
CRRC3X   EQU   CRRATS4
CRRC85   EQU   CRRATS4
CRRC83   EQU   CRRATS4
CRRC82   EQU   CRRATS4
CRRC61   EQU   CRRATS4
CRRC60   EQU   CRRATS4
CRRC81   EQU   CRRATS3
CRRC80   EQU   CRRATS3
CRRC75   EQU   CRRATS3
CRRC51   EQU   CRRATS3
CRRC50   EQU   CRRATS3
CRRC42   EQU   CRRATS3
CRRC41   EQU   CRRATS3
CRRC40   EQU   CRRATS3
CRRC32   EQU   CRRATS2
CRRC31   EQU   CRRATS2
CRRC30   EQU   CRRATS2
CRRC25   EQU   CRRATS2
CRRC24   EQU   CRRATS2
CRRC23   EQU   CRRATS2
CRRC22   EQU   CRRATS2
CRRC21   EQU   CRRATS2
CRRC20   EQU   CRRATS1
CRRC13   EQU   CRRATS1
CRRC12   EQU   CRRATS1
CRRC11   EQU   CRRATS1
CRRC10   EQU   CRRATS1
CRRC02   EQU   CRRATS1
CRRC01   EQU   CRRATS1
CRRC00   EQU   CRRATS1
CRRRMAS4 EQU   CRRMAS+7
@NM00031 EQU   CRRSMAS
CRRMSC51 EQU   CRRSMAS
CRRMSC40 EQU   CRRSMAS
CRRMSC30 EQU   CRRSMAS
CRRMSC21 EQU   CRRSMAS
CRRMSC10 EQU   CRRSMAS
CRRMSC01 EQU   CRRSMAS
@NM00030 EQU   CRRRMAS2
CRRRM81  EQU   CRRRMAS2
CRRRM80  EQU   CRRRMAS2
CRRRM65  EQU   CRRRMAS2
CRRRM63  EQU   CRRRMAS2
CRRRM55  EQU   CRRRMAS2
CRRRM54  EQU   CRRRMAS2
CRRRM53  EQU   CRRRMAS1
CRRRM52  EQU   CRRRMAS1
CRRRM51  EQU   CRRRMAS1
CRRRM30  EQU   CRRRMAS1
CRRRM26  EQU   CRRRMAS1
CRRRM23  EQU   CRRRMAS1
CRRRM22  EQU   CRRRMAS1
CRRRM21  EQU   CRRRMAS1
@NM00029 EQU   CRRMAS4
CRRM3X   EQU   CRRMAS4
CRRM85   EQU   CRRMAS4
CRRM83   EQU   CRRMAS4
CRRM82   EQU   CRRMAS4
CRRM61   EQU   CRRMAS4
CRRM60   EQU   CRRMAS4
CRRM81   EQU   CRRMAS3
CRRM80   EQU   CRRMAS3
CRRM75   EQU   CRRMAS3
CRRM51   EQU   CRRMAS3
CRRM50   EQU   CRRMAS3
CRRM42   EQU   CRRMAS3
CRRM41   EQU   CRRMAS3
CRRM40   EQU   CRRMAS3
CRRM32   EQU   CRRMAS2
CRRM31   EQU   CRRMAS2
CRRM30   EQU   CRRMAS2
CRRM25   EQU   CRRMAS2
CRRM24   EQU   CRRMAS2
CRRM23   EQU   CRRMAS2
CRRM22   EQU   CRRMAS2
CRRM21   EQU   CRRMAS2
CRRM20   EQU   CRRMAS1
CRRM13   EQU   CRRMAS1
CRRM12   EQU   CRRMAS1
CRRM11   EQU   CRRMAS1
CRRM10   EQU   CRRMAS1
CRRM02   EQU   CRRMAS1
CRRM01   EQU   CRRMAS1
CRRM00   EQU   CRRMAS1
CRRFSB   EQU   CRRSAREA+144
CRRSAVE1 EQU   CRRSAREA+72
CRRSAVE  EQU   CRRSAREA
CRRRSV22 EQU   ISTDCCRR+4
CRRCRR   EQU   ISTDCCRR
@NM00028 EQU   ISTAPCRR+137
@NM00027 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00026 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00025 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00024 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00023 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00022 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00021 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00020 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00019 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00018 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00017 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWACI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
@NM00016 EQU   LCCWRWOP
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00015 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00014 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00013 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   ISTRPH+1
RPHTYPE  EQU   ISTRPH
CCWSPRSV EQU   CCWSPARE
CCWCFTX  EQU   CCWSPARE
CCWTRCE  EQU   CCWSPARE
CCWNULL  EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWCD    EQU   CCWFLAGS
ZLBZBFSC EQU   ISTZLBVT+88
ZLBZIFVB EQU   ISTZLBVT+84
ZLBZIFUB EQU   ISTZLBVT+80
ZLBZIFSB EQU   ISTZLBVT+76
ZLBRSV22 EQU   ISTZLBVT+72
ZLBZBFID EQU   ISTZLBVT+68
ZLBZBFX0 EQU   ISTZLBVT+64
ZLBRSV02 EQU   ISTZLBVT+60
ZLBRSV21 EQU   ISTZLBVT+56
ZLBZBFJB EQU   ISTZLBVT+52
ZLBZBFIB EQU   ISTZLBVT+48
ZLBZBFHB EQU   ISTZLBVT+44
ZLBZBFGB EQU   ISTZLBVT+40
ZLBZBFFB EQU   ISTZLBVT+36
ZLBZBFEB EQU   ISTZLBVT+32
ZLBZBFDB EQU   ISTZLBVT+28
ZLBZBFCB EQU   ISTZLBVT+24
ZLBZBFBB EQU   ISTZLBVT+20
ZLBZBFAB EQU   ISTZLBVT+16
ZLBZBFNB EQU   ISTZLBVT+12
ZLBZCFAI EQU   ISTZLBVT+8
ZLBZBF0B EQU   ISTZLBVT+4
ZLBZAF0B EQU   ISTZLBVT
ZFSZWRD4 EQU   ISTZFSVT+36
ZFSZWRD3 EQU   ISTZFSVT+32
ZFSZEFCB EQU   ISTZFSVT+28
ZFSZFFEB EQU   ISTZFSVT+24
ZFSZDFJ0 EQU   ISTZFSVT+20
ZFSZFFFB EQU   ISTZFSVT+16
ZFSZFFDB EQU   ISTZFSVT+12
ZFSZFFCB EQU   ISTZFSVT+8
ZFSZEMAB EQU   ZFSZEAAB
ZFSZEMBB EQU   ZFSZEABB
ZPSZDFQR EQU   ISTZPSVT+80
ZPSZDFPR EQU   ISTZPSVT+76
ZPSZDFXR EQU   ISTZPSVT+72
ZPSZIF2B EQU   ISTZPSVT+68
ZPSZAF2B EQU   ISTZPSVT+64
ZPSZDFMB EQU   ISTZPSVT+60
ZPSZDFMF EQU   ISTZPSVT+56
ZPSZDFNB EQU   ISTZPSVT+52
@NM00012 EQU   ISTZPSVT+48
ZPSZDFF0 EQU   ISTZPSVT+44
ZPSZTRTT EQU   ISTZPSVT+40
ZPSZBFOB EQU   ISTZPSVT+36
ZPSZBFMB EQU   ISTZPSVT+32
ZPSZBFZ0 EQU   ISTZPSVT+28
ZPSZDFI0 EQU   ISTZPSVT+20
ZPSZDFB0 EQU   ISTZPSVT+16
ZPSZDFH0 EQU   ISTZPSVT+12
ZPSZDFD0 EQU   ISTZPSVT+8
ZPSZDFA0 EQU   ISTZPSVT
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00566 EQU   @RC00565
@RF00599 EQU   @RC00590
@RC00649 EQU   @RC00648
WRCCW@   EQU   @PB00002
@ENDDATA EQU   *
         END   ISTZBFBA,(C'PLS1957',0603,75153)
/*
//*
//STEP3   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY ISTZBFBA('ZP60008')
++ZAP(ISTZBF0L) DISTLIB(AOS24).
 NAME ISTZBF0L
 IDRDATA ZP60008
VER 082D 0000,0000,0000,0000   ** START OF TRANSLATE TABLE
VER 089C 11                    ** OLD ENTRY FOR HEX 6F
VER 091E 0D16                  ** OLD ENTRIES FOR HEX F1 AND F2
VER 0922 1D12,2D               ** OLD ENTRIES FOR HEX F5, F6 AND F7
REP 08AB DD                    ** NEW ENTRY FOR HEX 7E REPLACING A NULL
REP 0920 CD                    ** NEW ENTRY FOR HEX F3 REPLACING A NULL
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//STEP4   EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60008)
          .
/*
//*
//STEP5CK EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60008)
        CHECK
        .
/*
//*
//STEP5   EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60008)
        DIS(WRITE)
        .
/*
//
//ZP60009  JOB (SYSGEN),'J05 M24: ZP60009',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  ADD NOEDIT SUPPORT FOR TPUT AND TPG TO TSO/VTAM.
//*
//STEP01  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
++USERMOD(ZP60009)   REWORK(20190422)                      .
++VER(Z038) FMID(ETV0108)
  PRE(UZ35180,UZ26905,UZ67122,UZ22286,UZ55134,UZ28255,
      UZ71054,UZ54020,UZ68882,UZ57385,UZ28016)
 /*
   PROBLEM DESCRIPTION:
     THE NOEDIT OPERAND OF TPUT AND TPG IS NOT HONOURED BY TSO/VTAM.
       THE TIOC COMMON SVC 93 ROUTINE IGC0009C CORRECTLY DETECTS THE
       REQUEST OF NOEDIT FOR TPUT AND TPG REQUESTS, BUT THIS IS NOT
       HANDLED PROPERLY BY TSO/VTAM.
     THE GTTERM MACRO FUNCTION IS NOT SUPPORTED BY TSO/VTAM.
       WHEN A TSO APPLICATION ISSUES THE GTTERM MACRO RC=4 RESULTS.
       AN APPLICATION CANNOT DETERMINE IF THE READ PARTITION (QUERY)
       FUNCTION IS SUPPORTED.  ALSO, THE ALTERNATE SCREEN SIZE CANNOT
       BE DETERMINED.
     3270 HOUSEKEEPING IS LIMITED TO MODEL-1 AND MODEL-2 SCREEN SIZES.
       TSO WILL ONLY PERFORM LINE MODE 3270 SCREEN HOUSEKEEPING FOR
       MODEL-1 (12 BY 40) AND MODEL-2 (24 BY 80) SCREEN SIZES.  THE
       ALTERNATE SCREEN SIZE OF A TERMINAL CANNOT BE PROPERLY EXPLOITED
       BY TSO LINE MODE, NOR BY TSO FULLSCREEN APPLICATIONS.
     THE NOEDIT OPERAND OF STFSMODE IS NOT SUPPORTED BY TSO/VTAM.
       NOEDIT INPUT MODE IS SET BY SPECIFYING NOEDIT=YES ON A
       'STFSMODE ON' MACRO.  THIS IS NOT SUPPORTED BY TSO.  WITHOUT
       THIS ABILITY ANY X'1E' IN INPUT DATA (INCLUDING A QUERY
       RESPONSE, OR AN SBA ORDER FROM A SCREEN WITH MORE THAN 4096
       LOCATIONS) WILL BE INTERPRETED AS A FIELD MARK CHARACTER AND
       CAUSE THE DATA FOLLOWING IT TO BE HELD OVER UNTIL THE NEXT TGET
       MACRO IS ISSUED.

       THIS USERMOD CHANGES SEVERAL TSO/VTAM MODULES.

       THE TSO/VTAM SVC 93 ROUTER IS CHANGED TO NOT REJECT REQUESTS
       WITH NOEDIT SPECIFIED.

       THE TSO/VTAM TPUT HANDLER IS CHANGED TO NOT TRUNCATE TRAILING
       BLANKS FROM NOEDIT REQUESTS.  A PREVIOUSLY RESERVED BIT IS
       USED TO FLAG NOEDIT REQUESTS, WHICH ARE ALSO FLAGGED AS
       FULLSCREEN REQUESTS BY THE TPUT AND TPG MACROS (AND NOW ALSO
       BY THIS MODULE).

       THE TSO/VTAM TGET HANDLER IS CHANGED TO BACK OUT THE FIX FOR
       APAR OZ60978 SHIPPED IN PTF UZ57385 TO REGRESS FUNCTIONALITY
       TO THE UZ55134 LEVEL SO THAT TPUT MACROS ISSUED AFTER TGET
       MACROS WITH THE NOWAIT OPERAND ARE NOT QUEUED UNTIL THERE IS
       SOME INPUT, BUT SENT TO THE SCREEN ASYNCHRONOUSLY.  THIS HAS
       THE EFFECT OF REINTRODUCING THE PROBLEM WHERE A TGET NOWAIT
       DOES NOT FORCE THE KEYBOARD TO BECOME UNLOCKED, BUT THIS CAN
       BE CIRCUMVENTED BY THE APPLICATION SETTING THE X'02' BIT IN
       THE WCC WHEN APPROPRIATE.

       THE TSO/VTAM TGET HANDLER IS ALSO CHANGED TO ADD THE TGET MACRO
       RETURN CODES 24 AND 28 WHICH MAY BE GIVEN WHEN NOEDIT INPUT
       MODE IS IN EFFECT, THEREBY IMPROVING COMPATIBILITY WITH TSO/E.

       THE TSO/VTAM INITIALIZATION ROUTINE FOR THE TSO INPUT MANAGER
       AND TSO OUTPUT MANAGER HAS BEEN CHANGED TO NOT REGARD TERMINALS
       WITH BUFFER SIZES LARGER THAN 1920 BYTES AS MODEL-1 TERMINALS.
       THIS WILL HELP AVOID LINE MODE SCREEN HANDLING ERRORS AFTER
       LOGON RECONNECT PROCESSING.

       THE TSO/VTAM LOGON RECONNECT ROUTINE HAS BEEN CHANGED TO
       INCLUDE THE PRIMARY AND ALTERNATE SCREEN DIMENSIONS IN THE
       DATA PERTAINING TO THE NEW TERMINAL PROPAGATED TO CONTROL
       BLOCKS WHEN A LOGON RECONNECT IS PERFORMED, THUS ALLOWING TSO
       APPLICATIONS TO DETECT DYNAMIC CHANGES TO THE SCREEN SIZE.

       THE TSO/VTAM 3270 TERMINAL SCREEN MANAGER IS ALTERED TO SKIP
       ANY DATA TRANSLATION FOR NOEDIT TPUTS.  FURTHER, IN KEEPING
       WITH 3270 ARCHITECTURE DATA INTEGRITY FOR DISPLAYABLE CODE
       POINTS (WHERE ALL CODE POINTS IN THE RANGE X'40' TO X'FE'
       ARE CONSIDERED "DISPLAYABLE", AND REGARDLESS OF THE TERMINAL'S
       ABILITY TO DISPLAY THE CHARACTER, WHEN SUCH A CODE POINT IS
       WRITTEN TO THE TERMINAL, IT CAN BE READ BACK UNALTERED) ALL
       TPUTS TO 3270 EBCDIC TERMINALS WILL NO LONGER ALTER ANY DATA
       CODE POINTS IN THE X'40' TO X'FE' RANGE.  (THE X'40' CODE POINT
       IS RESERVED FOR A BLANK IN ALL SINGLE-BYTE CHARACTER SETS.)

       THE TSO/VTAM 3270 TERMINAL SCREEN MANAGER IS ALSO ALTERED TO
       SUPPORT DIFFERENT PRIMARY AND ALTERNATE SCREEN SIZES OF ANY
       SIZE SUBJECT TO THE 3270 ARCHITECTURE LIMITATIONS, AND ALSO
       THAT THE ALTERNATE SCREEN SIZE NEVER HAS FEWER COLUMNS NOR
       FEWER LINES THAN THE PRIMARY SCREEN SIZE.  TSO/VTAM LINE MODE
       HOUSEKEEPING WILL NOW USE 14-BIT ADDRESSING FOR ALL BUFFER
       LOCATIONS GREATER THAN 4095, BUT WILL STILL USE 12-BIT
       ADDRESSING FOR LOCATIONS FROM 0 TO 4095 INCLUSIVE.  THIS
       CHANGE HAS THE EFFECT OF INCREASING THE MAXIMUM TSO/VTAM 3270
       SCREEN SIZE SUPPORTED FROM 4096 LOCATIONS TO 16384 LOCATIONS.

       THE TSO/VTAM 3270 TERMINAL SCREEN MANAGER NOW HANDLES TPUT
       FULLSCR DIFFERENTLY TO THE EXTENT THAT A STANDARD WRITE (X'F1')
       WITH A NO-OP WCC (X'40') WILL NOT FORCE THE INCLUSION OF AN
       INSERT CURSOR ORDER AS THE TPUT MAY BE SENDING AN ASYNCHRONOUS
       PARTIAL SCREEN UPDATE WHICH DOES NOT OVERWRITE AN ACTIVE INPUT
       AREA WHERE SOME TEXT MAY BE BEING TYPED IN.

       THE TSO/VTAM 3270 INPUT DATA HANDLER HAS BEEN ALTERED TO NOT
       PROCESS FIELD MARK CHARACTERS INPUT WHEN NOEDIT MODE IS IN
       EFFECT.  FURTHER, THE ACTUAL NUMBER OF COLUMNS AND LINES ON
       THE SCREEN IS USED IN LINE COUNT CALCULATIONS.

       THE TSO/VTAM SVC 94 ROUTER IS ALTERED TO PASS CONTROL TO A NEW
       CSECT FOR TSO TERMINAL CONTROL FUNCTION 17 (GTTERM).  A TSO
       APPLICATION CAN NOW ISSUE A GTTERM MACRO TO DETERMINE IF THE
       QUERY BIT IS ON, AND CAN GET THE DIMENSIONS OF THE PRIMARY AND
       ALTERNATE SCREEN SIZES.  NOEDIT TPUT/TPG MACROS CAN BE USED
       TO ISSUE WRITE STRUCTURED FIELD COMMANDS TO GAIN ACCESS TO
       VARIOUS 3270 EXTENSIONS INCLUDING GRAPHICS.  QUERY SUPPORT IS
       NOT NEEDED FOR A READ BUFFER COMMAND WHICH CAN NOW ALSO BE
       ISSUED VIA A NOEDIT TPUT/TPG MACRO.  GTTERM RETURN CODES AND
       OUTPUT IS COMPATIBLE WITH TSO/E, EXCEPT THAT THE TERMID OUTPUT
       AREA IS CURRENTLY LIMITED TO 8 BYTES.

       THE TERMINAL CONTROL MACRO ROUTINE FOR THE STFSMODE MACRO HAS
       BEEN CHANGED TO SUPPORT THE NOEDIT OPERAND, AND RESHOW KEY CODES
       CAN NOW BE IN THE RANGE OF FROM 1 TO 24 INCLUSIVE (REPRESENTING
       THE VALID PFK NUMBERS).

       THE TERMINAL CONTROL MACRO ROUTINE FOR THE STLINENO MACRO HAS
       BEEN CHANGED TO SUPPORT THE SPECIFICATION OF ANY VALID LINE
       NUMBER THAT EXISTS ON THE SCREEN.  IT HAS ALSO BEEN CHANGED TO
       SUPPORT NOEDIT INPUT MODE.

       THE TERMINAL CONTROL MACRO ROUTINE FOR THE STSIZE MACRO HAS
       BEEN CHANGED TO INDICATE THAT ANY REQUESTED SCREEN SIZE WHICH
       MATCHES EITHER THE PRIMARY OR ALTERNATE SIZE OF THE SCREEN IS
       CONSIDERED A STANDARD SIZE, EVEN IF IT IS NOT THE SIZE OF A
       MODEL-1 OR MODEL-2 SCREEN.  THIS IS DONE WITH A RETURN CODE
       OF ZERO INSTEAD OF A RETURN CODE OF 12 WHICH INDICATES A
       NON-STANDARD SCREEN SIZE.  (THE FLAGGING OF NON-STANDARD
       SCREEN SIZES IS INTENDED TO WARN OF THE POSSIBILITY OF
       SCREEN CONTROL ERRORS.)

       THE MAPPING MACRO FOR THE TSO/VTAM WORK AREA IKTTVWA IS
       UPDATED TO ADD BIT TVWAALTS WHICH IS SET WHEN THE TSO/VTAM
       SCREEN MANAGER SETS THE SCREEN TO ITS ALTERNATE SIZE.
       (THE MAPPING OF THIS BIT IS INCOMPATIBLE WITH TSO/E.)

       THE STFSMODE TERMINAL CONTROL MACRO FOR TSO FULLSCREEN
       APPLICATIONS HAS BEEN UPDATED TO ADD THE NOEDIT OPERAND,
       WHICH CAN BE ASSIGNED THE VALUE OF YES OR NO.  NO IS THE
       DEFAULT.  NOEDIT=YES IS USED TO ALLOW BYTES WITH A VALUE OF
       X'1E' TO BE RETURNED TO AN APPLICATION AS INPUT DATA
       FROM THE TERMINAL WITHOUT EACH SUCH BYTE BEING PROCESSED AS
       A FIELD MARK.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 9.

     REWORK HISTORY:
       2003-02-01: INITIAL RELEASE.
       2003-03-05: KBD (UN)LOCK ASYNC MSGS DURING NOEDIT TPUTS.
       2003-03-30: DO NOT FORCE IC IF WRT WITH NO-OP WCC.
       2005-08-14: DO NOT FORCE LINE-WRAP AFTER COLUMN 80.
       2009-06-01: USE SCREEN SIZES AND QUERY BIT FROM SNA BIND.
       2009-11-07: CHANGE IKTIIOM AND ADD IKTLOGR ZAPS FOR RECONNECT.
       2012-04-28: IMPROVE THE INTEROPERABILITY OF TPUT NOEDIT (WITH
                   "UNLOCK KEYBOARD" SET IN THE WCC) AND TGET NOWAIT
                   TO MATCH THAT OF TPUT FULLSCR AND TGET NOWAIT.
       2019-04-22: CHANGE IKTVTGET SO THAT TGET NOWAIT REQUESTS DO
                   NOT INHIBIT WRITES TO THE TERMINAL UNTIL SOME
                   INBOUND DATA IS FIRST RECEIVED FROM THE TERMINAL.
                   REMOVE DEBUG CODE AND FLAGS FROM IKT3270O CSECT.
                   REMOVE FLSCRTAB EDITING OF TPUT FULLSCR DATA.

     TSO/VTAM IS A VTAM APPLICATION.  THIS SYSMOD DOES NOT IMPLY
     THAT VTAM CAN CORRECTLY PROCESS THE DATA THAT CAN NOW BE
     GENERATED BY TSO APPLICATIONS, EVEN IF THE DATA CONSISTS OF
     A PERFECTLY VALID 3270 DATA STREAM.

     EVT0108 LOCAL NON-SNA SUPPORT IS PROVIDED BY USERMOD ZP60008.

     USERMOD ZP60032 UPGRADES THE GTTERM MACRO TO BE ABLE TO EXPLOIT
     NEW FUNCTION DELIVERED IN THIS SYSMOD.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKT0009C
       IKTVTPUT
       IKTIIOM
       IKTLOGR
       IKTVTGET
       IKT3270O
       IKT0009D
       IKTXLOG
       IKT3270I
       IKT09412
       IKT09413
       IKT0940A
     MACROS:
       IKTTVWA
       STFSMODE
 */.
++ZAP(IKT0009C) DISTLIB(AOST3).
 NAME IKT0009C
 IDRDATA ZP60009
VER 00C6 4870,5060           LH    R7,XSAPRMTJ
VER 00CA 1277                LTR   R7,R7
VER 00CC 4780,C0C6           BZ
VER 00E4 4870,5060           LH    R7,XSAPRMTJ
VER 00E8 1277                LTR   R7,R7
VER 00EA 4780,C1AE           BZ
REP 00CC 47D0                BNP
REP 00EA 47D0                BNP
++ZAP(IKTVTPUT) DISTLIB(AOST3).
 NAME IKTVTPUT
 IDRDATA ZP60009
VER 0016 05C0                BALR  R12,0
VER 0258 5010,D050           ST    R1,OPFLAGS
VER 02DA 5010,D050           ST    R1,OPFLAGS
VER 043E 50E0,506C  DATAEDIT ST    R14,XSASAVEA
VER 0442 9103,5064           TM    XSAOPTNS,XSAEDITO
VER 0446 4770,C472           BNZ   @RT00307
VER 044A 9640,5068  NEXTINST OI    XSAFLAG,XSADMOVE
VER 0508 0000,0000  *        PATCH AREA
VER 050C 0000,0000  *        PATCH AREA
VER 0510 0000,0000  *        PATCH AREA
VER 0514 0000,0000  *        PATCH AREA
VER 0518 0000,0000  *        PATCH AREA
VER 051C 0000,0000  *        PATCH AREA
VER 0520 0000       *        PATCH AREA
VER 0522 0000,0000  *        PATCH AREA
VER 0526 0000       *        PATCH AREA
REP 0258 45E0,C500           BAL   R14,PATCH2
REP 02DA 45E0,C500           BAL   R14,PATCH2
REP 0446 47F0,C4F0           B     PATCH1
REP 0508 4770,C472  PATCH1   BNZ   @RT00307
REP 050C 9180,5060           TM    XSAPRMTJ,XSANOED
REP 0510 4710,C472           BO    @RT00307
REP 0514 47F0,C432           B     NEXTINST
REP 0518 5010,D050  PATCH2   ST    R1,OPFLAGS
REP 051C 9180,5060           TM    XSAPRMTJ,XSANOED
REP 0520 07EE                BNOR  R14
REP 0522 9634,D051           OI    OPOPTNS,OPEDIT+OPNOED
REP 0526 07FE                BR    R14
++ZAP(IKTIIOM) DISTLIB(AOST4).
 NAME IKTIIOM
 IDRDATA ZP60009
VER 03C4 D501,804A,64D4      CLC   TSBXTMBF,=H'1920'
VER 03CA 4770,63BE           BNE   MODEL1
VER 03CE 9250,C008           MVI   TSBLNSZ,80
VER 03D2 9218,C028           MVI   TSBLNNO,24
VER 03D6 47F0,63EA           B     SIZESET
REP 03CA 4740,63BE           BL    MODEL1
++ZAP(IKTLOGR) DISTLIB(AOST4).
 NAME IKTLOGR
 IDRDATA ZP60009
VER 0150 D207,B068,A068      MVC   TSBTRMID(8,TSBBASE),TSBTRMID(@10)
REP 0150 D20B,B064,A064      MVC   TSBPRMR(12,TSBBASE),TSBPRMR(@10)
++MOD(IKTVTGET) DISTLIB(AOST3).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSALLDA,
//             SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//*
//STEP02  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '*** IKTVTGET: TSO/VTAM TGET ROUTINE ***                *
                        '
*
*   MODIFIED BY GREG PRICE APRIL 2019 FOR USERMOD ZP60009
*
IKTVTGET CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                        ZP60009-C
         DC    C'IKTVTGET  82.141'                                 0001
         DC    C' ZP60009 2019.109'                           ZP60009-A
         DROP  R15
         USING PSA,0                                          ZP60009-A
@PROLOG  BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
*                                                                  0120
*/********************************************************************/
*/*                                                                  */
*/*  START OF VTAM TGET. ENTERED FROM IGC0009C WITH LOCAL LOCK HELD  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0120
*   XSATCBA=TCBPTR;                 /* SAVE TCB ADDRESS              */
         STCM  R4,7,XSATCBA-RBBASIC(R5)                            0120
*   RFY                                                            0121
*     TCBPTR UNRSTD;                /* FREE-UP REGISTER              */
*   RFY                                                            0122
*     TCB BASED(XSATCBA);                                          0122
         USING TSB,R9                  SET ON ENTRY           ZP60009-A
*        USING RBBASIC,R5              SET ON ENTRY           ZP60009-A
*   TVWAPTR=TSBXTVWA;               /* SET-UP ADDRESSABILITY TO TVWA */
         L     R4,TSBEXTNT                                         0123
         L     R8,TSBXTVWA-TSBX(,R4)                               0123
         USING TVWA,R8                                        ZP60009-A
*   SAVEREG=TVWALLWA;               /* SET R13 TO LOCALLY-LOCKED SAVE
*                                      AREA                          */
         L     R13,TVWALLWA                                        0124
*   XSADATSZ=0;                     /* INITIALIZE DATA SIZE TO 0     */
         SLR   R4,R4                                               0125
         STH   R4,XSADATSZ-RBBASIC(,R5)                            0125
         ST    R4,XSAWD12-RBBASIC(,R5)                        UZ57385-A
*   XSADATVF='0'B;                  /* INITIALIZE TO 'DATA NOT     0126
*                                      VERIFIED'                     */
         NI    XSAFLAG-RBBASIC(R5),255-XSADATVF                    0126
*                                                                  0127
*/********************************************************************/
*/*                                                                  */
*/*     FOLLOWING DO WILL NORMALLY BE EXECUTED ONCE. IT WILL ITERATE */
*/*     IF THERE IS NO DATA AVAILABLE & CALLER REQUESTED 'NOWAIT'.   */
*/*     (AFTER BEING SUSPENDED/REDISPATCHED WHEN DATA IS AVAILABLE)  */
*/*     IT WILL ALSO ITERATE IF THE QUEUE ELEMENT OBTAINED INDICATES */
*/*     'PARTIAL LINE'. I.E. REMAINDER OF INPUT LINE IS IN A FOLLOW- */
*/*     ING QUEUE ELEMENT.                                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0127
*   DO UNTIL XSADOSWT='0'B;         /* BIG DO TO PREVENT GOTO'S      */
@DL00127 DS    0H                                                  0128
*     XSADOSWT='0'B;                /* INIT. SWITCH TO OFF FOR EXIT  */
         NI    XSAFLAG-RBBASIC(R5),255-XSADOSWT                    0128
*     CALL TERMSTAT;                /* CHECK TERMINAL STATUS STATUS
*                                      RETURNED IN XSARC             */
         BAL   R14,TERMSTAT                                        0129
*     IF XSARC^=CONTINUE THEN                                      0130
         CLC   XSARC-RBBASIC(1,R5),CONTINUE                        0130
         BNE   @RT00130                                            0130
*       ;                           /* IF TERMINAL SESSION CANCELLED
*                                      OR ATTENTION HIT, RETURN      */
*     ELSE                                                         0132
*       DO;                                                        0132
*         IPREQ=OBTAIN;             /* REQUEST FOR DATA              */
         MVI   IPREQ(R13),X'02'                                    0133
*/*                                                                  */
*/*  *****************************************************************/
*/*                                                                  */
*/*       CALL INPUT QUEUE MANAGER, IKTQMIN.                         */
*/*       PARAMETER LIST INTERFACE IS BUILT DIRECTLY                 */
*/*       SO THAT PLS WILL NOT GENERATE ANY 'TEMPS'                  */
*/*       ITSELF. DIRECTLY BUILT PARAMETER LIST IS IN                */
*/*       LOCALLY LOCKED WORK AREA.                                  */
*/*                                                                  */
*/*  *****************************************************************/
*/*                                                                 **/
*                                                                  0134
*         PRMLSTAD=ADDR(IPARMS);    /* PUT ADDR INTO 'TEMP'          */
         LA    R4,IPARMS(,R13)                                     0134
         ST    R4,PRMLSTAD(,R13)                                   0134
*         RFY                                                      0135
*           PRMREG1 RSTD;                                          0135
*         PRMREG1=ADDR(PRMLSTAD);   /* REG 1 POINTS TO PLS PARM LST  */
         LA    R1,PRMLSTAD(,R13)                                   0136
*         CALL IKTQMIN;             /* CALL INPUT QUEUE MANAGER      */
         L     R4,CVTPTR                                           0137
         L     R4,CVTTCASP-CVT(,R4)                                0137
         L     R15,TCASIQM-TCAST(,R4)                              0137
         BALR  R14,R15                                             0137
*         RFY                                                      0138
*           PRMREG1 UNRSTD;                                        0138
*         IF IPRC=UNSUCCES THEN     /* ANY DATA AVAILABLE ?          */
         CLI   IPRC(R13),3                                         0139
         BNE   @RF00139                                            0139
*           DO;                     /* NO DATA                       */
*             IF TSBXTMTP^=T3767 THEN/* NOT A 3767 TERMINAL? @ZM20749*/
         L     R4,TSBEXTNT                                         0141
         CLI   TSBXTMTP-TSBX(R4),2                                 0141
         BE    @RF00141                                            0141
*               DO;                 /* NOT A 3767 TERMINAL   @ZM20749*/
*                 IF TVWAPGN='1'B|  /* IS PAGING ON?         @YM03259*/
*                     TVWAKBDL='1'B|/* KEYBOARD LOCKED?      @YM03259*/
*                     TVWAATTN>0|   /* ATTENTION?            @ZM20749*/
*                     TVWAAIGN='1'B /* ATTENTION IGNORED?    @ZM20749*/
*                   THEN            /* PAGING OR KEYBOARD LOCKED   0143
*                                                            @YM03259*/
         TM    TVWAFLG2,TVWAPGN                                    0143
         BO    @RT00143                                            0143
         TM    TVWAFLG4,TVWAKBDL                                   0143
         BO    @RT00143                                            0143
         CLI   TVWAATTN,0                                          0143
         BH    @RT00143                                            0143
         TM    TVWAFLG3,TVWAAIGN                                   0143
         BO    @RT00143                                       ZP60009-C
         TM    XSAOPTNS-RBBASIC(R5),XSANOWT                   ZP60009-A
         BO    @RF00143                                       ZP60009-A
@RT00143 DS    0H                                                  0144
*                   TVWAULK='1'B;   /* REQUEST TO UNLOCK KEYBOARD  0144
*                                                            @YM03259*/
         OI    TVWAFLG1,TVWAULK                                    0144
*                 ELSE                                             0145
*                   ;               /* NO PAGING-KEYBOARD          0145
*                                      UNLOCKED@YM03259              */
@RF00143 DS    0H                                                  0146
*                 IF TVWATIS='0'B&  /* IS TOM NOT SCHEDULED? @YM03259*/
*                     TVWATAS='0'B& /* AVAILABLE AND         @YM03259*/
*                     (TVWAKBDL='1'B|/* IS THE KEYBOARD LOCKED?    0146
*                                                            @ZM20749*/
*                     TVWAATTN>0|   /* ATTENTION?            @ZM20749*/
*                     TVWAAIGN='1'B)/* ATTENTION IGNORED?    @ZM20749*/
*                   THEN            /* YES                           */
         TM    TVWAFLG1,TVWATIS                                    0146
         BNZ   @RF00141                                            0146
         L     R4,TSBEXTNT
         L     R4,TSBXSRB-TSBX(,R4)
         LTR   R4,R4                   ANY SRB FOR TOM PRESENT?
         BZ    @RF00141                NO
         TM    XSAOPTNS-RBBASIC(R5),XSANOWT                   ZP60009-A
         BNO   NOWAITOK                NOT A TGET NOWAIT      ZP60009-A
         TM    TVWAFLG1,TVWAULK        OTHER STUFF GOING ON?  ZP60009-A
         BO    NOWAITOK                YES, IGNORE NOWAIT     ZP60009-A
         NI    TVWAFLG1,255-TVWATAS    NO, SCHEDULE A TOM SRB ZP60009-A
         OI    TVWAFLG4,TVWAKBDL       TELL TPUT K/B LOCKED   ZP60009-A
NOWAITOK DS    0H                      NOWAIT DIVERGENCE END  ZP60009-A
         TM    TVWAFLG1,TVWATAS                                    0146
         BNZ   @RF00141                                            0146
         TM    TVWAFLG4,TVWAKBDL                                   0146
         BO    @RT00146                                            0146
         CLI   TVWAATTN,0                                          0146
         BH    @RT00146                                            0146
         TM    TVWAFLG3,TVWAAIGN                                   0146
         BNO   @RF00141                                            0146
@RT00146 DS    0H                                                  0147
*                   DO;             /* SET UP SCHEDULING OF TOM      */
         BAL   R14,SCHEDTOM                                   UZ57385-C
*               END;                /*                       @ZM20749*/
*             ELSE                                                 0156
*               ;                   /* A 3767 TERMINAL       @ZM20749
*                                      IF TGET NO WAIT, THEN RETURN
*                                      TO CALLER IMMEDIATELY         */
@RF00141 DS    0H                                                  0157
*             IF XSANOWT='1'B THEN  /* DID CALLER SAY 'NOWAIT' ?     */
         TM    XSAOPTNS-RBBASIC(R5),XSANOWT                        0157
         BNO   @RF00157                                            0157
*               DO;                 /* YES,                          */
*                 XSARC=NOWAIT;     /* SET RETURN CODE TO NODATA     */
         OI    TVWAFLG8,TVWATGNO                              UZ57385-A
         MVI   XSARC-RBBASIC(R5),X'04'                             0159
*               END;                                               0160
*                                                                  0160
*             /*******************************************************/
*             /*                                                     */
*             /* NO DATA AVAILABLE AND CALLER SPECIFIED TGET WAIT.   */
*             /* SUSPEND CALLER UNTIL DATA IS AVAILABLE OR ATTENTION */
*             /* HIT                                                 */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0161
*             ELSE                                                 0161
*               DO;                                                0161
         B     @RC00157                                            0161
@RF00157 DS    0H                                                  0162
         NI    TVWAFLG8,255-TVWATGNO                          UZ57385-A
*                 XSADOSWT='1'B;    /* SET SWITCH TO CONTINUE LOOP 0162
*                                      AFTER DATA BECOMES AVAILABLE  */
         OI    XSAFLAG-RBBASIC(R5),XSADOSWT                        0162
*                 RFY                                              0163
*                  (PRMREG1,                                       0163
*                   REG2) RSTD;                                    0163
*                                                                  0164
*                 /***************************************************/
*                 /*                                                 */
*                 /* SET 'TPUT' OR 'TGET' INDICATOR FOR SRM ACCORDING*/
*                 /* TO WHETHER THE TERMINAL OUTPUT MANAGER WILL BE  */
*                 /* ACTIVE BEFORE TERMINAL DATA IS ENTERED. THIS    */
*                 /* AFFECTS THE SWAP OUT/SWAP IN OF THE ADDRESS     */
*                 /* SPACE                                           */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0164
*                 IF TSBXTMTP=T3767 /* 3767?                 @YM03601*/
*                   THEN            /* 3767                  @YM03601*/
         L     R4,TSBEXTNT                                         0164
         CLI   TSBXTMTP-TSBX(R4),2                                 0164
         BNE   @RF00164                                            0164
*                   IF TSBSPIT='0'B&TSBAUTON='1'B&TSBSTAUT='1'B/*  0165
*                                      PROMPT?               @YM03601*/
*                     THEN          /* PROMPT IN EFFECT      @YM03601*/
         TM    TSBFLG3,TSBSPIT                                     0165
         BNZ   @RF00165                                            0165
         TM    TSBFLG2,TSBAUTON+TSBSTAUT                           0165
         BNO   @RF00165                                            0165
*                     TVWAPRMT='1'B;/* PROMPT IN EFFECT      @YM03601*/
         OI    TVWAFLG5,TVWAPRMT                                   0166
*                   ELSE            /* NO PROMPT             @YM03601*/
*                     DO;           /* RESET SWITCHES        @YM03601*/
         B     @RC00165                                            0167
@RF00165 DS    0H                                                  0168
*                       TVWAPRMT='0'B;/* NO PROMPT           @YM03601*/
*                       TVWAP1ST='0'B;/* RESET 1ST-PROMPT    @YM03601*/
         NI    TVWAFLG5,255-TVWAPRMT-TVWAP1ST                      0169
*                     END;          /* END OF RESET          @YM03601*/
*                 ELSE                                             0171
*                   ;               /* 3270                  @YM03601*/
@RF00164 DS    0H                                                  0172
*                 PRMREG1=1;        /* NO SYSEVENT           @YM03259*/
@RC00164 LA    R1,1                                                0172
*                 IF TVWATIS='0'B   /* IS TOM SCHEDULED?     @YM03259*/
*                   THEN            /* TOM NOT SCHEDULED     @YM03259
*                                                            @ZA12766
*                                                            @ZA12766*/
         TM    TVWAFLG1,TVWATIS                                    0173
         BNZ   @RF00173                                            0173
*                   IF TVWAKBDL='0'B/* KEYBOARD UNLOCKED?    @YM03259*/
*                     THEN          /* KEYBOARD UNLOCKED     @YM03259*/
         TM    TVWAFLG4,TVWAKBDL                                   0174
         BNZ   @RF00174                                            0174
*                     PRMREG1=INPTWAIT;/* INPUT WAIT         @YM03259*/
         SLR   R1,R1                                               0175
*                   ELSE                                           0176
*                     ;             /* KEYBOARD LOCKED       @YM03259
*                                                            @ZA12766*/
@RF00174 DS    0H                                                  0177
*                 ELSE              /* TOM SCHEDULED         @YM03259*/
*                   IF TVWAKBDL='0'B/* KEYBOARD LOCKED?      @YM03259*/
*                     THEN          /* KEYBOARD UNLOCKED     @YM03259*/
         B     @RC00173                                            0177
@RF00173 TM    TVWAFLG4,TVWAKBDL                                   0177
         BNZ   @RF00177                                            0177
*                     IF TVWATIR='1'B/* IS TOM RUNNING?      @YM03259*/
*                       THEN        /* TOM IS RUNNING        @YM03259*/
         TM    TVWAFLG5,TVWATIR                                    0178
         BNO   @RF00178                                            0178
*                       IF TSBXTMTP=IDS|TSBXTMTP=TNDS/*      @G58AK3A*/
*                         THEN      /* 3270 OR NDS           @YM03601*/
         L     R4,TSBEXTNT                                         0179
         CLI   TSBXTMTP-TSBX(R4),1                                 0179
         BE    @RT00179                                            0179
         CLI   TSBXTMTP-TSBX(R4),4                                 0179
         BNE   @RF00179                                            0179
@RT00179 DS    0H                                                  0180
*                         PRMREG1=INPTWAIT;/* INPUT WAIT     @YM03601*/
         SLR   R1,R1                                               0180
*                       ELSE        /* 3767 OR USER          @YM03601*/
*                         IF TVWADOOQ='1'B/* QUEUE EMPTY?    @YM03601*/
*                           THEN    /* QUEUE EMPTY           @YM03601*/
         B     @RC00179                                            0181
@RF00179 TM    TVWAFLG4,TVWADOOQ                                   0181
         BNO   @RF00181                                            0181
*                           PRMREG1=OTPTWAIT;/* OUTPUT WAIT  @YM03601*/
         L     R1,OTPTWAIT                                         0182
*                         ELSE      /* DATA ON QUEUE         @YM03601*/
*                           IF TVWAPRMT='1'B&TVWAP1ST='0'B/* @YM03601*/
*                             THEN  /* FIRST PROMPT          @YM03601*/
         B     @RC00181                                            0183
@RF00181 TM    TVWAFLG5,TVWAPRMT                                   0183
         BNO   @RF00183                                            0183
         TM    TVWAFLG5,TVWAP1ST                                   0183
         BNZ   @RF00183                                            0183
*                             DO;   /*                       @YM03601*/
*                               TVWAP1ST='1'B;/* NOT 1ST PROMPT    0185
*                                                            @YM03601*/
         OI    TVWAFLG5,TVWAP1ST                                   0185
*                               PRMREG1=OTPTWAIT;/* OUTPUT WAIT    0186
*                                                            @YM03601*/
         L     R1,OTPTWAIT                                         0186
*                             END;  /*                       @YM03601*/
*                           ELSE    /*                       @YM03601*/
*                             PRMREG1=INPTWAIT;/* INPUT WAIT @YM03601*/
         B     @RC00183                                            0188
@RF00183 SLR   R1,R1                                               0188
*                     ELSE                                         0189
*                       ;           /* TOM IS NOT RUNNING    @YM03259*/
@RF00178 DS    0H                                                  0190
*                   ELSE                                           0190
*                     ;             /* KEYBOARD IS LOCKED    @YM03259*/
@RF00177 DS    0H                                                  0191
*                 IF PRMREG1=INPTWAIT THEN/* IWAIT REQUESTED @ZA24418*/
@RC00177 DS    0H                                                  0191
@RC00173 LTR   R1,R1                                               0191
         BNZ   @RF00191                                            0191
*                   DO;             /*                       @ZA24418*/
*                     ;             /* DELETED TESTING FOR TVWAIOP 0193
*                                                            @ZA28881*/
*                     MPSTSOIW='1'B;/* TELL VTAM IWAIT WAS ISSUED  0194
*                                                            @ZA28881*/
         L     R4,PSAAOLD                                          0194
         L     R4,ASCBASXB-ASCB(,R4)                               0194
         L     R4,ASXBMPST-ASXB(,R4)                               0194
         OI    MPSTSOIW(R4),B'10000000'                            0194
*                     TVWAISYS='1'B;/* SET IWAIT INDICATOR   @ZA28881*/
         OI    TVWAFLG6,TVWAISYS                                   0195
*                   END;            /*                       @ZA24418*/
*                 ELSE                                             0197
*                   ;               /*                       @ZA24418*/
@RF00191 DS    0H                                                  0198
*                 IF PRMREG1^=1     /* ISSUE SYSEVENT?       @YM03259*/
*                   THEN            /* ISSUE SYSEVENT        @YM03259*/
         C     R1,FW1                                              0198
         BE    @RF00198                                            0198
*                   DO;             /* SET UP SYSEVENT               */
*                     REG2=ASCBASID;/* GET THIS ADDR. SPCS ASID      */
         L     R4,PSAAOLD                                          0200
         LH    R2,ASCBASID-ASCB(,R4)                               0200
         N     R2,HEXFFFF                                          0200
*                     GEN REFS(ASCBASID,CVTPTR,CVTOPTE,CVT) SETS(  0201
*                         PRMREG0,RTNREG,ENTRYREG);                0201
***
***         INFORM SYSTEM RESOURCE MANAGER OF WAIT
***
            SYSEVENT TERMWAIT,ASID=(R2),ENTRY=BRANCH
*                     RFY                                          0202
*                      (PRMREG1,                                   0202
*                       REG2) UNRSTD;                              0202
*                   END;            /* END OF SYSEVENT               */
*                 ELSE                                             0204
*                   ;               /* DO NOT ISSUE SYSEVENT         */
@RF00198 DS    0H                                                  0205
*                 TSBIWAIT='1'B;    /* INDICATE IWAIT CONDITION      */
         OI    TSBFLG4,TSBIWAIT                                    0205
*                                                                  0206
*                 /***************************************************/
*                 /*                                                 */
*                 /* PREPARE TO SUSPEND CALLER VIA BRANCH TO THE     */
*                 /* STATUS ROUTINE. LOCAL LOCK HELD ON ENTRY TO     */
*                 /* STATUS ROUTINE.                                 */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0206
*                 STM(PRMREG0,ENTRYREG,TCBGRS);/* SAVE REGISTERS     */
         L     R4,XSATCBA-1-RBBASIC(,R5)                           0206
         LA    R4,0(,R4)                                           0206
         STM   R0,R15,TCBGRS-TCB(R4)                               0206
*                 RBOPSW2=ADDR(REDISPCH);/* SET UP RESUME PSW TELL 0207
*                                      STATUS TO RE-DISPATCH TASK AT
*                                      LABEL 'REDISPCH'              */
         LA    R15,REDISPCH                                        0207
         ST    R15,RBOPSW2-RBBASIC(,R5)                            0207
*                 RFY                                              0208
*                  (PRMREG0,                                       0208
*                   PRMREG1) RSTD;                                 0208
*                 SAVEREG=NDISPBIT; /* SET NON-DISPATCHABLE FLAG     */
         LA    R13,2048                                            0209
*                 PRMREG0=SDTCB;    /* SET ENTRY CODE                */
         LA    R0,15                                               0210
*                 PRMREG1=XSATCBA;  /* SET TCB TO SUSPEND            */
         LR    R1,R4                                               0211
*                 CALL STATUS;      /* CALL STATUS TO SUSPEND TASK   */
         L     R4,CVTPTR                                           0212
         L     R4,CVTABEND-CVT(,R4)                                0212
         L     R15,SCVTSTAT-SCVTSECT(,R4)                          0212
         BALR  R14,R15                                             0212
*                 RFY                                              0213
*                  (PRMREG0,                                       0213
*                   PRMREG1) UNRSTD;                               0213
*                                                                  0213
*                 /***************************************************/
*                 /*                                                 */
*                 /* UPON BEING RE-DISPATCHED, LOCAL LOCK MUST BE    */
*                 /* RE-OBTAINED                                     */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0214
*REDISPCH:                                                         0214
*                 RFY                                              0214
*                  (RTNREG,                                        0214
*                   ENTRYREG,                                      0214
*                   REG0,                                          0214
*                   REG1) RSTD;                                    0214
REDISPCH DS    0H                                                  0215
*                 GEN SETS(RTNREG,ENTRYREG,REG0,REG1) REFS(PSALITA,FLC)
*                     ;                                            0215
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,              --
               RELATED=(TSB,IKTVTGET(RETURN))
*                 RFY                                              0216
*                  (RTNREG,                                        0216
*                   ENTRYREG,                                      0216
*                   REG0,                                          0216
*                   REG1) UNRSTD;                                  0216
*               END;                /* END OF NO DATA AVAILABLE,   0217
*                                      SUSPEND CALLER                */
*           END;                    /* END OF NO DATA AVAILABLE      */
*/*                                                                  */
*/*  *****************************************************************/
*/*                                                                  */
*/*            DATA IS AVAILABLE. EDIT DATA AND MOVE INTO            */
*/*            CALLER'S BUFFER. EDIT ROUTINES UPDATE XSAPRMSZ,       */
*/*            XSABFRAD, IPBFSZ,IPBUFADR                             */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0219
*         ELSE                                                     0219
*           DO;                                                    0219
         B     @RC00139                                            0219
@RF00139 DS    0H                                                  0220
*             IF XSADATVF='0'B THEN /* IF NOT DONE BEFORE, THEN GO 0220
*                                      VERIFY THAT CALLER'S ADDRESS
*                                      IS VALID                      */
         TM    XSAFLAG-RBBASIC(R5),XSADATVF                        0220
         BNZ   @RF00220                                            0220
*               CALL VERIFY;                                       0221
         BAL   R14,VERIFY                                          0221
*             RFY                                                  0222
*              (PRMREG0,                                           0222
*               PRMREG1) RSTD;                                     0222
*                                                                  0222
@RF00220 DS    0H                                                  0223
*             /*******************************************************/
*             /*                                                     */
*             /* SET UP R0 AND R1 TO POINT TO XSA AND IPARMS FOR     */
*             /* EXTERNAL EDIT ROUTINES                              */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0223
*             PRMREG0=ADDR(XSA);    /* PT. TO EXTENDED SAVE AREA     */
         LA    R0,XSA-RBBASIC(,R5)                                 0223
*             PRMREG1=ADDR(IPARMS); /* PT. TO QMGR PARAM. LIST       */
         LA    R1,IPARMS(,R13)                                     0224
*             IF IPTRMTYP=TUSERDEF THEN/* CHECK FOR USER.DEFINED   0225
*                                      DEVICE TYPE                   */
         CLI   IPTRMTYP(R13),3                                     0225
         BNE   @RF00225                                            0225
*               CALL IKTGETXT;      /* CALL USER EDIT FOR SPCL DEVIC */
         L     R15,IKTGETXT                                        0226
         BALR  R14,R15                                             0226
*             ELSE                                                 0227
*               IF IPTRMTYP=IDS|IPTRMTYP=TNDS THEN/* CALL          0227
*                                      EDIT@G58AK3A                  */
         B     @RC00225                                            0227
@RF00225 CLI   IPTRMTYP(R13),1                                     0227
         BE    @RT00227                                            0227
         CLI   IPTRMTYP(R13),4                                     0227
         BNE   @RF00227                                            0227
@RT00227 DS    0H                                                  0228
*                 DO;               /* FOR 3270 OR NDS               */
*                   IF ADDR(IKTIDSX4)^=0 THEN/* IF EXIT ROUTINE, CALL
*                                      IT                            */
         L     R4,IKTIDSX4                                         0229
         LTR   R4,R4                                               0229
         BZ    @RF00229                                            0229
*                     DO;                                          0230
*                       CALL IKTIDSX4;/* INSTALLATION EXIT           */
         L     R15,IKTIDSX4                                        0231
         BALR  R14,R15                                             0231
*                       RFY                                        0232
*                         RCREG RSTD;                              0232
*                       IF RCREG=NORMALSO THEN/* CALL NORMAL EDIT IF
*                                      REQUESTED BY EXIT             */
         C     R15,FW4                                             0233
         BNE   @RF00233                                            0233
*                         DO;                                      0234
*                           RFY                                    0235
*                             RCREG UNRSTD;                        0235
*                           CALL EDIT3270;/* 3270 EDIT ROUTINE       */
         BAL   R14,EDIT3270                                        0236
*                         END;                                     0237
*                     END;          /* END 'EXIT RTN FOR 3270' DO    */
*                   ELSE                                           0239
*                     CALL EDIT3270;/* IF NO EXIT ROUTINE, CALL    0239
*                                      NORMAL 3270 EDIT ROUTINE E    */
         B     @RC00229                                            0239
@RF00229 BAL   R14,EDIT3270                                        0239
*                 END;                                             0240
*               ELSE                                               0241
*                 IF IPTRMTYP=T3767 THEN/* 3767 OR 3770 TERMINAL     */
         B     @RC00227                                            0241
@RF00227 CLI   IPTRMTYP(R13),2                                     0241
         BNE   @RF00241                                            0241
*                   IF ADDR(IKTRTX4)^=0 THEN/* IF EXIT ROUTINE, CALL
*                                      IT                            */
         L     R4,IKTRTX4                                          0242
         LTR   R4,R4                                               0242
         BZ    @RF00242                                            0242
*                     DO;                                          0243
*                       CALL IKTRTX4;/* INSTALLATION EXIT            */
         L     R15,IKTRTX4                                         0244
         BALR  R14,R15                                             0244
*                       RFY                                        0245
*                         RCREG RSTD;                              0245
*                       IF RCREG=NORMALSO THEN/* CALL NORMAL EDIT IF
*                                      REQUESTED BY EXIT             */
         C     R15,FW4                                             0246
         BNE   @RF00246                                            0246
*                         DO;                                      0247
*                           RFY                                    0248
*                             RCREG UNRSTD;                        0248
*                           CALL EDIT3767;/* 3767 AND 3770 EDIT    0249
*                                      ROUTINE E                     */
         BAL   R14,EDIT3767                                        0249
*                         END;                                     0250
*                     END;                                         0251
*                   ELSE                                           0252
*                     CALL EDIT3767;/* IF NO EXIT ROUTINE, CALL    0252
*                                      NORMAL 3767 EDIT ROUTINE      */
         B     @RC00242                                            0252
@RF00242 BAL   R14,EDIT3767                                        0252
*             RFY                                                  0253
*              (PRMREG0,                                           0253
*               PRMREG1) UNRSTD;                                   0253
@RC00242 DS    0H                                                  0253
@RF00241 DS    0H                                                  0253
@RC00227 DS    0H                                                  0253
@RC00225 DS    0H                                                  0254
*             XSADATSZ=XSADATSZ+XSACURDS;/* ACCUMULATE TOTAL INPUT 0254
*                                      DATA SIZE FOR RETURN TO     0254
*                                      CALLER. EDIT ROUTINES SET   0254
*                                      XSACURDS TO AMOUNT OF DATA  0254
*                                      MOVED FROM THIS Q ELEMENT     */
*                                                                  0254
         LH    R4,XSADATSZ-RBBASIC(,R5)                            0254
         AH    R4,XSACURDS-RBBASIC(,R5)                            0254
         STH   R4,XSADATSZ-RBBASIC(,R5)                            0254
*             /*******************************************************/
*             /*                                                     */
*             /* AS MUCH DATA AS POSSIBLE HAS BEEN EDITED. NOW CHECK */
*             /* IF ALL HAS BEEN EDITED. (IT HAS UNLESS CALLER'S     */
*             /* BUFFER IS SMALLER THAN THE INPUT LINE SIZE)         */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0255
*             IF IPBFSZ=0 THEN      /* CHECK IF ALL DATA MOVED       */
         LH    R4,IPBFSZ(,R13)                                     0255
         LTR   R4,R4                                               0255
         BNZ   @RF00255                                            0255
*               DO;                                                0256
*                 IPREQ=DELETE;     /* REQUEST THAT ELEMENT BE DEL'D */
*                                                                  0257
         MVI   IPREQ(R13),X'03'                                    0257
*                 /***************************************************/
*                 /*                                                 */
*                 /* CALL INPUT QUEUE MANAGER, IKTQMIN PARAMETER LIST*/
*                 /* INTERFACE IS BUILT DIRECTLY SO THAT PLS WILL NOT*/
*                 /* GENERATE ANY TEMPS ITSELF. DIRECTLY BUILT       */
*                 /* PARAMETER LIST IS IN LOCALLY LOCKED WORK AREA.  */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0258
*                 PRMLSTAD=ADDR(IPARMS);/* PUT ADDR INTO 'TEMP'      */
         LA    R4,IPARMS(,R13)                                     0258
         ST    R4,PRMLSTAD(,R13)                                   0258
*                 RFY                                              0259
*                   PRMREG1 RSTD;                                  0259
*                 PRMREG1=ADDR(PRMLSTAD);/* REG 1 POINTS TO PLS PARM
*                                      LST                           */
         LA    R1,PRMLSTAD(,R13)                                   0260
*                 CALL IKTQMIN;     /* CALL INPUT QUEUE MANAGER      */
         L     R4,CVTPTR                                           0261
         L     R4,CVTTCASP-CVT(,R4)                                0261
         L     R15,TCASIQM-TCAST(,R4)                              0261
         BALR  R14,R15                                             0261
*                 RFY                                              0262
*                   PRMREG1 UNRSTD;                                0262
*                 IF IPPRTL='1'B THEN/* PARTIAL LINE INDICATOR MAY BE
*                                      ON, INDICATING MORE DATA      */
         TM    IPPRTL(R13),B'00100000'                             0263
         BNO   @RF00263                                            0263
*                   XSADOSWT='1'B;  /* YES, SET SWITCH TO CONTINUE 0264
*                                      CALLING QUEUE MGR             */
         OI    XSAFLAG-RBBASIC(R5),XSADOSWT                        0264
*                 ELSE                                             0265
*                   DO;                                            0265
*                                                                  0265
         B     @RC00263                                            0265
@RF00263 DS    0H                                                  0266
*                     /***********************************************/
*                     /*                                             */
*                     /* TELL SRM THAT INPUT COMPLETED -'TGETTPUT'   */
*                     /* AND ALL DATA MOVED                          */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0266
*                     RFY                                          0266
*                      (PRMREG1,                                   0266
*                       REG2) RSTD;                                0266
*                     PRMREG1=TGETIND;/* INDICATE TGET(BIT 0 =0) AND
*                                      NO MORE DATA (BIT 1 =0)       */
         SLR   R1,R1                                               0267
*                     REG2=ASCBASID;/* GET ASID OF THIS ADDR. SPC.   */
         L     R4,PSAAOLD                                          0268
         LH    R2,ASCBASID-ASCB(,R4)                               0268
         N     R2,HEXFFFF                                          0268
*                     GEN REFS(ASCBASID,CVTPTR,CVTOPTE,CVT) SETS(  0269
*                         PRMREG0,RTNREG,ENTRYREG);                0269
***
***      INFORM SRM OF TGET COMPLETION
***
         SYSEVENT TGETTPUT,ASID=(R2),ENTRY=BRANCH
*                     RFY                                          0270
*                      (PRMREG1,                                   0270
*                       REG2) UNRSTD;                              0270
*                     XSARC=0;      /* ALL DATA MOVED SUCCESSFULLY   */
         MVI   XSARC-RBBASIC(R5),X'00'                             0271
         TM    TSBFLG5,TSBNEDIT        IN NOEDIT MODE?        ZP60009-A
         BNO   *+8                     NO                     ZP60009-A
         MVI   XSARC-RBBASIC(R5),X'18' YES, RC=00 -> RC=24    ZP60009-A
         NI    TVWAFLG8,255-TVWATGNO                          UZ57385-A
*                     IF TCBTCT^=0 THEN/* TEST FOR SMF RUNNING       */
         L     R4,XSATCBA-1-RBBASIC(,R5)                           0272
         L     R4,TCBTCT-TCB(,R4)                                  0272
         LTR   R4,R4                                               0272
         BZ    @RF00272                                            0272
*                       TCTLIN=TCTLIN+1;/* IF SO, INCR NO. OF TGET'S */
         LA    R15,1                                               0273
         AL    R15,TCTLIN-SMFTCT(,R4)                              0273
         ST    R15,TCTLIN-SMFTCT(,R4)                              0273
*                   END;            /* END 'NOT PARTIAL LINE' DO     */
*               END;                /* END'ALL DATA MOVED' SECTION   */
*             ELSE                  /* START 'NOT ALL DATA MOVED'    */
*               DO;                                                0276
         B     @RC00255                                            0276
@RF00255 DS    0H                                                  0277
*                 IPREQ=UPDATE;     /* REQUEST THAT ELE. BE UPDATED  */
*                                                                  0277
         MVI   IPREQ(R13),X'04'                                    0277
*                 /***************************************************/
*                 /*                                                 */
*                 /* CALL INPUT QUEUE MANAGER, IKTQMIN PARAMETER LIST*/
*                 /* INTERFACE IS BUILT DIRECTLY SO THAT PLS WILL NOT*/
*                 /* GENERATE ANY TEMPS ITSELF. DIRECTLY BUILT       */
*                 /* PARAMETER LIST IS IN LOCALLY LOCKED WORK AREA.  */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0278
*                 PRMLSTAD=ADDR(IPARMS);/* PUT ADDR INTO 'TEMP'      */
         LA    R4,IPARMS(,R13)                                     0278
         ST    R4,PRMLSTAD(,R13)                                   0278
*                 RFY                                              0279
*                   PRMREG1 RSTD;                                  0279
*                 PRMREG1=ADDR(PRMLSTAD);/* REG 1 POINTS TO PLS PARM
*                                      LST                           */
         LA    R1,PRMLSTAD(,R13)                                   0280
*                 CALL IKTQMIN;     /* CALL INPUT QUEUE MANAGER      */
         L     R4,CVTPTR                                           0281
         L     R4,CVTTCASP-CVT(,R4)                                0281
         L     R15,TCASIQM-TCAST(,R4)                              0281
         BALR  R14,R15                                             0281
*                 RFY                                              0282
*                   PRMREG1 UNRSTD;                                0282
*                                                                  0283
*                 /***************************************************/
*                 /*                                                 */
*                 /* TELL SRM THAT INPUT COMPLETED-'TGETTPUT' AND    */
*                 /* THAT ALL DATA NOT MOVED                         */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0283
*                 RFY                                              0283
*                  (PRMREG1,                                       0283
*                   REG2) RSTD;                                    0283
*                 PRMREG1=MOREDATA; /* INDICATE TGET(BIT 0=0) AND  0284
*                                      MORE DATA (BIT 1=1)           */
         L     R1,MOREDATA                                         0284
*                 REG2=ASCBASID;    /* GET THIS ADDR. SPCS. ASID     */
         L     R4,PSAAOLD                                          0285
         LH    R2,ASCBASID-ASCB(,R4)                               0285
         N     R2,HEXFFFF                                          0285
*                 GEN REFS(ASCBASID,CVTPTR,CVTOPTE,CVT) SETS(PRMREG0,
*                     RTNREG,ENTRYREG);                            0286
***
***      INFORM SRM OF TGET COMPLETION
***
         SYSEVENT TGETTPUT,ASID=(R2),ENTRY=BRANCH
*                 RFY                                              0287
*                  (PRMREG1,                                       0287
*                   REG2) UNRSTD;                                  0287
*                 XSARC=TOOSMALL;   /* TELL CALLER MORE DATA THAN CAN
*                                      FIT IN CALLER'S BUFFER        */
         MVI   XSARC-RBBASIC(R5),X'0C'                             0288
         TM    TSBFLG5,TSBNEDIT        IN NOEDIT MODE?        ZP60009-A
         BNO   *+8                     NO                     ZP60009-A
         MVI   XSARC-RBBASIC(R5),X'1C' YES, RC=12 -> RC=28    ZP60009-A
         NI    TVWAFLG8,255-TVWATGNO                          UZ57385-A
*                 IF TCBTCT^=0 THEN /* TEST FOR SMF RUNNING          */
         L     R4,XSATCBA-1-RBBASIC(,R5)                           0289
         L     R4,TCBTCT-TCB(,R4)                                  0289
         LTR   R4,R4                                               0289
         BZ    @RF00289                                            0289
*                   TCTLIN=TCTLIN+1;/* IF SO, INCR NO. OF TGET'S     */
         LA    R15,1                                               0290
         AL    R15,TCTLIN-SMFTCT(,R4)                              0290
         ST    R15,TCTLIN-SMFTCT(,R4)                              0290
*               END;                /* END 'NOT ALL DATA MOVED'      */
@RF00289 DS    0H                                                  0292
*           END;                    /* END OF DATA AVAILABLE  SECTION*/
@RC00255 DS    0H                                                  0293
*       END;                        /* END OF XSARC = SUCCESS DO     */
@RC00139 DS    0H                                                  0294
*   END;                            /* END OF DO UNTIL XSADOSW= '0'  */
@RT00130 DS    0H                                                  0294
@DE00127 TM    XSAFLAG-RBBASIC(R5),XSADOSWT                        0294
         BNZ   @DL00127                                            0294
*                                                                  0295
*/*                                                                  */
*/********************************************************************/
*/*            TGET RETURN POINT. RELEASE LOCAL LOCK,                */
*/*            RESTORE TCBFX VALUE AND RETURN TO CALLER              */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*                                                                  0295
*   TCBTIOTG='0'B;                  /* CLEAR ATTN INDICATOR IN TCB   */
         L     R4,XSATCBA-1-RBBASIC(,R5)                           0295
         NI    TCBTSFLG-TCB(R4),255-TCBTIOTG                       0295
*   TSBATTN='0'B;                   /* CLEAR ATTN INDICATOR IN TSB   */
         NI    TSBFLG3,255-TSBATTN                                 0296
*   GEN SETS(RTNREG,ENTRYREG,REG0,REG1) REFS(PSALITA,FLC);         0297
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                         --
               RELATED=(TSB,IKTVTGET(REDISPCH))
*   IF XSATCBFX='1'B THEN           /* IF ASYNCHRONOUS EXITS WERE  0298
*                                      ALLOWED ON ENTRY,             */
         TM    XSAFLAG-RBBASIC(R5),XSATCBFX                        0298
         BNO   @RF00298                                            0298
*     TCBFX='0'B;                   /* RESET TCB ASYN. EXIT INDIC.   */
         L     R4,XSATCBA-1-RBBASIC(,R5)                           0299
         NI    TCBFLGS1-TCB(R4),255-TCBFX                          0299
*   RFY                                                            0300
*     PRMREG1 RSTD;                                                0300
@RF00298 DS    0H                                                  0301
*   PRMREG1=XSADATSZ;               /* RETURN INPUT DATA SIZE TO   0301
*                                      CALLER IN REG 1               */
         LH    R1,XSADATSZ-RBBASIC(,R5)                            0301
*   RFY                                                            0302
*     RTNREG RSTD;                                                 0302
*   RTNREG=XSARETG;                 /* RESTORE RETURN ADDRESS        */
         L     R14,XSARETG-RBBASIC(,R5)                            0303
*   RETURN CODE(XSARC);             /* RETURN TO ADDRESS THAT WAS IN
*                                      R14 ON ENTRY,WITH TGET CODE   */
         SLR   R15,R15                                             0304
         IC    R15,XSARC-RBBASIC(,R5)                              0304
@EL00001 DS    0H                                                  0304
@EF00001 DS    0H                                                  0304
@ER00001 BR    R14                                                 0304
*   RFY                                                            0305
*     RTNREG UNRSTD;                                               0305
*   RFY                                                            0306
*     PRMREG1 UNRSTD;                                              0306
*TERMSTAT:                                                         0307
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0307
TERMSTAT DS    0H                                                  0308
*                                                                  0308
*/*                                                                  */
*/********************************************************************/
*/*            TERMSTAT IS AN INTERNAL PROCEDURE CALLED TO DETERMINE */
*/*            THE STATUS OF THE TERMINAL.                           */
*/*            IT SETS XSARC ON RETURN:                              */
*/*             = 0 - NORMAL                                         */
*/*             = 14 HEX - TERMINAL SESSION HAS BEEN CANCELLED       */
*/*             =  8 - ATTENTION WAS HIT                             */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*                                                                  0308
*   RFY                                                            0308
*     RTNREG RSTD;                                                 0308
*   XSASAVEA=RTNREG;                /* SAVE RETURN ADDRESS           */
         ST    R14,XSASAVEA-RBBASIC(,R5)                           0309
*   RFY                                                            0310
*     RTNREG UNRSTD;                                               0310
*   IF TSBCANC='1'B THEN            /* TEST TERMINAL CANCELLED       */
         TM    TSBFLG4,TSBCANC                                     0311
         BNO   @RF00311                                            0311
*     XSARC=TERMCNCL;               /* IF YES, SET RC = CANCELLED    */
         MVI   XSARC-RBBASIC(R5),X'14'                             0312
*   ELSE                                                           0313
*     IF TCBTIOTG='1'B THEN         /* TEST ATTN HIT                 */
         B     @RC00311                                            0313
@RF00311 L     R4,XSATCBA-1-RBBASIC(,R5)                           0313
         TM    TCBTSFLG-TCB(R4),TCBTIOTG                           0313
         BNO   @RF00313                                            0313
*       XSARC=ATTEN;                /* IF YES, SET RC TO ATTEN       */
         MVI   XSARC-RBBASIC(R5),X'08'                             0314
*     ELSE                                                         0315
*       XSARC=SUCCESS;              /* OTHERWISE, SET RC SUCCESSFUL  */
         B     @RC00313                                            0315
@RF00313 IC    R4,SUCCESS                                          0315
         STC   R4,XSARC-RBBASIC(,R5)                               0315
*   RFY                                                            0316
*     RTNREG RSTD;                                                 0316
@RC00313 DS    0H                                                  0316
@RC00311 DS    0H                                                  0317
*   RTNREG=XSASAVEA;                /* RESTORE RETURN ADDRESS        */
         L     R14,XSASAVEA-RBBASIC(,R5)                           0317
*   RETURN;                                                        0318
@EL00002 DS    0H                                                  0318
@EF00002 DS    0H                                                  0318
@ER00002 BR    R14                                                 0318
*   RFY                                                            0319
*     RTNREG UNRSTD;                                               0319
*   END TERMSTAT;                                                  0320
*VERIFY:                                                           0321
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0321
*                                                                  0321
VERIFY   DS    0H                                                  0322
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS TESTS IF CALLER'S DATA ADDRESS IS IN THE CALLER'S      */
*/*      KEY. IT DOES SO BY REFERENCING THE FIRST BYTE OF EACH       */
*/*      PAGE REQUIRED FOR THE TPUT.                                 */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*                                                                  0322
*   DCL                                                            0322
*     APAGE FIXED(15) CONSTANT(4096);/* PAGE SIZE                    */
*   DCL                                                            0323
*     MODULUS FIXED(8) CONSTANT(12);/* MODULUS OF A VS2 PAGE IS    0323
*                                      2**12=4096                    */
*   RFY                                                            0324
*     RTNREG RSTD;                                                 0324
*   XSASAVEA=RTNREG;                /* SAVE RETURN ADDRESS           */
         ST    R14,XSASAVEA-RBBASIC(,R5)                           0325
*   RFY                                                            0326
*     RTNREG UNRSTD;                                               0326
*   XSADATVF='1'B;                  /* SET INDICATOR TO 'VERIFIED'   */
*   XSADMOVE='1'B;                  /* INDICATE 'DATA VERIFICATION 0328
*                                      UNDERWAY'                     */
         OI    XSAFLAG-RBBASIC(R5),XSADMOVE+XSADATVF               0328
*/*    GET INTO CALLER'S KEY TO VALIDATE DATA                        */
*                                                                  0329
*   RFY                                                            0329
*     REG2 RSTD;                                                   0329
*   REG2=RBLINKB->RBOPSWB2;         /* OBTAIN CALLERS KEY FROM RB    */
         L     R4,RBLINKB-1-RBBASIC(,R5)                           0330
         SLR   R2,R2                                               0330
         IC    R2,RBOPSWB2-RBBASIC(,R4)                            0330
*   GEN SETS(REG2);                                                0331
        MODESET KEYADDR=(2),WORKREG=2   GET IN TASK S KEY
*   RFY                                                            0332
*     REG2 UNRSTD;                                                 0332
*   RFY                                                            0333
*     WORK1REG RSTD;                                               0333
*   WORK1REG=XSABFRAD;              /* GET INPUT BUFFER ADDRESS      */
         L     R1,XSABFRAD-1-RBBASIC(,R5)                          0334
         LA    R1,0(,R1)                                           0334
*   SRL(WORK1REG,MODULUS);          /* SHIFT OFF PARTIAL PAGE        */
         SRL   R1,12                                               0335
*   SLL(WORK1REG,MODULUS);          /* SHIFT IN ZEROS                */
         SLL   R1,12                                               0336
*/*                                                                  */
*/*       LOOP THRU EACH PAGE, MOVING FIRST BYTE TO ITSELF           */
*/*                                                                  */
*                                                                  0337
*   RFY                                                            0337
*     WORK2REG RSTD;                                               0337
*   WORK2REG=XSABFRAD+XSAPRMSZ;     /* DEFINE UPPER LIMIT            */
         L     R3,XSABFRAD-1-RBBASIC(,R5)                          0338
         LA    R3,0(,R3)                                           0338
         AH    R3,XSAPRMSZ-RBBASIC(,R5)                            0338
*                                                                  0339
*/*  IF PROGRAM CHECK OCCURS DURING BELOW DO WHILE, THEN IKT93EST    */
*/*  WILL CHANGE THE ABEND CODE TO '15D'X                            */
*                                                                  0339
*   DO WHILE WORK1REG<WORK2REG;                                    0339
         B     @DE00339                                            0339
@DL00339 DS    0H                                                  0340
*     GEN REFS(WORK1REG)(MVC 0(1,WORK1REG),0(WORK1REG));/* REFERENCE
*                                      PAGE                          */
         MVC 0(1,R1),0(R1)
*     WORK1REG=WORK1REG+APAGE;      /* INCREMENT BY PAGE SIZE        */
         AL    R1,FW4096                                           0341
*   END;                                                           0342
@DE00339 CR    R1,R3                                               0342
         BL    @DL00339                                            0342
*   RFY                                                            0343
*    (WORK1REG,                                                    0343
*     WORK2REG) UNRSTD;                                            0343
*                                                                  0343
*/*                                                                  */
*/*         GET BACK INTO KEY 0                                      */
*/*                                                                  */
*                                                                  0344
*   GEN(MODESET EXTKEY=ZERO);                                      0344
         MODESET EXTKEY=ZERO
*   XSADMOVE='0'B;                  /* CLEAR INDICATOR THAT DATA   0345
*                                      VERIFICATION WAS GOING ON     */
         NI    XSAFLAG-RBBASIC(R5),255-XSADMOVE                    0345
*   RFY                                                            0346
*     RTNREG RSTD;                                                 0346
*   RTNREG=XSASAVEA;                                               0347
         L     R14,XSASAVEA-RBBASIC(,R5)                           0347
*   RETURN;                                                        0348
@EL00003 DS    0H                                                  0348
@EF00003 DS    0H                                                  0348
@ER00003 BR    R14                                                 0348
*   RFY                                                            0349
*     RTNREG UNRSTD;                                               0349
*   END VERIFY;                                                    0350
*EDIT3767:                                                         0351
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0351
EDIT3767 DS    0H                                                  0352
*                                                                  0352
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*        EDIT3767 IS THE STANDARD TSO/VTAM EDIT ROUTINE FOR        */
*/*        THE 3767 AND 3770 TERMINALS. IT CHECKS FOR A TGET EDIT    */
*/*        REQUEST AND SCANS FOR INVALID DATA IF SO. IT MOVES THE    */
*/*        DATA FROM THE INPUT QUEUE TO THE CALLER'S DATA AREA       */
*/*        AND PADS WITH BLANKS IF EDIT OPTION.                      */
*/*                                                                  */
*/*        INPUT NEEDED---XSABFRAD - CALLER' DATA ADDRESS            */
*/*                       XSAPRMSZ - CALLER'S DATA AREA SIZE         */
*/*                       IPBUFADR - QUEUE ELEMENT ADDRESS           */
*/*                       IPBFSZ   - QUEUE ELEMENT SIZE              */
*/*                       XSAEDITO - OPTION IS EDIT IF='00'          */
*/*                                                                  */
*/*        OUTPUT-----EDIT3767 UPDATES THE DATA ADDRESSES AND        */
*/*                   AREA SIZES LISTED ABOVE.                       */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*                                                                  0352
*   RFY                                                            0352
*     RTNREG RSTD;                                                 0352
*   XSASAVEA=RTNREG;                /* SAVE RETURN ADDRESS           */
         ST    R14,XSASAVEA-RBBASIC(,R5)                           0353
*   RFY                                                            0354
*     RTNREG UNRSTD;                                               0354
*   XSACURDS=0;                     /* CLEAR DATA MOVED COUNTER      */
         SLR   R4,R4                                               0355
         STH   R4,XSACURDS-RBBASIC(,R5)                            0355
*   IF XSAEDITO^='00'B THEN         /* 00 IS EDIT OPTION             */
         TM    XSAOPTNS-RBBASIC(R5),XSAEDITO                       0356
         BZ    @RF00356                                            0356
*/*                                                                  */
*/*       TGET ASIS. IF EITHER COUNT IS ZERO ON ENTRY,               */
*/*       NOTHING TO MOVE.                                           */
*/*                                                                  */
*                                                                  0357
*     IF XSAPRMSZ^=0&IPBFSZ^=0 THEN                                0357
**       LH    R15,XSAPRMSZ-RBBASIC(,R5)                           0357
**       CR    R15,R4                                              0357
**       BE    @RF00357                                            0357
         CH    R4,XSAPRMSZ-RBBASIC(,R5)
         BNL   @RF00357
**       LH    R14,IPBFSZ(,R13)                                    0357
**       CR    R14,R4                                              0357
**       BE    @RF00357                                            0357
         CH    R4,IPBFSZ(,R13)
         BNL   @RF00357
*         CALL MOVEASIS;
         BAL   R14,MOVEASIS
*         RFY                                                      0367
*           REG1 UNRSTD;                                           0367
*       END;                        /* END 'TGET ASIS' MOVE          */
*     ELSE                                                         0369
*       ;                           /* IF EITHER=0, NO DATA MOVE     */
@RF00357 DS    0H                                                  0370
*   ELSE                            /* 'TGET EDIT' DATA MOVE         */
*     DO;                                                          0370
*                                                                  0370
         B     @RC00356                                            0370
@RF00356 DS    0H                                                  0371
*       /*************************************************************/
*       /*                                                           */
*       /* SCAN DATA VIA 'TRT' INSTRUCTION, MOVING VALID DATA AND    */
*       /* POINTING PAST INVALID CHAR. CONTINUE UNTIL THERE IS NO    */
*       /* MORE DATA TO MOVE OR NO ROOM TO MOVE IT TO.               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0371
*       DO WHILE XSAPRMSZ^=0&IPBFSZ^=0;                            0371
         B     @DE00371                                            0371
@DL00371 DS    0H                                                  0372
*         RFY                                                      0372
*           REG3 RSTD;                                             0372
*         REG3=MIN(IPBFSZ,XSAPRMSZ,256);/* NO MORE THAN 256 CHARS CAN
*                                      BE TESTED AT ONCE.            */
         LH    R3,IPBFSZ(,R13)                                     0373
         LH    R4,XSAPRMSZ-RBBASIC(,R5)                            0373
         CR    R3,R4                                               0373
         BNH   *+6
         LR    R3,R4                                               0373
         LA    R4,256                                              0373
         CR    R3,R4                                               0373
         BNH   *+6
         LR    R3,R4                                               0373
*         RFY                                                      0374
*          (REG1,                                                  0374
*           REG2) RSTD;                                            0374
*         REG1=0;                   /* CLEAR REGISTER BEFORE TRT     */
         SLR   R1,R1                                               0375
*         TRT(IPSOURCE(1:REG3),TGETEDIT(1));/* SEARCH FOR INVALID  0376
*                                      CHAR                          */
         L     R4,IPBUFADR(,R13)                                   0376
         LR    R15,R3                                              0376
         BCTR  R15,0                                               0376
         EX    R15,@SB02692                                        0376
*         BC(CC0,DATAVALD);         /* BRCH IF ALL DATA VALID        */
         BC    8,DATAVALD                                          0377
*                                                                  0378
*         /***********************************************************/
*         /*                                                         */
*         /* NOT ALL DATA IS VALID..REG1 POINTS TO FIRST INVALID CHAR*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0378
*         REG3=REG1-IPBUFADR;       /* COMPUTE NO. OF VALID CHARS  0378
*                                      MOVED.                        */
         L     R4,IPBUFADR(,R13)                                   0378
         LR    R3,R1                                               0378
         SLR   R3,R4                                               0378
*         RFY                                                      0379
*          (REG1,                                                  0379
*           REG2) UNRSTD;                                          0379
*         IF REG3^=0 THEN           /* ANY DATA TO MOVE ?            */
         LTR   R3,R3                                               0380
         BZ    @RF00380                                            0380
*           DO;                     /* YES                           */
*             XSATARGT(1:REG3)=IPSOURCE(1:REG3);/* MOVE DATA         */
         L     R2,XSABFRAD-1-RBBASIC(,R5)                          0382
         LA    R2,0(,R2)                                           0382
         LR    R15,R3                                              0382
         BCTR  R15,0                                               0382
         EX    R15,@SM02694                                        0382
*             XSAPRMSZ=XSAPRMSZ-REG3;/* UPDATE CALLER'S SIZE         */
         LH    R4,XSAPRMSZ-RBBASIC(,R5)                            0383
         SLR   R4,R3                                               0383
         STH   R4,XSAPRMSZ-RBBASIC(,R5)                            0383
*             XSABFRAD=XSABFRAD+REG3;/* UPDATE CALLER'S ADDRESS      */
         ALR   R2,R3                                               0384
         STCM  R2,7,XSABFRAD-RBBASIC(R5)                           0384
*             XSACURDS=XSACURDS+REG3;/* INCREMENT AMT OF DATA MOVED  */
         LR    R4,R3                                               0385
         AH    R4,XSACURDS-RBBASIC(,R5)                            0385
         STH   R4,XSACURDS-RBBASIC(,R5)                            0385
*           END;                                                   0386
*         IPBFSZ=IPBFSZ-REG3-1;     /* UPDATE QUEUE ELE SIZE TO AM'T
*                                      OF DATA MOVED PLUS THE INVALID
*                                      CHAR THAT IS DELETED.         */
@RF00380 LH    R4,IPBFSZ(,R13)                                     0387
         SLR   R4,R3                                               0387
         BCTR  R4,0                                                0387
         STH   R4,IPBFSZ(,R13)                                     0387
*         IPBUFADR=IPBUFADR+REG3+1; /* UPDATE QUEUE ELE ADDRESS TOO  */
         LR    R4,R3                                               0388
         AL    R4,IPBUFADR(,R13)                                   0388
         AL    R4,FW1                                              0388
         ST    R4,IPBUFADR(,R13)                                   0388
*         GO TO CONTIN1;            /* GO CONTINUE SEARCHING QUEUE 0389
*                                      ELE DATA                      */
         B     CONTIN1                                             0389
*                                                                  0390
*         /***********************************************************/
*         /*                                                         */
*         /* ALL DATA SCANNED IN 'TRT' WAS VALID                     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0390
*DATAVALD:                                                         0390
*         XSATARGT(1:REG3)=IPSOURCE(1:REG3);/* MOVE DATA             */
DATAVALD L     R4,XSABFRAD-1-RBBASIC(,R5)                          0390
         LA    R4,0(,R4)                                           0390
         LR    R2,R3                                               0390
         BCTR  R2,0                                                0390
         L     R15,IPBUFADR(,R13)                                  0390
         EX    R2,@SM02696                                         0390
*         XSAPRMSZ=XSAPRMSZ-REG3;   /* UPDATE CALLER'S DATA SIZE     */
         LH    R2,XSAPRMSZ-RBBASIC(,R5)                            0391
         SLR   R2,R3                                               0391
         STH   R2,XSAPRMSZ-RBBASIC(,R5)                            0391
*         XSABFRAD=XSABFRAD+REG3;   /* UPDATE CALLER'S ADDRESS       */
         ALR   R4,R3                                               0392
         STCM  R4,7,XSABFRAD-RBBASIC(R5)                           0392
*         IPBFSZ=IPBFSZ-REG3;       /* UPDATE QUEUE ELE SIZE         */
         LH    R4,IPBFSZ(,R13)                                     0393
         SLR   R4,R3                                               0393
         STH   R4,IPBFSZ(,R13)                                     0393
*         IPBUFADR=IPBUFADR+REG3;   /* UPDATE QUEUE ELE ADDRESS      */
         ALR   R15,R3                                              0394
         ST    R15,IPBUFADR(,R13)                                  0394
*         XSACURDS=XSACURDS+REG3;   /* INCREMENT AMT OF DATA MOVED   */
         LR    R4,R3                                               0395
         AH    R4,XSACURDS-RBBASIC(,R5)                            0395
         STH   R4,XSACURDS-RBBASIC(,R5)                            0395
*CONTIN1:                                                          0396
*                                                                  0396
*         /***********************************************************/
*         /*                                                         */
*         /* CONTINUE WITH TRT LOOP                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0396
*         RFY                                                      0396
*           REG3 UNRSTD;                                           0396
CONTIN1  DS    0H                                                  0397
*       END;                        /* END EDIT'S DO WHILE           */
@DE00371 SLR   R4,R4                                               0397
         CH    R4,XSAPRMSZ-RBBASIC(,R5)                            0397
         BNL   @DC00371                                            0397
         CH    R4,IPBFSZ(,R13)                                     0397
         BL    @DL00371                                            0397
@DC00371 DS    0H                                                  0398
*                                                                  0398
*       /*************************************************************/
*       /*                                                           */
*       /* EITHER IPBFSZ OR XSAPRMSZ IS ZERO 1. IF XSAPRMSZ ^= 0 AND */
*       /* THIS IS END OF INPUT(IPPRTL=0), THEN PAD REMAINING BUFFER */
*       /* WITH BLANKS. 2. IF IPBFSZ ^= 0, THEN SCAN FOR ANOTHER     */
*       /* VALID CHAR, ADJUSTING IPBFSZ AND IPBUFADR. THIS IS DONE SO*/
*       /* THAT IF CALLER IS RETURNED A CODE '0C'HEX, INDICATING THAT*/
*       /* MORE DATA FOLLOWS, THEN THERE SHOULD BE VALID DATA        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0398
*       IF XSAPRMSZ>0&IPPRTL='0'B THEN                             0398
         LH    R4,XSAPRMSZ-RBBASIC(,R5)                            0398
         LTR   R4,R4                                               0398
         BNP   @RF00398                                            0398
         TM    IPPRTL(R13),B'00100000'                             0398
         BNZ   @RF00398                                            0398
*         DO;                                                      0399
*                                                                  0399
*           /*********************************************************/
*           /*                                                       */
*           /* PAD INPUT AREA WITH BLANKS, BUT DON'T CHANGE XSAPRMSZ */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0400
*           RFY                                                    0400
*            (REG0,                                                0400
*             REG1,                                                0400
*             REG2,                                                0400
*             REG3) RSTD;                                          0400
*           REG0=XSABFRAD;          /* TARGET ADR FOR 'MVCL'         */
         L     R0,XSABFRAD-1-RBBASIC(,R5)                          0401
         ICM   R0,8,@CB02616                                       0401
*           REG1=XSAPRMSZ;          /* AM'T OF AREA TO MOVE INTO REG2
*                                      NOT SET SINCE COUNT WILL BE 0402
*                                      ZERO, CAUSING PAD CHAR TO BE
*                                      USED                          */
         LR    R1,R4                                               0402
*           REG3=BLANK;             /* PADDING CHAR IS A BLANK       */
         LA    R3,64                                               0403
*           SLL(REG3,24);           /* PUT INTO PAD POSITION         */
         SLL   R3,24                                               0404
*           MVCL(REG0,REG2);        /* MOVE IN BLANKS & SET COUNT=0  */
         MVCL  R0,R2                                               0405
*         END;                                                     0406
*       IF IPBFSZ>0 THEN            /* MORE DATA IN QUEUE ELE ? YES,
*                                      VALIDATE IT                   */
@RF00398 LH    R4,IPBFSZ(,R13)                                     0407
         LTR   R4,R4                                               0407
         BNP   @RF00407                                            0407
*         DO UNTIL REG3^=0|IPBFSZ=0;                               0408
@DL00408 DS    0H                                                  0409
*           REG3=MIN(IPBFSZ,256);   /* 'TRT' UP TO 256 CHARS         */
         LH    R3,IPBFSZ(,R13)                                     0409
         LA    R4,256                                              0409
         CR    R3,R4                                               0409
         BNH   *+6
         LR    R3,R4                                               0409
*           REG1=0;                 /* CLEAR REGISTER BEFORE TRT     */
         SLR   R1,R1                                               0410
*           TRT(IPSOURCE(1:REG3),TGETEDIT(1));/* SEE IF ANY VALID    */
         L     R4,IPBUFADR(,R13)                                   0411
         LR    R15,R3                                              0411
         BCTR  R15,0                                               0411
         EX    R15,@SB02692                                        0411
*           BC(CC0,CONTIN2);        /* BRANCH IF THERE IS VALID DATA */
         BC    8,CONTIN2                                           0412
*           REG3=REG1-IPBUFADR;     /* NO. OF VALID CHARS            */
         L     R4,IPBUFADR(,R13)                                   0413
         LR    R3,R1                                               0413
         SLR   R3,R4                                               0413
*           IF REG3=0 THEN          /* ANY VALID AT ALL ?            */
         LTR   R3,R3                                               0414
         BNZ   @RF00414                                            0414
*             DO;                   /* NO, KEEP SEARCHING            */
*               IPBFSZ=IPBFSZ-1;    /* UPDATE QUEUE ELE SIZE         */
         LH    R15,IPBFSZ(,R13)                                    0416
         BCTR  R15,0                                               0416
         STH   R15,IPBFSZ(,R13)                                    0416
*               IPBUFADR=IPBUFADR+1;/* UPDATE QUEUE ELE ADDRESS      */
         AL    R4,FW1                                              0417
         ST    R4,IPBUFADR(,R13)                                   0417
*             END;                                                 0418
*                                                                  0418
*           /*********************************************************/
*           /*                                                       */
*           /* FALL THRU TO CONTIN2.                                 */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0419
*CONTIN2:                                                          0419
*                                                                  0419
*           /*********************************************************/
*           /*                                                       */
*           /* REG3 IS 0 IF FIRST CHAR IN TRT WAS INVALID. OTHERWISE */
*           /* IT IS THE NO. OF VALID CHARS IF BRANCH WASN'T TAKEN & */
*           /* IT IS MIN(IPBFSZ,256) IF BRANCH WAS TAKEN. IF REG3 IS */
*           /* 0 THEN THE DO UNTIL WILL CONTINUE SEARCHING FOR A     */
*           /* VALID CHAR, UPDATING QUEUE ELE POINTERS (UNLESS IPBFSZ*/
*           /* BECOMES 0, IN WHICH CASE THERE IS NO MORE DATA)       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0419
*         END;                      /* END DO UNTIL                  */
@RF00414 DS    0H                                                  0419
CONTIN2  DS    0H                                                  0419
@DE00408 SLR   R4,R4                                               0419
         CR    R3,R4                                               0419
         BNE   @DC00408                                            0419
         CH    R4,IPBFSZ(,R13)                                     0419
         BNE   @DL00408                                            0419
@DC00408 DS    0H                                                  0420
*       RFY                                                        0420
*        (REG0,                                                    0420
*         REG1,                                                    0420
*         REG2,                                                    0420
*         REG3) UNRSTD;                                            0420
@RF00407 DS    0H                                                  0421
*     END;                          /* END 'EDIT' OPTION PROCESSING  */
*   RFY                                                            0422
*     RTNREG RSTD;                                                 0422
@RC00356 DS    0H                                                  0423
*   RTNREG=XSASAVEA;                /* RESTORE RETURN ADDRESS        */
         L     R14,XSASAVEA-RBBASIC(,R5)                           0423
*   RETURN;                                                        0424
@EL00004 DS    0H                                                  0424
@EF00004 DS    0H                                                  0424
@ER00004 BR    R14                                                 0424
*   RFY                                                            0425
*     RTNREG UNRSTD;                                               0425
*   END EDIT3767;                                                  0426
MOVEASIS ST    R14,XSAWD8-RBBASIC(,R5)
*         DO;
*           RFY
*            (REG0,
*             REG1,
*             REG2,
*             REG3) RSTD;
*           REG0=XSABFRAD;          /* TARGET ADDR FOR 'MVCL'        */
         L     R4,XSABFRAD-1-RBBASIC(,R5)
         LA    R4,0(,R4)
         LR    R0,R4
*         REG1=MIN(XSAPRMSZ,IPBFSZ);/* GET MINIMUM FOR MOVE          */
         LH    R15,XSAPRMSZ-RBBASIC(,R5)
         LH    R14,IPBFSZ(,R13)
         LR    R1,R14
         CR    R1,R15
         BNH   *+6
         LR    R1,R15
*           REG2=IPBUFADR;          /* SOURCE ADDR FOR 'MVCL'        */
         L     R11,IPBUFADR(,R13)
         LR    R2,R11
*           REG3=REG1;              /* SAME SIZE                     */
         LR    R3,R1
*         XSAPRMSZ=XSAPRMSZ-REG1;   /* UPDATE CALLER'S SIZE          */
         SLR   R15,R1
         STH   R15,XSAPRMSZ-RBBASIC(,R5)
*         XSABFRAD=XSABFRAD+REG1;   /* UPDATE CALLER'S ADDRESS       */
         ALR   R4,R1
         STCM  R4,7,XSABFRAD-RBBASIC(R5)
*         IPBFSZ=IPBFSZ-REG1;       /* UPDATE QUEUE ELE SIZE         */
         SLR   R14,R1
         STH   R14,IPBFSZ(,R13)
*         IPBUFADR=IPBUFADR+REG1;   /* UPDATE QUEUE ELE ADDRESS      */
         ALR   R11,R1
         ST    R11,IPBUFADR(,R13)
*         XSACURDS=REG1;            /* SET AMOUNT OF DATA MOVED      */
         STH   R1,XSACURDS-RBBASIC(,R5)
*           MVCL(REG0,REG2);        /* MOVE DATA FROM INPUT BUFFER TO
*                                      CALLERS DATA AREA             */
         MVCL  R0,R2
*           RFY
*            (REG0,
*             REG1,
*             REG2,
*             REG3) UNRSTD;
         L     R14,XSAWD8-RBBASIC(,R5)
         BR    R14
*EDIT3270:                                                         0427
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0427
EDIT3270 DS    0H                                                  0428
*                                                                  0428
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*        EDIT3270 IS THE STANDARD TSO/VTAM EDIT ROUTINE FOR        */
*/*        THE 3270 TERMINAL. IT CHECKS FOR A TGET EDIT              */
*/*        REQUEST AND SCANS FOR INVALID DATA AND 3270 CONTROL CHARS */
*/*        IF SO. IT MOVES THE                                       */
*/*        DATA FROM THE INPUT QUEUE TO THE CALLER'S DATA AREA       */
*/*        AND PADS WITH BLANKS IF EDIT OPTION.                      */
*/*                                                                  */
*/*        INPUT NEEDED---XSABFRAD - CALLER' DATA ADDRESS            */
*/*                       XSAPRMSZ - CALLER'S DATA AREA SIZE         */
*/*                       IPBUFADR - QUEUE ELEMENT ADDRESS           */
*/*                       IPBFSZ   - QUEUE ELEMENT SIZE              */
*/*                       XSAEDITO - OPTION IS EDIT IF='00'          */
*/*                                                                  */
*/*        OUTPUT-----EDIT3270 UPDATES THE DATA ADDRESSES AND        */
*/*                   AREA SIZES LISTED ABOVE.                       */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*                                                                  0428
*   DCL                                                            0428
*     SBA BIT(8) CONSTANT('11'X);   /* 3270 START BUFFER ADDRES      */
*   RFY                                                            0429
*     RTNREG RSTD;                                                 0429
*   XSASAVEA=RTNREG;                /* SAVE RETURN ADDRESS           */
         ST    R14,XSASAVEA-RBBASIC(,R5)                           0430
*   RFY                                                            0431
*     RTNREG UNRSTD;                                               0431
*   XSACURDS=0;                     /* CLEAR DATA MOVED COUNTER      */
         SLR   R4,R4                                               0432
         STH   R4,XSACURDS-RBBASIC(,R5)                            0432
*   IF XSAEDITO^='00'B THEN         /* 00 IS EDIT OPTION             */
         TM    XSAOPTNS-RBBASIC(R5),XSAEDITO                       0433
         BZ    @RF00433                                            0433
*     DO;                                                          0434
*                                                                  0434
*/*                                                                  */
*/*     DECREMENT 'CONTROL CHARACTER COUNT' TO KEEP TRACK OF NUMBER  */
*/*     OF CONTROL CHARACTERS THAT COULD NOT BE MOVED                */
*/*                                                                  */
*                                                                  0435
*       IPCCC=MAX(IPCCC-XSAPRMSZ,0);/* MOVE A MAX OF XSAPRMSZ CONTROL
*                                      CHARACTERS FROM QUEUE         */
         LH    R15,XSAPRMSZ-RBBASIC(,R5)                           0435
         SLR   R14,R14                                             0435
         IC    R14,IPCCC(,R13)                                     0435
         SLR   R14,R15                                             0435
         CR    R14,R4                                              0435
         BNL   *+6
         LR    R14,R4                                              0435
         STC   R14,IPCCC(,R13)                                     0435
*                                                                  0436
*/*     TGET ASIS DATA MOVE. IF EITHER COUNT IS ZERO ON ENTRY,       */
*/*     NOTHING TO MOVE                                              */
*/*                                                                  */
*                                                                  0436
*       IF XSAPRMSZ>0&IPBFSZ>0 THEN                                0436
         CR    R15,R4                                              0436
         BNH   @RF00436                                            0436
         CH    R4,IPBFSZ(,R13)                                     0436
         BNL   @RF00436                                            0436
*         CALL MOVEASIS;
         BAL   R14,MOVEASIS
*       ELSE                                                       0451
*         ;                         /* IF EITHER=0, NO DATA MOVE     */
@RF00436 DS    0H                                                  0452
*     END;                          /* END 'TGET ASIS'               */
*   ELSE                            /* 'TGET EDIT' DATA MOVE         */
*     DO;                                                          0453
*                                                                  0453
         B     @RC00433                                            0453
@RF00433 DS    0H                                                  0454
*       /*************************************************************/
*       /*                                                           */
*       /* POINT PAST 3270 CONTROL CHARACTERS. IPCCC IS >=0 AND <=6. */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0454
*       IPBFSZ=IPBFSZ-IPCCC;        /* ADJUST DATA COUNT             */
         SLR   R4,R4                                               0454
         IC    R4,IPCCC(,R13)                                      0454
         LH    R15,IPBFSZ(,R13)                                    0454
         SLR   R15,R4                                              0454
         STH   R15,IPBFSZ(,R13)                                    0454
*       IPBUFADR=IPBUFADR+IPCCC;    /* ADJUST DATA POINTER           */
         AL    R4,IPBUFADR(,R13)                                   0455
         ST    R4,IPBUFADR(,R13)                                   0455
*       IPCCC=0;                    /* SET CONTROL CHARACTER COUNT   */
         MVI   IPCCC(R13),X'00'                                    0456
*       IPBUFADR=IPBUFADR+XSAWD12;
         L     R14,XSAWD12-RBBASIC(,R5)
         ALR   R4,R14
         ST    R4,IPBUFADR(,R13)
*       IPBUFSZ=IPBUFSZ-XSAWD12;
         SLR   R15,R14
         STH   R15,IPBFSZ(,R13)
*                                                                  0457
*       /*************************************************************/
*       /*                                                           */
*       /* SCAN DATA VIA 'TRT' INSTRUCTION, MOVING VALID DATA AND    */
*       /* POINTING PAST INVALID CHAR. CONTINUE UNTIL THERE IS NO    */
*       /* MORE DATA TO MOVE OR NO ROOM TO MOVE IT TO.               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0457
*       DO WHILE XSAPRMSZ^=0&IPBFSZ^=0;                            0457
         B     @DE00457                                            0457
@DL00457 DS    0H                                                  0458
*         RFY                                                      0458
*           REG3 RSTD;                                             0458
*         REG3=MIN(IPBFSZ,XSAPRMSZ,256);/* NO MORE THAN 256 CHARS CAN
*                                      BE TESTED AT ONCE.            */
         LH    R3,IPBFSZ(,R13)                                     0459
         LH    R4,XSAPRMSZ-RBBASIC(,R5)                            0459
         CR    R3,R4                                               0459
         BNH   *+6
         LR    R3,R4                                               0459
         LA    R4,256                                              0459
         CR    R3,R4                                               0459
         BNH   *+6
         LR    R3,R4                                               0459
*         RFY                                                      0460
*          (REG1,                                                  0460
*           REG2) RSTD;                                            0460
*         REG1=0;                   /* CLEAR REGISTER BEFORE TRT     */
         SLR   R1,R1                                               0461
*         TRT(IPSOURCE(1:REG3),TGETEDIT(1));/* SEARCH FOR INVALID  0462
*                                      CHAR                          */
         L     R4,IPBUFADR(,R13)                                   0462
         LR    R15,R3                                              0462
         BCTR  R15,0                                               0462
         EX    R15,@SB02692                                        0462
*         BC(CC0,DATAOK);           /* BRANCH IF ALL DATA IS VALID   */
         BC    8,DATAOK                                            0463
*                                                                  0464
*         /***********************************************************/
*         /*                                                         */
*         /* NOT ALL DATA IS VALID..REG1 POINTS TO FIRST INVALID CHAR*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0464
*         REG3=REG1-IPBUFADR;       /* COMPUTE NO. OF VALID CHARS  0464
*                                      MOVED.                        */
         L     R4,IPBUFADR(,R13)                                   0464
         LR    R3,R1                                               0464
         SLR   R3,R4                                               0464
*         IF REG3^=0 THEN           /* ANY DATA TO MOVE ?            */
         LTR   R3,R3                                               0465
         BZ    @RF00465                                            0465
*           DO;                     /* YES                           */
*             XSATARGT(1:REG3)=IPSOURCE(1:REG3);/* MOVE DATA         */
         L     R15,XSABFRAD-1-RBBASIC(,R5)                         0467
         LA    R15,0(,R15)                                         0467
         LR    R14,R3                                              0467
         BCTR  R14,0                                               0467
         EX    R14,@SM02698                                        0467
*             XSAPRMSZ=XSAPRMSZ-REG3;/* UPDATE CALLER'S SIZE         */
         LH    R4,XSAPRMSZ-RBBASIC(,R5)                            0468
         SLR   R4,R3                                               0468
         STH   R4,XSAPRMSZ-RBBASIC(,R5)                            0468
*             XSABFRAD=XSABFRAD+REG3;/* UPDATE CALLER'S ADDRESS      */
         ALR   R15,R3                                              0469
         STCM  R15,7,XSABFRAD-RBBASIC(R5)                          0469
*             XSACURDS=XSACURDS+REG3;/* INCREMENT AMT OF DATA MOVED  */
         LR    R4,R3                                               0470
         AH    R4,XSACURDS-RBBASIC(,R5)                            0470
         STH   R4,XSACURDS-RBBASIC(,R5)                            0470
*           END;                                                   0471
*         RFY                                                      0472
*           IPSOURCE BASED(REG1);   /* REFERENCE DATA VIA REGISTER 0472
*                                                            @YM03231*/
@RF00465 DS    0H                                                  0473
*         IF IPSOURCE(1)=SBA THEN   /* IS INVALID CHAR A START BUFFER
*                                      ADDRESS ?             @YM03231*/
         CLI   IPSOURCE(R1),X'11'                                  0473
         BNE   @RF00473                                            0473
*           REG2=3;                 /* YES...PULL OUT SBA,@,@        */
***      LA    R2,3                                                0474
         LA    R4,3
         LH    R2,IPBFSZ(,R13)
         SLR   R2,R3
         CR    R2,R4
         BNH   *+6
         LR    R2,R4
         SLR   R4,R2
         ST    R4,XSAWD12-RBBASIC(,R5)
*         ELSE                                                     0475
*           REG2=1;                 /* NO...JUST PULL OUT ONE CHAR   */
         B     @RC00473                                            0475
@RF00473 LA    R2,1                                                0475
*         RFY                                                      0476
*           IPSOURCE BASED(IPBUFADR);                              0476
@RC00473 DS    0H                                                  0477
*         IPBFSZ=IPBFSZ-REG3-REG2;  /* UPDATE QUEUE ELE SIZE TO AM'T
*                                      OF DATA MOVED PLUS THE INVALID
*                                      CHAR(S) THAT IS DELETED       */
         LH    R4,IPBFSZ(,R13)                                     0477
         SLR   R4,R3                                               0477
         SLR   R4,R2                                               0477
         STH   R4,IPBFSZ(,R13)                                     0477
*         IPBUFADR=IPBUFADR+REG3+REG2;/* UPDATE QUEUE ELE ADDRESS TOO*/
         LR    R4,R3                                               0478
         AL    R4,IPBUFADR(,R13)                                   0478
         ALR   R4,R2                                               0478
         ST    R4,IPBUFADR(,R13)                                   0478
*         RFY                                                      0479
*          (REG1,                                                  0479
*           REG2) UNRSTD;                                          0479
*         GO TO CONTIN3;            /* GO CONTINUE SEARCHING QUEUE 0480
*                                      ELE DATA                      */
         B     CONTIN3                                             0480
*                                                                  0481
*         /***********************************************************/
*         /*                                                         */
*         /* ALL DATA SCANNED IN 'TRT' WAS VALID                     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0481
*DATAOK:                                                           0481
*         XSATARGT(1:REG3)=IPSOURCE(1:REG3);/* MOVE DATA             */
DATAOK   L     R4,XSABFRAD-1-RBBASIC(,R5)                          0481
         LA    R4,0(,R4)                                           0481
         LR    R2,R3                                               0481
         BCTR  R2,0                                                0481
         L     R15,IPBUFADR(,R13)                                  0481
         EX    R2,@SM02696                                         0481
*         XSAPRMSZ=XSAPRMSZ-REG3;   /* UPDATE CALLER'S DATA SIZE     */
         LH    R2,XSAPRMSZ-RBBASIC(,R5)                            0482
         SLR   R2,R3                                               0482
         STH   R2,XSAPRMSZ-RBBASIC(,R5)                            0482
*         XSABFRAD=XSABFRAD+REG3;   /* UPDATE CALLER'S ADDRESS       */
         ALR   R4,R3                                               0483
         STCM  R4,7,XSABFRAD-RBBASIC(R5)                           0483
*         IPBFSZ=IPBFSZ-REG3;       /* UPDATE QUEUE ELE SIZE         */
         LH    R4,IPBFSZ(,R13)                                     0484
         SLR   R4,R3                                               0484
         STH   R4,IPBFSZ(,R13)                                     0484
*         IPBUFADR=IPBUFADR+REG3;   /* UPDATE QUEUE ELE ADDRESS      */
         ALR   R15,R3                                              0485
         ST    R15,IPBUFADR(,R13)                                  0485
*         XSACURDS=XSACURDS+REG3;   /* INCREMENT AMT OF DATA MOVED   */
         LR    R4,R3                                               0486
         AH    R4,XSACURDS-RBBASIC(,R5)                            0486
         STH   R4,XSACURDS-RBBASIC(,R5)                            0486
*CONTIN3:                                                          0487
*                                                                  0487
*         /***********************************************************/
*         /*                                                         */
*         /* CONTINUE WITH TRT LOOP                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0487
*         RFY                                                      0487
*           REG3 UNRSTD;                                           0487
CONTIN3  DS    0H                                                  0488
*       END;                        /* END EDIT'S DO WHILE           */
@DE00457 SLR   R4,R4                                               0488
         CH    R4,XSAPRMSZ-RBBASIC(,R5)                            0488
         BNL   @DC00457                                            0488
         CH    R4,IPBFSZ(,R13)                                     0488
         BL    @DL00457                                            0488
@DC00457 DS    0H                                                  0489
*                                                                  0489
*       /*************************************************************/
*       /*                                                           */
*       /* EITHER IPBFSZ OR XSAPRMSZ IS ZERO 1. IF XSAPRMSZ > 0 AND  */
*       /* THIS IS END OF INPUT(IPPRTL=0), THEN PAD REMAINING BUFFER */
*       /* WITH BLANKS. 2. IF IPBFSZ > 0, THEN SCAN FOR ANOTHER      */
*       /* VALID CHAR, ADJUSTING IPBFSZ AND IPBUFADR. THIS IS DONE SO*/
*       /* THAT IF CALLER IS RETURNED A CODE '0C'HEX, INDICATING THAT*/
*       /* MORE DATA FOLLOWS, THEN THERE SHOULD BE VALID DATA        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0489
*       IF XSAPRMSZ>0&IPPRTL='0'B THEN                             0489
         LH    R4,XSAPRMSZ-RBBASIC(,R5)                            0489
         LTR   R4,R4                                               0489
         BNP   @RF00489                                            0489
         TM    IPPRTL(R13),B'00100000'                             0489
         BNZ   @RF00489                                            0489
*         DO;                                                      0490
*                                                                  0490
*           /*********************************************************/
*           /*                                                       */
*           /* PAD INPUT AREA WITH BLANKS, BUT DON'T CHANGE XSAPRMSZ */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0491
*           RFY                                                    0491
*            (REG0,                                                0491
*             REG1,                                                0491
*             REG2,                                                0491
*             REG3) RSTD;                                          0491
*           REG0=XSABFRAD;          /* TARGET ADR FOR 'MVCL'         */
         L     R0,XSABFRAD-1-RBBASIC(,R5)                          0492
         ICM   R0,8,@CB02616                                       0492
*           REG1=XSAPRMSZ;          /* AM'T OF AREA TO MOVE INTO REG2
*                                      NOT SET SINCE COUNT WILL BE 0493
*                                      ZERO, CAUSING PAD CHAR TO BE
*                                      USED                          */
         LR    R1,R4                                               0493
*           REG3=BLANK;             /* PADDING CHAR IS A BLANK       */
         LA    R3,64                                               0494
*           SLL(REG3,24);           /* PUT INTO PAD POSITION         */
         SLL   R3,24                                               0495
*           MVCL(REG0,REG2);        /* MOVE IN BLANKS & SET COUNT=0  */
         MVCL  R0,R2                                               0496
*         END;                                                     0497
*       IF IPBFSZ>0 THEN            /* MORE DATA IN QUEUE ELE ? YES,
*                                      VALIDATE IT                   */
@RF00489 LH    R4,IPBFSZ(,R13)                                     0498
         LTR   R4,R4                                               0498
         BNP   @RF00498                                            0498
*         DO UNTIL REG3^=0|IPBFSZ=0;                               0499
@DL00499 DS    0H                                                  0500
*           REG3=MIN(IPBFSZ,256);   /* 'TRT' UP TO 256 CHARS         */
         LH    R3,IPBFSZ(,R13)                                     0500
         LA    R4,256                                              0500
         CR    R3,R4                                               0500
         BNH   *+6
         LR    R3,R4                                               0500
*           REG1=0;                 /* CLEAR REGISTER BEFORE TRT     */
         SLR   R1,R1                                               0501
*           TRT(IPSOURCE(1:REG3),TGETEDIT(1));/* SEE IF ANY VALID    */
         L     R4,IPBUFADR(,R13)                                   0502
         LR    R15,R3                                              0502
         BCTR  R15,0                                               0502
         EX    R15,@SB02692                                        0502
*           BC(CC0,CONTIN4);        /* BRANCH IF THERE IS VALID DATA */
         BC    8,CONTIN4                                           0503
*           REG3=REG1-IPBUFADR;     /* NO. OF VALID CHARS            */
         L     R4,IPBUFADR(,R13)                                   0504
         LR    R3,R1                                               0504
         SLR   R3,R4                                               0504
*           IF REG3=0 THEN          /* ANY VALID AT ALL ?            */
         LTR   R3,R3                                               0505
         BNZ   @RF00505                                            0505
*             DO;                   /* NO, KEEP SEARCHING            */
*               IPBFSZ=IPBFSZ-1;    /* UPDATE QUEUE ELE SIZE         */
         LH    R15,IPBFSZ(,R13)                                    0507
         BCTR  R15,0                                               0507
         STH   R15,IPBFSZ(,R13)                                    0507
*               IPBUFADR=IPBUFADR+1;/* UPDATE QUEUE ELE ADDRESS      */
         AL    R4,FW1                                              0508
         ST    R4,IPBUFADR(,R13)                                   0508
*             END;                                                 0509
*                                                                  0509
*           /*********************************************************/
*           /*                                                       */
*           /* FALL THRU TO CONTIN2.                                 */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0510
*CONTIN4:                                                          0510
*                                                                  0510
*           /*********************************************************/
*           /*                                                       */
*           /* REG3 IS 0 IF FIRST CHAR IN TRT WAS INVALID. OTHERWISE */
*           /* IT IS THE NO. OF VALID CHARS IF BRANCH WASN'T TAKEN & */
*           /* IT IS MIN(IPBFSZ,256) IF BRANCH WAS TAKEN. IF REG3 IS */
*           /* 0 THEN THE DO UNTIL WILL CONTINUE SEARCHING FOR A     */
*           /* VALID CHAR, UPDATING QUEUE ELE POINTERS (UNLESS IPBFSZ*/
*           /* BECOMES 0, IN WHICH CASE THERE IS NO MORE DATA)       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0510
*         END;                      /* END DO UNTIL                  */
@RF00505 DS    0H                                                  0510
CONTIN4  DS    0H                                                  0510
@DE00499 SLR   R4,R4                                               0510
         CR    R3,R4                                               0510
         BNE   @DC00499                                            0510
         CH    R4,IPBFSZ(,R13)                                     0510
         BNE   @DL00499                                            0510
@DC00499 DS    0H                                                  0511
*       RFY                                                        0511
*        (REG0,                                                    0511
*         REG1,                                                    0511
*         REG2,                                                    0511
*         REG3) UNRSTD;                                            0511
@RF00498 DS    0H                                                  0512
*     END;                          /* END 'EDIT' OPTION PROCESSING  */
*   RFY                                                            0513
*     RTNREG RSTD;                                                 0513
@RC00433 DS    0H                                                  0514
*   RTNREG=XSASAVEA;                /* RESTORE RETURN ADDRESS        */
         L     R14,XSASAVEA-RBBASIC(,R5)                           0514
*   RETURN;                                                        0515
@EL00005 DS    0H                                                  0515
@EF00005 DS    0H                                                  0515
@ER00005 BR    R14                                                 0515
         SPACE
SCHEDTOM DS    0H                                                  0147
*                   DO;             /* SET UP SCHEDULING OF TOM      */
*                     TVWATIS='1'B; /* INDICATE TOM SCHEDULED      0148
*                                      SCHEDULE TOM                  */
         OI    TVWAFLG1,TVWATIS                                    0148
*                     RFY                                          0149
*                       WORK1REG RSTD;                             0149
*                     WORK1REG=TSBXSRB;/* GET ADDRESS OF SRB         */
         L     R4,TSBEXTNT                                         0150
         L     R1,TSBXSRB-TSBX(,R4)                                0150
*                     GEN(SCHEDULE SRB=(WORK1REG),SCOPE=LOCAL)     0151
*                     REFS(TSBXSRB,CVTPTR,CVTLSMQ,CVTMAP,SRBFLNK,  0151
*                         SRBSECT);                                0151
         SCHEDULE SRB=(R1),SCOPE=LOCAL
*                     RFY                                          0152
*                       WORK1REG UNRSTD;                           0152
*                   END;            /* TOM HAS BEEN SCHEDULED        */
         BR    R14
*   RFY                                                            0516
*     RTNREG UNRSTD;                                               0516
*   END EDIT3270;                                                  0517
*   END IKTVTGET                                                   0518
*                                                                  0518
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKTTCAST)                                       */
*/*%INCLUDE SYSLIB  (IKTTVWA )                                       */
*/*%INCLUDE SYSLIB  (IKJTSB  )                                       */
*/*%INCLUDE SYSLIB  (IKTTSBX )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (ISTPAB  )                                       */
*/*%INCLUDE SYSLIB  (ISTDYPAB)                                       */
*/*%INCLUDE SYSLIB  (ISTMPST )                                       */
*/*%INCLUDE SYSLIB  (IHASCVT )                                       */
*/*%INCLUDE SYSLIB  (IEFTCT  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IKTIPARM)                                       */
*                                                                  0518
*       ;                                                          0518
         PRINT NOGEN
         IKTTCAST
         IKTTVWA
         IKJTSB EXT=YES
         IHASRB
         IHAASCB
         IHAASXB
         IHASCVT
         IEFTCT
         CVT   DSECT=YES
         IKJRB
         IHAPSA
         IKJTCB
         PRINT GEN
IKTVTGET CSECT
@DATA    DS    0H
@SB02692 TRT   IPSOURCE(0,R4),TGETEDIT
@SM02694 MVC   XSATARGT(0,R2),IPSOURCE(R4)
@SM02696 MVC   XSATARGT(0,R4),IPSOURCE(R15)
@SM02698 MVC   XSATARGT(0,R15),IPSOURCE(R4)
@DATD    DSECT
         DS    0F
IKTVTGET CSECT
         DS    0F
FW1      DC    F'1'
FW4      DC    F'4'
FW4096   DC    F'4096'
HEXFFFF  DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
IKTVTGET CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
IKTRTX4  DC    V(IKTRTX4)
IKTIDSX4 DC    V(IKTIDSX4)
IKTGETXT DC    V(IKTGETXT)
         DS    0D
OTPTWAIT DC    XL4'80000000'
MOREDATA DC    XL4'40000000'
SUCCESS  DC    AL1(0)
@CB02616 DC    X'00'
         DS    CL2
PATCHLBL DC    20F'0'
TGETEDIT DC    5X'01'
         DC    X'00'
         DC    16X'01'
         DC    X'00'
         DC    41X'01'
         DC    192X'00'
         DS    0D                      END OF CSECT           ZP60009-A
         SPACE
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTDYPAB EQU   0
ISTMPST  EQU   0
MPSRSV07 EQU   ISTMPST+4
MPSTSOIW EQU   MPSRSV07
MPSRQUE  EQU   ISTMPST+8
MPSFLGA  EQU   ISTMPST+12
MPSCRA   EQU   ISTMPST+24
MPSCRACT EQU   MPSCRA+4
MPSSRB   EQU   ISTMPST+32
MPSSRBCT EQU   MPSSRB+4
MPSCRPL  EQU   ISTMPST+40
MPSRPLCT EQU   MPSCRPL+4
IPSOURCE EQU   0
XSATARGT EQU   0
DYNAMARA EQU   0
IPARMS   EQU   DYNAMARA+72
IPBUFADR EQU   IPARMS
IPREQ    EQU   IPARMS+4
IPRC     EQU   IPARMS+5
IPBFSZ   EQU   IPARMS+6
IPFLAGS  EQU   IPARMS+8
IPPRTL   EQU   IPFLAGS+1
IPCCC    EQU   IPFLAGS+2
IPTRMTYP EQU   IPFLAGS+3
IPNXFLGS EQU   IPARMS+16
PRMLSTAD EQU   DYNAMARA+92
IKTQMIN  EQU   0
STATUS   EQU   0
RBOPSW2  EQU   RBOPSW+4
XSA      EQU   RBEXSAVE
XSAPRM0  EQU   XSA
XSAPRMSZ EQU   XSAPRM0+2
XSAPRM1  EQU   XSA+4
XSAOPTNS EQU   XSAPRM1
XSANOWT  EQU   X'10'                                          ZP60009-C
XSAEDITO EQU   X'03'                                          ZP60009-C
XSABFRAD EQU   XSAPRM1+1
XSAWD3   EQU   XSA+8
XSAFLAG  EQU   XSAWD3
XSADMOVE EQU   X'40'                                          ZP60009-C
XSATCBFX EQU   X'20'                                          ZP60009-C
XSADOSWT EQU   X'10'                                          ZP60009-C
XSADATVF EQU   X'08'                                          ZP60009-C
XSATCBA  EQU   XSAWD3+1
XSAWD4   EQU   XSA+12
XSASAVEA EQU   XSAWD4
XSAENQAD EQU   XSA+16
XSAWD8   EQU   XSA+28
XSAUSERP EQU   XSA+32
XSAWD9   EQU   XSAUSERP
XSARETG  EQU   XSA+36
XSAWD11  EQU   XSA+40
XSAWD12  EQU   XSA+44
XSARC    EQU   XSAWD11
XSADATSZ EQU   XSAWD9
XSACURDS EQU   XSAWD9+2
CONTINUE EQU   SUCCESS
@RC00165 EQU   @RC00164
@RC00178 EQU   @RC00177
@RC00157 EQU   @RC00139
@RC00229 EQU   @RC00227
@RF00246 EQU   @RC00242
@RC00263 EQU   @RC00255
@RF00272 EQU   @RC00255
@RC00183 EQU   @RC00178
@RC00181 EQU   @RC00178
@RC00179 EQU   @RC00178
@RF00233 EQU   @RC00229
@ENDDATA EQU   *
         END   IKTVTGET,(C'PLS1824',0702,82141)
/*
//*
//STEP03  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKTVTGET('ZP60009')
++MOD(IKT3270O) DISTLIB(AOST3).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP04  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '*** IKT3270O: TSO/VTAM TERMINAL SCREEN MANAGER ***     *
                        '
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
IKT3270O CSECT
         USING IKT3270O,R15
         B     @PROLOG
         DC    AL1(33)
         DC    C'IKT3270O  83.271'
         DC    C' ZP60009 2005.226'
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)             SAVE REGS
         BALR  R5,0                        ADDRESS SET
@PSTART  LA    R6,4095(,R5)
         LA    R7,4095(,R6)
         USING PSA,0
         USING @PSTART,R5
         USING @PSTART+4095,R6
         USING @PSTART+8190,R7
         EJECT
********************************************************************
*                                                                  *
* SET UP ADDRESSING TO COMPILER WORK AREA, SET SCREEN PARMS AND    *
* PROCESS REQUEST CODE.                                            *
*                                                                  *
********************************************************************
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBEXTNT-TSB(,R12)
         L     R9,TSBXTVWA-TSBX(,R12)      SET TVWA POINTER
         USING TVWA,R9
         L     R8,TVWATOMW                 SET BASE PTR FOR WORK AREA
         LA    R4,TOMAUTOD(,R8)
         ST    R13,4(,R4)
         ST    R4,8(,R13)                  ADDRESS OF AUTODATA AREA
         LR    R13,R4
         L     R12,160(,R4)
         LTR   R12,R12
         BZ    A000054
         BAL   R14,FREEBUFR                PERFORM
A000054  TM    TVWAFLG1,TVWAXSCD           HAS SCREEN SIZE CHANGED?
         BNO   A000060                     NO
         BAL   R14,SETSCRSZ                PERFORM
A000060  LA    R12,876
         ALR   R12,R8
         ST    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           POINT TO START OF RU
         CLI   TOMREQCD(R8),2
         BE    A0000E2
         IC    R12,TVWALNCT
         STC   R12,168(,R4)
         L     R12,TOMCOLMN(,R8)
         ST    R12,164(,R4)
         MVI   169(R4),X'00'
         NI    170(R4),X'1F'
         TM    TVWAFLG6,TVWAFMEW
         BNO   A00009A
         OI    170(R4),X'40'
A00009A  TM    TVWAFLG4,TVWAFMSC
         BNO   A0000A6
         OI    170(R4),X'80'
A0000A6  TM    TVWAFLG3,TVWAAIGN
         BNO   A0000B2
         OI    170(R4),X'20'
A0000B2  CLI   TOMREQCD(R8),0              REQUEST FOR RU BUILD?
         BNE   A0000C2                     NO
         BAL   R14,BLDRU                   PERFORM
         B     A0000E6
A0000C2  CLI   TOMREQCD(R8),1              REQUEST FOR FORMAT WRITE?
         BNE   A0000D2                     NO
         BAL   R14,FORMTWRT                PERFORM
         B     A0000E6
A0000D2  CLI   TOMREQCD(R8),3              REQUEST FOR BREAK-IN?
         BNE   A0000DE                     NO
         BAL   R14,BKMDSEND                PERFORM
A0000DE  B     A0000E6
A0000E2  BAL   R14,A00026A                 PERFORM
A0000E6  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12                     IS RU EMPTY?
         BNP   A000110                     YES
         TM    TVWAFLG3,TVWATRAN           USER TRANSLATION NEEDED?
         BO    A00010C                     YES
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBEXTNT-TSB(,R12)
         TM    TSBXFLG1-TSBX(R12),TSBXASCI ASCII TRANSLATION NEEDED?
         BNO   A000110                     NO
A00010C  BAL   R14,TRANPROC                PERFORM
A000110  B     A0002EE
         EJECT
A000114  ST    R14,88(,R4)
         MVI   OPREQ(R8),X'07'
         LA    R13,520(,R8)
         LA    R12,OPARMS(,R8)
         ST    R12,152(,R4)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASOQM-TCAST(,R12)
         LA    R1,152(,R4)
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         L     R14,88(,R4)
         BR    R14                         EXIT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SETSCRSZ, WILL BE CALL TO INITIALIZE PARAMETERS  */
*/* USED FOR SCREEN MANAGEMENT. SETSCRSZ WILL ALSO BE CALL TO ADJUST */
*/* THESE PARAMETERS AS NEEDED DURING THE SESSION.                   */
*/*                                                                  */
*/********************************************************************/
SETSCRSZ ST    R14,12(,R13)
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         CLC   TSBALTR-TSB(2,R12),TSBPRMR-TSB(R12)              ZP60009
         BE    MOD1OR2                     PRMSZE=ALTSZE        ZP60009
         CLC   TSBLNNO-TSB(1,R12),TSBPRMR-TSB(R12)              ZP60009
         BH    USEALTSZ                    MORE LINES THAN PRIM ZP60009
         CLC   TSBLNSZ-TSB(1,R12),TSBPRMC-TSB(R12)              ZP60009
         BNH   USEPRMSZ                    NOT BIGGER THAN PRIM ZP60009
USEALTSZ LA    R1,TSBALTR-TSB(,R12)        POINT TO ALT SIZE    ZP60009
         TM    TVWAFLG6,X'01'              TVWAALTS ALREADY ON? ZP60009
         BO    GOTSCRSZ                    YES, NO NEED TO SET  ZP60009
         OI    TVWAFLG6,X'01'              NO, SET TVWAALTS     ZP60009
         B     CHGSCRSZ                    SIZE IS CHANGING     ZP60009
USEPRMSZ LA    R1,TSBPRMR-TSB(,R12)        POINT TO PRIM SIZE   ZP60009
         TM    TVWAFLG6,X'01'              TVWAALTS OFF?        ZP60009
         BZ    GOTSCRSZ                    YES, NO NEED TO CLR  ZP60009
         NI    TVWAFLG6,X'FE'              NO, RESET TVWAALTS   ZP60009
CHGSCRSZ TM    TVWAFLG5,TVWAFSM            IN FULLSCREEN MODE?  ZP60009
         BO    GOTSCRSZ                    YES, LEAVE FOR APP   ZP60009
         OI    TVWAFLG4,TVWAFMSC           NO, FORMAT SCREEN    ZP60009
         LA    R0,1                        RESTART FROM TOP     ZP60009
         STC   R0,TVWALNCT                 SET EXTERNALLY       ZP60009
         ST    R0,TOMLNCNT(,R8)            SET INTERNALLY       ZP60009
GOTSCRSZ SLR   R0,R0                       CLEAR FOR INSERT     ZP60009
         ICM   R0,3,0(R1)                  LOAD ROWS + COLS     ZP60009
         SRDL  R0,8                        GET ROWS IN R0       ZP60009
         SRL   R1,24                       GET COLS IN R1       ZP60009
         ST    R1,TOMPLSZ(,R8)             SET PHYS LINE SIZE   ZP60006
         STC   R0,TOMPLNNO(,R8)            SET PHYS LINE COUNT  ZP60009
         MR    R0,R0                       GET BUFFER SIZE      ZP60009
         L     R12,TSBEXTNT-TSB(,R12)      POINT TO TSBX        ZP60009
         STH   R1,TSBXTMBF-TSBX(,R12)      SET NEW BUFFER SIZE  ZP60009
         BCTR  R1,0                        GET LAST LOCATION    ZP60009
         STCM  R1,3,TOMFMTAD(R8)           SBA FOR LAST BYTE    ZP60009
         CH    R1,HW4095                   NEED 14-BIT ADDRESS? ZP60009
         BH    A000182                     YES                  ZP60009
         SLL   R1,2                        NO                   ZP60009
         STCM  R1,2,TOMFMTAD(R8)           USE 12-BIT ADDRESS   ZP60009
         NI    TOMFMTAD+1(R8),X'3F'                             ZP60009
         TR    TOMFMTAD(2,R8),BFADRTAB                          ZP60009
         B     A000182                                          ZP60009
MOD1OR2  EQU   *                                                ZP60009
         NI    TVWAFLG6,X'FE'              RESET TVWAALTS       ZP60009
         L     R12,TSBEXTNT-TSB(,R12)
         CLC   TSBXTMBF-TSBX(2,R12),HW1920 MODEL-2 DISPLAY?
*ZP60009 BNE   A000172
         BL    A000172                     NO, MODEK-1          ZP60009
         MVC   TOMPLSZ(4,R8),FW80          PHYSICAL LINE SIZE
         MVI   TOMPLNNO(R8),X'18'          LINES PER SCREEN
         MVC   TOMFMTAD(2,R8),A002103      LAST SCREEN POSITION
         B     A000182
A000172  MVC   TOMPLSZ(4,R8),FW40          PHYSICAL LINE SIZE
         MVI   TOMPLNNO(R8),X'0C'          LINES PER SCREEN
         MVC   TOMFMTAD(2,R8),A002105      LAST SCREEN POSITION
A000182  MVI   TOMSBACD(R8),X'11'
         MVC   TOMFMATT(2,R8),SFRDATT
         LA    R12,2
         L     R1,PSAAOLD                  PSA REFERENCE
         L     R15,ASCBTSB-ASCB(,R1)
         SLR   R14,R14
         IC    R14,TSBLNSZ-TSB(,R15)
         L     R11,TOMPLSZ(,R8)
         CR    R14,R11
         BNH   A0001AA
         LR    R14,R11
A0001AA  CR    R14,R12
         BNL   A0001B2
         LR    R14,R12
A0001B2  STC   R14,TOMLNSZ(,R8)            SET WORKING LINE SIZE
         SLR   R14,R14
         IC    R14,TSBLNNO-TSB(,R15)
         SLR   R15,R15
         IC    R15,TOMPLNNO(,R8)
         CR    R14,R15
         BNH   A0001CA
         LR    R14,R15
A0001CA  CR    R14,R12
         BNL   A0001D2
         LR    R14,R12
A0001D2  ST    R14,TOMLNNO(,R8)            SET WORKING LINES/SCREEN
         NI    TVWAFLG1,255-TVWAXSCD       RESET SCREEN SIZE REQUEST
         L     R14,12(,R13)
         BR    R14                         END OF SETSCRSZ
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FORMTWRT, WILL BUILD AN RU CONSISTING OF A.....  */
*/*                                                                  */
*/********************************************************************/
FORMTWRT ST    R14,76(,R4)                 SAVE RETURN ADDRESS
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           TOMCOLMN=0
         LA    R12,9                       MESSAGE INDEX NUMBER
         ST    R12,TOMWRKVI(,R8)
*TOMWRKSZ=MIN(MSGSIZE,62)+18;        /* SET SIZE OF ERROR MS @G58AK2Q*/
         SLA   R12,2
         L     R1,CVTPTR                   CVT ADDRESS
         L     R1,CVTTCASP-CVT(,R1)
         L     R1,TCASMSGS-TCAST(,R1)
         AL    R1,FWMINUS4
         L     R12,0(R12,R1)
         LH    R15,0(,R12)
         LA    R14,62
         CR    R15,R14
         BNH   *+6
         LR    R15,R14
         AL    R15,FW18
         STC   R15,TOMWRKSZ(,R8)           SET SIZE OF ERROR MESSAGE
         MVI   TOMWRKBF(R8),X'F5'          SET COMMAND
         TM    TVWAFLG6,X'01'              IS TVWAALTS ON?      ZP60009
         BNO   *+8                         NO, PRIMARY SIZE     ZP60009
         MVI   TOMWRKBF(R8),X'7E'          YES, ALTERNATE SIZE  ZP60009
         MVC   TOMWRKBF+1(6,R8),A0020E9    BELL+UNLK,SBA(0),SF(UNPHI)
         LR    R14,R15
         SL    R14,FW19
         EX    R14,A00201E                 LOAD MSG TO TOMWRKBF+7
         ALR   R15,R8
         MVC   TOMWRKBF-11(11,R15),A0020D0
         L     R12,TOMPLSZ(,R8)            PHYSICAL LINE SIZE   ZP60009
         CL    R12,FW80                    WIDER THAN 80 COLS?  ZP60009
         BNH   ASTERSOK                    NO, HAVE RIGHT SBA   ZP60009
         STC   R12,TOMWRKBF-9(,R15)        SET SBA LOW ADDR     ZP60009
         NI    TOMWRKBF-9(R15),X'3F'       FIX SBA LOW ADDR     ZP60009
         SRL   R12,6                       GET SBA HIGH ADDR    ZP60009
         STC   R12,TOMWRKBF-10(,R15)       SET SBA HIGH ADDR    ZP60009
         TR    TOMWRKBF-10(2,R15),BFADRTAB FIX 12-BIT SBA ADDR  ZP60009
ASTERSOK EQU   *                           HAVE RIGHT *** ADDR  ZP60009
         OI    TVWAFLG2,TVWAPGN
         NI    TVWAFLG4,255-TVWAKBDL       KEYBOARD NOT LOCKED
         OI    TOMWFLG1(R8),TOMCURST       CURSOR ADDRESS SET
         OI    TOMWFLG2(R8),TOMERMG9       SPECIAL ERROR MESSAGE RU
         SLR   R12,R12
         IC    R12,TOMWRKSZ(,R8)
         ST    R12,TOMBFCNT(,R8)           SET RU DATA LENGTH
         TM    TVWAFLG5,TVWAFSM            IN FULLSCREEN MODE?
         BNO   *+8                         NO
         OI    TVWAFLG5,TVWAFSW            YES, FULLSCREEN TPUT WAITING
         L     R14,76(,R4)                 RESTORE RETURN ADDRESS
         BR    R14                         END OF FORMTWRT
         EJECT
A00026A  ST    R14,84(,R4)
         NI    TVWAFLG2,255-TVWAPGN
         NI    TVWAFLG4,255-TVWANOFB
         TM    170(R4),X'40'
         BNO   A000282
         OI    TVWAFLG6,TVWAFMEW
A000282  TM    170(R4),X'20'
         BNO   A00028E
         OI    TVWAFLG3,TVWAAIGN
A00028E  TM    170(R4),X'80'
         BNO   A00029A
         OI    TVWAFLG4,TVWAFMSC
A00029A  IC    R12,168(,R4)
         STC   R12,TVWALNCT
         L     R12,164(,R4)
         ST    R12,TOMCOLMN(,R8)
         SLR   R12,R12
         IC    R12,TVWAATTN
         SLR   R15,R15
         IC    R15,169(,R4)
         ALR   R12,R15
         STC   R12,TVWAATTN
         MVI   169(R4),X'00'
         BAL   R14,A000114                 PERFORM
         L     R14,84(,R4)
         BR    R14                         EXIT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BKMDSEND, WILL BUILD AN RU....                   */
*/*                                                                  */
*/********************************************************************/
BKMDSEND ST    R14,80(,R4)
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12                     IS OUTPUT RU EMPTY?
         BNZ   A0002DC                     NO
         BAL   R14,SCRFORMT                PUT IN CMD AND WCC
A0002DC  TM    TVWAFLG5,TVWAFSM            IN FULLSCREEN MODE?
         BNZ   A0002E8                     YES
         BAL   R14,NEWCURS                 NO, FORMAT SCREEN FOR IT
A0002E8  L     R14,80(,R4)
         BR    R14                         END OF BKMDSEND
A0002EE  B     A002012
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDRU, WILL CONTROL THE BUILDING OF THE OUTPUT.  */
*/* APPROPRIATE ROUTINES WILL BE CALLED TO PUT DATA IN THE OUTPUT    */
*/* RU.                                                              */
*/*                                                                  */
*/********************************************************************/
BLDRU    ST    R14,72(,R4)
         NI    OPOPTNS(R8),255-OPASID      SET CROSS-MEMORY FLAG OFF
         NI    TOMWFLG2(R8),255-TOMSCHED   SEND RU POST=RESP
         NI    TOMWFLG1(R8),255-TOMCURST-TOMEXBRU
         NI    TOMWFLG2(R8),255-TOMKBULK   KEYBD UNLOCK NOT REQ'D YET
         SLR   R12,R12
         ST    R12,TOMBFCNT(,R8)           SET COUNT OF DATA IN RU TO 0
         NI    TOMWFLG2(R8),255-TOMALARM-TOMERASE-TOMTRSBA
         TM    TVWAFLG2,TVWABKMG           IS FLASHBACK DATA PENDING?
         BNO   A00031C                     NO
*  /******************************************************************/
*  /*                                                                */
*  /*      PUT LAST INPUT LINE(S) AT TOP OF 3270 SCREEN IF YES.      */
*  /*                                                                */
*  /******************************************************************/
         BAL   R14,FLSHBACK                PUT FLASHBACK IN OUTPUT RU
A00031C  TM    TVWAFLG2,TVWAERMG           TIM'S ERROR MESSAGE PENDING?
         BNO   A000330                     NO
         TM    TOMWFLG1(R8),TOMEXBRU       CAN RU BUILD CONTINUE?
         BNZ   A000330                     NO
*  /******************************************************************/
*  /*                                                                */
*  /*            PUT TIM'S ERROR MESSAGE IN OUTPUT RU                */
*  /*                                                                */
*  /******************************************************************/
         BAL   R14,BLDERR                  GO TO ERROR MESSAGE ROUTINE
A000330  CLI   TVWAATTN,0                  REQ FOR ATTENTION ACCEPTED?
         BNE   A000340                     YES
         TM    TVWAFLG3,TVWAAIGN           REQ FOR ATTENTION IGNORED?
         BNO   A00034C                     NO
A000340  TM    TOMWFLG1(R8),TOMEXBRU       CAN RU BUILD CONTINUE?
         BNZ   A00034C                     NO
*  /******************************************************************/
*  /*                                                                */
*  /*    PUT ATTENTION ACCEPTED AND/OR IGNORED MESSAGE(S) IN RU.     */
*  /*                                                                */
*  /******************************************************************/
         BAL   R14,BLDATTN                 PUT ATTENTION MESSAGES IN RU
*/********************************************************************/
*/*                                                                  */
*/*            BUILD AND EDIT USER DATA IN OUTPUT RU.                */
*/*                                                                  */
*/********************************************************************/
A00034C  TM    TOMWFLG1(R8),TOMEXBRU       CAN RU BUILD CONTINUE?
         BNZ   A000358                     NO
         BAL   R14,BLDDTA                  YES, CALL DATA BUILD ROUTINE
         TM    OPOPTNS(R8),OPNOED          NOEDIT?              ZP60009
         BNO   A000358                     NO, CONTINUE EDIT    ZP60009
         TM    OPOPTNS(R8),OPASID          CROSS-MEMORY TPUT?   ZP60009
         BO    NOEDASID                    YES, DO NOT ALLOW    ZP60009
         TM    TVWAFLG5,TVWAFSW            NOEDIT TPUT WAITING? ZP60009
         BO    A000358                     YES, CONTINUE EDIT   ZP60009
         CLC   FW1,TOMBFCNT(R8)            LONG ENOUGH FOR WCC? ZP60003
         BNL   A00055A                     NO, NO WCC TO CHECK  ZP60009
         L     R12,TOMGETMN(,R8)           POINT TO DATA STREAM ZP60009
         CLI   0(R12),X'F1'                WRITE?               ZP60009
         BE    CHECKWCC                    YES, WCC PRESENT     ZP60009
         CLI   0(R12),X'F5'                ERASE/WRITE?         ZP60009
         BE    CHECKWCC                    YES, WCC PRESENT     ZP60009
         CLI   0(R12),X'7E'                ERASE/WRITE ALT?     ZP60009
         BNE   A00055A                     NO, NO WCC TO CHECK  ZP60009
CHECKWCC TM    1(R12),X'02'                UNLOCKING KEYBOARD?  ZP60009
         BNO   A00055A                     NO, BUT NO WCC EDIT  ZP60009
         B     A00045A                     YES, SET FLAGS       ZP60009
NOEDASID NI    OPOPTNS(R8),255-OPNOED      RESET NOEDIT FLAG    ZP60009
A000358  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    TSBFLG3-TSB(R12),TSBSPIT    TCLEARQ OR STBREAK ISSUED?
         BNZ   A000394                     YES
         TM    TSBFLG2-TSB(R12),TSBAUTON+TSBSTAUT
         BNO   A000394                     NO AUTO PROMPTING
         TM    TVWAFLG3,TVWABRIN
         BNZ   A000394                     NO BREAK-IN REQUEST
         TM    TOMWFLG1(R8),TOMEXBRU       CAN RU BUILD CONTINUE?
         BNZ   A000394                     NO
         TM    TSBFLG4-TSB(R12),TSBIWAIT   INPUT WAIT IN PROGRESS?
         BO    A000390                     YES
         TM    TVWAFLG8,TVWATGNO           TGET NOWAIT ISSUED?
         BNO   A000394                     NO
*  /******************************************************************/
*  /*                                                                */
*  /*       BUILD LINE OR CHARACTER PROMPT DATA IN OUTPUT RU.        */
*  /*                                                                */
*  /******************************************************************/
A000390  BAL   R14,BLDPRMPT                GO TO PROMPT ROUTINE
A000394  L     R12,TOMBFCNT(,R8)           DATA IN RU & NOT FIRST LINE?
         LTR   R12,R12
         BNP   A0003C6                     LEAVE IF NO DATA IN RU
         L     R12,TOMLNCNT(,R8)
         C     R12,FW1
         BNH   A0003C6                     LEAVE IF FIRST LINE
         TM    TOMWFLG2(R8),TOMTRSBA       IS LINE COUNT > 1?
         BZ    A0003BA                     YES
         TM    TOMWFLG1(R8),TOMEDSAV       LAST TPUT AN EDIT?
         BNZ   A0003C2                     NO
A0003BA  OI    TVWAFLG5,TVWASCAN           YES
         B     A0003C6
A0003C2  NI    TVWAFLG5,255-TVWASCAN       RU SIZE EMPTY OR FIRST LINE
A0003C6  L     R12,TOMBFCNT(,R8)
         C     R12,FW2                     DATA IN RU (AFTER WCC)?
         BNH   A0003D6                     NO
         NI    TVWAFLG4,255-TVWADARC       RESET DATA FOUND BIT
A0003D6  TM    TOMWFLG1(R8),TOMENDBF       ENOUGH BUFFER SPACE?
         BNZ   A000432                     NO
         TM    TOMWFLG1(R8),TOMCURST       IS CURSOR ALREADY SET IN RU?
         BNZ   A000432                     YES
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12                     IS THERE DATA IN OUTPUT RU?
         BNP   A000432                     NO
*     /***************************************************************/
*     /*                                                             */
*     /* THIS DO GROUP WILL SET CURSOR FOR ALL NON-EMPTY RU'S FOR    */
*     /* WHICH CURSOR HAS NOT ALREADY BEEN SET.                      */
*     /*                                                             */
*     /***************************************************************/
*                                          BEGIN DEFAULT CURSOR PROCESS
         BAL   R14,NEWLINE                 PUT LINE ADDR IN OUTPUT RU
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)            LINE-COUNT AT LAST LINE?
         BL    A000410                     NO
         TM    TVWAFLG4,TVWANOFB           IS IT OK TO DO FLASHBACK?
         BNZ   A000410                     NO
         BAL   R14,SCRNPAGE                YES, PUT PAGE PROMPT IN RU
         B     A000432
*                                          SET CURSOR ON CURRENT LINE
A000410  LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           UPDATE COUNT OF DATA IN RU
         L     R1,TOMBFPTR(,R8)
         XC    1(255,R1),1(R1)
         MVI   0(R1),X'13'                 PUT INSERT CURSOR IN RU
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
A000432  L     R2,TOMGETMN(,R8)            SET ADDR OF OUTPUT RU IN R2
         TM    TOMWFLG2(R8),TOMALARM       SOUND AUDIBLE ALARM REQUEST?
         BNO   A000442                     NO
         OI    1(R2),X'84'                 YES, MODIFY WCC FOR ALARM
A000442  TM    TVWAFLG4,TVWANOFB
         BNO   A00045A
         OI    TOMWFLG2(R8),TOMKBULK
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    TSBFLG1-TSB(R12),255-TSBIFLSH
A00045A  TM    TOMWFLG1(R8),TOMEXBRU       CONTINUE BLDRU?
         BZ    A00046A                     YES
         TM    TVWAFLG4,TVWANOFB           NO FLASHBACK?
         BNO   A000472                     NO
A00046A  TM    TVWAFLG1,TVWAULK            GLOBAL UNLOCK REQUESTED?
         BO    A00047A                     YES
A000472  TM    TOMWFLG2(R8),TOMKBULK       LOCAL REQ FOR KEYBD UNLOCK?
         BNO   A00055A                     NO
*  /******************************************************************/
*  /*                                                                */
*  /* MODIFY WCC IN RU TO RESTORE KEYBOARD OPERATION IF KEYBOARD UN- */
*  /* LOCK REQUEST IS OUTSTANDING.                                   */
*  /*                                                                */
*  /******************************************************************/
A00047A  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A00048C
         TM    TOMWFLG4(R8),TOMEB
         BNZ   A00053E
*                                          BEGIN UNLOCK KEYBD PROCESS
A00048C  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12                     RU FOR UNLOCK KEYBOARD ONLY?
         BNZ   A000518                     NO
         TM    TVWAFLG5,TVWAFSM
         BNZ   A0004BE
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A0004BE
         BAL   R14,SCRFORMT                PERFORM
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         OI    TVWAFLG5,TVWASCAN
         B     A00051C
A0004BE  TM    TVWAFLG4,TVWAFMSC           FORMAT SCREEN?
         BO    A0004DA                     YES
         TM    TVWAFLG4,TVWADARC           HAS TIM RECEIVED DATA?
         BNO   A0004F2                     NO
         L     R12,TOMLNCNT(,R8)
         C     R12,FW1                     IS LINE-COUNT > 1?
         BNH   A0004F2                     NO
*                                          SET SPECIAL CURSOR FOR INPUT
A0004DA  BAL   R14,SCRFORMT                    CMD,WCC, & FORMAT
         L     R12,TOMLNCNT(,R8)
         C     R12,FW1
         BNH   A0004EE
         BAL   R14,NEWCURS                 PUT CURSOR IN RU
A0004EE  B     A000510                     END SET SPECIAL CURSOR
*                                          BLD HEADER FOR UNLOCK RU
*                                          BLD HEADER FOR UNLOCK REQ
A0004F2  L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),WRTWCC             PUT CMD AND WCC
         LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           UPDATE COUNT OF DATA IN RU
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
A000510  NI    TVWAFLG4,255-TVWADARC
         B     A00051C
A000518  NI    TVWAFLG4,255-TVWADARC
A00051C  L     R2,TOMGETMN(,R8)
         OI    1(R2),X'82'                 MODIFY WCC TO RESTORE KEYBD
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    TSBFLG3-TSB(R12),TSBNOBRK
         BNO   A000538
         OI    TVWAFLG1,TVWATAS
A000538  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
A00053E  NI    TVWAFLG4,255-TVWAKBDL       RESET KEYBOARD LOCKED FLAG
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    TSBFLG1-TSB(R12),255-TSBIFLSH
         TM    TVWAFLG2,TVWAPGN
         BNZ   A00055A
         NI    TVWAFLG1,255-TVWAULK        CLEAR UNLOCK REQUEST FLAG
A00055A  L     R12,TOMLNCNT(,R8)
         STC   R12,TVWALNCT
         L     R14,72(,R4)
         BR    R14                         EXIT BLDRU
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, NEWLINE, WILL BE CALLED BY INTERNAL PROCEDURES   */
*/* TO BUILD LINE ADDRESSES WHILE BUILDING THE OUTPUT RU.            */
*/*                                                                  */
*/********************************************************************/
NEWLINE  ST    R14,120(,R4)
         LA    R2,1                        SET R2 FOR BUFFER ADDRESS
         BAL   R14,BUFFADDR                PUT LINE ADDRESS IN RU
         LA    R12,3
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           SET CNT FOR LINE ADDR IN RU
         L     R3,TOMBFPTR(,R8)
         MVI   0(R3),X'11'                 PUT SBA ORDER IN RU
         MVC   1(2,R3),TOMLNADR(R8)        PUT LINE ADDR IN OUTPUT RU
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           POINT TO NEXT UNUSED RU BYTE
         L     R14,120(,R4)
         BR    R14                         EXIT NEWLINE
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BUFFADDR, WILL COMPUTE BUFFER ADDRESSES FOR TOM  */
*/*                                                                  */
*/********************************************************************/
BUFFADDR ST    R14,12(,R13)
*TOMLNCNT=MIN(TOMLNCNT,TOMLNNO);           NOT BEYOND LAST SCREEN LINE
         L     R12,TOMLNCNT(,R8)
         L     R15,TOMLNNO(,R8)
         CR    R12,R15
         BNH   A0005B0
         LR    R12,R15
A0005B0  ST    R12,TOMLNCNT(,R8)
*J=(TOMLNCNT-REG2)*TOMPLSZ+TOMCOLMN;       OFFSET
         LR    R1,R12
         SLR   R1,R2
         M     R0,TOMPLSZ(,R8)
         AL    R1,TOMCOLMN(,R8)
         ST    R1,TOMWRKVJ(,R8)
*J=MAX(0,J);                               J IS NONZERO
         SLR   R12,R12
         CR    R1,R12
         BNL   A0005CE
         LR    R1,R12
A0005CE  ST    R1,TOMWRKVJ(,R8)
         STCM  R1,3,TOMLNADR(R8)           SET 14-BIT ADDRESS   ZP60009
         CH    R1,HW4095                   NEED 14-BIT ADDRESS? ZP60009
         BH    BUFADROK                    YES                  ZP60009
*TOMROWAD=J/64;                            SET ROW INDEX FOR TRANSLATE
         LR    R10,R1
         SRDA  R10,32
         D     R10,FW64
         STC   R11,TOMROWAD(,R8)
*TOMCOLAD=J//64;                           SET COL INDEX FOR TRANSLATE
         LR    R10,R1
         SRDA  R10,32
         D     R10,FW64
         STC   R10,TOMCOLAD(,R8)
*TR(TOMLNADR,BFADRTAB);                    SAVE BUFFER ADDRESS
         TR    TOMLNADR(2,R8),BFADRTAB
BUFADROK EQU   *                                                ZP60009
         L     R14,12(,R13)
         BR    R14                         END OF BUFFADDR
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, NEWCURS, WILL SET CURSOR AFTER SUCCESSIVE TGETS. */
*/*                                                                  */
*/********************************************************************/
NEWCURS  ST    R14,96(,R4)
         LA    R2,2                        SET R2 FOR BUFFER ADDRESS
*IF TOMCOLMN=TOMLNSZ                       NO SPACE ON LINE?
         L     R12,TOMCOLMN(,R8)
         SLR   R3,R3
         IC    R3,TOMLNSZ(,R8)
         CR    R12,R3
         BNE   A000628
*THEN                                      NO SPACE ON LINE
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)           MOVE TO NEXT LINE
         B     A000634
*ELSE                                      SPACE LEFT ON LINE
A000628  SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         BCTR  R12,0
         ST    R12,TOMCOLMN(,R8)           TOMCOLMN=TOMLNSZ-1
A000634  BAL   R14,BUFFADDR                COMPUTE BUFFER ADDRESS
         LA    R12,6
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           UPDATE RU DATA COUNT
         L     R3,TOMBFPTR(,R8)
         MVI   0(R3),X'11'                 PUT SBA ORDER IN RU
         MVC   1(2,R3),TOMLNADR(R8)        PUT BUFFER ADDRESS IN RU
         MVC   3(3,R3),SFRDATIC            READ ATTRIBUTE AND CURSOR
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
         OI    TVWAFLG5,TVWASCAN           REQ ATTRIBUTE TRACKING
         L     R14,96(,R4)
         BR    R14                         END OF NEWCURS
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SCRFORMT, FORMATS THE 3270 SCREEN (IF NEEDED)    */
*/* AND PUTS THE PROPER WRITE CMD IN THE OUTPUT RU. THE SCREEN IS    */
*/* FORMATTED BY PUTTING AN ATTRIBUTE CHARACTER IN THE LAST          */
*/* BUFFER LOCATION.                                                 */
*/*                                                                  */
*/********************************************************************/
SCRFORMT ST    R14,92(,R4)
         CLC   TOMLNCNT(4,R8),FW1          IS THIS THE TOP SCRN LINE?
         BE    A000686                     YES
         TM    TVWAFLG4,TVWAFMSC           IS FORMAT OF SCRN REQUESTED?
         BNO   A0006B0                     NO
*  /******************************************************************/
*  /*                                                                */
*  /* THIS DO GROUP FORMATS THE 3270 BUFFER AFTER DETERMINING THE    */
*  /* LAST BUFFER LOCATION.                                          */
*  /*                                                                */
*  /******************************************************************/
A000686  TM    TVWAFLG4,TVWAFMSC           FORMAT SCREEN BIT ON?
         BNO   A000694                     NO
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
A000694  BAL   R14,SETSCRSZ                PERFORM
         MVC   TOMBFCNT(4,R8),FW7          COUNT FOR CMD,WCC, & FORMAT
         L     R12,TOMBFPTR(,R8)
         MVC   2(5,R12),TOMFMTDA(R8)       PUT FORMATTING DATA IN RU
         NI    TVWAFLG4,255-TVWAFMSC       TURN OFF REQUEST FOR FORMAT
         B     A0006B6
A0006B0  MVC   TOMBFCNT(4,R8),FW2          SET COUNT FOR CMD AND WCC
A0006B6  TM    TVWAFLG5,TVWAFSM            IS FULLSCR MODE IS EFFECT?
         BNO   A0006C6                     NO
         TM    TOMWFLG2(R8),TOMERASE       SCREEN ERASE?
         BO    A0006D6                     YES
A0006C6  TM    OPOPTNS(R8),OPBRK           BREAK TPUT?
         BNO   A0006E4                     NO
         TM    TVWAFLG3,TVWABRIN           BREAK-IN PROCESSING?
         BNO   A0006E4                     NO
A0006D6  L     R12,TOMBFPTR(,R8)           YES
         MVC   0(2,R12),EWRTWCCD           USE ERASE/WRITE
         TM    TVWAFLG6,X'01'              IS TVWAALTS ON?      ZP60009
         BNO   A000744                     NO, PRIMARY SIZE     ZP60009
         MVI   0(R12),X'7E'                YES, ALTERNATE SIZE  ZP60009
         B     A000744
A0006E4  CLC   TOMLNCNT(4,R8),FW1          IS THIS THE TOP SCREEN LINE?
         BNE   A00073A                     NO
         TM    TOMWFLG1(R8),TOMEDSAV       WAS LAST TPUT FULLSCRN MODE?
         BNO   A00070C                     NO
         TM    OPOPTNS(R8),OPASID          CURRENT TPUT A CROSS-MEMORY?
         BNO   A00070C                     NO
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),WRTWCCDF           USE WRT-ASID FOLLOWS FULSCRN
         B     A000744
A00070C  L     R12,TOMCOLMN(,R8)
         LTR   R12,R12                     FIRST POSITION?
         BNZ   A00072C                     NO
         TM    170(R4),X'80'
         BNO   A00072C
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),EWRTWCCD           PUT EWRT CMD AND WCC IN RU
         TM    TVWAFLG6,X'01'              IS TVWAALTS ON?      ZP60009
         BNO   A000744                     NO, PRIMARY SIZE     ZP60009
         MVI   0(R12),X'7E'                YES, ALTERNATE SIZE  ZP60009
         B     A000744
A00072C  L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),WRTWCCDF           WRITE CMD AND WCC
         B     A000744
A00073A  L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),WRTWCCDF           PUT WRITE CMD AND WCC IN RU
A000744  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         L     R14,92(,R4)
         BR    R14                         END OF SCRFORMT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FLSHBACK, WILL BE CALLED TO PUT THE LAST LOGICAL */
*/* INPUT SCREEN LINE(S) INTO THE OUTPUT RU FOR DISPLAY AT THE TOP   */
*/* OF THE SCREEN.                                                   */
*/*                                                                  */
*/********************************************************************/
*DCL 1 TOPQ BASED(TVWATOPQ),         /* STRUCTURE FOR FLASHBACK DATA */
*     2 TQL1 CHAR(80),               /* FIRST FLASHBACK BUFFER       */
*     2 TQL2 CHAR(80);               /* SECOND FLASHBACK BUFFER      */
FLSHBACK ST    R14,100(,R4)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
         BAL   R14,SCRFORMT                PUT IN CMD,WCC, AND FORMAT
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)            IS THIS THE LAST LINE?
         BL    A00077C                     NO
         BAL   R14,NEWLINE                 LINE ADDRESS IN RU
         BAL   R14,SCRNPAGE                PUT PAGE PROMPT IN RU
         B     A0008CA
*  /******************************************************************/
*  /*                                                                */
*  /* SCREEN LINE(S) IS AVAILABLE SO PUT FLASHBACK DATA IN RU.       */
*  /*                                                                */
*  /******************************************************************/
A00077C  MVC   TOMLNCNT(4,R8),FW1          TOP OF SCREEN
         BAL   R14,NEWLINE                 LINE ADDRESS IN RU
         CLI   TVWATQL1,0                  LEN OF 1ST FLSHBACK QUE > 0?
         BE    A00081A                     NO
*      /**************************************************************/
*      /*                                                            */
*      /* TAKE DATA FROM FIRST FLASHBACK QUEUE BUFFER.               */
*      /*                                                            */
*      /**************************************************************/
*        TOMBFCNT=TOMBFCNT+          /* UPDATE COUNT OF DATA IN RU BY*/
*          MIN(TVWATQL1,TOMLNSZ)+2;  /* SMALLER OR LINE-SZ & QUE LENG*/
         LA    R12,2
         SLR   R15,R15
         IC    R15,TVWATQL1
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         LR    R11,R14
         CR    R11,R15
         BNH   A0007A8
         LR    R11,R15
A0007A8  AL    R11,TOMBFCNT(,R8)
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)
         L     R10,TOMBFPTR(,R8)
         MVC   0(2,R10),SFWRTATT           PUT WRITE ATTRIBUTE INTO RU
*                                    /* MOVE FIRST FLSHBACK BUFFER   */
*        IKTOBUF(3:(MIN(TVWATQL1,TOMLNSZ-1)+2))=TQL1; /* MOVE DATA   */
         BCTR  R14,0
         CR    R15,R14
         BNH   A0007C6
         LR    R15,R14
A0007C6  BCTR  R15,0
         L     R1,TVWATOPQ
         EX    R15,A002024
*        TR(IKTOBUF(3:(MIN(TVWATQL1,TOMLNSZ-1)+2)),EDITTAB);
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         BCTR  R15,0
         SLR   R14,R14
         IC    R14,TVWATQL1
         CR    R14,R15
         BNH   A0007E6
         LR    R14,R15
A0007E6  BCTR  R14,0
         EX    R14,A00202A
         L     R10,TOMGETMN(,R8)
         LR    R15,R10
         ALR   R15,R11
         ST    R15,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)           UPDATE DATA CNT FOR RD ATTRI
         MVC   0(2,R15),SFRDATT            PUT READ ATTRIBUTE INTO RU
         ALR   R10,R11
         ST    R10,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         MVI   TVWATQL1,0                  ZERO LENGTH OF FIRST QUEUE
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)           INCREMENT LINE-COUNT BY ONE
A00081A  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)            IS THIS THE LAST SCRN LINE?
         BL    A000832                     NO
         BAL   R14,NEWLINE                 YES, PUT LINE ADDRESS IN RU
         BAL   R14,SCRNPAGE                YES, PUT PAGE PROMPT IN RU
         B     A0008CA
*        /************************************************************/
*        /*                                                          */
*        /*      TAKE DATA FROM SECOND FLASHBACK QUEUE BUFFER.       */
*        /*                                                          */
*        /************************************************************/
A000832  CLI   TVWATQL2,0                  LENG OF 2ND FLSHBACK BUFF>0?
         BE    A0008CA                     NO
         BAL   R14,NEWLINE                 PUT LINE ADDRESS IN RU
*          TOMBFCNT=TOMBFCNT +       /* UPDATA COUNT OF DATA IN RU BY*/
*            MIN(TVWATQL2,TOMLNSZ)+2;/* SMALLER OF LINE-SZ & QUE LENG*/
         LA    R12,2
         SLR   R15,R15
         IC    R15,TVWATQL2
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         LR    R11,R14
         CR    R11,R15
         BNH   A000858
         LR    R11,R15
A000858  AL    R11,TOMBFCNT(,R8)
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)
         L     R10,TOMBFPTR(,R8)
         MVC   0(2,R10),SFWRTATT           PUT WRITE ATTRIBUTE INTO RU
*          IKTOBUF(3:(MIN(TVWATQL2,TOMLNSZ-1)+2))=TQL2; /* MOVE DATA */
         BCTR  R14,0
         CR    R15,R14
         BNH   A000876
         LR    R15,R14
A000876  BCTR  R15,0
         L     R1,TVWATOPQ
         EX    R15,A002030
*          TR(IKTOBUF(3:(MIN(TVWATQL2,TOMLNSZ-1)+2)),EDITTAB);
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         BCTR  R15,0
         SLR   R14,R14
         IC    R14,TVWATQL2
         CR    R14,R15
         BNH   A000896
         LR    R14,R15
A000896  BCTR  R14,0
         EX    R14,A00202A
         L     R10,TOMGETMN(,R8)
         LR    R15,R10
         ALR   R15,R11
         ST    R15,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)           UPDATE DATA CNT FOR RD ATTRI
         MVC   0(2,R15),SFRDATT            PUT READ ATTRIBUTE INTO RU
         ALR   R10,R11
         ST    R10,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         MVI   TVWATQL2,0                  ZERO LENGTH OF 2ND BUFFER
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)           INCREMENT LINE-COUNT BY ONE
A0008CA  CLI   TVWATQL1,0                  IS ALL FLASHBACK PROCESSED?
         BNE   A0008DE                     NO
         CLI   TVWATQL2,0
         BNE   A0008DE                     NO
         NI    TVWAFLG2,255-TVWABKMG       YES, TURN OFF REQUEST BIT
A0008DE  L     R14,100(,R4)
         BR    R14                         END OF FLSHBACK
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDATTN, BUILDS ATTENTIONS MESSAGES IN THE OUT-  */
*/* PUT RU. THE CHARACTER   IS PUT ON THE NEXT AVAILABLE SCREEN LINE */
*/* FOR EACH ACCEPTED ATTENTION. THE CHARACTER SEQUENCE  I IS PUT ON */
*/* NEXT SCREEN LINE WHEN IGNORED ATTENTION(S) ARE DETECTED          */
*/*                                                                  */
*/********************************************************************/
BLDATTN  ST    R14,108(,R4)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
         C     R12,TOMBFCNT(,R8)           IS OUTPUT RU EMPTY?
         BNE   A0008FA                     NO
         BAL   R14,SCRFORMT                YES, PUT IN CMD,WCC & FORMAT
A0008FA  B     A000990
*/********************************************************************/
*/*                                                                  */
*/* THIS DO GROUP BUILDS ATTENTION MESSAGES UNTIL THE ATTENTION      */
*/* ACCEPTED COUNT GOES TO ZERO, THE ATTENTION IGNORED INDICATOR IS  */
*/* TURNED OFF, OR SCREEN PAGING IS NEEDED.                          */
*/*                                                                  */
*/********************************************************************/
A0008FE  BAL   R14,NEWLINE                 PUT LINE ADDR INTO OUTPUT RU
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)            IS THIS THE LAST SCRN LINE?
         BL    A000916                     NO
         BAL   R14,SCRNPAGE                YES, PUT PAGE PROMPT INTO RU
         B     A000990
A000916  CLC   TOMLNCNT(4,R8),FW1
         BNE   A000924
         BAL   R14,SCRFORMT                PERFORM
A000924  CLI   TVWAATTN,0                  IS ACCEPTED ATTN COUNT>0?
         BNH   A00095E                     NO
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS THE MSG,  , ON THE CURRENT LINE AND   */
*        /* DECREMENTS THE ACCEPTED ATTENTION COUNT BY ONE           */
*        /*                                                          */
*        /************************************************************/
         LA    R12,5
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           SET COUNT FOR ATTENTION MSG
         L     R12,TOMBFPTR(,R8)
         MVC   0(5,R12),A0020EF            PUT ATTENTION MESSAGE IN RU
         SLR   R12,R12
         IC    R12,TVWAATTN
         BCTR  R12,0
         STC   R12,TVWAATTN                DECREMENT ACCEPTED ATTN CNT
         IC    R12,169(,R4)
         LA    R12,1(,R12)
         STC   R12,169(,R4)
         B     A000978
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS THE MSG,  I, ON THE CURRENT LINE AND  */
*        /* ATTENTION IGNORED INDICATOR IS ON AND THE ATTENTION AC-  */
*        /* CEPTED COUNT IS ZERO.                                    */
*        /*                                                          */
*        /************************************************************/
A00095E  LA    R12,6
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           SET COUNT FOR ATTN MESSAGE
         L     R12,TOMBFPTR(,R8)
         MVC   0(6,R12),A0020E3            PUT ATTN IGNORED MSG IN RU
         NI    TVWAFLG3,255-TVWAAIGN       TURN OFF ATTN INDICATOR
A000978  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)           INCREMENT LINE-COUNT BY ONE
A000990  CLI   TVWAATTN,0
         BH    A0009A0
         TM    TVWAFLG3,TVWAAIGN
         BNO   A0009A8
A0009A0  TM    TOMWFLG1(R8),TOMEXBRU
         BZ    A0008FE
A0009A8  L     R14,108(,R4)
         BR    R14                         END OF BLDATTN
         EJECT
GETBUFR  ST    R14,668(,R8)
         ST    R4,672(,R8)
         ST    R7,676(,R8)
         LA    R0,8
         AH    R0,OPBFSZ(,R8)
         ST    R0,680(,R8)
         L     R4,TVWATCB
         L     R7,PSAAOLD                  PSA REFERENCE
         B     A0009D8
         CNOP  0,4
A0009D4  EQU   *
         DC    H'0'
         DC    X'E502'                     SUBPOOL 229
A0009D8  L     R3,A0009D4
         SR    R1,R1
         L     R15,CVTPTR                  CVT ADDRESS
         L     R15,CVTCRMN-CVT(,R15)
         BALR  R14,R15                     BRANCH ENTRY GETMAIN
         L     R15,680(,R8)
         ST    R15,0(,R1)
         L     R7,676(,R8)
         L     R4,672(,R8)
         ST    R1,160(,R4)
         L     R15,160(,R4)
         AL    R15,FW4
         ST    R15,TOMGETMN(,R8)
         ST    R15,TOMBFPTR(,R8)
         L     R14,668(,R8)
         BR    R14                         END OF GETBUFR
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDDTA, CONTROLS BUILDING OF USER DATA IN THE    */
*/* OUTPUT RU                                                        */
*/*                                                                  */
*/********************************************************************/
BLDDTA   ST    R14,112(,R4)
         NI    TOMWFLG1(R8),255-TOMENDBF-TOMENDSC-TOMEXDTA-TOMOWAIT
A000A1A  SLR   R12,R12
         ST    R12,TOMMVCNT(,R8)
         ST    R12,TOMQDATA(,R8)
         NI    OPOPTNS(R8),255-OPBRK
         MVI   OPREQ(R8),X'02'
         LA    R13,520(,R8)
         LA    R12,OPARMS(,R8)
         ST    R12,152(,R4)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASOQM-TCAST(,R12)
         LA    R1,152(,R4)
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         CLI   OPRC(R8),3
         BE    A000A66
         TM    TVWAFLG3,TVWABRIN
         BNO   A000AC0
         TM    OPOPTNS(R8),OPBRK
         BNZ   A000AC0
A000A66  CLI   OPRC(R8),3                  WAS OUTPUT QUEUE EMPTY?
         BNE   A000A7A
*    /****************************************************************/
*    /*                                                              */
*    /*  YES, NO MORE DATA IS AVAILABLE FROM OUTPUT MESSAGE QUEUE.   */
*    /*                                                              */
*    /****************************************************************/
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    TSBFLG1-TSB(R12),255-TSBIFLSH
A000A7A  OI    TOMWFLG1(R8),TOMEXDTA
         TM    TVWAFLG3,TVWABRIN
         BNO   A000DB0
         TM    TVWAFLG2,TVWAPGN
         BNZ   A000AA4
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A000A9C
         BAL   R14,SCRFORMT                PERFORM
A000A9C  BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
A000AA4  BAL   R14,A000114                 PERFORM
         NI    TVWAFLG2,255-TVWABIR
         NI    TVWAFLG3,255-TVWABRIN
         TM    TVWAFLG5,TVWAFSM
         BNO   A000ABC
         OI    TVWAFLG7,TVWABKPG
A000ABC  B     A000DB0
A000AC0  TM    TVWAFLG4,TVWANOFB
         BNO   A000AFA
         OI    TOMWFLG1(R8),TOMEXDTA
         MVI   OPREQ(R8),X'04'
         LA    R13,520(,R8)
         LA    R12,OPARMS(,R8)
         ST    R12,152(,R4)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASOQM-TCAST(,R12)
         LA    R1,152(,R4)
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         NI    OPOPTNS(R8),255-OPASID
         B     A000DB0
*    /****************************************************************/
*    /*                                                              */
*    /* OUTPUT QUEUE IS NOT EMPTY SO CONTINUE PROCESSING USER DATA   */
*    /*                                                              */
*    /****************************************************************/
A000AFA  TM    TOMWFLG1(R8),TOMEDSAV
         BNZ   A000B08
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
A000B08  TM    OPOPTNS(R8),OPBRK
         BNO   A000B18
         OI    TOMWFLG4(R8),TOMBRKMG
         NI    TVWAFLG2,255-TVWABIR
A000B18  TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BNO   A000B2A                     NO
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BP    A000D1A
A000B2A  TM    TOMWFLG1(R8),TOMCURST       CURSOR ALREADY SET IN RU?
         BO    A000D1A                     YES
*      /**************************************************************/
*      /*                                                            */
*      /* THIS DO GROUP IS EXECUTED EITHER IF THE CURRENT TPUT IS A  */
*      /* FULLSRCN AND THE RU IS EMPTY OR IF CURSOR IS NOT SET IN A  */
*      /* NON-EMPTY RU . ALSO ENOUGH RU SPACE EXIST FOR AT LEAST ONE */
*      /* LINE OF DATA AND PAGING MESSAGE.                           */
*      /*                                                            */
*      /**************************************************************/
         SLR   R15,R15
         L     R14,OPBUFADR(,R8)
         ST    R14,TOMQBPTR(,R8)
         L     R14,IKTIDSX1
         LTR   R14,R14
         BZ    A000BAA
         L     R14,TOMLNCNT(,R8)
         STC   R14,TVWALNCT
         LA    R14,OPARMS(,R8)
         ST    R14,668(,R8)
         LA    R14,TOMWFLG1(,R8)
         ST    R14,672(,R8)
         LA    R14,TOMBUFSZ(,R8)
         ST    R14,676(,R8)
         LA    R14,TOMBFPTR(,R8)
         ST    R14,680(,R8)
         LA    R14,TOMBFCNT(,R8)
         ST    R14,684(,R8)
         LA    R14,TOMQBPTR(,R8)
         ST    R14,688(,R8)
         LA    R14,TOMMVCNT(,R8)
         ST    R14,692(,R8)
         LA    R14,TOMQDATA(,R8)
         ST    R14,696(,R8)
         LA    R0,668(,R8)
         LA    R13,520(,R8)
         L     R15,IKTIDSX1
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         SLR   R14,R14
         IC    R14,TVWALNCT
         ST    R14,TOMLNCNT(,R8)
A000BAA  LTR   R15,R15
         BNZ   A000D1A
*        /************************************************************/
*        /*                                                          */
*        /* USER EXIT NOT CALLED OR NORMAL PROCESSING WAS SPECIFIED  */
*        /*                                                          */
*        /************************************************************/
         TM    TVWAFLG5,TVWAFSM
         BNO   A000C2E
         TM    TOMWFLG1(R8),TOMEDSAV
         BO    A000C2E
         TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BNO   A000C2E                     NO
         TM    TVWAFLG5,TVWANFSP
         BZ    A000BD8
         TM    TVWAFLG6,TVWAIOTR
         BNZ   A000C2E
*          /**********************************************************/
*          /*                                                        */
*          /* A FULLSCRN TPUT FOLLOWS A NON-FULLSCRN TPUT WHILE IN   */
*          /* FULLSCRN MODE AND PAGING IS ALLOWED.                   */
*          /*                                                        */
*          /**********************************************************/
A000BD8  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A000BE6
         BAL   R14,SCRFORMT                PERFORM
A000BE6  OI    TOMWFLG1(R8),TOMEDSAV
         SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A000C00
         LR    R15,R12
A000C00  SLR   R12,R12
         CR    R15,R12
         BNL   A000C0A
         LR    R15,R12
A000C0A  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         OI    TVWAFLG5,TVWAFSW
         TM    OPOPTNS(R8),OPHOLD
         BNZ   A000C2A
         LH    R12,OPBFSZ(,R8)
         ST    R12,TOMMVCNT(,R8)
A000C2A  B     A000D1A
A000C2E  TM    TVWAFLG5,TVWAFSM
         BNO   A000C64
         NI    TVWAFLG5,255-TVWANFSP
         TM    TOMWFLG1(R8),TOMEDSAV
         BNO   A000C64
         TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BO    A000C64                     YES
*                  /**************************************************/
*                  /*                                                */
*                  /* A NON-FULLSCRN TPUT FOLLOWS A FULLSCRN TPUT    */
*                  /* WHILE IN FULLSCRN MODE.                        */
*                  /*                                                */
*                  /**************************************************/
         MVC   TOMLNCNT(4,R8),FW1
         OI    TOMWFLG2(R8),TOMALARM+TOMERASE
         OI    TVWAFLG5,TVWAWO
         BAL   R14,SCRFORMT                PERFORM
         NI    TOMWFLG1(R8),255-TOMEDSAV
         OI    TOMWFLG1(R8),TOMEXBRU
A000C64  TM    OPOPTNS(R8),OPEDIT          EDIT?
         BNZ   A000C92                     NO
         CLC   OPBFSZ(2,R8),HW1
         BNE   A000C8A
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'15'
         BNE   A000C8A
         BAL   R14,A001FD4                 PERFORM
         B     A000D06
A000C8A  BAL   R14,EDIT                    PERFORM
         B     A000D06
A000C92  TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BNO   A000CA2                     NO
         BAL   R14,FULSCRN                 PERFORM
         B     A000D06
A000CA2  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BZ    A000CCC
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'27'
         BE    A000D06
         LH    R15,OPBFSZ(,R8)
         C     R15,FW3
         BL    A000CCC
         CLI   1(R12),X'11'
         BE    A000D06
*                  /**************************************************/
*                  /*                                                */
*                  /* ASIS & CNTL TPUTS WILL BE COMBINED FOR OUTPUT  */
*                  /* WITH OTHER NON-FULLSCRN TPUTS ONLY IF NONE OF  */
*                  /* USER-SPECIFIED HEADER (CMD,WCC,SBA) IS PRESENT.*/
*                  /*                                                */
*                  /**************************************************/
A000CCC  TM    OPOPTNS(R8),X'10'
         BNO   A000D02
         TM    OPOPTNS(R8),X'20'
         BNZ   A000D02
         CLC   OPBFSZ(2,R8),HW1
         BNE   A000CFA
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'15'
         BNE   A000CFA
         BAL   R14,A001FD4                 PERFORM
         B     A000D06
A000CFA  BAL   R14,ASIS                    PERFORM
         B     A000D06
A000D02  BAL   R14,CNTL                    PERFORM
A000D06  TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BO    A000D1A                     YES
         TM    OPOPTNS(R8),OPASID
         BNZ   A000D1A
         NI    TVWAFLG4,255-TVWAFLSC
A000D1A  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A000D5C
*        /************************************************************/
*        /*                                                          */
*        /* IF ALL USER DATA NOT PROCESS THIS ENTRY, UPDATE OUTPUT   */
*        /* QUEUE FOR NEXT ENTRY.                                    */
*        /*                                                          */
*        /************************************************************/
         AL    R12,OPBUFADR(,R8)
         ST    R12,OPBUFADR(,R8)
         MVI   OPREQ(R8),X'04'
         LA    R13,520(,R8)
         LA    R12,OPARMS(,R8)
         ST    R12,152(,R4)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASOQM-TCAST(,R12)
         LA    R1,152(,R4)
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         OI    TOMWFLG1(R8),TOMEXDTA+TOMEXBRU
         B     A000DB0
A000D5C  TM    OPOPTNS(R8),OPHOLD
         BNO   A000D68
         OI    TOMWFLG1(R8),TOMOWAIT
A000D68  CLI   OPRC(R8),2                  IS MORE DATA ON OUTPUT QUE?
         BNE   A000D84
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    TSBFLG1-TSB(R12),255-TSBIFLSH
         OI    TOMWFLG1(R8),TOMEXDTA
         B     A000DB0
A000D84  TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BO    A000DAC                     YES
         CLI   OPRC(R8),1
         BNE   A000DB0
         TM    TVWAFLG4,TVWANOFB
         BNO   A000DA4
         TM    741(R8),X'08'
         BO    A000DAC
A000DA4  TM    741(R8),X'30'
         BNO   A000DB0
A000DAC  OI    TOMWFLG1(R8),TOMEXDTA+TOMEXBRU
A000DB0  TM    TOMWFLG1(R8),TOMEXDTA
         BNO   A000A1A
         L     R14,112(,R4)
         BR    R14                         END OF BLDDTA
         EJECT
FREEBUFR ST    R14,668(,R8)
         ST    R4,672(,R8)
         ST    R7,676(,R8)
         L     R15,160(,R4)
         L     R0,0(,R15)
         LR    R1,R15
         L     R4,TVWATCB
         L     R7,PSAAOLD                  PSA REFERENCE
         B     A000DE4
         CNOP  0,4
A000DE0  EQU   *
         DC    H'0'
         DC    X'E501'                     SUBPOOL 229
A000DE4  L     R3,A000DE0
         L     R15,CVTPTR                  CVT ADDRESS
         L     R15,CVTCRMN-CVT(,R15)
         BALR  R14,R15                     BRANCH ENTRY FREEMAIN
         L     R7,676(,R8)
         L     R4,672(,R8)
         SLR   R15,R15
         ST    R15,160(,R4)
         L     R14,668(,R8)
         BR    R14                         END OF FREEBUFR
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, CNTL,  BUILDS CONTROL DATA IN THE OUTPU RU.      */
*/* VALID CONTROL CHARATERS ARE PT, IC, BYP, RES. INVALID DATA IS    */
*/* REMOVE FROM THE OUTPUT DATA                                      */
*/*                                                                  */
*/********************************************************************/
CNTL     ST    R14,140(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A000E28
         LR    R15,R14
A000E28  AL    R15,FW15
         CR    R12,R15
         BNL   A000E3A
         OI    TOMWFLG1(R8),TOMENDBF
         B     A000FE8
A000E3A  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A000E84
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A000E54
         BAL   R14,SCRFORMT                PERFORM
A000E54  SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A000E6A
         LR    R15,R12
A000E6A  SLR   R12,R12
         CR    R15,R12
         BNL   A000E74
         LR    R15,R12
A000E74  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         B     A000FE8
A000E84  TM    TOMWFLG1(R8),X'40'
         BNO   A000E94
         TM    TOMWFLG1(R8),X'80'
         BZ    A000E9A
A000E94  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
A000E9A  BAL   R14,CNTLHDRS                PERFORM
         B     A000FCC
A000EA2  LH    R12,OPBFSZ(,R8)
         SL    R12,TOMQDATA(,R8)
         LA    R15,80
         C     R15,TOMPLSZ(,R8)                                 ZP60009
         BNL   *+8                                              ZP60009
         L     R15,TOMPLSZ(,R8)                                 ZP60009
         CR    R12,R15
         BNH   A000EB6
         LR    R12,R15
A000EB6  STC   R12,TOMWRKSZ(,R8)
         BCTR  R12,0
         L     R1,TOMQBPTR(,R8)
         EX    R12,A002036
         NI    TOMWFLG1(R8),X'BF'
         OI    TOMWFLG1(R8),X'80'
         LA    R12,1
         B     A000FA2
A000ED4  L     R12,TOMBFCNT(,R8)
         LA    R15,2
         L     R14,TOMBUFSZ(,R8)
         SLR   R14,R15
         CR    R12,R14
         BNL   A000FB2
         L     R1,TOMWRKVI(,R8)
         ALR   R1,R8
         CLI   439(R1),X'14'
         BNE   A000F0E
         ALR   R12,R15
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFWRTATT
         NI    TVWAFLG4,255-TVWANOFB
         B     A000F8E
A000F0E  L     R12,TOMWRKVI(,R8)
         ALR   R12,R8
         CLI   439(R12),X'24'
         BNE   A000F42
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS BYPASS ATTRIBUTE IN OUTPUT RU         */
*        /*                                                          */
*        /************************************************************/
         LA    R12,3
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFBYPATT
         MVI   2(R12),X'13'
         OI    TOMWFLG1(R8),TOMCURST
         OI    TVWAFLG4,TVWANOFB
         B     A000F8E
A000F42  L     R12,TOMWRKVI(,R8)
         ALR   R12,R8
         CLI   439(R12),X'13'
         BNE   A000F6C
*          /**********************************************************/
*          /*                                                        */
*          /* THIS DO GROUP PUTS INSERT CURSOR ORDER IN OUTPUT  RU   */
*          /*                                                        */
*          /**********************************************************/
         LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVI   0(R12),X'13'
         OI    TOMWFLG1(R8),TOMCURST
         B     A000F8E
A000F6C  L     R12,TOMWRKVI(,R8)
         ALR   R12,R8
         CLI   439(R12),X'05'
         BNE   A000F8E
*            /********************************************************/
*            /*                                                      */
*            /* THIS DO GROUP PUTS PROGRAM TAB ORDER IN OUTPUT RU    */
*            /*                                                      */
*            /********************************************************/
         LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVI   0(R12),X'05'
A000F8E  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
         LA    R12,1
         AL    R12,TOMWRKVI(,R8)
A000FA2  ST    R12,TOMWRKVI(,R8)
         SLR   R15,R15
         IC    R15,TOMWRKSZ(,R8)
         CR    R12,R15
         BNH   A000ED4
A000FB2  L     R12,TOMMVCNT(,R8)
         AL    R12,TOMWRKVI(,R8)
         BCTR  R12,0
         ST    R12,TOMMVCNT(,R8)
         ST    R12,TOMQDATA(,R8)
         AL    R12,OPBUFADR(,R8)
         ST    R12,TOMQBPTR(,R8)
A000FCC  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A000FE8
         L     R12,TOMBUFSZ(,R8)
         BCTR  R12,0
         BCTR  R12,0
         C     R12,TOMBFCNT(,R8)
         BH    A000EA2
A000FE8  L     R14,140(,R4)
         BR    R14                         END OF CNTL
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FULSCRN, WILL EDIT USER FULLSCREEN MODE DATA AND */
*/* MOVE THE DATA TO THE OUTPUT RU.                                  */
*/*                                                                  */
*/********************************************************************/
FULSCRN  ST    R14,132(,R4)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         TM    TVWAFLG7,TVWASND1
         BNZ   A001012
         MVI   168(R4),X'02'
         MVC   TOMLNCNT(4,R8),FW2
         NI    170(R4),X'7F'
         NI    TVWAFLG4,255-TVWAFMSC
A001012  L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'27'
         BNE   A001032
         L     R12,TOMBUFSZ(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A001032
         BAL   R14,GETBUFR                 PERFORM
         B     A001052
A001032  L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'27'
         BE    A001052
         LA    R12,1
         AH    R12,OPBFSZ(,R8)
         C     R12,TOMBUFSZ(,R8)
         BNH   A001052
         BAL   R14,GETBUFR                 PERFORM
A001052  L     R12,TOMQBPTR(,R8)
         TM    OPOPTNS(R8),OPNOED          NOEDIT?              ZP60009
         BO    A001094                     YES, COPY CMD + DATA ZP60009
         CLI   0(R12),X'27'
         BNE   A00107C
*  /******************************************************************/
*  /*                                                                */
*  /* INCLUDE ESCAPE CHARACTER IN COUNT OF DATA MOVED BUT DO NOT MOVE*/
*  /* ESCAPE CHARACTER TO OUTPUT RU.                                 */
*  /*                                                                */
*  /******************************************************************/
         LA    R12,1
         ST    R12,TOMMVCNT(,R8)
         AL    R12,OPBUFADR(,R8)
         ST    R12,TOMQBPTR(,R8)
         LH    R12,OPBFSZ(,R8)
         BCTR  R12,0
         STH   R12,OPBFSZ(,R8)
         B     A001094
*  /******************************************************************/
*  /*                                                                */
*  /* ESC NOT PRESENT. PUT DEFAULT WRITE COMMAND IN OUTPUT RU.       */
*  /*                                                                */
*  /******************************************************************/
A00107C  LA    R12,1
         ST    R12,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVI   0(R1),X'F1'
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)
*/********************************************************************/
*/*                                                                  */
*/*           MOVE AND EDIT FULLSCREEN MODE DATA                     */
*/*                                                                  */
*/********************************************************************/
A001094  SLR   R2,R2
         B     A001118
A00109A  L     R12,TOMQDATA(,R8)
         LA    R3,256
         ALR   R3,R12
         LH    R0,OPBFSZ(,R8)
         CR    R0,R3
         BNH   A0010B0
         LR    R0,R3
A0010B0  ST    R0,TOMMVCNT(,R8)
         SLR   R0,R12
         L     R12,TOMBFCNT(,R8)
         ALR   R12,R0
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         BCTR  R0,0
         L     R3,TOMQBPTR(,R8)
         LR    R15,R0
         EX    R15,A00203C                 MOVE DATA INTO RU
         TM    OPOPTNS(R8),OPNOED          NOEDIT?              ZP60009
         BO    A0010F6                     YES, SKIP EDIT       ZP60009
         L     R3,TOMMVCNT(,R8)
         SL    R3,TOMQDATA(,R8)
         BCTR  R3,0
*                                              22ND APRIL, 2019 ZP60009
*  IT SEEMS THAT - LIKE TPUT NOEDIT - TPUT FULLSCR DOES NOT     ZP60009
*  PERFORM ANY DATA FILTERING THESE DAYS.  ACCORDINGLY, ANY     ZP60009
*  REFERENCE TO FLSCRTAB CAN NOW BE DISPENSED WITH.             ZP60009
*  TO REINSTATE THE TRANSLATION, CHANGE X'4700' TO X'4430'.     ZP60009
****     EX    R3,A002042                  EDIT RU DATA WITH FLSCRTAB
         NOP   A002042                     ZAP PLACEHOLDER      ZP60009
         LTR   R2,R2                       CURSOR FOUND?
         BNZ   A0010F6                     YES, SKIP SEARCH
         L     R3,TOMBFPTR(,R8)
         L     R12,TOMMVCNT(,R8)
         SL    R12,TOMQDATA(,R8)
         BCTR  R12,0
         EX    R12,A002048                 SEARCH FOR CURSOR
A0010F6  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
         L     R12,TOMMVCNT(,R8)
         L     R3,TOMQBPTR(,R8)
         ALR   R3,R12
         SL    R3,TOMQDATA(,R8)
         ST    R3,TOMQBPTR(,R8)
         ST    R12,TOMQDATA(,R8)
A001118  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BL    A00109A
         LTR   R2,R2                       CURSOR FOUND?
         BNZ   A001152                     YES
         TM    OPOPTNS(R8),OPNOED          NOEDIT?              ZP60009
         BO    A001152                     YES, DON'T ADD IC    ZP60009
         L     R12,TOMGETMN(,R8)
         CLI   0(R12),X'6F'                ERASE ALL UNPROTECTED?
         BE    A001152                     YES, DON'T ADD IC
         CLC   0(2,R12),WRTWCC             PARTIAL SCREEN?      ZP60009
         BE    A001152                     MAYBE, DON'T ADD IC  ZP60009
         LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R3,TOMBFPTR(,R8)
         MVI   0(R3),X'13'
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)
A001152  OI    TOMWFLG1(R8),TOMCURST
         OI    TVWAFLG4,TVWAFLSC
         OI    TOMWFLG2(R8),TOMTRSBA
         OI    TOMWFLG1(R8),TOMEDSAV
         TM    TVWAFLG5,TVWAFSM
         BNZ   A001174
         MVC   TOMLNCNT(4,R8),FW1
         B     A001178
A001174  NI    TVWAFLG4,255-TVWAFMSC
A001178  L     R14,132(,R4)
         BR    R14                         END OF FULSCRN
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, ASIS, WILL EDIT ASIS MODE  USER DATA. CONTROL    */
*/* HEADER INFORMATION (CMD,WCCSBA@@,SFATTRIB) WILL BE WILL BE VALID */
*/* IN ANY COMBINATION(NO REORDERING). MISSING CONTROL INFO  WILL BE */
*/* DEFAULTED. LINE COUNTING WILL BE IN EFFECT.                      */
*/*                                                                  */
*/********************************************************************/
ASIS     ST    R14,136(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A0011A0
         LR    R15,R14
A0011A0  AL    R15,FW15
         CR    R12,R15
         BNL   A0011B2
         OI    TOMWFLG1(R8),TOMENDBF
         B     A001512
A0011B2  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A0011FC
*  /******************************************************************/
*  /*                                                                */
*  /*    BOTTOM OF SCREEN HAS BEEN REACHED SO PAGE AND CONTINUE      */
*  /*                                                                */
*  /******************************************************************/
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A0011CC
         BAL   R14,SCRFORMT                PERFORM
A0011CC  SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A0011E2
         LR    R15,R12
A0011E2  SLR   R12,R12
         CR    R15,R12
         BNL   A0011EC
         LR    R15,R12
A0011EC  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         B     A001512
A0011FC  NI    TOMWFLG1(R8),X'7F'
         OI    TOMWFLG1(R8),X'40'
         BAL   R14,CNTLHDRS                PERFORM
         LA    R12,1
         L     R15,TOMCOLMN(,R8)
         ALR   R15,R12
         ST    R15,TOMCOLMN(,R8)
         ST    R12,TOMWRKVI(,R8)
         B     A0014FE
*  /******************************************************************/
*  /*                                                                */
*  /* THIS DO GROUP WILL BUILD LINES OF ASIS MODE DATA UNTIL THE DATA*/
*  /* COUNT IS ZERO,SCREEN PAGING IS NEEDED, OR RU BUFFER IS USED UP.*/
*  /*                                                                */
*  /******************************************************************/
A00121E  L     R12,TOMQDATA(,R8)
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         LR    R14,R15
         SL    R14,TOMCOLMN(,R8)
         LH    R11,OPBFSZ(,R8)
         SLR   R11,R12
         CR    R14,R11
         BNH   A00123C
         LR    R14,R11
A00123C  L     R11,TOMBUFSZ(,R8)
         SL    R11,TOMBFCNT(,R8)
         CR    R14,R11
         BNH   A00124C
         LR    R14,R11
A00124C  ALR   R12,R14
         ST    R12,TOMNWLSZ(,R8)
         LA    R14,1
         C     R14,TOMWRKVI(,R8)
         BNE   A001272
         CR    R12,R15
         BNE   A001272
         BCTR  R12,0
         CR    R12,R14
         BNL   A00126E
         LR    R12,R14
A00126E  ST    R12,TOMNWLSZ(,R8)
A001272  MVC   TOMWRKVI(4,R8),FW1
         SLR   R12,R12
         ST    R12,TOMXCNT(,R8)
         B     A0013A8
A001282  L     R12,TOMWRKVI(,R8)
         L     R15,TOMQBPTR(,R8)
         ALR   R12,R15
         BCTR  R12,0
         CLI   0(R12),X'1D'
         BE    A0012A6
         L     R12,TOMWRKVI(,R8)
         ALR   R15,R12
         BCTR  R15,0
         CLI   0(R15),X'08'
         BNE   A0012F2
A0012A6  L     R12,TOMWRKVI(,R8)
         L     R15,TOMQBPTR(,R8)
         ALR   R12,R15
         BCTR  R12,0
         CLI   0(R12),X'1D'
         BNE   A0012CE
         TM    OPOPTNS(R8),OPASID
         BNO   A0012CE
         L     R12,TOMWRKVI(,R8)
         ALR   R15,R12
         BCTR  R15,0
         NI    1(R15),X'FE'
A0012CE  LA    R12,1
         L     R15,TOMWRKVI(,R8)
         ALR   R15,R12
         ST    R15,TOMWRKVI(,R8)
         L     R15,TOMXCNT(,R8)
         ALR   R15,R12
         ST    R15,TOMXCNT(,R8)
         AL    R12,TOMNWLSZ(,R8)
         ST    R12,TOMNWLSZ(,R8)
         B     A00139C
A0012F2  L     R12,TOMWRKVI(,R8)
         L     R15,TOMQBPTR(,R8)
         ALR   R12,R15
         BCTR  R12,0
         CLI   0(R12),X'11'
         BE    A001316
         L     R12,TOMWRKVI(,R8)
         ALR   R15,R12
         BCTR  R15,0
         CLI   0(R15),X'12'
         BNE   A00133C
A001316  LA    R12,3
         L     R15,TOMNWLSZ(,R8)
         ALR   R15,R12
         ST    R15,TOMNWLSZ(,R8)
         LA    R15,2
         AL    R15,TOMWRKVI(,R8)
         ST    R15,TOMWRKVI(,R8)
         AL    R12,TOMXCNT(,R8)
         ST    R12,TOMXCNT(,R8)
         B     A00139C
A00133C  L     R12,TOMWRKVI(,R8)
         L     R1,TOMQBPTR(,R8)
         ALR   R1,R12
         BCTR  R1,0
         CLI   0(R1),X'3C'
         BNE   A001372
         LA    R15,4
         L     R14,TOMXCNT(,R8)
         ALR   R14,R15
         ST    R14,TOMXCNT(,R8)
         AL    R15,TOMNWLSZ(,R8)
         ST    R15,TOMNWLSZ(,R8)
         AL    R12,FW3
         ST    R12,TOMWRKVI(,R8)
         B     A00139C
A001372  L     R12,TOMWRKVI(,R8)
         L     R1,TOMQBPTR(,R8)
         ALR   R1,R12
         BCTR  R1,0
         CLI   0(R1),X'05'
         BNE   A00139C
         LA    R12,1
         L     R15,TOMXCNT(,R8)
         ALR   R15,R12
         ST    R15,TOMXCNT(,R8)
         AL    R12,TOMNWLSZ(,R8)
         ST    R12,TOMNWLSZ(,R8)
A00139C  LA    R12,1
         AL    R12,TOMWRKVI(,R8)
         ST    R12,TOMWRKVI(,R8)
A0013A8  L     R12,TOMNWLSZ(,R8)
         LR    R15,R12
         SL    R15,TOMQDATA(,R8)
         C     R15,TOMWRKVI(,R8)
         BL    A0013D2
         CH    R12,OPBFSZ(,R8)
         BH    A0013D2
         AL    R12,TOMBFCNT(,R8)
         LCR   R12,R12
         AL    R12,TOMBUFSZ(,R8)
         LTR   R12,R12
         BP    A001282
A0013D2  L     R12,TOMNWLSZ(,R8)
         LH    R15,OPBFSZ(,R8)
         CR    R12,R15
         BNH   A0013E2
         LR    R12,R15
A0013E2  ST    R12,TOMNWLSZ(,R8)
         B     A001474
A0013EA  L     R12,TOMQDATA(,R8)
         LA    R15,80
         C     R15,TOMPLSZ(,R8)                                 ZP60009
         BNL   *+8                                              ZP60009
         L     R15,TOMPLSZ(,R8)                                 ZP60009
         ALR   R15,R12
         L     R14,TOMNWLSZ(,R8)
         CR    R14,R15
         BNH   A001400
         LR    R14,R15
A001400  ST    R14,TOMWRKVJ(,R8)
         SLR   R14,R12
         L     R12,TOMBUFSZ(,R8)
         BCTR  R12,0
         L     R15,TOMBFCNT(,R8)
         SLR   R12,R15
         CR    R14,R12
         BNH   A00141A
         LR    R14,R12
A00141A  STC   R14,TOMWRKSZ(,R8)
         L     R12,TOMMVCNT(,R8)
         ALR   R12,R14
         ST    R12,TOMMVCNT(,R8)
         LR    R11,R14
         BCTR  R11,0
         L     R1,TOMQBPTR(,R8)
         EX    R11,A002036
         SLR   R10,R10
         IC    R10,TOMWRKSZ(,R8)
         BCTR  R10,0
         EX    R10,A00204E
         ALR   R15,R14
         ST    R15,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         EX    R11,A002054
         ST    R12,TOMQDATA(,R8)
         AL    R15,TOMGETMN(,R8)
         ST    R15,TOMBFPTR(,R8)
         AL    R12,OPBUFADR(,R8)
         ST    R12,TOMQBPTR(,R8)
         AL    R14,TOMCOLMN(,R8)
         SL    R14,TOMXCNT(,R8)
         ST    R14,TOMCOLMN(,R8)
         SLR   R12,R12
         ST    R12,TOMXCNT(,R8)
A001474  SLR   R12,R12
         L     R15,TOMNWLSZ(,R8)
         SL    R15,TOMQDATA(,R8)
         CR    R15,R12
         BNH   A001494
         L     R15,TOMBUFSZ(,R8)
         BCTR  R15,0
         SL    R15,TOMBFCNT(,R8)
         CR    R15,R12
         BH    A0013EA
A001494  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BNE   A0014A8
         BAL   R14,ENDDATA                 PERFORM
         B     A0014FE
A0014A8  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A0014D8
         LR    R15,R14
A0014D8  AL    R15,FW15
         CR    R12,R15
         BNL   A0014EA
         OI    TOMWFLG1(R8),TOMENDBF
         B     A0014FE
A0014EA  BAL   R14,NEWLINE                 PERFORM
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A0014FE
         BAL   R14,SCRNPAGE                PERFORM
A0014FE  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A001512
         TM    TOMWFLG1(R8),TOMENDBF+TOMENDSC
         BZ    A00121E
A001512  L     R14,136(,R4)
         BR    R14                         END OF ASIS
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, ENDDATA  , WILL BE CALLED TO PROCESS LAST TWO    */
*/* BYTES OF USER DATA IF EDIT OR ASIS IS SPECIFIED.                 */
*/*                                                                  */
*/********************************************************************/
ENDDATA  ST    R14,148(,R4)
         LA    R12,2
         L     R15,TOMBFCNT(,R8)
         L     R14,TOMGETMN(,R8)
         ALR   R14,R15
         SLR   R14,R12
         ST    R14,TOMBFPTR(,R8)
         L     R11,OPBUFADR(,R8)
         AL    R11,TOMMVCNT(,R8)
         SLR   R11,R12
         ST    R11,TOMQBPTR(,R8)
         CLI   1(R11),X'24'
         BNE   A001562
*  /******************************************************************/
*  /*                                                                */
*  /*       LAST IS BYPASS. REPLACE WITH START FIELD & BYPASS ATTRIB */
*  /*                                                                */
*  /******************************************************************/
         AL    R15,FW1
         ST    R15,TOMBFCNT(,R8)
         MVC   1(2,R14),SFBYPATT
         OI    TVWAFLG4,TVWANOFB
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         B     A001720
A001562  LH    R12,OPBFSZ(,R8)
         C     R12,FW1
         BNH   A00159E
         L     R12,TOMQBPTR(,R8)
         CLC   0(2,R12),BYPNL
         BE    A001586
         CLC   0(2,R12),BYPCR
         BNE   A00159E
A001586  L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFBYPATT
         OI    TVWAFLG4,TVWANOFB
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         B     A001720
A00159E  L     R12,TOMQBPTR(,R8)
         CLI   1(R12),X'13'
         BNE   A0015D4
         TM    OPOPTNS(R8),X'10'
         BNO   A0015D4
         TM    OPOPTNS(R8),X'20'
         BNZ   A0015D4
*      /**************************************************************/
*      /*                                                            */
*      /* INSERT CURSOR IS VALID AS LAST CHARACTER FOR ASIS MODE DATA*/
*      /*                                                            */
*      /**************************************************************/
         L     R12,TOMBFPTR(,R8)
         MVI   1(R12),X'13'
         OI    TOMWFLG1(R8),TOMCURST
         L     R12,TOMCOLMN(,R8)
         BCTR  R12,0
         ST    R12,TOMCOLMN(,R8)
         B     A001720
*      /**************************************************************/
*      /*                                                            */
*      /* IF VALID BYPASS IS NOT FOUND AND CURSOR IS NOT SET         */
*      /* DO GROUP WILL PUT DEFAULT ATTRIBUTE AT END OF DATA         */
*      /*                                                            */
*      /**************************************************************/
A0015D4  L     R12,TOMQBPTR(,R8)
         CLI   1(R12),X'15'
         BNE   A0015EA
         L     R12,TOMBFCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMBFCNT(,R8)
A0015EA  L     R12,TOMBFCNT(,R8)
         L     R15,TOMGETMN(,R8)
         ALR   R15,R12
         ST    R15,TOMBFPTR(,R8)
         L     R14,TOMCOLMN(,R8)
         SLR   R11,R11
         IC    R11,TOMLNSZ(,R8)
         CR    R14,R11
         BNL   A0016B0
         AL    R12,FW2
         ST    R12,TOMBFCNT(,R8)
         LA    R10,1
         ALR   R14,R10
         ST    R14,TOMCOLMN(,R8)
         MVC   0(2,R15),SFRDATT
         TM    OPOPTNS(R8),X'10'
         BNO   A0016A6
         TM    OPOPTNS(R8),X'20'
         BNZ   A0016A6
         L     R1,TOMQBPTR(,R8)
         CLI   1(R1),X'15'
         BE    A0016A6
         CR    R14,R11
         BNL   A00165A
         ALR   R12,R10
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMLNCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMLNCNT(,R8)
         MVI   2(R15),X'13'
         B     A001720
*          /**********************************************************/
*          /*                                                        */
*          /*  NO SPACE ON THIS LINE PUT ATTRIBUTE ON NEXT LINE      */
*          /*                                                        */
*          /**********************************************************/
A00165A  LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         SLR   R15,R15
         ST    R15,TOMCOLMN(,R8)
         C     R12,TOMLNNO(,R8)
         BNL   A0016A2
         L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
*              /******************************************************/
*              /*                                                    */
*              /*THIS IS NOT THE LAST LINE. PUT IN ATTRIB AND CURSOR */
*              /*                                                    */
*              /******************************************************/
         BAL   R14,NEWLINE                 PERFORM
         LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMLNCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMLNCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVI   0(R12),X'13'
A0016A2  B     A001720
A0016A6  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         B     A001720
A0016B0  LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         SLR   R15,R15
         ST    R15,TOMCOLMN(,R8)
         C     R12,TOMLNNO(,R8)
         BNL   A001720
         CLI   OPRC(R8),2
         BE    A0016E2
         TM    OPOPTNS(R8),X'10'
         BNO   A001716
         TM    OPOPTNS(R8),X'20'
         BNZ   A001716
A0016E2  BAL   R14,NEWLINE                 PERFORM
         LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFRDATT
         L     R12,TOMLNCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMLNCNT(,R8)
         LA    R12,1
         AL    R12,TOMCOLMN(,R8)
         ST    R12,TOMCOLMN(,R8)
         B     A001720
A001716  L     R12,TOMLNCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMLNCNT(,R8)
A001720  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
         L     R12,OPBUFADR(,R8)
         AL    R12,TOMMVCNT(,R8)
         ST    R12,TOMQBPTR(,R8)
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BNL   A001758
         TM    TOMWFLG1(R8),TOMCURST
         BO    A001758
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
A001758  L     R14,148(,R4)
         BR    R14                         END OF ENDDATA
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, CNTLHDRS, WILL BUILD THE OUTPUT HEADER FOR CON-  */
*/* TROL OR ASIS MODE USER DATA.                                     */
*/*                                                                  */
*/********************************************************************/
CNTLHDRS ST    R14,144(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A001780
         LR    R15,R14
A001780  AL    R15,FW15
         CR    R12,R15
         BNL   A001792
         OI    TOMWFLG1(R8),TOMENDBF
         B     A0019C2
A001792  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A0018BA
*      /**************************************************************/
*      /*                                                            */
*      /* BUILD CONTROL HEADER (CMD,WCC,SBA ORDER) ONLY IF RU IS     */
*      /* EMPTY.                                                     */
*      /*                                                            */
*      /**************************************************************/
         LA    R15,2
         CH    R15,OPBFSZ(,R8)
         BNL   A0017E4
         L     R14,TOMQBPTR(,R8)
         CLI   0(R14),X'27'
         BNE   A0017E4
*          /**********************************************************/
*          /*                                                        */
*          /* ESC PRESENT, TAKE USER'S COMMAND.                      */
*          /*                                                        */
*          /**********************************************************/
         AL    R12,FW1
         ST    R12,TOMBFCNT(,R8)
         ST    R15,TOMMVCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(2,R1),1(R14)
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)
         L     R12,OPBUFADR(,R8)
         ALR   R12,R15
         ST    R12,TOMQBPTR(,R8)
         ST    R15,TOMQDATA(,R8)
         B     A0017FC
*          /**********************************************************/
*          /*                                                        */
*          /* ESCAPE CHAR IS NOT PRESENT SO PUT IN DEFAULT WRITE     */
*          /* COMMAND.                                               */
*          /*                                                        */
*          /**********************************************************/
A0017E4  BAL   R14,SCRFORMT                PERFORM
         L     R12,TOMBFCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         BCTR  R12,0
         ST    R12,TOMBFPTR(,R8)
A0017FC  LA    R12,4
         CH    R12,OPBFSZ(,R8)
         BNL   A00184E
         L     R15,TOMQBPTR(,R8)
         CLI   1(R15),X'11'
         BNE   A00184E
*          /**********************************************************/
*          /*                                                        */
*          /* MOVE USER WRITE CONTROL CHAR AND SBA ORDER INTO        */
*          /* OUTPUT RU.                                             */
*          /*                                                        */
*          /**********************************************************/
         L     R14,TOMBFCNT(,R8)
         ALR   R14,R12
         ST    R14,TOMBFCNT(,R8)
         AL    R12,TOMMVCNT(,R8)
         ST    R12,TOMMVCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(4,R1),0(R15)
         AL    R14,TOMGETMN(,R8)
         ST    R14,TOMBFPTR(,R8)
         L     R15,OPBUFADR(,R8)
         ALR   R15,R12
         ST    R15,TOMQBPTR(,R8)
         ST    R12,TOMQDATA(,R8)
         OI    TOMWFLG2(R8),TOMTRSBA
         B     A0018BE
A00184E  LA    R12,3
         CH    R12,OPBFSZ(,R8)
         BNL   A00189C
         L     R15,TOMQBPTR(,R8)
         CLI   1(R15),X'1D'
         BNE   A00189C
*      /**************************************************************/
*      /*                                                            */
*      /* IF START FIELD IS PRESENT, TAKE USER'S ATTRIBUTE CHARACTER.*/
*      /*                                                            */
*      /**************************************************************/
         L     R14,TOMBFCNT(,R8)
         ALR   R14,R12
         ST    R14,TOMBFCNT(,R8)
         AL    R12,TOMMVCNT(,R8)
         ST    R12,TOMMVCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(3,R1),0(R15)
         AL    R14,TOMGETMN(,R8)
         ST    R14,TOMBFPTR(,R8)
         L     R15,OPBUFADR(,R8)
         ALR   R15,R12
         ST    R15,TOMQBPTR(,R8)
         ST    R12,TOMQDATA(,R8)
         B     A0018BE
*          /**********************************************************/
*          /*                                                        */
*          /* USER SBA NOT IN HEADER SO USER DEFAULT WCC AND LINE    */
*          /* ADDRESS                                                */
*          /*                                                        */
*          /**********************************************************/
A00189C  LA    R12,1
         L     R15,TOMBFCNT(,R8)
         ALR   R15,R12
         ST    R15,TOMBFCNT(,R8)
         AL    R12,TOMBFPTR(,R8)
         ST    R12,TOMBFPTR(,R8)
         BAL   R14,NEWLINE                 PERFORM
         B     A0018BE
A0018BA  BAL   R14,NEWLINE                 PERFORM
A0018BE  LH    R12,OPBFSZ(,R8)
         SL    R12,TOMMVCNT(,R8)
         C     R12,FW1
         BNH   A00192A
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'1D'
         BNE   A00192A
         TM    OPOPTNS(R8),X'10'
         BNO   A0018F6
         TM    OPOPTNS(R8),X'20'
         BNZ   A0018F6
         TM    OPOPTNS(R8),OPASID
         BNO   A0018F6
         NI    1(R12),X'FE'
A0018F6  LA    R12,2
         L     R15,TOMBFCNT(,R8)
         ALR   R15,R12
         ST    R15,TOMBFCNT(,R8)
         AL    R12,TOMMVCNT(,R8)
         ST    R12,TOMMVCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         L     R15,TOMQBPTR(,R8)
         MVC   0(2,R1),0(R15)
         ST    R12,TOMQDATA(,R8)
         AL    R12,OPBUFADR(,R8)
         ST    R12,TOMQBPTR(,R8)
         B     A0019B6
A00192A  TM    OPOPTNS(R8),X'10'
         BNO   A0019B6
         TM    OPOPTNS(R8),X'20'
         BNZ   A0019B6
         LH    R12,OPBFSZ(,R8)
         SL    R12,TOMMVCNT(,R8)
         C     R12,FW1
         BNE   A001978
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'24'
         BE    A0019B6
         CLI   0(R12),X'13'
         BE    A0019B6
         LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFWRTATT
         B     A0019B6
A001978  LH    R12,OPBFSZ(,R8)
         SL    R12,TOMMVCNT(,R8)
         C     R12,FW2
         BNE   A0019A0
         L     R12,TOMQBPTR(,R8)
         CLC   0(2,R12),BYPNL
         BE    A0019B6
         CLC   0(2,R12),BYPCR
         BE    A0019B6
A0019A0  LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFWRTATT
A0019B6  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
A0019C2  L     R14,144(,R4)
         BR    R14                         END OF CNTLHDRS
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, EDIT, DOES THE EDITING FOR EDIT MODE DATA. IN-   */
*/* VALID CHARACTERS ARE REPLACED WITH COLONS. BYPASS ('24'X) IS     */
*/* VALID ONLY AS LAST OR (CONDITIONALLY) NEXT TO LAST CHARACTER.    */
*/*                                                                  */
*/********************************************************************/
EDIT     ST    R14,128(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMQDATA(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A0019EA
         LR    R15,R14
A0019EA  AL    R15,FW15
         CR    R12,R15
         BNL   A0019FC
         OI    TOMWFLG1(R8),TOMENDBF
         B     A001C14
A0019FC  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A001A0A
         BAL   R14,SCRFORMT                PERFORM
A001A0A  B     A001C00
*/********************************************************************/
*/*                                                                  */
*/* BUILD LINES OF DATA UNTIL DATA,SCREEN, OR RU BUFFER RUNS OUT     */
*/*                                                                  */
*/********************************************************************/
A001A0E  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A001A4A
         SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A001A30
         LR    R15,R12
A001A30  SLR   R12,R12
         CR    R15,R12
         BNL   A001A3A
         LR    R15,R12
A001A3A  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         B     A001C00
A001A4A  NI    TOMWFLG1(R8),255-TOMEDSAV
         BAL   R14,NEWLINE                 PERFORM
         L     R12,TOMQDATA(,R8)
         LTR   R12,R12
         BNZ   A001AC6
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         LR    R14,R15
         BCTR  R14,0
         C     R14,TOMCOLMN(,R8)
         BNE   A001AC6
*        /************************************************************/
*        /*                                                          */
*        /* ON FIRST PASS FOR EACH TPUT, PUT ATTRIB IN FRONT OF DATA */
*        /*                                                          */
*        /************************************************************/
         LA    R14,2
         AL    R14,TOMBFCNT(,R8)
         ST    R14,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(2,R1),SFWRTATT
         L     R11,TOMGETMN(,R8)
         ALR   R11,R14
         ST    R11,TOMBFPTR(,R8)
         LA    R11,1
         AL    R11,TOMLNCNT(,R8)
         ST    R11,TOMLNCNT(,R8)
         LCR   R14,R14
         AL    R14,TOMBUFSZ(,R8)
         LCR   R12,R12
         AH    R12,OPBFSZ(,R8)
         CR    R12,R15
         BNH   A001AAE
         LR    R12,R15
A001AAE  AL    R12,FW15
         CR    R14,R12
         BNL   A001ABC
         OI    TOMWFLG1(R8),TOMENDBF
A001ABC  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         B     A001C00
A001AC6  L     R12,TOMQDATA(,R8)
         LTR   R12,R12
         BNZ   A001B32
         LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(2,R1),SFWRTATT
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)
         LA    R12,1
         L     R15,TOMCOLMN(,R8)
         ALR   R15,R12
         ST    R15,TOMCOLMN(,R8)
         LCR   R15,R15
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         ALR   R15,R14
         LH    R14,OPBFSZ(,R8)
         CR    R14,R15
         BNH   A001B12
         LR    R14,R15
A001B12  LA    R15,80
         C     R15,TOMPLSZ(,R8)                                 ZP60009
         BNL   *+8                                              ZP60009
         L     R15,TOMPLSZ(,R8)                                 ZP60009
         CR    R14,R15
         BNH   A001B1E
         LR    R14,R15
A001B1E  ST    R14,TOMWRKVJ(,R8)
         CR    R14,R12
         BNL   A001B2A
         LR    R14,R12
A001B2A  STC   R14,TOMWRKSZ(,R8)
         B     A001B5C
A001B32  LH    R12,OPBFSZ(,R8)
         SL    R12,TOMQDATA(,R8)
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         SL    R15,TOMCOLMN(,R8)
         CR    R12,R15
         BNH   A001B4C
         LR    R12,R15
A001B4C  LA    R15,80
         C     R15,TOMPLSZ(,R8)                                 ZP60009
         BNL   *+8                                              ZP60009
         L     R15,TOMPLSZ(,R8)                                 ZP60009
         CR    R12,R15
         BNH   A001B58
         LR    R12,R15
A001B58  STC   R12,TOMWRKSZ(,R8)
A001B5C  SLR   R12,R12
         IC    R12,TOMWRKSZ(,R8)
         L     R15,TOMCOLMN(,R8)
         ALR   R15,R12
         ST    R15,TOMCOLMN(,R8)
         LR    R15,R12
         BCTR  R15,0
         L     R14,TOMQBPTR(,R8)
         EX    R15,A00205A
         SLR   R11,R11
         IC    R11,TOMWRKSZ(,R8)
         BCTR  R11,0
         EX    R11,A002060
         L     R11,TOMBFCNT(,R8)
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         EX    R15,A002054
         L     R15,TOMQDATA(,R8)
         ALR   R15,R12
         ST    R15,TOMQDATA(,R8)
         AL    R11,TOMGETMN(,R8)
         ST    R11,TOMBFPTR(,R8)
         ALR   R14,R12
         ST    R14,TOMQBPTR(,R8)
         ST    R15,TOMMVCNT(,R8)
         CH    R15,OPBFSZ(,R8)
         BL    A001BC2
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PROCESSES BYPASS('24'X) WHEN FOUND IN NEXT */
*        /* LAST OR LAST DATA BYTE. A DEFAULT ATTRIBUTE IS PLACED IN */
*        /* RU WHEN A VALID BYPASS IS NOT FOUND                      */
*        /*                                                          */
*        /************************************************************/
         BAL   R14,ENDDATA                 PERFORM
         B     A001C00
*        /************************************************************/
*        /*                                                          */
*        /* MORE USER DATA LEFT SO DO NEW-LINE PROCESSING & CONTINUE */
*        /*                                                          */
*        /************************************************************/
A001BC2  LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMQDATA(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A001BF2
         LR    R15,R14
A001BF2  AL    R15,FW15
         CR    R12,R15
         BNL   A001C00
*            /********************************************************/
*            /*                                                      */
*            /* NOT ENOUGH RU BUFFER FOR LINESZ OF DATA AND PAGING   */
*            /* PROMPT SO SEND CURRENT RU AND CONTINUE               */
*            /*                                                      */
*            /********************************************************/
         OI    TOMWFLG1(R8),TOMENDBF
A001C00  L     R12,TOMQDATA(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A001C14
         TM    TOMWFLG1(R8),TOMENDBF+TOMENDSC
         BZ    A001A0E
A001C14  L     R14,128(,R4)
         BR    R14                         END OF EDIT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THE PROCEDURE, BLDPRMPT, WILL BUILD AUTOPROMPT DATA IN THE OUT-  */
*/* PUT RU. FOR AUTO LINE NUMBERING, THIS ROUTINE WILL BUILD A VARI- */
*/* BLE LENGTH LINE NUMBER OF 5 TO 8 DIGITS WITH LEADING ZEROS TRUN- */
*/* CATED UP TO THE FIRST 3. AUTO CHARACTER PROMPTING WILL CONSIST   */
*/* OF POSITIONING THE CURSOR. THE KEYBOARD WILL BE UNLOCKED ON      */
*/* EITHER TYPE AUTO PROMPT.                                         */
*/*                                                                  */
*/********************************************************************/
BLDPRMPT ST    R14,116(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A001C3C
         LR    R15,R14
A001C3C  AL    R15,FW15
         CR    R12,R15
         BNL   A001C4E
         OI    TOMWFLG1(R8),TOMENDBF
         B     A001D72
A001C4E  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A001C98
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A001C68
         BAL   R14,SCRFORMT                PERFORM
A001C68  SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A001C7E
         LR    R15,R12
A001C7E  SLR   R12,R12
         CR    R15,R12
         BNL   A001C88
         LR    R15,R12
A001C88  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         B     A001D72
A001C98  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A001CAA
         OI    TOMWFLG2(R8),TOMSCHED
         BAL   R14,SCRFORMT                PERFORM
A001CAA  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    TSBFLG2-TSB(R12),TSBAULST
         BNO   A001D5E
*      /**************************************************************/
*      /*                                                            */
*      /* THIS DO GROUP BUILDS A VARIABLE LENGTH LINE NUMBER         */
*      /*                                                            */
*      /**************************************************************/
         BAL   R14,NEWLINE                 PERFORM
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBAUTOS-TSB(,R12)
         CVD   R12,176(,R4)
         OI    183(R4),X'0F'
         UNPK  184(8,R4),176(8,R4)
         LA    R12,1
         ST    R12,TOMWRKVI(,R8)
A001CE0  L     R12,TOMWRKVI(,R8)
         LA    R1,183(R12,R4)
         CLI   0(R1),C'0'
         BNE   A001D04
         LA    R12,1
         AL    R12,TOMWRKVI(,R8)
         ST    R12,TOMWRKVI(,R8)
         C     R12,FW3
         BNH   A001CE0
A001D04  L     R12,TOMWRKVI(,R8)
         LA    R15,8
         SLR   R15,R12
         AL    R15,FW1
         STH   R15,TVWANCNT
         LA    R14,5
         AL    R14,TOMBFCNT(,R8)
         ALR   R14,R15
         ST    R14,TOMBFCNT(,R8)
         AL    R15,FW2
         STH   R15,TVWANCNT
         L     R15,TOMBFPTR(,R8)
         MVC   0(2,R15),SFWRTATT
         LA    R14,11
         SLR   R14,R12
         SL    R14,FW3
         LA    R1,183(R12,R4)
         EX    R14,A002066
         LA    R14,12
         SLR   R14,R12
         ALR   R15,R14
         BCTR  R15,0
         LCR   R12,R12
         AL    R12,FW14
         SLR   R12,R14
         EX    R12,A00206C
A001D5E  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
         OI    TOMWFLG1(R8),TOMCURST
         OI    TOMWFLG2(R8),TOMKBULK
A001D72  L     R14,116(,R4)
         BR    R14                         END OF BLDPRMPT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SCRNPAGE, WILL BE CALLED TO BUILD THE PAGING     */
*/* PROMPT MESSAGE AND TO SET APPROPRIATE INDICATORS.                */
*/*                                                                  */
*/********************************************************************/
SCRNPAGE ST    R14,12(,R13)
         NI    OPOPTNS(R8),255-OPNOED      ENSURE NOT NOEDIT    ZP60009
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBEXTNT-TSB(,R12)
         TM    TSBXFLG1-TSBX(R12),TSBXDOWN SESSION SHUTTING DOWN?
         BNO   A001DAA                     NO
         MVI   TVWALNCT,1                  YES, SET CURRENT LINE TO 1
         MVC   TOMLNCNT(4,R8),FW1
         OI    TVWAFLG4,TVWAFMSC           FORMAT SCREEN REQUIRED
         NI    TVWAFLG2,255-TVWAPGN        NOT DOING PAGING
         OI    TOMWFLG1(R8),TOMENDBF       END OF RU BUFFER
         B     A001DD0
A001DAA  LA    R12,8                       SET COUNT FOR PAGING MESSAGE
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)            PUT PAGE PROMPT IN OUTPUT RU
         MVC   0(8,R1),A0020DB
         AL    R12,TOMGETMN(,R8)           UPDATE RU BUFFER POINTER
         ST    R12,TOMBFPTR(,R8)
         OI    TVWAFLG2,TVWAPGN            PAGING RESPONSE OUTSTANDING
         OI    TOMWFLG2(R8),TOMKBULK       SET KEYBOARD UNLOCK NEEDED
*                                          INDICATE CURSOR SET IN RU
*                                          END OF SCRN HAS BEEN REACHED
*        (LEAVE MAIN LOOP OF BLDDTA)       DATA BLD COMPLETE THIS ENTRY
*        (LEAVE MAIN LOOP OF BLDRU)        RU BUILD COMPLETE THIS ENTRY
A001DD0  OI    TOMWFLG1(R8),TOMCURST+TOMENDSC+TOMEXDTA+TOMEXBRU
         L     R14,12(,R13)
         BR    R14                         END OF SCRNPAGE
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDERR, WILL BE CALLED TO PUT ERROR MESSAGES IN  */
*/* THE OUTPUT RU                                                    */
*/*                                                                  */
*/********************************************************************/
BLDERR   ST    R14,104(,R4)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         C     R12,TOMBFCNT(,R8)
         BNE   A001DF0
         BAL   R14,SCRFORMT                PERFORM
A001DF0  BAL   R14,NEWLINE                 PERFORM
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A001E08
         BAL   R14,SCRNPAGE                PERFORM
         B     A001E70
A001E08  LA    R12,4
         ST    R12,TOMWRKVI(,R8)
         LR    R15,R12
         SLA   R15,2
         L     R1,CVTPTR                   CVT ADDRESS
         L     R1,CVTTCASP-CVT(,R1)
         L     R1,TCASMSGS-TCAST(,R1)
         AL    R1,FWMINUS4
         L     R15,0(R15,R1)
         LH    R14,0(,R15)
         L     R11,TOMBFCNT(,R8)
         ALR   R11,R14
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFWRTATT
         LR    R10,R14
         BCTR  R10,0
         EX    R10,A002072
         ALR   R12,R14
         MVC   2(2,R12),SFRDATT
         AL    R11,TOMGETMN(,R8)
         ST    R11,TOMBFPTR(,R8)
         NI    TVWAFLG2,255-TVWAERMG
         OI    TVWAFLG1,TVWAULK
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
A001E70  L     R14,104(,R4)
         BR    R14                         END OF BLDERR
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, TRANPROC, WILL PERFORM USER AND/OR ASCII TRANS-  */
*/* LATION ON THE OUTBOUND RU.                                       */
*/*                                                                  */
*/********************************************************************/
TRANPROC ST    R14,12(,R13)
         TM    TVWAFLG3,TVWATRAN
         BNO   A001F6C
         SLR   R12,R12
         ST    R12,TOMWRKVJ(,R8)
         LA    R3,3
         B     A001F60
A001E90  SLR   R1,R1
         L     R12,TOMWRKVJ(,R8)
         L     R0,TOMGETMN(,R8)
         ALR   R0,R12
         ST    R0,TOMBFPTR(,R8)
         LCR   R12,R12
         AL    R12,TOMBFCNT(,R8)
         LA    R0,253
         CR    R12,R0
         BNH   A001EB2
         LR    R12,R0
A001EB2  ST    R12,TOMWRKVI(,R8)
         L     R12,TOMBFPTR(,R8)
         L     R15,TOMWRKVI(,R8)
         BCTR  R15,0
         EX    R15,A002078
         BC    8,NONFLG
         LR    R12,R1
         SL    R12,TOMBFPTR(,R8)
         ST    R12,TOMWRKVI(,R8)
         CLI   0(R1),X'11'
         BE    A001EE2
         CLI   0(R1),X'12'
         BNE   A001EEA
A001EE2  LA    R1,3
         B     A001F1E
A001EEA  CLI   0(R1),X'3C'
         BNE   A001EFA
         LA    R1,4
         B     A001F1E
A001EFA  CLI   0(R1),X'1D'
         BNE   A001F0A
         LA    R1,2
         B     A001F1E
A001F0A  CLI   0(R1),X'13'
         BE    A001F1A
         CLI   0(R1),X'05'
         BNE   A001F1E
A001F1A  LA    R1,1
A001F1E  L     R12,TOMWRKVI(,R8)
         CR    R3,R12
         BH    A001F4E
         C     R3,FW1
         BE    NONFLG
         C     R12,FW3
         BL    A001F4E
NONFLG   L     R12,TOMBFPTR(,R8)
         ALR   R12,R3
         BCTR  R12,0
         L     R15,TOMWRKVI(,R8)
         SLR   R15,R3
         L     R14,TVWATABO
         EX    R15,A00207E
A001F4E  LA    R3,1
         L     R12,TOMWRKVJ(,R8)
         AL    R12,TOMWRKVI(,R8)
         ALR   R12,R1
         ST    R12,TOMWRKVJ(,R8)
A001F60  L     R12,TOMWRKVJ(,R8)
         C     R12,TOMBFCNT(,R8)
         BL    A001E90
A001F6C  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBEXTNT-TSB(,R12)
         TM    TSBXFLG1-TSBX(R12),TSBXASCI
         BNO   A001FCE
         SLR   R12,R12
         ST    R12,TOMWRKVJ(,R8)
         B     A001FC2
A001F8A  L     R12,TOMWRKVJ(,R8)
         L     R15,TOMGETMN(,R8)
         ALR   R15,R12
         ST    R15,TOMBFPTR(,R8)
         L     R14,TOMBFCNT(,R8)
         SLR   R14,R12
         LA    R11,256
         CR    R14,R11
         BNH   A001FAA
         LR    R14,R11
A001FAA  ST    R14,TOMWRKVI(,R8)
         L     R11,TOMWRKVI(,R8)
         BCTR  R11,0
         L     R1,TVWAATBO
         EX    R11,A002084
         ALR   R12,R14
         ST    R12,TOMWRKVJ(,R8)
A001FC2  L     R12,TOMWRKVJ(,R8)
         C     R12,TOMBFCNT(,R8)
         BL    A001F8A
A001FCE  L     R14,12(,R13)
         BR    R14                         END OF TRANPROC
         EJECT
A001FD4  ST    R14,124(,R4)
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A001FE6
         BAL   R14,SCRFORMT                PERFORM
A001FE6  LA    R12,1
         ST    R12,TOMMVCNT(,R8)
         SLR   R15,R15
         ST    R15,TOMCOLMN(,R8)
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A00200C
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
A00200C  L     R14,124(,R4)
         BR    R14                         EXIT
         EJECT
A002012  L     R13,4(,R13)
         LM    R14,R12,12(R13)             RESTORE REGS
         BR    R14                         EXIT
HW1920   DC    H'1920'
HW4095   DC    H'4095'                                          ZP60009
A00201E  MVC   TOMWRKBF+7(0,R8),2(R12)
A002024  MVC   2(0,R10),0(R1)
A00202A  TR    2(0,R10),ASISTAB
A002030  MVC   2(0,R10),80(R1)
A002036  MVC   TOMWRKBF(0,R8),0(R1)
A00203C  MVC   0(0,R12),0(R3)
A002042  TR    0(0,R12),FLSCRTAB
A002048  TRT   0(0,R3),ICTAB
A00204E  TR    TOMWRKBF(0,R8),ASISTAB
A002054  MVC   0(0,R1),TOMWRKBF(R8)
A00205A  MVC   TOMWRKBF(0,R8),0(R14)
A002060  TR    TOMWRKBF(0,R8),EDITTAB
A002066  MVC   2(0,R15),0(R1)
A00206C  MVC   0(0,R15),SFRDATIC
A002072  MVC   2(0,R12),2(R15)
A002078  TRT   0(0,R12),SBATAB
A00207E  TR    0(0,R12),0(R14)
A002084  TR    0(0,R15),0(R1)
FW1      DC    0F'1'
         DC    H'0'
HW1      DC    H'1'
FW2      DC    F'2'
FW3      DC    F'3'
FW4      DC    F'4'
FW7      DC    F'7'
FW14     DC    F'14'
FW15     DC    F'15'
FW18     DC    F'18'
FW19     DC    F'19'
FW40     DC    F'40'
FW64     DC    F'64'
FW80     DC    F'80'
FWMINUS4 DC    F'-4'
         DC    X'07002011'
         DC    F'192'
IKTIDSX1 DC    V(IKTIDSX1)
         DS    0D
A0020D0  EQU   *,11                        SAVE 8 BYTES OF      ZP60009
         DC    X'11C150'                    DUPLICATE DATA      ZP60008
SFWRTATT EQU   *,2
A0020DB  DC    X'1DC85C5C5C1D4013'
A0020E3  DC    X'1DC84FC91D40'
A0020E9  DC    X'C61140401DC8'
A0020EF  DC    X'1DC84F1D40'
SFRDATT  EQU   *,2
SFRDATIC DC    X'1D4013'
BYPCR    DC    X'240D'
BYPNL    DC    X'2415'
EWRTWCCD DC    X'F5C1'
SFBYPATT DC    X'1D4C'
WRTWCC   DC    X'F140'
WRTWCCDF DC    X'F1C1'
A002103  DC    X'5D7F'
A002105  DC    X'C75F'
         DS    0D                                               ZP60009
EDITTAB  DS    CL256
         ORG   EDITTAB
         DC    X'007A7A7A7A7A7A7A7A7A7A7A0C7A7A7A'
         DC    X'7A7A7A7A7A7A7A7A7A197A7A1C7A1E7A'
         DC    X'7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A'              ZP60009
         DC    X'7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A3F'              ZP60009
         DC    X'404142434445464748494A4B4C4D4E4F'              ZP60009
         DC    X'505152535455565758595A5B5C5D5E5F'              ZP60009
         DC    X'606162636465666768696A6B6C6D6E6F'              ZP60009
         DC    X'707172737475767778797A7B7C7D7E7F'              ZP60009
         DC    X'808182838485868788898A8B8C8D8E8F'              ZP60009
         DC    X'909192939495969798999A9B9C9D9E9F'              ZP60009
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'              ZP60009
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'              ZP60009
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'              ZP60009
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'              ZP60009
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'              ZP60009
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE7A'              ZP60009
         ORG   EDITTAB+256
ASISTAB  DS    CL256
         ORG   ASISTAB
         DC    X'007A7A7A7A057A0708090A0B0C7A0E0F'
         DC    X'7A11127A7A7A7A7A18191A1B1C1D1E1F'
         DC    X'202122237A257A7A28292A2B2C7A2E2F'
         DC    X'303132333435363738393A3B3C7A3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         ORG   ASISTAB+256
FLSCRTAB DS    CL256
         ORG   FLSCRTAB
         DC    X'007A7A7A7A057A0708090A0B0C7A0E0F'
         DC    X'7A1112137A7A7A7A18191A1B1C1D1E1F'
         DC    X'2021222324257A7A28292A2B2C7A2E2F'
         DC    X'303132333435367A38393A3B3C7A3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         ORG   FLSCRTAB+256
SBATAB   DS    CL256
         ORG   SBATAB
         DC    X'00000000000500000000000000000000'
         DC    X'001112130000000000000000001D0000'
         DC    X'00000000000000000000000000000000'
         DC    X'0000000000000000000000003C000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         ORG   SBATAB+256
BFADRTAB DS    CL64
         ORG   BFADRTAB
         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
         ORG   BFADRTAB+64
ICTAB    DS    CL256
         ORG   ICTAB
         DC    X'00000000000000000000000000000000'
         DC    X'00000013000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         ORG   ICTAB+256
PATCH    DC    76F'0'
         DS    0D                          END OF CSECT
         EJECT
R0       EQU   0                           EQUATES FOR REGISTERS 0-15
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
TOMWA    EQU   240
TOMAUTOD EQU   TOMWA
TOMWRKBF EQU   TOMWA+200
SAVEREGS EQU   TOMWA+280
TOMBFCNT EQU   TOMWA+352
TOMMVCNT EQU   TOMWA+356
TOMQDATA EQU   TOMWA+360
TOMWRKVI EQU   TOMWA+364
TOMWRKVJ EQU   TOMWA+368
TOMNWLSZ EQU   TOMWA+372
TOMQBPTR EQU   TOMWA+376
TOMGETMN EQU   TOMWA+380
TOMBUFSZ EQU   TOMWA+384
TOMBFPTR EQU   TOMWA+388
TOMWRKSZ EQU   TOMWA+392
TOMSCPRM EQU   TOMWA+396
TOMREQCD EQU   TOMSCPRM
TOMPLNNO EQU   TOMSCPRM+1
TOMLNSZ  EQU   TOMSCPRM+2
TOMLNNO  EQU   TOMSCPRM+4
TOMPLSZ  EQU   TOMSCPRM+8
TOMLNCNT EQU   TOMSCPRM+12
TOMFMTDA EQU   TOMSCPRM+16
TOMSBACD EQU   TOMFMTDA
TOMFMTAD EQU   TOMFMTDA+1
TOMFMATT EQU   TOMFMTDA+3
TOMLNADR EQU   TOMSCPRM+21
TOMROWAD EQU   TOMLNADR
TOMCOLAD EQU   TOMLNADR+1
TOMWFLGS EQU   TOMWA+421
TOMWFLG1 EQU   TOMWFLGS
TOMEDSAV EQU   X'C0'
TOMENDBF EQU   X'20'
TOMCURST EQU   X'10'
TOMENDSC EQU   X'08'
TOMEXDTA EQU   X'04'
TOMEXBRU EQU   X'02'
TOMOWAIT EQU   X'01'
TOMWFLG2 EQU   TOMWFLGS+1
TOMKBULK EQU   X'80'
TOMALARM EQU   X'40'
TOMERMG9 EQU   X'20'
TOMERASE EQU   X'10'
TOMSCHED EQU   X'08'
TOMSTCUR EQU   X'04'
TOMERLCT EQU   X'02'
TOMTRSBA EQU   X'01'
TOMWFLG3 EQU   TOMWFLGS+2
TOMBPREQ EQU   TOMWFLG3
TOMBPRSP EQU   TOMWFLG3
TOMBRKPG EQU   TOMWFLG3
TOMWFLG4 EQU   TOMWFLGS+3
TOMBRKMG EQU   X'80'
TOMEB    EQU   X'40'
TOMPGNSV EQU   X'10'
TOMUPARM EQU   TOMWA+428
TOMUPRM1 EQU   TOMUPARM
TOMUPRM2 EQU   TOMUPARM+4
TOMUPRM3 EQU   TOMUPARM+8
TOMUPRM4 EQU   TOMUPARM+12
TOMUPRM5 EQU   TOMUPARM+16
TOMUPRM6 EQU   TOMUPARM+20
TOMUPRM7 EQU   TOMUPARM+24
TOMUPRM8 EQU   TOMUPARM+28
TOMCOLMN EQU   TOMWA+464
TOMXCNT  EQU   TOMWA+468
OPARMS   EQU   TOMWA+484
OPBUFADR EQU   OPARMS
OPREQ    EQU   OPARMS+4
OPRC     EQU   OPARMS+5
OPBFSZ   EQU   OPARMS+6
OPFLAGS  EQU   OPARMS+8
OPOPTNS  EQU   OPFLAGS+1         BITS 0-3 FROM TPUT SVC GPR1 BITS 4-7
OPHOLD   EQU   X'80'
OPBRK    EQU   X'40'
OPEDIT   EQU   X'30'
OPASID   EQU   X'08'
OPNOED   EQU   X'04'                                            ZP60009
OPNXFLGS EQU   OPARMS+16
OPNXBRK  EQU   OPNXFLGS+1
OPNXEDIT EQU   OPNXFLGS+1
OPNXASID EQU   OPNXFLGS+1
         SPACE
         PRINT NOGEN
         IHAPSA
         CVT   DSECT=YES
         IHAASCB
         IKJTSB EXT=YES
         IKTTVWA
         IKTTCAST
         END   IKT3270O,(C'PLS1952',0701,83271)
/*
//*
//STEP05  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKT3270O('ZP60009')
++MOD(IKT0009D) DISTLIB(AOST3).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP06  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
IKT0009D TITLE 'IKT0009D:  TSO/VTAM SVC 94 ROUTER                      *
                        '
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*            TO SUPPORT ENTRY CODE 17 (GTTERM)
*
IKT0009D CSECT
         BALR  R15,0                       ADDRESS SET
         USING *,R15
         B     @PROLOG
         DC    AL1(16)
         DC    CL16'IKT0009D  78.290'
         DROP  R15
@PROLOG  BALR  R12,0                       ADDRESS SET
@PSTART  DS    0H
         USING @PSTART,R12
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER REGISTER 0 WILL HAVE THE ENTRY CODE FOR THE SVC IN  */
*   /* THE HIGH ORDER POSITION OF REGISTER 0, IF THE ENTRY CODE IS   */
*   /* INVALID A RETURN CODE OF 4 IS RETURNED IN REG 15              */
*   /*                                                               */
*   /*****************************************************************/
         LR    R15,R0
         SRL   R15,24
         CH    R15,HW20
         BH    INVALID
         LTR   R15,R15
         BNP   INVALID
         LR    R5,R8                       COPY TSB POINTER
         LA    R10,A000058
         SLL   R15,2
         L     R15,MODTAB-4(15)
         DROP  R12
         LR    R12,R15
         BR    R15
INVALID  LA    R15,4
         BR    R14                         EXIT
INVALID8 LA    R15,8
         BR    R14                         EXIT
INVALIDC LA    R15,12
         BR    R14                         EXIT
HW20     DC    H'20'
         DC    F'8'
A000058  EQU   *
         DC    F'0'
         DC    F'99999999'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'8288'
MODTAB   EQU   *
TCLEARQ  DC   V(IKT09401)           ENTRY CODE  1
TSEND    DC   A(INVALID)            ENTRY CODE  2,INVALID
MSGS     DC   A(INVALID)            ENTRY CODE  3,INVALID
STBREAK  DC   V(IKT09404)           ENTRY CODE  4
STCOM    DC   V(IKT09405)           ENTRY CODE  5
STTIMEO  DC   A(INVALID8)           ENTRY CODE  6,INVALID
STCC     DC   A(INVALIDC)           ENTRY CODE  7,INVALID
STATTN   DC   A(INVALID8)           ENTRY CODE  8,INVALID
STAUTOL  DC   V(IKT09409)           ENTRY CODE  9
STSIZE   DC   V(IKT0940A)           ENTRY CODE 10
GTSIZE   DC   V(IGG0940B)           ENTRY CODE 11
STAUTOC  DC   V(IKT0940C)           ENTRY CODE 12
SPAUTOP  DC   V(IKT0940D)           ENTRY CODE 13
RTAUTOP  DC   V(IKT0940E)           ENTRY CODE 14
STTRAN   DC   V(IKT0940F)           ENTRY CODE 15
STCLEAR  DC   A(INVALID8)           ENTRY CODE 16,INVALID
GTTERM   DC   V(IKT09411)           ENTRY CODE 17               ZP60009
STFSMODE DC   V(IKT09412)           ENTRY CODE 18
STLINENO DC   V(IKT09413)           ENTRY CODE 19
STTMPMD  DC   V(IKT09414)           ENTRY CODE 20
         SPACE
         DS   0D                    END OF CSECT
         EJECT
R0       EQU   0                    EQUATES FOR REGISTERS 0-15
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         TITLE '******** IKT09411:    GTTERM  - TERMINAL CONTROL MACRO *
                 *******'
IKT09411 CSECT
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS CSECT WAS WRITTEN BY GREG PRICE IN JANUARY 2003 FOR THE  */
*   /* ZP60009 USERMOD TO ADD THE GTTERM MACRO FUNCTION TO TSO/VTAM  */
*   /* ETV0108 WHICH IS SHIPPED WITH MVS 3.8J.                       */
*   /*                                                               */
*   /*****************************************************************/
         USING IKT09411,R12
         USING TSB,R5
         USING PSA,0
         B     @GTTERM
         DC    AL1(16)
         DC    CL16'IKT09411 ZP60009'
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER REGISTER 1 POINTS TO A PARAMETER LIST OF FROM 1 TO  */
*   /* 4 WORDS, EACH CONTAINING A POINTER TO AN OUTPUT AREA.  THE    */
*   /* PARAMETER LIST AND EACH OUTPUT AREA IS ACCESSED IN THE USER   */
*   /* KEY TO VERIFY USER AUTHORITY TO ACCESS THE AREAS.  THE LAST   */
*   /* PARAMETER LIST WORD SHOULD HAVE THE HIGH-ORDER BIT ON.        */
*   /*                                                               */
*   /*****************************************************************/
@GTTERM  LTR   R1,R1                       ANY PARAMETER PASSED?
         BNZ   HAVEPARM                    YES
MISSPARM LA    R15,12                      NO, MISSING PARAMETER
         BR    R14                         RETURN TO ISSUER
*   /*****************************************************************/
*   /*                                                               */
*   /* THE GTTERM MACRO IS ONLY VALID FOR DISPLAY STATION TERMINALS. */
*   /*                                                               */
*   /*****************************************************************/
HAVEPARM TM    TSBSTAT,TSBDSPLY            TERMINAL A DISPLAY STATION?
         BO    ISADSPLY                    YES
         LA    R15,8                       NO, WRONG TERMINAL TYPE
         BR    R14                         RETURN TO ISSUER
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PARAMETERS ARE OUTPUT AREAS FOR:                          */
*   /* (1) PRMSZE - PRIMARY SCREEN SIZE DIMENSIONS - 2 BYTES         */
*   /* (2) ALTSZE - ALTERNATE SCREEN SIZE DIMENSIONS - 2 BYTES       */
*   /* (3) ATTRIB - TERMINAL ATTRIBUTES - 4 BYTES                    */
*   /* (4) TERMID - TERMINAL LU NAME - 8 BYTES                       */
*   /*                                                               */
*   /*****************************************************************/
ISADSPLY L     R8,PSATOLD
         IC    R15,TCBPKF-TCB(,R8)
         SPKA  0(R15)                      GET INTO USER KEY
         SLR   R8,R8
         SLR   R9,R9
         SLR   R10,R10
         SLR   R11,R11
         L     R8,0(,R1)                   LOAD FIRST ADDRESS
         LTR   R8,R8
         BM    GOTPARMS                    ONLY ONE PARAMETER
         L     R9,4(,R1)                   LOAD SECOND ADDRESS
         LTR   R9,R9
         BM    GOTPARMS                    ONLY TWO PARAMETERS
         L     R10,8(,R1)                  LOAD THIRD ADDRESS
         LTR   R10,R10
         BM    GOTPARMS                    ONLY THREE PARAMETERS
         L     R11,12(,R1)                 LOAD FOURTH ADDRESS
GOTPARMS LA    R8,0(,R8)                   ENSURE ADDRESS FORMAT
         LA    R9,0(,R9)
         LA    R10,0(,R10)
         LA    R11,0(,R11)
         LTR   R8,R8                       FIRST ADDRESS PRESENT?
         BNP   *+10                        NO
         XC    0(2,R8),0(R2)               YES, CLEAR 2 BYTES
         LTR   R9,R9                       SECOND ADDRESS PRESENT?
         BNP   *+10                        NO
         XC    0(2,R9),0(R9)               YES, CLEAR 2 BYTES
         LTR   R10,R10                     THIRD ADDRESS PRESENT?
         BNP   *+10                        NO
         XC    0(4,R10),0(R10)             YES, CLEAR 4 BYTES
         LTR   R11,R11                     FOURTH ADDRESS PRESENT?
         BNP   *+10                        NO
         XC    0(8,R11),0(R11)             YES, CLEAR 8 BYTES
         SPKA  0                           REVERT TO KEY ZERO
*   /*****************************************************************/
*   /*                                                               */
*   /* TSO/VTAM REQUIRES THE FIRST PARAMETER (PRMSZE) BE PRESENT.    */
*   /*                                                               */
*   /*****************************************************************/
         LTR   R8,R8                       IS PRMSZE SPECIFIED?
         BNP   MISSPARM                    NO, RETURN CODE 12
         L     R15,TSBEXTNT                YES, POINT TO TSBX
         USING TSBX,R15
         ICM   R2,3,TSBPRMR                COPY PRIMARY ROWS+COLS
         BNZ   PRIMOKAY
         ICM   R2,3,MOD1DIMS               USE MODEL-1 DIMENSIONS
         CLC   TSBXTMBF,MOD1SIZE           REALLY A MODEL-1?
         BE    PRIMOKAY                    YES
         ICM   R2,3,MOD2DIMS               USE MODEL-2 DIMENSIONS
PRIMOKAY STCM  R2,3,0(R8)                  SET PRIMARY ROWS+COLS
         LTR   R9,R9                       IS ALTSZE SPECIFIED?
         BNP   ALTDONE                     NO
         ICM   R2,3,TSBALTR                COPY ALTERNATE ROWS+COLS
         BNZ   ALTOKAY
         ICM   R2,3,MOD1DIMS               USE MODEL-1 DIMENSIONS
         CLC   TSBXTMBF,MOD1SIZE           REALLY A MODEL-1?
         BE    ALTOKAY                     YES
         ICM   R2,3,MOD2DIMS               USE MODEL-2 DIMENSIONS
ALTOKAY  STCM  R2,3,0(R9)                  AET ALTERNATE ROWS+COLS
ALTDONE  LTR   R10,R10                     IS ATTRIB SPECIFIED?
         BNP   ATTRDONE                    NO
         SLR   R8,R8
         IC    R8,TSBTERM2
         LA    R9,TSBASCI7
         NR    R8,R9                       GET ASCII-7/ASCII-8 FLAGS
         SLL   R8,8                        SHIFT TO CORRECT BYTE
         TM    TSBFLG5,TSBVTAM             VTAM TERMINAL?
         BNO   *+8                         NO, HOW DID WE GET HERE?
         LA    R8,X'80'(,R8)               YES, SET FLAG BIT ON
         TM    TSBFLG5,TSBQRY              QUERY BIT ON?
         BNO   *+8                         NO
         LA    R8,X'01'(,R8)               YES, SET FLAG BIT ON
         TM    TSBFLG3,TSBNOBRK            BREAK NOT ALLOWED NOW?
         BNO   *+8                         NO
         LA    R8,X'40'(,R8)               YES, SET FLAG BIT ON
         TM    TSBXFLG1,TSBXASCI           ASCII TERMINAL?
         BNO   *+8                         NO
         LA    R8,X'02'(,R8)               YES, SET FLAG BIT ON
         L     R9,TSBXTVWA
         USING TVWA,R9
         TM    TVWAFLG3,TVWATRAN           TRANSLATE TABLE IN USE?
         BNO   *+8                         NO
         LA    R8,X'20'(,R8)               YES, SET FLAG BIT ON
         TM    TVWAFLG3,TVWATRDF           DEFAULT TRANSLATION?
         BNO   *+8                         NO
         LA    R8,X'10'(,R8)               YES, SET FLAG BIT ON
         TM    TVWAFLG5,TVWAFSM            IN FULLSCREEN MODE?
         BNO   *+8                         NO
         LA    R8,X'08'(,R8)               YES, SET FLAG BIT ON
         STCM  R8,15,0(R10)                SET ATTRIBUTES WORD
         DROP  R9                          TVWA
ATTRDONE LTR   R11,R11                     IS TERMID SPECIFIED?
         BNP   TERMDONE                    NO
         MVC   0(8,R11),TSBTRMID           YES, SHOW TERMINAL NAME
         DROP  R15                         TSBX
TERMDONE SLR   R15,R15                     ZERO RETURN CODE
         BR    R14                         RETURN TO ISSUER
         SPACE
MOD1SIZE DC    AL2(12*40)
MOD1DIMS DC    AL1(12,40)
MOD2DIMS DC    AL1(24,80)
@PATCH11 DC    6D'0'                       PATCH AREA
         SPACE
         PRINT NOGEN
         IHAPSA
         IKJTCB
         IKJTSB EXT=YES
         IKTTVWA
         SPACE
         END   IKT0009D,(C'PLS1425',0701,78290)
/*
//*
//STEP07  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKT0009D('ZP60009')
  IDENTIFY IKT09411('ZP60009')
++MOD(IKTXLOG) DISTLIB(AOST4).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP08  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'EXTENDED LOGON ROUTINE'
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
*   /*****************************************************************/
*   /*                                                               */
*   /*   FIRSTLY PERFORM THE IBM SUPPLIED LOGIC                      */
*   /*                                                               */
*   /*****************************************************************/
IKTXLOG  CSECT
         USING IKTXLOG,R15
         B     @PROLOG
         DC    AL1(32)
         DC    CL16'IKTXLOG  ZP60009'
         DC    CL16' REWORK 20090601'
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)
         LR    R12,R15
         USING IKTXLOG,R12
*
*   INBUF=TVWAVST                  INSERT ADDRESS OF LOGON BUFFER
*                                      IN PARAMETER
         USING PSA,0
         L     R15,0(,R1)          POINT TO PARAMETER
         L     R14,PSAAOLD
         USING ASCB,R14
         L     R3,ASCBTSB
         DROP  R14
         USING TSB,R3
         L     R4,TSBEXTNT
         USING TSBX,R4
         L     R5,TSBXTVWA
         USING TVWA,R5
         L     R0,TVWAVST
         ST    R0,0(,R15)          STORE ADDRESS INTO INBUF
*   /*****************************************************************/
*   /*                                                               */
*   /*   SECONDLY PERFORM THE LOGIC ADDED BY USERMOD ZP60009         */
*   /*                                                               */
*   /*   THIS EXTRA LOGIC IS ONLY FOR 3270 TERMINALS AND HAS         */
*   /*   BEEN ADDED TO FACILITATE ACCESS TO 3270 EXTENSIONS BY       */
*   /*   TSO APPLICATIONS.  THE PURPOSE OF THIS EXTRA LOGIC IS       */
*   /*   TO ASCERTAIN (A) THE PRIMARY AND ALTERNATE SCREEN SIZES     */
*   /*   AND (B) IF THE TERMINAL IS QUERYABLE.                       */
*   /*                                                               */
*   /*   THE RESULTS ARE STORED IN THE TSB, AND MADE AVAILABLE       */
*   /*   TO ISSUERS OF THE GTTERM MACRO.                             */
*   /*                                                               */
*   /*   FOR SNA 3270 SESSIONS THE SCREEN DIMENSIONS ARE INITIALLY   */
*   /*   COPIED FROM THE BIND, AND IF THE QUERY BIT IN THE BIND      */
*   /*   IS NOT SET, NO FURTHER ACTION IS TAKEN.                     */
*   /*                                                               */
*   /*   FOR NON-SNA SESSIONS, AND SNA SESSIONS WITH THE QUERY       */
*   /*   BIT SET IN THE BIND, THE FOLLOWING PROCESSING OCCURS.       */
*   /*                                                               */
*   /*   THE FIRST TPUT OF THE TSO SESSION IS ISSUED HERE.           */
*   /*   A FULLSCREEN TPUT IS USED TO CLEAR THE TERMINAL AID AND     */
*   /*   ENSURE THAT NO INPUT DATA IS PENDING FROM THE TERMINAL      */
*   /*   BUFFER.  FULLSCREEN MODE IS NOT TURNED ON TO AVOID THE      */
*   /*   REQUIREMENT OF AN ADDITIONAL INPUT FROM THE TERMINAL        */
*   /*   OPERATOR CAUSED BY VTAM PAGE PROTECTION ('***').  AS        */
*   /*   A RESULT, NOEDIT INPUT MODE IS ACTIVATED BY DIRECTLY        */
*   /*   SETTING THE FLAG, AND NOT BY AN STFSMODE MACRO.             */
*   /*                                                               */
*   /*   A NOEDIT TPUT IS THEN USED TO ISSUE THE QUERY TO THE        */
*   /*   TERMINAL.  A TGET MACRO IS USED TO GET THE RESPONSE.        */
*   /*   ABNORMAL TGET RETURN CODES TERMINATE THE QUERY PROCESS.     */
*   /*   IF THE RETURN CODE IS NORMAL NON-QUERY RESPONSES ARE        */
*   /*   DISCARDED AND THE TGET REISSUED.  ONLY THE IMPLICIT         */
*   /*   PARTITION SUB-FIELD OF THE QUERY RESPONSE IS EXAMINED,      */
*   /*   FROM WHICH THE PRIMARY AND ALTERNATE SCREEN SIZES ARE       */
*   /*   DISCOVERED.                                                 */
*   /*                                                               */
*   /*   UPON SUCCESSFULLY PROCESSING THE QUERY RESPONSE, THIS       */
*   /*   ROUTINE:                                                    */
*   /*   (1) REGISTERS THE PRIMARY AND ALTERNATE SCREEN SIZES        */
*   /*       IN THE TERMINAL STATUS BLOCK.                           */
*   /*   (2) SETS THE CURRENT SCREEN SIZE TO THE ALTERNATE SCREEN    */
*   /*       SIZE IF THE ALTERNATE SCREEN SIZE HAS AT LEAST 24       */
*   /*       LINES AND 80 COLUMNS.                                   */
*   /*   (3) SETS THE FLAG TO INSTRUCT THE TSO/VTAM 3270 SCREEN      */
*   /*       MANAGER TO RECHECK THE SCREEN DIMENSIONS IF THE         */
*   /*       SCREEN SIZE WAS SET.                                    */
*   /*   (4) SETS THE QUERY BIT ON.                                  */
*   /*   (5) ISSUES THE STLINENO LINE=1,MODE=OFF MACRO WHICH WILL    */
*   /*   (5.1) SET THE NEXT OUTPUT LINE FOR THE FIRST SCREEN LINE.   */
*   /*   (5.2) SET THE FLAG TO INSTRUCT THE TSO/VTAM 3270 SCREEN     */
*   /*         MANAGER TO FORMAT THE SCREEN FOR LINE MODE.           */
*   /*   (5.3) KEEP FULLSCREEN MODE OFF AND TURN OFF NOEDIT INPUT    */
*   /*         MODE.                                                 */
*   /*   (6) SETS THE KEYBOARD LOCKED FLAG SO A SUBSEQUENT UNLOCK    */
*   /*       REQUEST WILL NOT BE GENERATED.                          */
*   /*   (7) RESETS THE UNLOCK REQUESTED FLAG SO LOGON MESSAGES      */
*   /*       CAN BE OUTPUT WITHOUT BEING QUEUED BEHIND AN EXTRA      */
*   /*       TERMINAL INPUT REQUEST.                                 */
*   /*                                                               */
*   /*****************************************************************/
*
*   DETERMINE IF USING A 3270 DISPLAY
*
         TM    TSBSTAT,TSBINUSE+TSBDSPLY+TSB3270
         BNO   FASTEXIT            NOT EXPECTED TERMINAL TYPE
         TM    TSBSTAT,TSBDISC     TERMINAL DISCONNECTED?
         BO    FASTEXIT            YES, CANNOT TALK TO TERMINAL
         CLI   TSBLNNO,0           WOULD GTSIZE SAY ZERO LINES?
         BE    FASTEXIT            YES, TERMINAL IS NOT A SCREEN
*
*   DETERMINE IF SNA SESSION
*
         ICM   R0,15,TSBXBIND+8    SNA BIND PRESENT?
         BZ    QUERYTRM            NO, ALWAYS QUERY IF NON-SNA
*
*   SET SCREEN DIMENSIONS FROM SNA BIND
*
         MVC   TSBPRMR(4),TSBXBIND+19
*
*   DETERMINE IF SNA TERMINAL IS QUERYABLE
*
         TM    TSBXBIND+14,X'80'   QUERY BIT SET?
         BNO   FASTEXIT            NO, DO NOT QUERY TERMINAL
*
*   ACQUIRE WORKING STORAGE
*
QUERYTRM L     R0,@SIZDATD
         GETMAIN R,LV=(0)
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1
         USING @DATD,R13
*
*   ISSUE QUERY
*
         MVC   TPGPL,TPG           INITIALISE TPG PLIST
         OI    TSBFLG5,TSBNEDIT    ENSURE INPUT NOT EDITED
         LA    R1,RESETAID         RESET THE TERMINAL AID
         LA    R0,L'RESETAID             BEFORE ISSUING THE
         ICM   R1,8,=X'0B'               READ PARTITION
         TPUT  (1),(0),R           TPUT FULLSCR,WAIT,HOLD
         TCLEARQ INPUT             FLUSH ANY TYPE-AHEAD TEXT
         TPG   MF=(E,TPGPL)        ISSUE QUERY TO TSO TERMINAL
         LTR   R15,R15             WAS TPG ISSUED SUCCESSFULLY?
         BNZ   QUERYX              NO, DO NOT EXPECT A RESPONSE
*
*   READ QUERY RESPONSE
*
QUERYGET LA    R1,REPLY            POINT TO TGET BUFFER FOR RESPONSE
         LA    R0,REPLYLEN                  FROM READ PARTITION
         ICM   R1,8,=X'81'         FLAGS FOR TGET ASIS,WAIT
         TGET  (1),(0),R           TGET ASIS,WAIT
         CH    R15,=H'8'           ATTENTION INTERRUPT?
         BE    QUERYX              YES, ASSUME QUERY NOT FUNCTIONAL
         CH    R15,=H'16'          TGET PARAMETER ERROR?
         BE    QUERYX              YES, ASSUME QUERY NOT FUNCTIONAL
         CH    R15,=H'20'          TERMINAL DISCONNECTED?
         BE    QUERYX              YES, ASSUME QUERY NOT FUNCTIONAL
         CLI   REPLY,X'88'         QUERY RESPONSE AID?
         BE    QUERYGOT            YES
         CLI   REPLY,X'F3'         PF3?
         BE    QUERYX              YES, EXIT
         CLI   REPLY,X'C3'         PF15?
         BE    QUERYX              YES, EXIT
*
*   DISPLAY INFORMATION ABOUT (NON-QUERY) INPUT DATA
*
         MVC   TPGPL,REPLY         PRESERVE INPUT DATA HEADER
         MVC   REPLY(RCMSGLEN),RCMSG
         STC   R15,@DATD           SHOW RETURN CODE
         UNPK  REPLY+RCMSGRC(3),@DATD(2)
         TR    REPLY+RCMSGRC(2),HEX-240
         MVI   REPLY+RCMSGRC+2,X'7D'
         STH   R1,@DATD            SHOW TGET INPUT DATA LENGTH
         UNPK  REPLY+RCMSGLN(5),@DATD(3)
         TR    REPLY+RCMSGLN(4),HEX-240
         MVI   REPLY+RCMSGLN+4,X'7D'
         LA    R15,REPLY+RCMSGLEN  POINT TO MESSAGE AREA
         LA    R14,TPGPL           POINT TO PRESERVED DATA
         LA    R0,TPGL             GET PRESERVED DATA LENGTH
         CR    R1,R0               SAVED DATA TRUNCATED?
         BNH   UNPKLOOP            NO
         LR    R1,R0               YES, REDUCE LENGTH
UNPKLOOP UNPK  0(3,R15),0(2,R14)   UNPACK DATA
         TR    0(2,R15),HEX-240    TRANSLATE DATA
         LA    R15,2(,R15)         ADJUST MESSAGE POINTER
         LA    R14,1(,R14)         ADJUST DATA POINTER
         BCT   R1,UNPKLOOP         SHUFFLE THROUGH DATA BYTES
         LA    R1,REPLY            POINT TO MESSAGE
         MVI   0(R15),X'7D'
         LA    R0,1(,R15)
         SR    R0,R1               GET MESSAGE LENGTH
         TPUT  (1),(0),R           DISPLAY DATA ABOUT INPUT DATA
         LA    R1,LPMSG            DISPLAY TRAPDOOR EXIT PLAN
         LA    R0,LPMSGLEN
         TPUT  (1),(0),R
         B     QUERYGET            SEE IF NEXT I/O IS THE GO
*
*   PARSE QUERY RESPONSE
*
QUERYGOT LA    R15,REPLY+1         POINT PAST AID
         SLR   R0,R0               CLEAR FOR INSERT
         BCT   R1,QUERYPRS         DECREMENT FOR AID
         B     QUERYX              ONLY AID WAS RETURNED
QUERYPRS CLI   2(R15),X'81'        QUERY REPLY ID?
         BNE   QUERYX              NO, GIVE UP
         CLI   3(R15),X'A6'        QUERY IMPLICIT PARTITION ID?
         BE    SETSIZES            YES
         ICM   R0,3,0(R15)         NO, GET SUB-FIELD LENGTH
         BZ    QUERYX              AVOID INFINITE LOOP
         ALR   R15,R0              POINT TO NEXT SUB-FIELD
         SR    R1,R0               ADJUST REMAINING LENGTH
         BP    QUERYPRS            CONTINUE PARSING OF REPLY
         B     QUERYX              REQUIRED SUB-FIELD NOT FOUND
*
*   ASCERTAIN PRIMARY AND ALTERNATE SCREEN SIZE DIMENSIONS
*
SETSIZES CLI   6(R15),11           EXPECTED PARAMETER LENGTH?
         BNE   QUERYX              NO, GIVE UP
         CLI   7(R15),1            IMPLICIT PARTITION SIZES?
         BNE   QUERYX              NO, GIVE UP
         ICM   R0,4,10(R15)        GET WIDTH OF PRIMARY SIZE
         ICM   R0,8,12(R15)        GET DEPTH OF PRIMARY SIZE
         ICM   R0,1,14(R15)        GET WIDTH OF ALTERNATE SIZE
         ICM   R0,2,16(R15)        GET DEPTH OF ALTERNATE SIZE
         ST    R0,TSBPRMR          SET INTO TSB
         CLI   TSBALTR,24          AT LEAST 24 ROWS?
         BL    QUERYOK             NO, MAKE NO MORE CHANGES
         CLI   TSBALTC,80          AT LEAST 80 COLUMNS?
         BL    QUERYOK             NO, MAKE NO MORE CHANGES
         STCM  R0,1,TSBLNSZ        SET NEW SCREEN COLUMN COUNT
         STCM  R0,2,TSBLNNO        SET NEW SCREEN LINE COUNT
         OI    TVWAFLG1,TVWAXSCD   EXAMINE SCREEN DIMENSIONS
QUERYOK  OI    TSBFLG5,TSBQRY      SET THE QUERY BIT ON
*
*   CLEAR THE TERMINAL READY FOR LINE MODE USAGE
*
QUERYX   STLINENO LINE=1,MODE=OFF  CLEAR AND FORMAT THE SCREEN
*                                        AND RESET NOEDIT MODE
         OI    TVWAFLG4,TVWAKBDL   REMEMBER KEYBOARD IS LOCKED
         NI    TVWAFLG1,255-TVWAULK  AND NO UNLOCK REQUEST YET
*
*   RELEASE WORKING STORAGE AND EXIT
*
         LR    R1,R13              POINT TO WORKING STORAGE
         L     R0,@SIZDATD         GET WORKING STORAGE SIZE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE WORKING STORAGE
FASTEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
@DATA    DS    0H
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
TPG      TPG   QUERY,L'QUERY,NOEDIT,WAIT,HOLD,MF=L
TPGL     EQU   *-TPG
*              ESCAPE+ERASE/WRITE+WCC+SBA(LAST)+SF(INLO)+SBA(HOME)+IC
RESETAID DC    X'27F5C3115D7F1D4011404013'
QUERY    DC    X'F3000501FF02'    WRITE STRUCTURED FIELD + QUERY
LPMSG    DC    C'IF LOOPING USE PF3/15 TO END'
LPMSGLEN EQU   *-LPMSG
RCMSG    DC    C'IKTXLOG TGET RC=X'''
RCMSGRC  EQU   *-RCMSG
         DC    C'XX'',LEN=X'''
RCMSGLN  EQU   *-RCMSG
         DC    C'XXXX'',DATA=X'''
RCMSGLEN EQU   *-RCMSG
         LTORG
         DS    0D
HEX      DC    CL16'0123456789ABCDEF'
@PATCH   DC    10D'0'
@ENDDATA DS    0D                 END OF CSECT
@DATD    DSECT
         DS    18F
TPGPL    DS    XL(TPGL)
REPLY    DS    0F
         ORG   @DATD+4096
         DS    0D
REPLYLEN EQU   *-REPLY
@ENDDATD EQU   *
         SPACE
R0       EQU   0                   EQUATES FOR REGISTERS 0-15
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         PRINT NOGEN
         IHAPSA
         IHAASCB
         IKJTSB EXT=YES
         IKTTVWA
         SPACE
         END   IKTXLOG
/*
//*
//STEP09  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKTXLOG('ZP60009')
++MOD(IKT3270I) DISTLIB(AOST3).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP10  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '*** IKT3270I: INPUT DATA HANDLING ROUTINE ***          *
                        '
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
IKT3270I CSECT
         USING IKT3270I,R15
         B     @PROLOG
         DC    AL1(16)
         DC    CL16'IKT3270I  84.045'
         DROP  R15                         IKT3270I
@PROLOG  STM   R14,R12,12(R13)             SAVE REGS
         BALR  R5,0                        ADDRESS SET
         USING *,R5
         USING PSA,0
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R7,TSBEXTNT-TSB(,R12)
         L     R9,TSBXTVWA-TSBX(,R7)
         USING TVWA,R9
         L     R6,TVWATIMW                 TIM WORK AREA ADDRESS
         CLI   TSBPRMR-TSB(R12),0          FIELD POPULATED?     ZP60009
         BE    ROWSOKAY                    NO, PHYSLNNO OKAY    ZP60009
         MVC   2319(1,R6),TSBPRMR-TSB(R12) YES, USE REAL DEPTH  ZP60009
         TM    TVWAFLG6,X'01'              CHECK TVWAALTS       ZP60009
         BNO   ROWSOKAY                    USE PRIMARY DEPTH    ZP60009
         MVC   2319(1,R6),TSBALTR-TSB(R12) USE ALTERNATE DEPTH  ZP60009
ROWSOKAY EQU   *                           PHYSLNNO NOW SET     ZP60009
*  TIMLNNO = MAX(2,MIN(TSBLNNO,PHYSLNNO));                 /*@ZA13627*/
         SLR   R8,R8
         IC    R8,TSBLNNO-TSB(,R12)
         L     R7,2316(,R6)                PHYSLNNO
         CR    R8,R7
         BNH   A000042
         LR    R8,R7
A000042  LA    R7,2
         CR    R8,R7
         BNL   A00004E
         LR    R8,R7
A00004E  ST    R8,2312(,R6)                TIMLNNO
         TM    4(R12),X'08'
         BNO   A000096
         LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         CLC   48(4,R8),FW1500
         BH    A000076
         ALR   R12,R6
         TM    18(R12),X'C0'
         BZ    A00007E
A000076  OI    448(R6),X'02'
         B     A000096
A00007E  OI    448(R6),X'40'
         NI    448(R6),X'FD'
         NI    TVWAFLG4,255-TVWANOFB
         NI    TVWAFLG2,255-TVWABKMG
         MVI   TVWATQL1,0
         MVI   TVWATQL2,0
A000096  TM    TVWAFLG2,TVWAPGN
         BNZ   A0002D4
         LA    R12,2348
         ALR   R12,R6
         TM    16(R12),X'08'
         BNO   A0000B0
         BAL   R14,ASCITRAN                PERFORM
*        /************************************************************/
*        /*  THE FOLLOWING CODE CHECKS THE AVAILIBILITY OF A USER    */
*        /*  EXIT. IF THE ADDRESS OF IKTIDSX2 IS NOT ZERO, THEN THE  */
*        /*  USER IS GIVEN CONTROL WITH REG0 CONTAINING THE ADDRESS  */
*        /*  OF THE DATA TO BE SCANNED AND REG1 CONTAINING THE       */
*        /*  LENGTH OF THAT DATA.                                    */
*        /************************************************************/
A0000B0  L     R12,IKTIDSX2
         LTR   R12,R12
         BZ    A0000F2
         LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R0,32(,R8)
         LA    R8,1500
         ALR   R12,R6
         C     R8,48(,R12)
         BNL   A0000DA
         LR    R1,R8
         B     A0000E4
A0000DA  LA    R12,2348
         ALR   R12,R6
         L     R1,48(,R12)
A0000E4  LR    R2,R13
         LA    R13,2216(,R6)
         L     R15,IKTIDSX2
         BALR  R14,R15                     STD LINKAGE
         LR    R13,R2
*/********************************************************************/
*/*    AT THIS POINT THE INPUT DATA HAS BEEN TRANSLATED IF NECESSARY */
*/*    NOW THE DATA WILL BE SCANNED FOR INPUT LINE DELIMITERS.       */
*/*            THE DATA WILL BE BROKEN INTO LINE SEGMENTS AND        */
*/*    PLACED ON THE INPUT QUEUE.                                    */
*/********************************************************************/
*
*        /************************************************************/
*        /* THIS CODE WILL HELP TOM IN THE PLACEMENT OF THE NEXT     */
*        /* ATTRIBUTE BYTE WHEN VTIOC IS DOING THE SCREEN MANAGEMENT */
*        /************************************************************/
A0000F2  TM    448(R6),X'02'
         BNZ   A000106
         TM    TVWAFLG5,TVWASCAN
         BNO   A000106
         OI    TVWAFLG4,TVWADARC
A000106  LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R4,32(,R8)
         SLR   R8,R8
         ST    R8,2136(,R6)
         ST    R8,2144(,R6)
         LA    R8,1500
         ALR   R12,R6
         C     R8,48(,R12)
         BNL   A000132
         ST    R8,2120(,R6)
         B     A000140
A000132  LA    R12,2348
         ALR   R12,R6
         L     R12,48(,R12)
         ST    R12,2120(,R6)
A000140  TM    448(R6),X'02'
         BNZ   A00014C
         BAL   R14,HEADPROC                PERFORM
         EJECT
*      /**************************************************************/
*      /*  NOW THE DATA WILL BE SCANNED FOR THE LINE LENGTH          */
*      /*  WHEN THE LINE LENGTH IS FOUND, THE DATA WILL BE PUT ON    */
*      /*  THE INPUT QUEUE PRECEDED BY THE HEADER INFORMATION.       */
*      /*  SINCE DATA CAN ONLY BE SCANNED IN 256 BYTE LENGTHS,       */
*      /*  THIS VALUE WILL BE USED WHEN THE REMAINING DATA EXCEEDS   */
*      /*  THE 256 BYTE MAXIMUM.                                     */
*      /**************************************************************/
A00014C  NI    448(R6),X'7F'
         SLR   R1,R1
         ST    R4,2140(,R6)
A000156  LA    R12,256
         L     R8,2120(,R6)
         SL    R8,2136(,R6)
         CR    R8,R12
         BNH   A000170
         ST    R12,2148(,R6)
         B     A00017C
A000170  L     R12,2120(,R6)
         SL    R12,2136(,R6)
         ST    R12,2148(,R6)
A00017C  L     R12,2148(,R6)
         LTR   R12,R12
         BNP   NODELIM
         L     R12,PSAAOLD                 PSA REFERENCE        ZP60009
         L     R12,ASCBTSB-ASCB(,R12)                           ZP60009
         TM    TSBFLG5-TSB(R12),TSBNEDIT   IN NOEDIT MODE?      ZP60009
         BO    NODELIM                     YES, FIELD MARK OKAY ZP60009
         L     R3,2148(,R6)
         BCTR  R3,0
         EX    R3,A00098A
         BC    8,NODELIM
         OI    448(R6),X'80'
         LR    R12,R1
         SLR   R12,R4
         LR    R8,R12
         AL    R8,2144(,R6)
         ST    R8,2144(,R6)
         ST    R12,2148(,R6)
         B     DELIM
NODELIM  L     R12,2148(,R6)
         AL    R12,2144(,R6)
         ST    R12,2144(,R6)
DELIM    L     R12,2148(,R6)
         ALR   R4,R12
         AL    R12,2136(,R6)
         ST    R12,2136(,R6)
         TM    448(R6),X'80'
         BO    A0001DA
         CLC   2136(4,R6),2120(R6)
         BNE   A000156
*         /***********************************************************/
*         /* THIS MARKS THE END OF THE DO WHILE TO SCAN FOR DELIMITER*/
*         /* EITHER A DELIMITER WAS FOUND OR ALL THE DATA IN THE     */
*         /* BUFFER WAS PROCESSED.                                   */
*         /***********************************************************/
A0001DA  TM    448(R6),X'80'
         BNO   A00023C
         TM    437(R6),X'20'
         BNO   A0001EE
         OI    448(R6),X'01'
A0001EE  OI    437(R6),X'80'
         NI    437(R6),X'DF'
         TM    448(R6),X'01'
         BNZ   A000214
         LH    R12,450(,R6)
         LR    R8,R12
         AL    R8,2144(,R6)
         STH   R8,434(,R6)
         STC   R12,438(,R6)
         B     A000220
A000214  L     R12,2144(,R6)
         STH   R12,434(,R6)
         MVI   438(R6),X'00'
A000220  CLI   0(R4),X'1E'
         BNE   A000234
         L     R12,PSAAOLD                 PSA REFERENCE        ZP60009
         L     R12,ASCBTSB-ASCB(,R12)                           ZP60009
         TM    TSBFLG5-TSB(R12),TSBNEDIT   IN NOEDIT MODE?      ZP60009
         BO    A000234                     YES, FIELD MARK OKAY ZP60009
         LA    R12,1
         AL    R12,2136(,R6)
         ST    R12,2136(,R6)
A000234  BAL   R14,ADDEL                   PERFORM
         B     A0002B0
A00023C  TM    437(R6),X'20'
         BNO   A000248
         OI    448(R6),X'01'
A000248  TM    448(R6),X'01'
         BNZ   A000266
         LH    R12,450(,R6)
         LR    R8,R12
         AL    R8,2144(,R6)
         STH   R8,434(,R6)
         STC   R12,438(,R6)
         B     A000272
A000266  MVI   438(R6),X'00'
         L     R12,2144(,R6)
         STH   R12,434(,R6)
A000272  LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R8,48(,R8)
         C     R8,2120(,R6)
         BH    A000290
         ALR   R12,R6
         TM    18(R12),X'C0'
         BZ    A0002A4
A000290  L     R12,2120(,R6)
         ST    R12,2136(,R6)
         OI    437(R6),X'20'
         NI    437(R6),X'7F'
         B     A0002AC
A0002A4  OI    437(R6),X'80'
         NI    437(R6),X'DF'
A0002AC  BAL   R14,ADDEL                   PERFORM
A0002B0  LA    R12,2348
         ALR   R12,R6
         L     R4,32(,R12)
         AL    R4,2136(,R6)
         CLC   2136(4,R6),2120(R6)
         BE    A0002D0
         TM    448(R6),X'10'
         BNO   A00014C
A0002D0  B     A00033C
A0002D4  OI    448(R6),X'10'
         LA    R12,2348
         ALR   R12,R6
         L     R12,48(,R12)
         LA    R8,1500
         CR    R12,R8
         BNH   A0002EE
         LR    R12,R8
A0002EE  ST    R12,2120(,R6)
         MVI   432(R6),X'01'
         MVI   438(R6),X'00'
         OI    437(R6),X'80'
         NI    437(R6),X'DF'
         MVC   434(2,R6),HW1
         LR    R2,R13
         LA    R12,428(,R6)
         ST    R12,404(,R6)
         LA    R1,404(,R6)
         LA    R13,2216(,R6)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASIQM-TCAST(,R12)
         BALR  R14,R15                     STD LINKAGE
         LR    R13,R2
         CLI   433(R6),X'01'
         BNE   A00033C
         L     R12,428(,R6)
         MVC   0(1,R12),TVWARSHW
*      /**************************************************************/
*      /*  AT THIS POINT THE INPUT DATA STREAM HAS BEEN SCANNED AND  */
*      /*  EITHER ALL THE AVAILABLE DATA HAS BEEN PUT ON THE INPUT Q */
*      /*  OR WE HAVE FALLEN THROUGH THE PROCESS LOOP DUE TO AN ERROR*/
*      /*  THE FIRST CHECK MADE IS TO DETERMINE IF ALL THE PROCESSING*/
*      /*  WAS SUCCESSFUL.                                           */
*      /**************************************************************/
A00033C  TM    448(R6),X'10'
         BNZ   A00038C
         LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R8,48(,R8)
         C     R8,2120(,R6)
         BH    A000362
         ALR   R12,R6
         TM    18(R12),X'C0'
         BZ    A00036A
A000362  OI    448(R6),X'02'
         B     A0003CA
A00036A  NI    448(R6),X'FD'
         NI    TVWAFLG4,255-TVWANOFB
*               IF TVWALNCT > TIMLNNO THEN                 /*@ZA13627*/
         SLR   R12,R12
         IC    R12,TVWALNCT
         C     R12,2312(,R6)
         BNH   A000388
         MVI   TVWALNCT,1                  TVWALNCT=1
         OI    TVWAFLG4,TVWAFMSC
A000388  B     A0003CA
A00038C  LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R8,48(,R8)
         C     R8,2120(,R6)
         BH    A0003AA
         ALR   R12,R6
         TM    18(R12),X'C0'
         BZ    A0003B2
A0003AA  OI    448(R6),X'02'
         B     A0003B6
A0003B2  NI    448(R6),X'FD'
A0003B6  NI    TVWAFLG4,255-TVWANOFB
         NI    TVWAFLG2,255-TVWABKMG
         MVI   TVWATQL1,0
         MVI   TVWATQL2,0
         OI    448(R6),X'40'
A0003CA  TM    448(R6),X'10'
         BNZ   A0003DA
         TM    448(R6),X'02'
         BO    A000414
A0003DA  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    41(R12),X'40'
         BNO   A000414
         LR    R2,R13
         LA    R0,8
         L     R1,A0009CC
         LA    R13,2048
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTABEND-CVT(,R12)
         L     R15,SCVTSTAT-SCVTSECT(,R12)
         BALR  R14,R15                     STD LINKAGE
         LR    R13,R2
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    41(R12),X'BF'
A000414  LM    R14,R12,12(R13)             RESTORE REGS
         BR    R14                         EXIT
         EJECT
*         /***********************************************************/
*         /* THE FOLLOWING CODE WILL CONVERT THE DATA IN THE INPUT   */
*         /* BUFFER FROM ASCII TO EBCDIC. THE LENGTH OF THE DATA     */
*         /* TO BE CONVERTED CAN NOT EXCEED THE BUFFER SIZE, EVEN    */
*         /* THOUGH RPLBUFL MAY INDICATE THAT ADDITIONAL DATA IS     */
*         /* WAITING TO BE RECEIVED. THE DATA WILL BE CONVERTED IN   */
*         /* 256 BYTE INCREMENTS UNTIL REMAINING DATA IS LESS THAN   */
*         /* 256 BYTES.                                              */
*         /* COUNT WILL CONTAIN THE LENGTH TO  BE TRANSLATED         */
*         /* VALUE WILL BE USED TO SUBSTRING THE TRANSLATE INSTRUCT  */
*         /***********************************************************/
ASCITRAN LA    R15,2348
         ALR   R15,R6
         L     R15,48(,R15)
         C     R15,FW1500
         BH    A000434
         ST    R15,2120(,R6)
         B     A00043A
A000434  MVC   2120(4,R6),FW1500
A00043A  NI    448(R6),X'FB'
         LA    R15,2348
         ALR   R15,R6
         L     R4,32(,R15)
         B     A000486
A00044C  LA    R15,256
         L     R12,2120(,R6)
         CR    R12,R15
         BNH   A000468
         ST    R15,2148(,R6)
         SLR   R12,R15
         ST    R12,2120(,R6)
         B     A000474
A000468  L     R15,2120(,R6)
         ST    R15,2148(,R6)
         OI    448(R6),X'04'
A000474  L     R15,2148(,R6)
         BCTR  R15,0
         L     R12,TVWAATBI
         EX    R15,A000990
         AL    R4,2148(,R6)
A000486  TM    448(R6),X'04'
         BZ    A00044C
         BR    R14                         EXIT ASCITRAN
         EJECT
*         /***********************************************************/
*         /* THE SAME PROCESS THAT WAS FOLLOWED FOR ASCII TRANSLATION*/
*         /* WILL BE FOLLOWED FOR USER TABLE TRANSLATION             */
*         /***********************************************************/
USERTRAN L     R15,2320(,R6)
         L     R3,2140(,R6)
         ALR   R3,R15
         LCR   R15,R15
         AL    R15,2144(,R6)
         ST    R15,2124(,R6)
         NI    448(R6),X'FB'
         LTR   R15,R15
         BP    A0004B2
         OI    448(R6),X'04'
A0004B2  B     A000556
A0004B6  SLR   R1,R1
         SLR   R2,R2
         LA    R15,256
         L     R12,2124(,R6)
         CR    R12,R15
         BNH   A0004D6
         ST    R15,2148(,R6)
         SLR   R12,R15
         ST    R12,2124(,R6)
         B     A0004E4
A0004D6  L     R15,2124(,R6)
         ST    R15,2148(,R6)
         SLR   R15,R15
         ST    R15,2124(,R6)
A0004E4  L     R15,2148(,R6)
         BCTR  R15,0
         EX    R15,A000996
         LTR   R2,R2
         BZ    A00050C
         SLR   R1,R3
         LR    R15,R1
         ALR   R15,R2
         LCR   R15,R15
         AL    R15,2148(,R6)
         AL    R15,2124(,R6)
         ST    R15,2124(,R6)
         ST    R1,2148(,R6)
A00050C  SLR   R15,R15
         L     R12,2124(,R6)
         CR    R12,R15
         BH    A000526
         LPR   R12,R12
         ST    R12,2320(,R6)
         ST    R15,2124(,R6)
         OI    448(R6),X'04'
A000526  L     R15,2148(,R6)
         LTR   R15,R15
         BZ    A00053E
         L     R15,2148(,R6)
         BCTR  R15,0
         L     R12,TVWATABI
         EX    R15,A00099C
A00053E  LTR   R2,R2
         BNZ   A00054C
         AL    R3,2148(,R6)
         B     A000556
A00054C  LR    R15,R3
         AL    R15,2148(,R6)
         ALR   R15,R2
         LR    R3,R15
A000556  TM    448(R6),X'04'
         BZ    A0004B6
         BR    R14                         EXIT USERTRAN
         EJECT
*        /************************************************************/
*        /*  CHECK THAT THIS WAS THE PRIMARY RECEIVE TO GET THE DATA */
*        /*  IF REC2FLG=1 THEN A SUBSEQUENT RECEIVE WAS NEEDED       */
*        /*  TO RECEIVE ALL THE DATA FROM THE TERMINAL.              */
*        /************************************************************/
HEADPROC SLR   R15,R15
         STH   R15,450(,R6)
         L     R15,2120(,R6)
         C     R15,FW3
         BNL   A00058C
         LR    R12,R15
         BCTR  R12,0
         EX    R12,A0009A2
         STH   R15,450(,R6)
         ALR   R4,R15
         AL    R15,2136(,R6)
         ST    R15,2136(,R6)
         B     A0005AA
A00058C  MVC   452(3,R6),0(R4)
         LA    R15,3
         LH    R12,450(,R6)
         ALR   R12,R15
         STH   R12,450(,R6)
         ALR   R4,R15
         AL    R15,2136(,R6)
         ST    R15,2136(,R6)
A0005AA  L     R15,2136(,R6)
         C     R15,2120(,R6)
         BNL   A0005DA
         CLI   0(R4),X'11'
         BNE   A0005DA
         MVC   455(3,R6),0(R4)
         LA    R12,3
         LH    R8,450(,R6)
         ALR   R8,R12
         STH   R8,450(,R6)
         ALR   R4,R12
         ALR   R15,R12
         ST    R15,2136(,R6)
A0005DA  BR    R14                         EXIT HEADPROC
         EJECT
*/********************************************************************/
*/*    THE ADDEL ROUTINE IS CALLED TO PLACE INCOMING DATA FROM THE   */
*/*    TERMINAL ON THE INPUT QUEUE, ONE LINE AT A TIME.              */
*/*    NOADDEL IS CHECKED TO SEE IF THE DATA SHOULD BE ADDED TO THE  */
*/*    QUEUE, LINE PROMPTING IS HANDLED, AND THE RETURN CODE FROM    */
*/*    THE QUEUE MANAGER IS CHECKED TO ASSURE A SUCCESSFUL ADD.      */
*/********************************************************************/
ADDEL    ST    R14,2288(,R6)
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    TSBFLG2-TSB(R12),TSBAUTON
         BNO   A000640
         LH    R8,434(,R6)
         CH    R8,450(,R6)
         BH    A00061C
         TM    437(R6),X'20'
         BNZ   A00061C
         TM    448(R6),X'01'
         BNZ   A00061C
         NI    437(R6),X'BF'
         NI    16(R12),X'BF'
         NI    TVWAFLG1,255-TVWAULK
         B     A000640
A00061C  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    16(R12),X'10'
         BNO   A00063C
         TM    437(R6),X'20'
         BNZ   A00063C
         OI    437(R6),X'40'
         B     A000640
A00063C  NI    437(R6),X'BF'
A000640  MVI   432(R6),X'01'
         LR    R2,R13
         LA    R12,428(,R6)
         ST    R12,404(,R6)
         LA    R1,404(,R6)
         LA    R13,2216(,R6)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASIQM-TCAST(,R12)
         BALR  R14,R15                     STD LINKAGE
         LR    R13,R2
         NI    448(R6),X'FE'
         CLI   433(R6),X'01'
         BNE   A00071C
         CLI   438(R6),X'00'
         BNH   A00068A
         L     R12,428(,R6)
         SLR   R8,R8
         IC    R8,438(,R6)
         BCTR  R8,0
         EX    R8,A0009A8
A00068A  L     R12,2144(,R6)
         LTR   R12,R12
         BNP   A0006B6
         TM    TVWAFLG3,TVWATRAN
         BNO   A0006A0
         BAL   R14,USERTRAN                PERFORM
A0006A0  SLR   R0,R0
         IC    R0,438(,R6)
         AL    R0,428(,R6)
         L     R1,2144(,R6)
         L     R2,2140(,R6)
         LR    R3,R1
         MVCL  R0,R2
A0006B6  NI    448(R6),X'EF'
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    16(R12),X'40'
         BNO   A0006FA
         TM    16(R12),X'10'
         BNO   A0006EE
         TM    437(R6),X'20'
         BNZ   A0006EA
         L     R8,48(,R12)
         AL    R8,52(,R12)
         ST    R8,48(,R12)
         OI    16(R12),X'04'
A0006EA  B     A0006FA
A0006EE  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         OI    16(R12),X'04'
A0006FA  TM    TVWAFLG5,TVWAFSM
         BNO   A000714
         TM    TVWAFLG5,TVWAWO
         BNZ   A000714
         SLR   R12,R12
         ST    R12,2144(,R6)
         B     A000724
A000714  BAL   R14,LINECNT                 PERFORM
         B     A000724
A00071C  OI    448(R6),X'10'
         OI    TVWAFLG2,TVWAERMG
A000724  L     R14,2288(,R6)
         BR    R14                         EXIT ADDEL
         EJECT
* /*******************************************************************/
* /*  LINECNT IS THE ROUTINE THAT WILL RECEIVE CONTROL WHEN FULL     */
* /*  SCREEN MODE IS NOT IN EFFECT. THE INPUT LINES WILL BE INCRE-   */
* /*  MENTED AS DATA IS RECEIVED. IF THE BYPASS FLAG IS NOT ON, THE  */
* /*  LINE COUNT IS CHECKED AND WHEN WE HAVE REACHED THE LAST TWO    */
* /*  LINES OF DATA ON THE SCREEN, THE DATA WILL BE SAVED AND FLASHED*/
* /*  BACK TO THE TERMINAL USER, EXCEPT IN FULLSCREEN  PROCESSING    */
* /*******************************************************************/
LINECNT  L     R15,PSAAOLD                 PSA REFERENCE
         L     R15,ASCBTSB-ASCB(,R15)
         L     R15,TSBEXTNT-TSB(,R15)
         CLC   74(2,R15),HW480
         BNE   A00074A
         MVC   2128(4,R6),FW40
         B     A000750
A00074A  MVC   2128(4,R6),FW80
         CLI   TSBPRMC-TSB(R15),0          FIELD POPULATED?     ZP60009
         BE    A000750                     NO                   ZP60009
         MVC   2131(1,R6),TSBPRMC-TSB(R15) YES, USE REAL WIDTH  ZP60009
         TM    TVWAFLG6,X'01'              CHECK TVWAALTS       ZP60009
         BNO   A000750                     USE PRIMARY WIDTH    ZP60009
         MVC   2131(1,R6),TSBALTC-TSB(R15) USE ALTERNATE WIDTH  ZP60009
*  /******************************************************************/
*  /*  THE FOLLOWING CODE WILL PROCESS THE DATA IF THE LINE NUMBER   */
*  /*  IS LESS THAN THE NEXT TO LAST LINE ON THE SCREEN OR IF THE    */
*  /*  BYPASS FLAG IS ON.                                            */
*  /******************************************************************/
*
*    IF TVWALNCT < (TIMLNNO-1)   TVWANOFB='1'B   DATALINE=0
*       TVWAFLSC='1'B THEN                                 /*@ZA13627*/
A000750  L     R15,2312(,R6)
         BCTR  R15,0
         SLR   R12,R12
         IC    R12,TVWALNCT
         CR    R15,R12
         BH    A00077C
         TM    TVWAFLG4,TVWANOFB
         BO    A00077C
         L     R15,2144(,R6)
         LTR   R15,R15
         BZ    A00077C
         TM    TVWAFLG4,TVWAFLSC
         BNO   A000812
A00077C  L     R15,PSAAOLD                 PSA REFERENCE
         L     R15,ASCBTSB-ASCB(,R15)
         TM    16(R15),X'04'
         BNZ   A000792
         SLR   R15,R15
         STH   R15,TVWANCNT
A000792  L     R15,2144(,R6)
         L     R12,2132(,R6)
         LR    R8,R15
         ALR   R8,R12
         LH    R7,TVWANCNT
         ALR   R8,R7
         L     R11,2128(,R6)
         CR    R8,R11
         BNH   A0007DE
         ALR   R15,R7
         SLR   R11,R12
         SLR   R15,R11
         ST    R15,2144(,R6)
         AL    R11,2140(,R6)
         ST    R11,2140(,R6)
         LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
         SLR   R15,R15
         ST    R15,2132(,R6)
         STH   R15,TVWANCNT
         B     A000812
A0007DE  TM    437(R6),X'20'
         BNZ   A000800
         SLR   R15,R15
         ST    R15,2132(,R6)
         LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
         B     A00080C
A000800  L     R15,2132(,R6)
         AL    R15,2144(,R6)
         ST    R15,2132(,R6)
A00080C  SLR   R15,R15
         ST    R15,2144(,R6)
*        /************************************************************/
*        /*  AT THIS POINT A CHECK IS MADE TO SEE IF WE ARE PROCESS- */
*        /*  ING THE NEXT TO LAST LINE OF THE SCREEN AND FLASHBACK   */
*        /*  IS PERMITTED. THE INPUT DATA WILL BE SAVED IN THE FIRST */
*        /*  FLASHBACK BUFFER TO BE RETURNED TO THE TERMINAL USER.   */
*        /************************************************************/
*
*        IF TVWALNCT=TIMLNNO-1 & TVWANOFB='0'B & DATALINE>0 THEN
A000812  L     R15,2312(,R6)
         BCTR  R15,0
         SLR   R12,R12
         IC    R12,TVWALNCT
         CR    R15,R12
         BNE   A000896
         TM    TVWAFLG4,TVWANOFB
         BNZ   A000896
         L     R15,2144(,R6)
         LTR   R15,R15
         BNP   A000896
         L     R12,2128(,R6)
         CR    R15,R12
         BNH   A000848
         ST    R12,2148(,R6)
         B     A000850
A000848  L     R15,2144(,R6)
         ST    R15,2148(,R6)
A000850  L     R15,2148(,R6)
         LR    R12,R15
         BCTR  R12,0
         L     R8,2140(,R6)
         EX    R12,A0009AE
         ALR   R8,R15
         ST    R8,2140(,R6)
         L     R12,2144(,R6)
         SLR   R12,R15
         ST    R12,2144(,R6)
         STC   R15,TVWATQL1
         TM    437(R6),X'20'
         BZ    A000882
         LTR   R12,R12
         BNP   A000896
A000882  LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
         OI    TVWAFLG2,TVWABKMG
*        /************************************************************/
*        /*  THE NEXT BLOCK OF CODE WILL BUILD THE DATA FLASHBACK    */
*        /*  WHEN THE LINECOUNT EQUALS OR EXCEEDS THE LAST SCREEN    */
*        /*  LINE AND THE BYPASS FLAG IS NOT SET ON.                 */
*        /************************************************************/
A000896  SLR   R15,R15
         IC    R15,TVWALNCT
         C     R15,2312(,R6)
         BL    A00096E
         TM    TVWAFLG4,TVWANOFB
         BNZ   A00096E
         L     R15,2144(,R6)
         LTR   R15,R15
         BNP   A00096E
*            /********************************************************/
*            /* ALL FOLLOWING CONDITIONS INDICATE MORE THAN 1 LINE   */
*            /* WILL BE FLASHED BACK TO THE USER.                    */
*            /********************************************************/
         C     R15,2128(,R6)
         BH    A0008D2
         L     R15,2136(,R6)
         C     R15,2120(,R6)
         BL    A0008D2
         TM    437(R6),X'20'
         BNO   A000940
A0008D2  L     R15,2128(,R6)
         C     R15,2144(,R6)
         BNL   A0008E6
         ST    R15,2148(,R6)
         B     A0008EE
A0008E6  L     R15,2144(,R6)
         ST    R15,2148(,R6)
A0008EE  L     R15,2148(,R6)
         LR    R12,R15
         BCTR  R12,0
         L     R8,2140(,R6)
         EX    R12,A0009AE
         L     R12,2144(,R6)
         SLR   R12,R15
         ST    R12,2144(,R6)
         STC   R15,TVWATQL1
         ALR   R8,R15
         ST    R8,2140(,R6)
         TM    437(R6),X'20'
         BZ    A000920
         LTR   R12,R12
         BNP   A000938
A000920  LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
         OI    TVWAFLG2,TVWABKMG
         B     A00096E
A000938  NI    TVWAFLG2,255-TVWABKMG
         B     A00096E
A000940  L     R15,2144(,R6)
         LR    R12,R15
         BCTR  R12,0
         L     R8,2140(,R6)
         EX    R12,A0009B4
         STC   R15,TVWATQL2
         OI    TVWAFLG2,TVWABKMG
         SLR   R15,R15
         ST    R15,2144(,R6)
         LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
A00096E  L     R15,2144(,R6)
         LTR   R15,R15
         BP    A000750
         TM    TVWAFLG2,TVWABKMG
         BNO   A000984
         OI    448(R6),X'40'
A000984  BR    R14                         EXIT LINECNT
HW1      DC    H'1'
HW480    DC    H'480'
A00098A  TRT   0(0,R4),NEWLINE
A000990  TR    0(0,R4),0(R12)
A000996  TRT   0(0,R3),SBATAB
A00099C  TR    0(0,R3),0(R12)
A0009A2  MVC   452(0,R6),0(R4)
A0009A8  MVC   0(0,R12),452(R6)
A0009AE  MVC   458(0,R6),0(R8)
A0009B4  MVC   538(0,R6),0(R8)
FW3      DC    F'3'
FW40     DC    F'40'
FW80     DC    F'80'
FW1500   DC    F'1500'
A0009CC  EQU   *
         DC    X'80000000'
         DC    X'07004190'
         DC    F'0'
IKTIDSX2 DC    V(IKTIDSX2)
         DC    X'00509509'
         DS    0D
NEWLINE  DC    30X'00'
         DC    X'1E'
         DC    225X'00'
SBATAB   DC    17AL1(0)
         DC    AL1(3)
         DC    12AL1(0)
         DC    AL1(1)
         DC    225AL1(0)
PATCH    DC    20F'0'
         EJECT
R0       EQU   0                           EQUATES FOR REGISTERS 0-15
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         PRINT NOGEN
         IHAPSA
         CVT   DSECT=YES
         IHASCVT
         IHAASCB
         IKJTSB EXT=YES
         IKTTVWA
         IKTTCAST
         END   IKT3270I,(C'PLS1824',0702,84045)
/*
//*
//STEP11  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKT3270I('ZP60009')
++MOD(IKT09412) DISTLIB(AOST3).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP12  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '********  IKT09412:  STFSMODE - TERMINAL CONTROL MACRO *
                 *******'
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*            TO HANDLE NOEDIT INPUT MODE AND RESHOW CODES UP TO 24
*
IKT09412 CSECT ,                                                   0001
@MAINENT BALR  R15,0                                               0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKT09412  82.015'                                 0001
         DROP  R15
@PROLOG  BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         USING TSB,R5
*        /************************************************************/
*        /* SAVE REGISTER 1.  CLEAR RESHOW KEY VALUE IN      @G58AK3B*/
*        /* RIGHT-MOST BYTE OF REGISTER 1.                   @G58AK3B*/
*        /************************************************************/
*        R6 = R1;                      /*SAVE REGISTER 1     @G58AK3B*/
         LR    R6,R1                                               0024
*        SRL(R1,SHIFT8);               /*SHIFT OUT RSHWKEY   @G58AK3B*/
         SLR   R7,R7                                               0025
         IC    R7,SHIFT8                                           0025
         SRL   R1,0(R7)                                            0025
*        SLL(R1,SHIFT8);               /*REALIGN REGISTER 1  @G58AK3B*/
*                                                                  0026
         SLL   R1,0(R7)                                            0026
*        /************************************************************/
*        /*                                                          */
*        /* SHIFT OUT PARAMETER BIT. IF REMAINING BITS ARE NOT ZERO  */
*        /* RETURN CODE 4 IS ISSUED.                                 */
*        /*                                                          */
*        /************************************************************/
*        SLDL(R0,SHIFT3);              /*SHIFT OUT PARM BITS  OZ11997*/
         SLR   R7,R7                                               0027
         IC    R7,SHIFT3                                           0027
         SLDL  R0,0(R7)                                            0027
*        IF R1 ^= 0 THEN               /*INVALID - RETURN CODE 4     */
         LTR   R1,R1                                               0028
         BZ    @RF00028                                            0028
*          R15 = CODE04;                                           0029
         LA    R15,4                                               0029
*        ELSE                                                      0030
*          /**********************************************************/
*          /*                                                        */
*          /* IF THE TERMINAL IS NOT A DISPLAY TERMINAL, THE INVALID */
*          /* TERMINAL IS NOTED WITH RETURN CODE 8                   */
*          /*                                                        */
*          /**********************************************************/
*          IF TSBDSPLY = '0'B THEN                                 0030
         B     @RC00028                                            0030
@RF00028 TM    TSBSTAT,TSBDSPLY                                    0030
         BNZ   @RF00030                                            0030
*            R15 = CODE08;                                         0031
         LA    R15,8                                               0031
*          ELSE                                                    0032
*            /********************************************************/
*            /*                                                      */
*            /* THE PARAMETER BIT IS RESTORED. FULLSCREEN MODE WILL  */
*            /* BE SET OFF OR ON BASED ON THE PARAMETER BIT.         */
*            /*                                                      */
*            /********************************************************/
*            DO;                                                   0032
         B     @RC00030                                            0032
@RF00030 DS    0H                                                  0033
*              SRDL(R0,SHIFT3);        /*RESTORE PARM BITS    OZ11997*/
         SLR   R7,R7                                               0033
         IC    R7,SHIFT3                                           0033
         SRDL  R0,0(R7)                                            0033
*              R15 = CODE00;           /*SET GOOD RETURN CODE        */
         SLR   R15,R15                                             0034
*              IF R1 >=0 THEN          /*LOOK FOR MODE OFF    OZ11997*/
         LTR   R1,R1                                               0035
         BM    @RF00035                                            0035
*                /****************************************************/
*                /*                                                  */
*                /* TURN OFF FULL SCREEN MODE INDICATORS             */
*                /*                                                  */
*                /****************************************************/
*                DO;                                               0036
         L     R7,TSBEXTNT                                         0037
         L     R7,TSBXTVWA-TSBX(,R7)                               0037
         USING TVWA,R7
         TM    TVWAFLG5,TVWAFSM            ALREADY IN LINE MODE?
         BNO   LINECTOK                    YES
         TM    TVWAFLG5,TVWAWO+TVWAFSW     LINE MODE MSG ON SHOW?
         BNZ   LINECTOK                    YES
*                  TVWALNCT = 1;       /*SET LINE COUNTER    @YM03603*/
         MVI   TVWALNCT,1                                          0037
*                  TVWAFSM = '0'B;     /*FULL SCREEN MODE BIT        */
*                  TVWAWO  = '0'B;     /*FULL SCREEN WRITTEN OVER    */
*                  TVWAFSW = '0'B;     /*FULL SCREEN WAITING         */
LINECTOK NI    TVWAFLG5,255-TVWAFSM-TVWAWO-TVWAFSW                 0040
         OI    TVWAFLG4,TVWAFMSC           FORMAT THE SCREEN
         NI    TSBFLG5,255-TSBNEDIT        RESET NOEDIT INPUT ZP60009
*                  /**************************************************/
*                  /* WHENEVER STFSMODE IS OFF, THE RESHOW   @G58AK3B*/
*                  /* KEY DEFAULTS TO THE PA2 KEY.           @G58AK3B*/
*                  /**************************************************/
*                  TVWARSHW = PA2;     /*RESET RESHOW KEY    @G58AK3B*/
         MVI   TVWARSHW,X'6E'                                      0041
*                END;                                              0042
*              ELSE                                                0043
*                /****************************************************/
*                /*                                                  */
*                /* TURN ON FULL SCREEN MODE INDICATOR               */
*                /*                                                  */
*                /****************************************************/
*                DO;                                               0043
         B     @RC00035                                            0043
@RF00035 DS    0H                                                  0044
*                  TVWAFSM = '1'B;     /*FULL SCREEN MODE BIT        */
         L     R7,TSBEXTNT                                         0044
         L     R7,TSBXTVWA-TSBX(,R7)                               0044
         OI    TVWAFLG5,TVWAFSM                                    0044
*                  SLL(R1,SHIFT1);     /*SHIFT OUT MODE BIT   OZ11997*/
         SLR   R4,R4                                               0045
         IC    R4,SHIFT1                                           0045
         SLL   R1,0(R4)                                            0045
*                  IF R1 < 0 THEN      /*LOOK FOR INITIAL CALLOZ11997*/
         LTR   R1,R1                                               0046
         BNM   @RF00046                                    ZP60009 0046
*                    TVWANFSP = '1'B;  /*SET NO FULL SCR PAGE OZ11997*/
         OI    TVWAFLG5,TVWANFSP                                   0047
*                  ELSE                                            0048
*                    TVWANFSP = '0'B;  /*ALLOW FULL SCR PAGE  OZ11997*/
         B     NOEDCHEK                                    ZP60009 0048
@RF00046 L     R7,TSBEXTNT                                         0048
         L     R7,TSBXTVWA-TSBX(,R7)                               0048
         NI    TVWAFLG5,255-TVWANFSP                               0048
*                  SLL(R1,SHIFT1);     /*SHIFT OUT INITIAL BIT       */
NOEDCHEK SLR   R4,R4                                       ZP60009
         IC    R4,SHIFT1                                   ZP60009
         SLL   R1,0(R4)                                    ZP60009
*                  IF R1 ^= 0 THEN     /*LOOK FOR NOEDIT CALL ZP60009*/
         LTR   R1,R1                                       ZP60009
         BZ    @RC00046                                    ZP60009
*                    TSBNEDIT = '1'B;  /*SET NOEDIT INPUT MODEZP60009*/
         OI    TSBFLG5,TSBNEDIT                            ZP60009
*                  /**************************************************/
*                  /* THE RSHWKEY VALUE IS FOUND IN THE      @G58AK3B*/
*                  /* RIGHT-MOST BYTE OF THE REGISTER.       @G58AK3B*/
*                  /**************************************************/
*                  SLL(R6,SHIFT24); /*ISOLATE RESHOW         @G58AK3B*/
@RC00046 SLR   R7,R7                                               0049
         IC    R7,SHIFT24                                          0049
         SLL   R6,0(R7)                                            0049
*                  SRL(R6,SHIFT24);    /*IN RIGHT-MOST BYTE  @G58AK3B*/
         SRL   R6,0(R7)                                            0050
*                  /**************************************************/
*                  /* WHEN STFSMODE IS ON AND A RSHWKEY HAS  @G58AK3B*/
*                  /* BEEN SPECIFIED, THE SPECIFIED RSHWKEY  @G58AK3B*/
*                  /* BECOMES THE RESHOW KEY.                @G58AK3B*/
*                  /* WHEN STFSMODE IS ON BUT RSHWKEY HAS    @G58AK3B*/
*                  /* NOT BEEN SPECIFIED, THE RESHOW KEY IS  @G58AK3B*/
*                  /* NOT CHANGED.                           @G58AK3B*/
*                  /**************************************************/
*                  IF RSHWKEY ^= ZERO  /*RSHWKEY SPECIFIED?  @ZM20757*/
*                  THEN                /*RSHWKEY SPECIFIED   @G58AK3B*/
         LTR   R6,R6                                               0051
         BZ    @RF00051                                            0051
         LA    R7,25                                       ZP60009
         CR    R6,R7
         BNL   @RF00051
*                    TVWARSHW = KEYS(RSHWKEY); /* SET RSHWKEY@G58AK3B*/
         L     R7,TSBEXTNT                                         0052
         L     R7,TSBXTVWA-TSBX(,R7)                               0052
         LA    R4,KEYS-1(R6)                                       0052
         MVC   TVWARSHW,0(R4)                                      0052
*                  ELSE;               /*RSHWKEY NOT SPECIFD @G58AK3B*/
@RF00051 DS    0H                                                  0054
*                END;                                              0054
*            END;                      /*END OF MODE PROCESSING      */
*        END IKT09412                                              0056
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJTSB  )                                        *
*/*%INCLUDE SYSLIB  (IKTTSBX )                                        *
*/*%INCLUDE SYSLIB  (IKTTVWA )                                        *
*;                                                                 0056
@EL00001 DS    0H                                                  0056
@EF00001 DS    0H                                                  0056
@ER00001 BR    R14                                                 0056
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IKT09412 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKT09412 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SHIFT1   DC    AL1(1)
SHIFT3   DC    AL1(3)
SHIFT8   DC    AL1(8)
SHIFT24  DC    AL1(24)
PATCH    DS    CL50
KEYS     DC    CL1'1'
         DC    CL1'2'
         DC    CL1'3'
         DC    CL1'4'
         DC    CL1'5'
         DC    CL1'6'
         DC    CL1'7'
         DC    CL1'8'
         DC    CL1'9'
         DC    CL1':'
         DC    CL1'#'
         DC    CL1'@'
         DC    CL1'A'                                           ZP60009
         DC    CL1'B'                                           ZP60009
         DC    CL1'C'                                           ZP60009
         DC    CL1'D'                                           ZP60009
         DC    CL1'E'                                           ZP60009
         DC    CL1'F'                                           ZP60009
         DC    CL1'G'                                           ZP60009
         DC    CL1'H'                                           ZP60009
         DC    CL1'I'                                           ZP60009
         DC    XL1'4A'                 CENT SIGN                ZP60009
         DC    CL1'.'                                           ZP60009
         DC    CL1'<'                                           ZP60009
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
@RC00030 EQU   @EL00001
@RC00028 EQU   @EL00001
@RC00035 EQU   @EL00001
@ENDDATA EQU   *
         PRINT NOGEN                                            ZP60009
         IKJTSB EXT=YES                                         ZP60009
         IKTTVWA                                                ZP60009
         PRINT GEN                                              ZP60009
         END   IKT09412,(C'PLS2204',0702,82015)
/*
//*
//STEP13  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKT09412('ZP60009')
++MOD(IKT09413) DISTLIB(AOST3).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP14  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '******** IKT09413:  STLINENO - TERMINAL CONTROL MACRO  *
                ********'
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
IKT09413 CSECT ,                                                   0001
@MAINENT BALR  R15,0                                               0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKT09413  83.318'                                 0001
         DROP  R15
@PROLOG  BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         USING TSB,R5
*        /************************************************************/
*        /*                                                          */
*        /* SHIFT OUT PARAMETERS FROM INPUT REG.  IF ANY REMAINING   */
*        /* BITS ARE NOT ZERO, ERROR RETURN CODE 4 IS ISSUED.        */
*        /*                                                          */
*        /************************************************************/
*        R2 = R1;                      /*MOVE PARM REG TO WORK REG   */
         LR    R2,R1                                               0025
*        SLL(R2,SHIFT1);               /*SHIFT OUT MODE BIT          */
         SLR   R10,R10                                             0026
         IC    R10,SHIFT1                                          0026
         SLL   R2,0(R10)                                           0026
*        SRL(R2,SHIFT9);               /*SHIFT OUT LINE NUMBER       */
         SLR   R10,R10                                             0027
         IC    R10,SHIFT9                                          0027
         SRL   R2,0(R10)                                           0027
*        IF R2 ^= 0 THEN                                           0028
         LTR   R2,R2                                               0028
         BZ    @RF00028                                            0028
*          R15 = CODE04;                                           0029
         LA    R15,4                                               0029
*        ELSE                                                      0030
*          /**********************************************************/
*          /*                                                        */
*          /* IF THE TERMINAL IN USE IS NOT A DISPLAY TERMINAL, THE  */
*          /* RETURN CODE IS SET TO 8.                               */
*          /*                                                        */
*          /**********************************************************/
*          IF TSBDSPLY = '0'B THEN                                 0030
         B     @RC00028                                            0030
@RF00028 TM    TSBSTAT,TSBDSPLY                                    0030
         BNZ   @RF00030                                            0030
*            R15 = CODE08;                                         0031
         LA    R15,8                                               0031
*          ELSE                                                    0032
*            /********************************************************/
*            /*                                                      */
*            /* THE LINE NUMBER SPECIFIED MUST BE GREATER THAN ZERO  */
*            /* AND NO LARGER THAN THE MAX ALLOWED NUMBER OF LINES   */
*            /* FOR THE TERMINAL IN USE. INVALID LINE NUMBER IS NOTED*/
*            /* WITH RETURN CODE 12.                                 */
*            /*                                                      */
*            /********************************************************/
*            DO;                                                   0032
         B     @RC00030                                            0032
@RF00030 DS    0H                                                  0033
*              R2 = R1;                /*SAVE PARM WITH MODE BIT   0033
*                                        INTACT.                     */
         LR    R2,R1                                               0033
*              SLL(R1,SHIFT1);         /*SHIFT OUT MODE BIT          */
         SLR   R10,R10                                             0034
         IC    R10,SHIFT1                                          0034
         SLL   R1,0(R10)                                           0034
*              SRL(R1,SHIFT1);         /*RESTORE LINE NUMBER         */
         SRL   R1,0(R10)                                           0035
*              IF R1 = 0 THEN          /*ZERO LINE NUMBER IS INVALID */
         LTR   R1,R1                                               0036
         BNZ   @RF00036                                            0036
*                R15 = CODE12;                                     0037
         LA    R15,12                                              0037
*              ELSE                                                0038
*                /****************************************************/
*                /*                                                  */
*                /* IF LINE NUMBER IS NOT TOO LARGE, LINNOPROC IS    */
*                /* CALLED TO SET THE LINE NUMBER AND PERFORM MODE   */
*                /* PROCESSING.                                      */
*                /*                                                  */
*                /****************************************************/
*                                                                  0038
*                IF TSBXTMBF = LGSCREEN THEN /*LOOK FOR LARGE SCREEN */
         B     @RC00036                                            0038
@RF00036 L     R10,TSBEXTNT                                        0038
         CLC   TSBXTMBF-TSBX(2,R10),HW1920                         0038
*ZP60009 BNE   @RF00038                                            0038
         BL    @RF00038                    ASSUME <MOD2 => MOD1 ZP60009
*                  IF R1 > MAXLNLG THEN /*TOO LARGE, SET R15 */
         LA    R11,24                      DEFAULT LINE COUNT   ZP60009
         CLI   TSBPRMR,0                   FIELD POPULATED?     ZP60009
         BE    ROWSOKAY                    NO, TREAT AS MODEL-2 ZP60009
         IC    R11,TSBPRMR                 YES, USE IT INSTEAD  ZP60009
         L     R3,TSBXTVWA-TSBX(,R10)      POINT TO TVWA        ZP60009
         USING TVWA,R3                                          ZP60009
         TM    TVWAFLG6,X'01'              IS TVWAALTS ON?      ZP60009
         BNO   ROWSOKAY                    NO, USE PRIMARY SIZE ZP60009
         IC    R11,TSBALTR                 USE ALTERNATE SIZE   ZP60009
ROWSOKAY CLR   R1,R11                      LARGER THAN MAXIMUM? ZP60009
*ZP60009 CL    R1,FW24                                             0039
         BNH   @RF00039                                            0039
*                    R15 = CODE12;                                 0040
         LA    R15,12                                              0040
*                  ELSE                     /*OK, CALL LNNOPROC      */
*                    GEN (BAL R11,LNNOPROC)                        0041
*                       SETS (R11) REFS (LNNOPROC);                0041
         B     @RC00039                                            0041
@RF00039 DS    0H                                                  0041
         BAL   R11,LNNOPROC
*                ELSE                       /*MUST BE SMALL SCREEN   */
*                  IF R1 > MAXLNSM THEN /*TOO LARGE, SET R15 */
         B     @RC00038                                            0042
@RF00038 LA    R10,12                                              0042
         CLR   R1,R10                                              0042
         BNH   @RF00042                                            0042
*                    R15 = CODE12;                                 0043
         LR    R15,R10                                             0043
*                  ELSE                     /*OK, CALL LNNOPROC      */
*                    GEN (BAL R11,LNNOPROC)                        0044
*                       SETS (R11) REFS (LNNOPROC);                0044
         B     @RC00042                                            0044
@RF00042 DS    0H                                                  0044
         BAL   R11,LNNOPROC
*            END;                                                  0045
*        RETURN;                                           /*@ZM20487*/
@EL00001 DS    0H                                                  0046
@EF00001 DS    0H                                                  0046
@ER00001 BR    R14                                                 0046
*        /************************************************************/
*        /*                                                          */
*        /* LNNOPROC: STORES LINE NUMBER IN TVWALNCT.  SETS FULL     */
*        /*           SCREEN MODE ON OR OFF BASED ON THE MODE BIT    */
*        /*           IN PARAMETER REGISTER 1.                       */
*        /*                                                          */
*        /************************************************************/
*LNNOPROC:                                                         0047
*        R3 = TSBXTVWA;                /*GET ADDRES OF TVWA          */
LNNOPROC L     R10,TSBEXTNT                                        0047
         L     R3,TSBXTVWA-TSBX(,R10)                              0047
*        RFY TVWA BASED(R3);           /*REBASE TVWA                 */
*        GEN (STCM R1,1,TVWALNCT(R3))                              0049
*           REFS (R1) SETS (TVWALNCT); /*STORE LINE NUM IN TVWA      */
         STCM  R1,1,TVWALNCT
*        IF R2 < 0 THEN                /*HIGH ORDER BIT ON?          */
         LTR   R2,R2                                               0050
         BNM   @RF00050                                            0050
*          DO;                                                     0051
*            TVWAFSM = '1'B;           /*YES-SET FULL SCREEN MODE ON */
         OI    TVWAFLG5,TVWAFSM                                    0052
*          END;                                                    0053
*        ELSE                          /*HIGH ORDER BIT OFF          */
*          DO;                         /*TURN OFF FULL SCR MODE INDIC*/
         B     @RC00050                                            0054
@RF00050 DS    0H                                                  0055
*            TVWAFSM = '0'B;           /*FULL SCREEN MODE            */
*            TVWAWO  = '0'B;           /*FULL SCREEN WRITTEN OVER    */
*            TVWAFSW = '0'B;           /*FULL SCREEN TPUT WAITING    */
         NI    TVWAFLG5,255-TVWAFSM-TVWAWO-TVWAFSW                 0057
         NI    TSBFLG5,255-TSBNEDIT    /*EDIT INPUT          ZP60009 */
*          IF TVWALNCT = 1 THEN        /*IS LINENO 1?        AZ74745 */
         CLI   TVWALNCT,1
         BNE   @RC00050
*            TVWAFMSC = '1'B;          /*YES-FORMAT SCREEN   AZ74745 */
         OI    TVWAFLG4,TVWAFMSC                                   0057
*          END;                                                    0058
*        /************************************************************/
*        /*                                                          */
*        /* RETURN TO MAINLINE WITH RETURN CODE 0                    */
*        /*                                                          */
*        /************************************************************/
*        R15 = CODE00;                 /*SET GOOD RETURN CODE        */
@RC00050 SLR   R15,R15                                             0059
*        GEN (BR R11)                                              0060
*           REFS (R11);                /*RETURN TO MAINLINE          */
         BR    R11
*        END   IKT09413                                            0061
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJTSB  )                                        *
*/*%INCLUDE SYSLIB  (IKTTSBX )                                        *
*/*%INCLUDE SYSLIB  (IKTTVWA )                                        *
*;                                                                 0061
         B     @EL00001                                            0061
@DATA    DS    0H
HW1920   DC    H'1920'
*ZP60009 @DATD    DSECT
*ZP60009          DS    0F
*ZP60009 IKT09413 CSECT
*ZP60009          DS    0F
*ZP60009 FW24     DC    F'24'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKT09413 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SHIFT1   DC    AL1(1)
SHIFT9   DC    AL1(9)
         DS    CL2
PATCH    DC    15F'0'
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
@RC00030 EQU   @EL00001
@RC00028 EQU   @EL00001
@RC00042 EQU   @EL00001
@RC00038 EQU   @EL00001
@RC00036 EQU   @EL00001
@RC00039 EQU   @RC00038
@ENDDATA EQU   *
         PRINT NOGEN                                            ZP60009
         IKJTSB EXT=YES                                         ZP60009
         IKTTVWA                                                ZP60009
         PRINT GEN                                              ZP60009
         END   IKT09413,(C'PLS1932',0702,83318)
/*
//*
//STEP15  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKT09413('ZP60009')
++MOD(IKT0940A) DISTLIB(AOST3).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP16  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '******** IKT0940A:    STSIZE  - TERMINAL CONTROL MACRO *
                 *******'
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
IKT0940A CSECT ,                                                   0001
@MAINENT BALR  R15,0                                               0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKT0940A  77.319'                                 0001
         DROP  R15
@PROLOG  BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         USING TSB,R5
*        R2 = R0;                      /*COPY REGISTERS              */
         LR    R2,R0                                               0027
*        R3 = R1;                                                  0028
         LR    R3,R1                                               0028
*        SLL(R2,SHIFT8);               /*SHIFT OUT ENTRY CODE        */
         SLR   R10,R10                                             0029
         IC    R10,SHIFT8                                          0029
         SLL   R2,0(R10)                                           0029
*        SRL(R2,SHIFT16);              /*SHIFT OUT LINE PARM         */
         SLR   R4,R4                                               0030
         IC    R4,SHIFT16                                          0030
         SRL   R2,0(R4)                                            0030
*        SRL(R3,SHIFT8);               /*SHIFT OUT SIZE PARM         */
*                                                                  0031
         SRL   R3,0(R10)                                           0031
*        IF R2 ^= 0       R3 ^= 0                                  0032
*        THEN                                                      0032
         SLR   R10,R10                                             0032
         CLR   R2,R10                                              0032
         BNE   @RT00032                                            0032
         CLR   R3,R10                                              0032
         BE    @RF00032                                            0032
@RT00032 DS    0H                                                  0033
*          R15 = CODE04;                                           0033
         LA    R15,4                                               0033
*        ELSE                                                      0034
*                                                                  0034
*          /**********************************************************/
*          /*                                                        */
*          /* THE SIZE PARAMETER IN R1 IS REQUIRED WHENEVER          */
*          /* STSIZE IS INVOKED. IF R1 IS ZERO, THE RETURN CODE      */
*          /* IS SET TO 8.                                           */
*          /*                                                        */
*          /**********************************************************/
*                                                                  0034
*          IF R1 = 0                                               0034
*          THEN                                                    0034
         B     @RC00032                                            0034
@RF00032 LTR   R1,R1                                               0034
         BNZ   @RF00034                                            0034
*            R15 = CODE08;                                         0035
         LA    R15,8                                               0035
*          ELSE                                                    0036
*                                                                  0036
*            /********************************************************/
*            /*                                                      */
*            /* SHIFT OUT ENTRY CODE FROM R0 AND ACQUIRE THE         */
*            /* KEY OF THE TSB CREATOR (TCAS).                       */
*            /*                                                      */
*            /********************************************************/
*                                                                  0036
*STSZPROC:   DO;                                                   0036
         B     @RC00034                                            0036
@RF00034 DS    0H                                                  0036
STSZPROC DS    0H                                                  0037
*              GEN(MODESET KEYADDR=TCASKEY,WORKREG=2)              0037
*                  REFS(TCASKEY) SETS(R2);/*GET TCAS KEY             */
         MODESET KEYADDR=TCASKEY,WORKREG=2
*              SLL(R0,SHIFT8);         /*SHIFT OUT ENTRY CODE        */
         SLR   R10,R10                                             0038
         IC    R10,SHIFT8                                          0038
         SLL   R0,0(R10)                                           0038
*              SRL(R0,SHIFT8);                                     0039
*                                                                  0039
         SRL   R0,0(R10)                                           0039
*              /******************************************************/
*              /*                                                    */
*              /* IF THE TERMINAL IN USE IS A DISPLAY AND THE LINE   */
*               /* PARAMETER WAS NOT SPECIFIED, THE RETURN CODE IS   */
*              /* SET TO 8.                                          */
*              /*                                                    */
*              /******************************************************/
*                                                                  0040
*              IF TSBDSPLY = '1'B                                  0040
*              THEN                                                0040
*                                                                  0040
         TM    TSBSTAT,TSBDSPLY                                    0040
         BNO   @RF00040                                            0040
*                IF R0 = 0                                         0041
*                THEN                                              0041
         LTR   R0,R0                                               0041
         BNZ   @RF00041                                            0041
*                  R15 = CODE08;                                   0042
         LA    R15,8                                               0042
*                ELSE                                              0043
*                                                                  0043
*                  /**************************************************/
*                  /*                                                */
*                  /* THE DISPROC ROUTINE IS INVOKED TO UPDATE THE   */
*                  /* TSB AND VERIFY THE SCREEN DIMENSIONS AS        */
*                  /* STANDARD.                                      */
*                  /*                                                */
*                  /**************************************************/
*                                                                  0043
*                  GEN(BAL R11,DISPROC)                            0043
*                      REFS(DISPROC) SETS(R11);                    0043
*                                                                  0043
         B     @RC00041                                            0043
@RF00041 DS    0H                                                  0043
         BAL   R11,DISPROC
*              ELSE                                                0044
*                                                                  0044
*                /****************************************************/
*                /*                                                  */
*                /* IF THE TERMINAL IN USE IS NOT A DISPLAY AND THE  */
*                /* LINE PARAMETER WAS SPECIFIED, THE RETURN CODE IS */
*                /* SET TO 8.                                        */
*                /*                                                  */
*                /****************************************************/
*                                                                  0044
*                IF R0 ^= 0                                        0044
*                THEN                                              0044
         B     @RC00040                                            0044
@RF00040 LTR   R0,R0                                               0044
         BZ    @RF00044                                            0044
*                  R15 = CODE08;                                   0045
         LA    R15,8                                               0045
*                ELSE                                              0046
*                                                                  0046
*                  /**************************************************/
*                  /*                                                */
*                  /* SET VALUE OF SIZE IN TSB AND SET GOOD          */
*                  /* RETURN CODE                                    */
*                  /*                                                */
*                  /**************************************************/
*                                                                  0046
*                  DO;                                             0046
         B     @RC00044                                            0046
@RF00044 DS    0H                                                  0047
*                    TSBLNSZ = R1;                                 0047
         STC   R1,TSBLNSZ                                          0047
*                    R15 = CODE00;                                 0048
         SLR   R15,R15                                             0048
*                  END;                                            0049
*                                                                  0049
*            GEN(MODESET EXTKEY=SUPR); /*RETURN TO SUPR KEY          */
*                                                                  0050
@RC00044 DS    0H                                                  0050
@RC00040 DS    0H                                                  0050
         MODESET EXTKEY=SUPR
*            END STSZPROC;                                         0051
*        RETURN;                                           /*@ZM20487*/
@EL00001 DS    0H                                                  0052
@EF00001 DS    0H                                                  0052
@ER00001 BR    R14                                                 0052
*        /************************************************************/
*        /*                                                          */
*        /* DISPROC IS INVOKED VIA A 'BAL' FROM THE MAINLINE. THIS   */
*        /* ROUTINE SETS THE FIELDS IN THE TSB TO INDICATE THE       */
*        /* SPECIFIED SCREEN DIMENSIONS, AND CHECKS THE DIMENSION    */
*        /* AGAINST KNOWN STANDARDS. NON-STANDARD DIMENSIONS ARE     */
*        /* ALLOWED, BUT CAUSE THE RETURN CODE TO BE SET TO 12.      */
*        /*                                                          */
*        /************************************************************/
*                                                                  0053
*DISPROC:                                                          0053
*                                                                  0053
*        TSBLNSZ = R1;                 /*MOVE IN LINE SIZE           */
DISPROC  STC   R1,TSBLNSZ                                          0053
*        TSBLNNO = R0;                 /*MOVE IN NUMBER OF LINES     */
         STC   R0,TSBLNNO                                          0054
*        TVWAXSCD = '1'B;              /*EXAM SCR DIMEN SW   @G58AK3A*/
*                                                                  0055
         L     R10,TSBEXTNT                                        0055
         L     R10,TSBXTVWA-TSBX(,R10)                             0055
         USING TVWA,R10
         OI    TVWAFLG1,TVWAXSCD                                   0055
*        /***********************************************************/
*        /*                                                         */
*        /* NEW LOGIC FOR USERMOD ZP60009 IS TO CHECK THE NEW       */
*        /* DIMENSIONS AGAINST THE PRIMARY AND ALTERNATE SCREEN     */
*        /* SIZES.  A MATCH TO EITHER IS CONSIDERED TO MEAN THAT    */
*        /* A STANDARD SIZE WAS SPECIFIED NO MATTER WHAT THE        */
*        /* VALUES HAPPEN TO BE.                                    */
*        /*                                                         */
*        /* NO MATCH CAUSES THE ORIGINAL LOGIC TO BE USED.          */
*        /*                                                         */
*        /***********************************************************/
         CLM   R0,1,TSBPRMR                PRIMARY LINES?       ZP60009
         BNE   ALTCHECK                    NO                   ZP60009
         CLM   R1,1,TSBPRMC                PRIMARY COLUMNS?     ZP60009
         BE    @RT00056                    YES, IT IS STANDARD  ZP60009
ALTCHECK CLM   R0,1,TSBALTR                ALTERNATE LINES?     ZP60009
         BNE   STDCHECK                    NO                   ZP60009
         CLM   R1,1,TSBALTC                ALTERNATE COLUMNS?   ZP60009
         BE    @RT00056                    YES, IT IS STANDARD  ZP60009
STDCHECK EQU   *                                                ZP60009
*        /***********************************************************/
*        /*                                                         */
*        /* STANDARD SIZES FOR 3270 DISPLAYS ARE 24X80 AND 12X40.   */
*        /* IF A STANDARD SIZE WAS SPECIFIED, RETURN CODE IS 0. IF  */
*        /* NON-STANDARD SIZE WAS SPECIFIED, RETURN CODE IS 12. NO  */
*        /* OTHER DISPLAYS ARE SUPPORTED BY TSO/VTAM.               */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0056
*        IF (TSBLNNO = LENGTH1 & TSBLNSZ = WIDTH1)                 0056
*           (TSBLNNO = LENGTH2 & TSBLNSZ = WIDTH2)       /*        0056
*                                      WAS STANDARD SIZE GIVEN      */
*        THEN                                                      0056
         CLI   TSBLNNO,24                                          0056
         BNE   @GL00002                                            0056
         CLI   TSBLNSZ,80                                          0056
         BE    @RT00056                                            0056
@GL00002 CLI   TSBLNNO,12                                          0056
         BNE   @RF00056                                            0056
         CLI   TSBLNSZ,40                                          0056
         BNE   @RF00056                                            0056
@RT00056 DS    0H                                                  0057
*          R15 = CODE00;               /*YES - STANDARD SIZE        */
         SLR   R15,R15                                             0057
*        ELSE                                                      0058
*          R15 = CODE12;               /*NO - NON STANDARD SIZE     */
*                                                                  0058
         B     @RC00056                                            0058
@RF00056 LA    R15,12                                              0058
*        /***********************************************************/
*        /*                                                         */
*        /* RETURN TO MAINLINE                                      */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0059
*        GEN(BR R11)                                               0059
*            REFS(R11);                                            0059
@RC00056 DS    0H                                                  0059
         BR    R11
*        END IKT0940A                                              0060
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJTSB  )                                        *
*/*%INCLUDE SYSLIB  (IKTTSBX )                                        *
*/*%INCLUDE SYSLIB  (IKTTVWA )                                        *
*;                                                                 0060
         B     @EL00001                                            0060
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IKT0940A CSECT
         DS    0F
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKT0940A CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SHIFT8   DC    AL1(8)
SHIFT16  DC    AL1(16)
TCASKEY  DC    BL1'01100000'
         DS    CL1
PATCH    DC    15F'0'
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
@RC00041 EQU   @RC00040
@RC00034 EQU   @EL00001
@RC00032 EQU   @EL00001
@ENDDATA EQU   *
         PRINT NOGEN                                            ZP60009
         IKJTSB EXT=YES                                         ZP60009
         IKTTVWA                                                ZP60009
         PRINT GEN                                              ZP60009
         END   IKT0940A,(C'PLS2016',0701,77319)
/*
//*
//STEP17  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKT0940A('ZP60009')
++MACUPD(IKTTVWA) DISTLIB(ATSOMAC).
./ CHANGE NAME=IKTTVWA
*/*            ZP60009 - ADDING BIT TVWAALTS.                        */ 00147900
TVWAALTS EQU   X'01'             ALTERNATE SCREEN SIZE IN USE   ZP60009 01268400
*     3 TVWAALTS     BIT(1),     /*ALT SCREEN SIZE IN USE     ZP60009*/ 03110400
++MACUPD(STFSMODE) DISTLIB(ATSOMAC).
./ CHANGE NAME=STFSMODE
&NAME    STFSMODE &A,&INITIAL=NO,&RSHWKEY=64,&NOEDIT=NO         ZP60009 00100000
         LCLA  &SYSNEDT                                         ZP60009 01111000
&SYSNEDT SETA  0                                                ZP60009 01121000
         AIF   ('&NOEDIT' NE 'YES' AND '&NOEDIT' NE 'NO').ERROR5  ZP6-9 01125200
         AIF   ('&NOEDIT' EQ 'YES' AND '&A' EQ 'OFF').ERROR4    ZP60009 01125400
         AIF   (&RSHWKEY GT 0 AND &RSHWKEY LT 25).TESTFS        ZP60009 01125700
         AIF   ('&INITIAL' EQ 'NO').TESTNE                      ZP60009 01130000
.TESTNE  ANOP                                                   ZP60009 01135100
         AIF   ('&NOEDIT' EQ 'NO').TESTA                        ZP60009 01135200
&SYSNEDT SETA  32                                               ZP60009 01135300
.ERROR1  IHBERMAC 54,,INITIAL                                   ZP60009 01310000
.ERROR4  IHBERMAC 1020,NOEDIT,&A                                ZP60009 01345000
         MEXIT                                                  ZP60009 01346000
.ERROR5  IHBERMAC 54,,NOEDIT                                    ZP60009 01347000
         MEXIT                                                  ZP60009 01348000
&NAME    LA    1,&SYSFS+&SYSINIT+&SYSNEDT  MODE/INITIAL/NOEDIT  ZP60009 01400000
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP18  EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60009)
          .
/*
//*
//STEP19  EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60009)
        CHECK
        .
/*
//*
//STEP20  EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60009)
        DIS(WRITE)
        .
/*
//
//ZP60011  JOB (SYSGEN),'J06 M25: ZP60011',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  CAPTURE CHANNEL PROGRAM CCWS IN GTF SIO TRACE RECORD.
//*
//STEP1   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
++USERMOD(ZP60011)            /* TRACE SIO CHANNEL PROGRAM */  .
++VER(Z038) FMID(FBB1221)
 /*
   PROBLEM DESCRIPTION:
     GTF CANNOT TRACE ANY CCWS USED IN A CHANNEL PROGRAM.
       GTF DOES NOT PROVIDE A FACILITY FOR PERFORMING A CCW TRACE.
       CCW TRACES ARE A SIGNIFICANT TOOL FOR DIAGNOSING I/O PROBLEMS.

       THIS USERMOD CHANGES THE SIO RECORD BUILD ROUTINE TO CAPTURE
       UP TO 25 CCWS IN AN I/O PROGRAM PROCESSED BY SIO, AND PLACE
       THE CONTENTS INTO THE GTF SIO TRACE RECORD.  STRICTLY
       SPEAKING, THIS IS NOT A CCW TRACE AS THERE IS NO GUARANTEE
       THAT ALL OF THE CAPTURED CCWS WERE EXECUTED BY THE CHANNEL.
       UP TO 8 BYTES OF WRITE DATA MAY BE CAPTURED FOR NON-DASD
       DEVICES WHICH IS STORED IN THE SEEK ADDRESS TRACE FIELD.

       ADDITIONALLY THE SIO TRACE RECORD FORMAT ROUTINE IS ALTERED
       TO FORMAT CAPTURED CCWS, EACH ONE ON ITS OWN PRINT LINE.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 11.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       AHLTSIO
       AMDSYS00
 */.
++MOD(AHLTSIO) DISTLIB(AOS11).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSALLDA,
//             SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//*
//STEP2   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//         DD  DSN=SYS1.APVTMACS,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'IO,UIO,SIO COMPREHENSIVE BUILD ROUTINE                 *
                        '
*
*  MODIFIED BY GREG PRICE 27TH FEBRUARY 2003 FOR USERMOD ZP60011
*           TO GTF TRACE A CHANNEL PROGRAM PROCESSED BY SIO
*
AHLTSIO  CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(24)                                             0001
         DC    C'AHLTSIO  78.217 '                                 0001
         DC    C'ZP60011 '                                      ZP60011
         DROP  R15
@PROLOG  BALR  R11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R11                                         0001
         EJECT
         B     @PB00002                                            0184
         USING PSA,0
AHLPRECM DS    0H                                                  0185
               USING AHLTSIO,R11           NEW ADDRESSABILITY
               SETFRR A,FRRAD=(RTCAREG),WRKREGS=(7,9),PARMAD=(R9)
*   SVR14NRM=R10;                   /* SAVE RETURN ADDR TO MCIH      */
         ST    R10,SVR14NRM(,R9)                                   0186
*   GENERATE REFS(FLCPOPSW,AHLPSCM2);                              0187
               TM  FLCPOPSW+1,X'81'           PK 0-7 + SUPER STATE
               BNZ  AHLPSCM2                 EXIT
*   MCATRAIL=ZERO;                  /* ZERO FLAG FIELD               */
         MVC   MCATRAIL(8,AWSAPTR),ZERO                            0188
*   PRECPUID=PSACPUSA;              /* GATHER CPUID          @YM03489*/
         LH    R12,PSACPUSA                                        0189
         STH   R12,PRECPUID(,AWSAPTR)                              0189
*   RETURN;                                                        0190
@EL00002 DS    0H                                                  0190
@EF00002 DS    0H                                                  0190
@ER00002 BR    R14                                                 0190
*   END;                                                           0191
@PB00002 DS    0H                                                  0191
*   GEN(EJECT);                                                    0192
         EJECT
*AHLPSTCM:                                                         0193
*   MCATRL4='00'X;                  /* CLEAR ANY DEBUG BITS          */
AHLPSTCM MVI   MCATRL4(AWSAPTR),X'00'                              0193
*AHLPSCM1:                                                         0194
*                                                                  0194
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE STACK MACRO TO CAUSE TRC ENTRY TO BE MOVED TO GTF       */
*   /* BUFFERS                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0194
*   DO;                             /* AHLSTACK                    0194
*                                      DLENGTH(RECLEN)AID(255)FID(00)*/
*                                                                  0194
AHLPSCM1 DS    0H                                                  0195
*     /***************************************************************/
*     /*                                                             */
*     /* THE FOLLOWING CODE IS GENERATED BY THE AHLSTACK MACRO. THIS */
*     /* CODE BUILDS THE GTF RECORD PREFIX AND THEN CALLS AHLSBLOK TO*/
*     /* STACK THE RECORD.                                           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0195
*     DCL                                                          0195
*       1 AHLGREC INT BASED(AHLRECPR) BDY(WORD),/* MAPPING FOR RECORD
*                                      PREFIX                        */
*        2 AHLGLGTH PTR(16),        /* LENGTH OF RECORD PLUS PREFIX  */
*        2 AHLGRES PTR(16),         /* FOR COMPATIBILITY TO QSAM     */
*        2 AHLGAID PTR(8),          /* APPLICATION ID                */
*        2 AHLGFID PTR(8),          /* FORMAT APPENDAGE ID           */
*        2 AHLGTST CHAR(8),         /* TIMESTAMP IF SPECIFIED        */
*         3 AHLGEIDS PTR(16) BDY(BYTE),/* RECORD EVENT IDENTIFIER IF
*                                      NO TIMESTAMP                  */
*        2 AHLGEIDL PTR(16);        /* RECORD EVENT IDENTIFIER WITH
*                                      TIMESTAMP                     */
*     DCL                                                          0196
*       AHLRECPR PTR(31) REG(1),    /* USED AS POINTER TO RECORD   0196
*                                      PREFIX AREA                   */
*       AHLSBREG PTR(31) REG(14),   /* USED TO HOLD A STABLE COPY OF
*                                      THE SBLOKRTN FIELD IN THE   0196
*                                      GTFPCT                        */
*       AHLRETCD PTR(31) REG(15);   /* USED TO PASS RETURN CODE TO 0196
*                                      INVOKER                       */
*     DCL                                                          0197
*       AHLSBLOK ENTRY OPTIONS(NOEXIT,SEQFLOW,REFS(MCAWSA),SETS(   0197
*           AHLRETCD),NOFLOWS) BASED(AHLSBREG) VALRG(0);/* ENTRY FOR
*                                      AHLSBLOK                      */
*     RFY                                                          0198
*      (AHLRECPR,                                                  0198
*       AHLSBREG,                                                  0198
*       AHLRETCD) RSTD;                                            0198
*     IF OPTTIME='1'B THEN          /* CHECK FOR TIMESTAMP REQUESTED */
         TM    OPTTIME(PCTPTR),B'00000001'                         0199
         BNO   @RF00199                                            0199
*       DO;                         /* YES, TIMESTAMP                */
*         AHLRECPR=ADDR(MCARECPR);  /* SETUP ADDRESSIBILITY TO PREFIX
*                                      FOR PREFIX WITH TIMESTAMP     */
         LA    AHLRECPR,MCARECPR(,AWSAPTR)                         0201
*         AHLGLGTH=RECLEN+16;       /* SET LENGTH TO INCLUDE ***   0202
*                                      DLENGTH *** PLUS TIMESTAMP  0202
*                                      PREFIX                        */
         LA    R12,16                                              0202
         ALR   R12,RECLEN                                          0202
         STH   R12,AHLGLGTH(,AHLRECPR)                             0202
*         GEN(STCK AHLGTST(AHLRECPR) PUT TOD CLOCK VALUE INTO PREFIX )
*         SETS(AHLGTST) NOEXIT SEQFLOW NOFLOWS;                    0203
         STCK AHLGTST(AHLRECPR) PUT TOD CLOCK VALUE INTO PREFIX
*         AHLGEIDL=MCAMCR->MCREID;  /* *** EID *** NOT SPECIFIED PUT
*                                      DEFAULT INTO PREFIX           */
         L     R12,MCAMCR(,AWSAPTR)                                0204
         LH    R12,MCREID(,R12)                                    0204
         N     R12,@CF03270                                        0204
         STH   R12,AHLGEIDL(,AHLRECPR)                             0204
*       END;                                                       0205
*     ELSE                          /* NO TIMESTAMP TO BE DONE, BUILD
*                                      SHORT PREFIX                  */
*       DO;                                                        0206
         B     @RC00199                                            0206
@RF00199 DS    0H                                                  0207
*         AHLRECPR=ADDR(MCARECPR)+8;/* SETUP ADDRESSIBILITY TO FOR 0207
*                                      SHORT PREFIX WITHOUT TIMESTAMP*/
         LA    R12,8                                               0207
         LA    AHLRECPR,MCARECPR(,AWSAPTR)                         0207
         ALR   AHLRECPR,R12                                        0207
*         AHLGLGTH=RECLEN+8;        /* PUT TOTAL RECORD LENGTH INTO
*                                      PREFIX *** DLENGTH *** PLUS 0208
*                                      PREFIX LENGTH                 */
         ALR   R12,RECLEN                                          0208
         STH   R12,AHLGLGTH(,AHLRECPR)                             0208
*         AHLGEIDS=MCAMCR->MCREID;  /* *** EID *** NOT SPECIFIED PUT
*                                      DEFAULT INTO PREFIX           */
         L     R12,MCAMCR(,AWSAPTR)                                0209
         LH    R12,MCREID(,R12)                                    0209
         N     R12,@CF03270                                        0209
         STH   R12,AHLGEIDS(,AHLRECPR)                             0209
*       END;                                                       0210
*     AHLGRES=0;                    /* ZERO OUT FOR QSAM           0211
*                                      COMPATIBILITY                 */
@RC00199 SLR   R12,R12                                             0211
         STH   R12,AHLGRES(,AHLRECPR)                              0211
*     AHLGAID=255;                  /* PUT *** AID *** INTO PREFIX   */
         MVI   AHLGAID(AHLRECPR),X'FF'                             0212
*     AHLGFID=00;                   /* PUT *** FID *** INTO PREFIX   */
         MVI   AHLGFID(AHLRECPR),X'00'                             0213
*     AHLRETCD=4;                   /* SET DEFAULT RETURN CODE       */
         LA    AHLRETCD,4                                          0214
*     AHLSBREG=SBLOKRTN;            /* GET A STABLE COPY OF AHLSBLOK
*                                      ADDR                          */
         L     AHLSBREG,SBLOKRTN(,PCTPTR)                          0215
*     IF AHLSBREG^=0 THEN           /* CHECK TO SEE IF AHLSBLOK IS 0216
*                                      AVAILABLE                     */
         CR    AHLSBREG,R12                                        0216
         BE    @RF00216                                            0216
*       CALL AHLSBLOK;              /* YES, SO CALL AHLSBLOK TO BLOCK
*                                      RECORD                        */
         LR    R15,AHLSBREG                                        0217
         BALR  R14,R15                                             0217
*     RFY                                                          0218
*      (AHLRECPR,                                                  0218
*       AHLSBREG,                                                  0218
*       AHLRETCD) UNRSTD;                                          0218
@RF00216 DS    0H                                                  0219
*   END;                                                           0219
*AHLPSCM2:                                                         0220
*   ;                                                              0220
AHLPSCM2 DS    0H                                                  0221
*   GEN(SETFRR D,WRKREGS=(7,9));                                   0221
         SETFRR D,WRKREGS=(7,9)
*   GO TO R10;                      /* RESTORE RETURN ADDR AND RETURN
*                                      TO MCIH                       */
         BR    R10                                                 0222
*   GEN(EJECT);                                                    0223
*                                                                  0223
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* GATHER DATA AND BUILD IO TRACE RECORD                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0224
*AHLTIO:                                                           0224
*   ;                                                              0224
AHLTIO   DS    0H                                                  0225
*   GENERATE;                                                      0225
         USING *,R15
         L     R11,BASEADDR
         DROP  R15
*   R10=R14;                        /* SAVE RETURN ADDRESS           */
         LR    R10,R14                                             0226
*   RTCAREG=ADDR(FRRIO);            /* ERROR ROUTINE ADDR            */
         LA    RTCAREG,FRRIO                                       0227
*   CALL AHLPRECM;                                                 0228
         BAL   R14,AHLPRECM                                        0228
*   IOCSID=PSACSID;                 /* CURRENT CHANNEL SET ID        */
         LH    R12,PSACSID
         STC   R12,IOCSID(,AWSAPTR)
*   MCAIO=ON;                       /* INDICATE IO RTN               */
         OI    MCAIO(AWSAPTR),B'00100000'                          0229
*   IOPSW=FLCIOPSW;                 /* GATHER PSW                    */
         MVC   IOPSW(8,AWSAPTR),FLCIOPSW                           0230
*   IODEV=EVREG6(3:4);              /* GATHER IO DEVICE              */
         L     R12,LCCAPTR                                         0231
         MVC   IODEV(2,AWSAPTR),EVREG6+2(R12)                      0231
*   IOCSW=FLCCSW;                   /* GATHER CSW                    */
         MVC   IOCSW(8,AWSAPTR),FLCCSW                             0232
*   RECLEN=LENGTH(IOREC);                                          0233
         LA    RECLEN,60                                           0233
*   IF EVREG2=0                     /* IOSB VALID ?                  */
*     THEN                                                         0234
         L     R12,EVREG2(,R12)                                    0234
         LTR   R12,R12                                             0234
         BNZ   @RF00234                                            0234
*     DO;                           /* PUT U/A IN IOSB DEP FLDS      */
*       IOASCB=UNAVAL;                                             0236
         MVC   IOASCB(4,AWSAPTR),UNAVAL                            0236
*       IOTCB=UNAVAL;                                              0237
         MVC   IOTCB(4,AWSAPTR),UNAVAL                             0237
*       IOJOBN=UNAVAL;                                             0238
         MVC   IOJOBN(8,AWSAPTR),UNAVAL                            0238
*       IOUA1=UNAVAL;                                              0239
         MVC   IOUA1(10,AWSAPTR),UNAVAL                            0239
*       IOUA2=UNAVAL(9:16);                                        0240
         MVC   IOUA2(8,AWSAPTR),UNAVAL+8                           0240
*       GOTO RCOV2;                                                0241
         B     RCOV2                                               0241
*     END;                                                         0242
*   MCAMASCB=ON;                    /* TURN ON DBUG BIT              */
@RF00234 OI    MCAMASCB(AWSAPTR),B'00100000'                       0243
*   RFY                                                            0244
*     R8 RSTD;                                                     0244
*   R8=ASVTENTY(IOSASID);           /* GET ASCB PTR                  */
         L     R12,LCCAPTR                                         0245
         L     R12,IOSBPTR(,R12)                                   0245
         LH    R12,IOSASID(,R12)                                   0245
         N     R12,@CF03270                                        0245
         SLA   R12,2                                               0245
         L     R15,CVTPTR                                          0245
         L     R15,ASVTPTR(,R15)                                   0245
         L     R8,ASVTENTY-4(R12,R15)                              0245
*   IF OPTTRC=ON                    /* TRC?                          */
*     THEN                                                         0246
         TM    OPTTRC(PCTPTR),B'00001000'                          0246
         BO    @RT00246                                            0246
*     GOTO AHLASCB1;                /* YES, TRACE GTF                */
*   IF R8=GTFASCB                   /* NO; IS THIS GTF?              */
*     THEN                                                         0248
         C     R8,GTFASCB(,PCTPTR)                                 0248
         BE    @RT00248                                            0248
*     GO TO AHLPSCM2;               /* YES, DONT TRACE               */
*AHLASCB1:                                                         0250
*   IOASCB=R8;                      /* GATHER ASCB ADDR              */
*                                                                  0250
AHLASCB1 ST    R8,IOASCB(,AWSAPTR)                                 0250
*   /*****************************************************************/
*   /*                                                               */
*   /* GET JOBNAME, IF AVAILABLE                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0251
*   RFY                                                            0251
*     R6 RSTD;                                                     0251
*   RFY                                                            0252
*     ASCB BASED(R8);                                              0252
*   MCAMJOBN=ON;                    /* DEBUG FLAG                    */
         OI    MCAMJOBN(AWSAPTR),B'00000001'                       0253
*   R6=ASCBJBNI;                    /* 1ST JOBNAME PTR               */
         L     R6,ASCBJBNI-ASCB(,R8)                               0254
*   IF R6=0 THEN                                                   0255
         SLR   R12,R12                                             0255
         CR    R6,R12                                              0255
         BNE   @RF00255                                            0255
*     DO;                           /* TRY NEXT PTR IF 1ST IS 0      */
*       R6=ASCBJBNS;                /* 2ND JOBNAME PTR               */
         L     R6,ASCBJBNS-ASCB(,R8)                               0257
*       IF R6=0 THEN                                               0258
         CR    R6,R12                                              0258
         BE    @RT00258                                            0258
*         GO TO NOJBNM1;            /* NO PTR AVAILABLE              */
*     END;                                                         0260
*   IF JBNMTEST^=0 THEN             /* THERE IS A JOBNAME            */
@RF00255 L     R12,JBNMTEST(,R6)                                   0261
         LTR   R12,R12                                             0261
         BZ    @RF00261                                            0261
*     IOJOBN=JOBNAME;               /* TRACE JOBNAME                 */
         MVC   IOJOBN(8,AWSAPTR),JOBNAME(R6)                       0262
*   ELSE                                                           0263
*NOJBNM1:                                                          0263
*     IOJOBN=NOTAPP;                /* N/A IN JOBNAME                */
         B     @RC00261                                            0263
@RF00261 DS    0H                                                  0263
NOJBNM1  MVC   IOJOBN(8,AWSAPTR),@CC03000                          0263
*   RFY                                                            0264
*    (R8,                                                          0264
*     R6) UNRSTD;                                                  0264
@RC00261 DS    0H                                                  0265
*   RFY                                                            0265
*     ASCB BASED(ASCBPTR);                                         0265
*RCOV1:                                                            0266
*   MCAMIOSB=ON;                    /* TURN ON IOSB BIT              */
RCOV1    OI    MCAMIOSB(AWSAPTR),B'00001000'                       0266
*   IOCPA=IOSCPA;                   /* REAL AND VIRT CCW ADDRS       */
         L     R12,LCCAPTR                                         0267
         L     R12,IOSBPTR(,R12)                                   0267
         MVC   IOCPA(8,AWSAPTR),IOSCPA(R12)                        0267
*   IOFLA=IOSFLA;                   /* FLAGS                         */
         MVC   IOFLA(1,AWSAPTR),IOSFLA(R12)                        0268
*   IOOPT=IOSOPT;                   /* FLAGS                         */
         MVC   IOOPT(1,AWSAPTR),IOSOPT(R12)                        0269
*   IOFMSK=IOSFMSK;                 /* FLAGS                         */
         MVC   IOFMSK(1,AWSAPTR),IOSFMSK(R12)                      0270
*   IODVRID=IOSDVRID;               /* DRIVER ID                     */
         MVC   IODVRID(1,AWSAPTR),IOSDVRID(R12)                    0271
*   IODSID=IOSDSID;                 /* DATA SET ID                   */
         MVC   IODSID(4,AWSAPTR),IOSDSID(R12)                      0272
*   IF IOSERP=0 THEN                /* NO SENSE AVAILABLE            */
         L     R12,IOSERP(,R12)                                    0273
         LTR   R12,R12                                             0273
         BNZ   @RF00273                                            0273
*     IOSENSE=NOTAPP;               /* N/A IN SENSE                  */
         MVC   IOSENSE(2,AWSAPTR),@CC03000                         0274
*   ELSE                                                           0275
*     IOSENSE=EWASNS;               /* GATHER SENSE                  */
         B     @RC00273                                            0275
@RF00273 L     R12,LCCAPTR                                         0275
         L     R12,IOSBPTR(,R12)                                   0275
         L     R12,EWAPTR(,R12)                                    0275
         MVC   IOSENSE(2,AWSAPTR),EWASNS(R12)                      0275
*   MCAMTCB=ON;                     /* TURN ON DBUG BIT              */
@RC00273 OI    MCAMTCB(AWSAPTR),B'00010000'                        0276
*   IF SRBPTCB=0 THEN               /* NO TCB AVAILABLE              */
         L     R12,LCCAPTR                                         0277
         L     R12,IOSBPTR(,R12)                                   0277
         L     R12,SRBPTR(,R12)                                    0277
         L     R12,SRBPTCB-SRBSECT(,R12)                           0277
         LTR   R12,R12                                             0277
         BNZ   @RF00277                                            0277
*     IOTCB=NOTAPP;                 /* N/A IN TCB                    */
         MVC   IOTCB(4,AWSAPTR),@CC03000                           0278
*   ELSE                                                           0279
*     IOTCB=SRBPTCB;                /* TCB FOR IO INT                */
         B     @RC00277                                            0279
@RF00277 L     R12,LCCAPTR                                         0279
         L     R12,IOSBPTR(,R12)                                   0279
         L     R12,SRBPTR(,R12)                                    0279
         MVC   IOTCB(4,AWSAPTR),SRBPTCB-SRBSECT(R12)               0279
*RCOV2:                             /* GATHER UCB RELATED FIELDS     */
*   MCAMUCB=ON;                     /* DEBUG FLAG                    */
@RC00277 DS    0H                                                  0280
RCOV2    OI    MCAMUCB(AWSAPTR),B'01000000'                        0280
*   GENERATE;                                                      0281
*                                                              @ZM33343
         L     R12,LCCAPTR                                     @ZM33343
         LA    R8,512                                          @ZM33343
         AL    R8,EVREG7(,R12)                                 @ZM33343
         USING UCBOB,R8
         MVC   IOSFLS(2,AWSAPTR),UCBSFLS                       @ZM33343
         MVC   IOCPU(1,AWSAPTR),UCBCPU                         @ZM33343
         MVC   IOCHAN(2,AWSAPTR),UCBCHAN                       @ZM33343
         DROP  R8
*   GOTO AHLPSTCM;                  /* EXIT                          */
         B     AHLPSTCM                                            0282
*   GEN(EJECT);                                                    0283
*                                                                  0283
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* GATHER DATA AND BUILD UIO TRACE RECORD                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0284
*AHLTUIO:                                                          0284
*   ;                               /* UIO MIN GATHER RTN            */
AHLTUIO  DS    0H                                                  0285
*   GENERATE;                                                      0285
         USING *,R15
         L     R11,BASEADDR
         DROP  R15
*   R10=R14;                        /* SAVE RETURN ADDRESS           */
         LR    R10,R14                                             0286
*   RTCAREG=ADDR(FRRUIO);           /* ERROR ROUTINE ADDR            */
         LA    RTCAREG,FRRUIO                                      0287
*   CALL AHLPRECM;                  /* COMMON INITIALIZER RTN        */
         BAL   R14,AHLPRECM                                        0288
*   UIOCSID=PSACSID;                /* CURRENT CHANNEL SET ID        */
         LH    R12,PSACSID
         STC   R12,UIOCSID(,AWSAPTR)
*   MCAUIO=ON;                      /* INDICATE UIO RTN IN CONTROL   */
         OI    MCAUIO(AWSAPTR),B'00001000'                         0289
*   UIOASCB=NOTAPP;                 /* N/A FOR ASCB                  */
         MVC   UIOASCB(4,AWSAPTR),@CC03000                         0290
*   UIOJOBN=NOTAPP;                 /* N/A FOR JOBNAME               */
         MVC   UIOJOBN(8,AWSAPTR),@CC03000                         0291
*   UIOPSW=FLCIOPSW;                /* GATHER PSW                    */
         MVC   UIOPSW(8,AWSAPTR),FLCIOPSW                          0292
*   UIOCSW=FLCCSW;                  /* GATHER CSW                    */
         MVC   UIOCSW(8,AWSAPTR),FLCCSW                            0293
*   UIODEV=EVREG6(3:4);             /* GATHER DEV. ADDR              */
         L     R12,LCCAPTR                                         0294
         MVC   UIODEV(2,AWSAPTR),EVREG6+2(R12)                     0294
*   RECLEN=LENGTH(UIOREC);                                         0295
         LA    RECLEN,33                                           0295
*   GOTO AHLPSTCM;                  /* GOTO EXIT RTN                 */
         B     AHLPSTCM                                            0296
*   GEN(EJECT);                                                    0297
*                                                                  0297
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* GATHER DATA AND BUILD SIO TRACE RECORD                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0298
*AHLTSIO1:                                                         0298
*   ;                                                              0298
AHLTSIO1 DS    0H                                                  0299
*   GENERATE;                                                      0299
         USING *,R15
         L     R11,BASEADDR
         DROP  R15
*   R10=R14;                        /* SAVE RTN ADDR                 */
         LR    R10,R14                                             0300
*   RTCAREG=ADDR(FRRSIO);           /* ERROR ROUTINE ADDR            */
         LA    RTCAREG,FRRSIO                                      0301
*   CALL AHLPRECM;                  /* COMMON INITIALIZER            */
         BAL   R14,AHLPRECM                                        0302
*   SIOCSID=PSACSID;                /* CURRENT CHANNEL SET ID        */
         LH    R12,PSACSID
         STC   R12,SIOCSID(,AWSAPTR)
*   MCASIO=ON;                      /* SIO RTN IN CNTR.              */
         OI    MCASIO(AWSAPTR),B'00010000'                         0303
*   SIOCAW=FLCCAW;                  /* GATHER CAW                    */
         MVC   SIOCAW(4,AWSAPTR),FLCCAW                            0304
*   SIOSTS=FLCCSW(5:6);             /* GATHER CSW                    */
         MVC   SIOSTS(2,AWSAPTR),FLCCSW+4                          0305
*   SIODEV=EVREG6(3:4);             /* GATHER DEV ADDR               */
         L     R12,LCCAPTR                                         0306
         MVC   SIODEV(2,AWSAPTR),EVREG6+2(R12)                     0306
*   RECLEN=LENGTH(SIOREC);                                         0307
         LA    RECLEN,50                                           0307
*   IF EVREG2=0                     /* IOSB BAD ?                    */
*     THEN                                                         0308
         L     R12,EVREG2(,R12)                                    0308
         LTR   R12,R12                                             0308
         BNZ   @RF00308                                            0308
*     DO;                           /* FLAG ALL FIELDS U/A           */
*       SIOASCB=UNAVAL;                                            0310
         MVC   SIOASCB(4,AWSAPTR),UNAVAL                           0310
*       SIOJOBN=UNAVAL;                                            0311
         MVC   SIOJOBN(8,AWSAPTR),UNAVAL                           0311
*       SIOUA1=UNAVAL(13:25);                                      0312
         MVC   SIOUA1(13,AWSAPTR),UNAVAL+12                        0312
*       SIOUA2=UNAVAL(13:26);                                      0313
         MVC   SIOUA2(14,AWSAPTR),UNAVAL+12                        0313
*       SIOCC='U';                  /* NO CC , FLAG WITH U           */
         MVI   SIOCC(AWSAPTR),C'U'                                 0314
*       GOTO AHLPSTCM;              /* GOTO EXIT RTN                 */
         B     AHLPSTCM                                            0315
*     END;                                                         0316
*   MCAMASCB=ON;                    /* TURN ON DBUG BIT              */
@RF00308 OI    MCAMASCB(AWSAPTR),B'00100000'                       0317
*   RFY                                                            0318
*     R8 RSTD;                                                     0318
*   R8=ASVTENTY(IOSASID);           /* GET ASCB PTR                  */
         L     R12,LCCAPTR                                         0319
         L     R12,IOSBPTR(,R12)                                   0319
         LH    R12,IOSASID(,R12)                                   0319
         N     R12,@CF03270                                        0319
         SLA   R12,2                                               0319
         L     R15,CVTPTR                                          0319
         L     R15,ASVTPTR(,R15)                                   0319
         L     R8,ASVTENTY-4(R12,R15)                              0319
*   IF OPTTRC=ON                    /* TRC?                          */
*     THEN                                                         0320
         TM    OPTTRC(PCTPTR),B'00001000'                          0320
         BO    @RT00320                                            0320
*     GOTO AHLASCB2;                /* YES, TRACE GTF                */
*   IF R8=GTFASCB                   /* NO; IS THIS GTF?              */
*     THEN                                                         0322
         C     R8,GTFASCB(,PCTPTR)                                 0322
         BE    @RT00322                                            0322
*     GO TO AHLPSCM2;               /* YES, DONT TRACE               */
*AHLASCB2:                                                         0324
*   SIOASCB=R8;                     /* GATHER ASCB ADDR              */
*                                                                  0324
AHLASCB2 ST    R8,SIOASCB(,AWSAPTR)                                0324
*   /*****************************************************************/
*   /*                                                               */
*   /* GET JOBNAME, IF AVAILABLE                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0325
*   RFY                                                            0325
*     R6 RSTD;                                                     0325
*   RFY                                                            0326
*     ASCB BASED(R8);                                              0326
*   MCAMJOBN=ON;                    /* DEBUG FLAG                    */
         OI    MCAMJOBN(AWSAPTR),B'00000001'                       0327
*   R6=ASCBJBNI;                    /* 1ST JOBNAME PTR               */
         L     R6,ASCBJBNI-ASCB(,R8)                               0328
*   IF R6=0 THEN                                                   0329
         SLR   R12,R12                                             0329
         CR    R6,R12                                              0329
         BNE   @RF00329                                            0329
*     DO;                           /* TRY NEXT PTR IF 1ST IS 0      */
*       R6=ASCBJBNS;                /* 2ND JOBNAME PTR               */
         L     R6,ASCBJBNS-ASCB(,R8)                               0331
*       IF R6=0 THEN                                               0332
         CR    R6,R12                                              0332
         BE    @RT00332                                            0332
*         GO TO NOJBNM2;            /* NO PTR AVAILABLE              */
*     END;                                                         0334
*   IF JBNMTEST^=0 THEN             /* THERE IS A JOBNAME            */
@RF00329 L     R12,JBNMTEST(,R6)                                   0335
         LTR   R12,R12                                             0335
         BZ    @RF00335                                            0335
*     SIOJOBN=JOBNAME;              /* TRACE JOBNAME                 */
         MVC   SIOJOBN(8,AWSAPTR),JOBNAME(R6)                      0336
*   ELSE                                                           0337
*NOJBNM2:                                                          0337
*     SIOJOBN=NOTAPP;               /* N/A IN JOBNAME                */
         B     @RC00335                                            0337
@RF00335 DS    0H                                                  0337
NOJBNM2  MVC   SIOJOBN(8,AWSAPTR),@CC03000                         0337
*   RFY                                                            0338
*    (R8,                                                          0338
*     R6) UNRSTD;                                                  0338
@RC00335 DS    0H                                                  0339
*   RFY                                                            0339
*     ASCB BASED(ASCBPTR);                                         0339
*AHLIOSB:                                                          0340
*   MCAMIOSB=ON;                    /* IOSB BASED PROCESSING         */
AHLIOSB  OI    MCAMIOSB(AWSAPTR),B'00001000'                       0340
*   SIOPATH=IOSPATH;                /* FLAGS                         */
         L     R12,LCCAPTR                                         0341
         L     R12,IOSBPTR(,R12)                                   0341
         MVC   SIOPATH(2,AWSAPTR),IOSPATH(R12)                     0341
*   SIOOPT=IOSOPT;                  /* FLAGS                         */
         MVC   SIOOPT(1,AWSAPTR),IOSOPT(R12)                       0342
*   SIOFMSK=IOSFMSK;                /* FLAGS                         */
         MVC   SIOFMSK(1,AWSAPTR),IOSFMSK(R12)                     0343
*   SIODVRID=IOSDVRID;              /* DRIVER ID                     */
         MVC   SIODVRID(1,AWSAPTR),IOSDVRID(R12)                   0344
*   SIODSID=IOSDSID;                /* DATA SET ID                   */
         MVC   SIODSID(4,AWSAPTR),IOSDSID(R12)                     0345
*   SIOSEEK=IOSEEKA;                /* GATHER SEEK ADDR              */
         MVC   SIOSEEK(8,AWSAPTR),IOSEEKA(R12)                     0346
*   SIOAFF=IOSAFF;                  /* GATHER AFF                    */
         MVC   SIOAFF(1,AWSAPTR),IOSAFF(R12)                       0347
*   SIOCC=IOSCC;                    /* GATHER CC                     */
         MVC   SIOCC(1,AWSAPTR),IOSCC(R12)                         0348
*   SIOCPA=IOSCPA;                  /* REAL AND VIRT CCW ADDR VST    */
         MVC   SIOCPA(8,AWSAPTR),IOSCPA(R12)                       0349
************   START OF CODE BLOCK ADDED BY ZP60011   *****************
         SLR   R6,R6                     INITIALISE CCW COUNT         *
         LA    R15,SIOCCWS(,AWSAPTR)     POINT TO CCW COLLECTION AREA *
         L     R0,IOSCPA(,R12)           GET CHANNEL PROGRAM REAL ADDR*
         SRL   R0,12                     GET REAL PAGE NUMBER         *
         L     R8,IOSVST(,R12)           POINT TO CHANNEL PROGRAM     *
CCWLOOP  LA    R6,1(,R6)                 INCREMENT CCW COUNT          *
         STH   R6,SIOCCW#(,AWSAPTR)      SAVE CCW COUNT               *
         MVC   0(8,R15),0(R8)            COPY CCW                     *
         CLI   SIOCCW#+1(AWSAPTR),25     REACHED MAXIMUM CCW COUNT?   *
         BNL   DONECCWS                  YES, STOP CCW COLLECTION     *
         TM    4(R15),X'C0'              ANY CCW CHAINING?            *
         BZ    TICCHECK                  NO, GO CHECK FOR T-I-C       *
         TM    0(R15),X'07'              TRANSFER IN CHANNEL?         *
         BZ    TICCHECK                  YES, NOT NEXT DOUBLEWORD     *
         LA    R8,8(,R8)                 POINT TO NEXT POSSIBLE CCW   *
CCWNEXT  LA    R15,8(,R15)               POINT TO NEXT COLLECTION SLOT*
         B     CCWLOOP                   GO COLLECT NEXT CCW          *
TICCHECK CLI   0(R15),X'08'              TRANSFER IN CHANNEL?         *
         BNE   DONECCWS                  NO, NO MORE CCWS             *
         SLR   R8,R8                     CLEAR FOR INSERT             *
         ICM   R8,7,1(R15)               GET NEXT CCW REAL ADDRESS    *
         LR    R0,R8                     COPY IT                      *
         SRL   R0,12                     GET REAL PAGE NUMBER         *
         SLL   R0,4                      GET REAL PAGE NUMBER TIMES 16*
         L     R14,CVTPTR                POINT TO THE CVT             *
         L     R14,CVTPVTP-CVT(,R14)     POINT TO THE PVT             *
         CLM   R0,3,PVTFPFN-PVT(R14)     CHANNEL PROGRAM IN NUCLEUS?  *
         BL    CCWNEXT                   YES, V=R, BUT NOT LIKELY     *
         L     R14,PVTPFTP-PVT(,R14)     NO, POINT TO PFT "ORIGIN"    *
         AR    R14,R0                    POINT TO PFTE OF CCW         *
         SLR   R0,R0                     CLEAR FOR INSERT             *
         ICM   R0,6,PFTVBN-PFTE(R14)     POINT TO VIRTUAL PAGE        *
         SLL   R8,20                     SHIFT OUT REAL PAGE NUMBER   *
         SRL   R8,20                     GET OFFSET INTO PAGE         *
         OR    R8,R0                     GET CCW VIRTUAL ADDRESS      *
         B     CCWNEXT                   GO PROCESS NEXT CCW          *
DONECCWS LR    R0,R6                     COPY CCW COUNT               *
         SLL   R6,3                      GET COLLECTED CCW BYTE COUNT *
         LA    RECLEN,2(R6,RECLEN)       GET FINAL RECORD LENGTH      *
         L     R15,IOSUCB(,R12)          POINT TO THE UCB             *
         USING UCBOB,R15                                              *
         CLI   UCBTBYT3,UCB3DACC         DASD DEVICE CLASS?           *
         BE    AHLPSTCM                  YES, DO NOT OVERLAY SEEK ADDR*
         DROP  R15                       UCBOB                        *
         LA    R15,SIOCCWS(,AWSAPTR)     POINT TO FIRST CAPTURED CCW  *
         L     R6,IOSCPA(,R12)           GET ITS REAL ADDRESS         *
         SRL   R6,12                     GET THE REAL PAGE NUMBER     *
WRTCCWLP TM    0(R15),X'03'              CONTROL/SENSE/TIC/BAD CCW?   *
         BM    ISWRTCCW                  NO, GO SEE IF IT IS WRITE    *
         LA    R15,8(,R15)               YES, POINT TO NEXT CCW       *
         BCT   R0,WRTCCWLP               GO CHECK IT                  *
         B     AHLPSTCM                  ALL CCWS WERE CONTROL        *
WRTDATLD MVC   SIOSEEK(0,AWSAPTR),0(R14) <<< EXECUTED >>>             *
ISWRTCCW TM    0(R15),X'01'              WRITE CCW?                   *
         BNO   AHLPSTCM                  NO, CAN'T HAVE WRITE TEXT    *
         L     R14,0(,R15)               YES, GET REAL TEXT ADDRESS   *
         LA    R14,0(,R14)               CLEAR COMMAND CODE           *
         LR    R0,R14                    COPY THE REAL ADDRESS        *
         SRL   R0,12                     GET REAL PAGE NUMBER         *
         SLL   R0,4                      GET REAL PAGE NUMBER TIMES 16*
         L     R6,CVTPTR                 POINT TO THE CVT             *
         L     R6,CVTPVTP-CVT(,R6)       POINT TO THE PVT             *
         CLM   R0,3,PVTFPFN-PVT(R6)      CHANNEL PROGRAM IN NUCLEUS?  *
         BL    SHOWTEXT                  YES, V=R, BUT NOT LIKELY     *
         L     R6,PVTPFTP-PVT(,R6)       NO, POINT TO PFT "ORIGIN"    *
         AR    R6,R0                     POINT TO PFTE OF WRITE TEXT  *
         SLR   R0,R0                     CLEAR FOR INSERT             *
         ICM   R0,6,PFTVBN-PFTE(R6)      POINT TO VIRTUAL PAGE        *
         SLL   R14,20                    SHIFT OUT REAL PAGE NUMBER   *
         SRL   R14,20                    GET OFFSET INTO PAGE         *
         OR    R14,R0                    GET TEXT VIRTUAL ADDRESS     *
SHOWTEXT LA    R0,8                      GET MAXIMUM COUNT TO COPY    *
         SLR   R6,R6                     CLEAR FOR INSERT             *
         ICM   R6,3,6(R15)               GET BYTE COUNT OF WRITE CCW  *
         CR    R6,R0                     DATA TOO LONG TO CAPTURE?    *
         BNH   *+6                       NO                           *
         LR    R6,R0                     YES, REDUCE TO MAXIMUM       *
         BCTR  R6,0                      DECREMENT FOR EXECUTE        *
         EX    R6,WRTDATLD               LOAD SOME WRITE DATA         *
         OI    SIOCCW#(AWSAPTR),X'80'    FLAG WRITE DATA CAPTURED     *
************    END OF CODE BLOCK ADDED BY ZP60011    *****************
*   GOTO AHLPSTCM;                  /* EXIT                          */
         B     AHLPSTCM                                            0350
*   GEN(EJECT);                                                    0351
*                                                                  0351
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* AHLTSIO ERROR ROUTINE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0352
*AHLERPRE:                                                         0352
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0352
         B     @PB00003                                            0352
AHLERPRE DS    0H                                                  0353
*   RFY                                                            0353
*     R0 RSTD;                                                     0353
*   RFY                                                            0354
*     MCQE BASED(R0);                                              0354
*   RFY                                                            0355
*     MCRWSA BASED(WSACGTF);                                       0355
*   AWSAPTR=MCRMCA;                 /* GET ADDR OF MCAWSA AT ERROR 0356
*                                      FROM MCRWSA                   */
         L     R12,LCCAPTR                                         0356
         L     R12,LCCACPUS(,R12)                                  0356
         L     R12,WSACGTF(,R12)                                   0356
         L     AWSAPTR,MCRMCA(,R12)                                0356
*   RFY                                                            0357
*     MCRWSA BASED(MCAMCR);                                        0357
*   MCAERROR=ON;                    /* FLAG ERROR RECOVERY IN CONTROL*/
         OI    MCAERROR(AWSAPTR),B'00000100'                       0358
*   R0=MCRREG0;                     /* MCQE AT TIME OF ERROR         */
         L     R12,MCAMCR(,AWSAPTR)                                0359
         L     R0,MCRREG0(,R12)                                    0359
*   PCTPTR=MCQEAT;                  /* PCT AT TIME OF ERROR          */
         LR    R12,R0                                              0360
         L     PCTPTR,MCQEAT(,R12)                                 0360
*   DO;                             /* SETRP RECPARM(RECID)          */
*     RESPECIFY                                                    0362
*      (R0,                                                        0362
*       R1,                                                        0362
*       R14,                                                       0362
*       R15) RSTD;                                                 0362
*     R1->SDWARCDE=0;               /* SAVE RC VALUE                 */
         MVI   SDWARCDE(R1),X'00'                                  0363
*     R15=ADDR(RECID);              /* ACCESS RECORD PARAMETER LIST  */
         LA    R15,RECID                                           0364
*     R1->SDWARECP=R15->I256C(1:24);/* COPY RECORD PARAMETERS        */
         MVC   SDWARECP(24,R1),I256C(R15)                          0365
*     RESPECIFY                                                    0366
*      (R0,                                                        0366
*       R1,                                                        0366
*       R14,                                                       0366
*       R15) UNRSTD;                                               0366
*   END;                                                           0367
*   WTOLIST=WTONAMES;               /* INITIALIZE WTO LIST           */
         MVC   WTOLIST(16,AWSAPTR),WTONAMES                        0368
*   WTOFUNC(1)=TRAILSAV(1);         /* S OR BLANK                    */
         MVC   WTOFUNC(1,AWSAPTR),TRAILSAV(R9)                     0369
*   IF SDWAMCHK=ON THEN             /* A MACHINE CHECK OCCURRED      */
         TM    SDWAMCHK(R1),B'10000000'                            0370
         BNO   @RF00370                                            0370
*     IF SDWAINSF=ON&               /* INSTRUCTION FAILURE           */
*         SDWAREGU=OFF&             /* REGISTERS IN SDWA ARE VALID   */
*         SDWAPSWU=OFF THEN         /* PSW IS VALID TOO              */
         TM    SDWAINSF(R1),B'00000100'                            0371
         BNO   @RF00371                                            0371
         TM    SDWAREGU(R1),B'01100000'                            0371
         BNZ   @RF00371                                            0371
*       DO;                         /* RETRY MAY BE ATTEMPTED        */
*         DO;                       /* SETRP                       0373
*                                      RETADDR(MCHKRTY)RC(SDWARETY)  */
*           RESPECIFY                                              0374
*            (R0,                                                  0374
*             R1,                                                  0374
*             R14,                                                 0374
*             R15) RSTD;                                           0374
*           R1->SDWARCDE=SDWARETY;     /* STORE RC INTO SDWA         */
         MVI   SDWARCDE(R1),X'04'                                  0375
*           R1->SDWARTYA=ADDR(MCHKRTY);/* SAVE RETRY ADDRESS         */
         L     R12,SDWANXT1(,R1)                                   0376
         ST    R12,SDWARTYA(,R1)                                   0376
*           RESPECIFY                                              0377
*            (R0,                                                  0377
*             R1,                                                  0377
*             R14,                                                 0377
*             R15) UNRSTD;                                         0377
*         END;                                                     0378
*       END;                                                       0379
*     ELSE                                                         0380
*       DO;                         /* RETRY NOT POSSIBLE            */
         B     @RC00371                                            0380
@RF00371 DS    0H                                                  0381
*         SDWASAV=R1;               /* SAVE R1 ACR0SS CALLS          */
         ST    R1,SDWASAV(,AWSAPTR)                                0381
*         MCQESAV=R0;               /* SAVE R0 ACR0SS CALLS          */
         ST    R0,MCQESAV(,AWSAPTR)                                0382
*         R0=ADDR(DMPLIST);         /* PARM FOR DUMP                 */
         LA    R0,DMPLIST                                          0383
*         CALL DMPMOD;              /* TAKE A DUMP                   */
         L     R15,PCTDMPMD(,PCTPTR)                               0384
         BALR  R14,R15                                             0384
*         WTOUN=R15;                /* MOVE IN BLANKS OR UN          */
         STH   R15,WTOUN(,AWSAPTR)                                 0385
*         R1=ADDR(WTOLIST);         /* SET UP PARM ADDR              */
         LA    R1,WTOLIST(,AWSAPTR)                                0386
*         CALL AHLWTO;              /* ISSUE AHLWTO                  */
         L     R15,PCTWTOMD(,PCTPTR)                               0387
         BALR  R14,R15                                             0387
*         R0=MCQESAV;               /* RESTORE R0                    */
         L     R0,MCQESAV(,AWSAPTR)                                0388
*         R1=SDWASAV;               /* RESTORE SDWA ADDR             */
         L     R1,SDWASAV(,AWSAPTR)                                0389
*         DO;                       /* SETRP RC(SDWACWT)             */
*           RESPECIFY                                              0391
*            (R0,                                                  0391
*             R1,                                                  0391
*             R14,                                                 0391
*             R15) RSTD;                                           0391
*           R1->SDWARCDE=SDWACWT;   /* SAVE RC VALUE                 */
         MVI   SDWARCDE(R1),X'00'                                  0392
*           RESPECIFY                                              0393
*            (R0,                                                  0393
*             R1,                                                  0393
*             R14,                                                 0393
*             R15) UNRSTD;                                         0393
*         END;                                                     0394
*       END;                                                       0395
*   ELSE                            /* CHECK IF THIS ROUTINE WAS   0396
*                                      PERCOLATED TO                 */
*     IF SDWAPERC=ON THEN           /* YES, PERCOLATED TO            */
         B     @RC00370                                            0396
@RF00370 TM    SDWAPERC(R1),B'00010000'                            0396
         BNO   @RF00396                                            0396
*       IF SDWAEAS=ON THEN          /* PRESYSALLDAUS FRR WAS SUCCESSFUL   */
         TM    SDWAEAS(R1),B'00001000'                             0397
         BNO   @RF00397                                            0397
*         DO;                       /* SO CONTINUE PERCOLATION       */
*           DO;                     /* SETRP RC(SDWACWT)             */
*             RESPECIFY                                            0400
*              (R0,                                                0400
*               R1,                                                0400
*               R14,                                               0400
*               R15) RSTD;                                         0400
*             R1->SDWARCDE=SDWACWT; /* SAVE RC VALUE                 */
         MVI   SDWARCDE(R1),X'00'                                  0401
*             RESPECIFY                                            0402
*              (R0,                                                0402
*               R1,                                                0402
*               R14,                                               0402
*               R15) UNRSTD;                                       0402
*           END;                                                   0403
*         END;                                                     0404
*       ELSE                                                       0405
*         DO;                       /* PRESYSALLDAUS FRR HAD A PROBLEM    */
         B     @RC00397                                            0405
@RF00397 DS    0H                                                  0406
*           DO;                     /* SETRP RC(SDWACWT)             */
*             RESPECIFY                                            0407
*              (R0,                                                0407
*               R1,                                                0407
*               R14,                                               0407
*               R15) RSTD;                                         0407
*             R1->SDWARCDE=SDWACWT; /* SAVE RC VALUE                 */
         MVI   SDWARCDE(R1),X'00'                                  0408
*             RESPECIFY                                            0409
*              (R0,                                                0409
*               R1,                                                0409
*               R14,                                               0409
*               R15) UNRSTD;                                       0409
*           END;                                                   0410
*           MCQESAV=R0;             /* SAVE R0                       */
         ST    R0,MCQESAV(,AWSAPTR)                                0411
*           R0=ADDR(DMPLIST);       /* PARM FOR DUMP                 */
         LA    R0,DMPLIST                                          0412
*           CALL DMPMOD;            /* TAKE A DUMP                   */
         L     R15,PCTDMPMD(,PCTPTR)                               0413
         BALR  R14,R15                                             0413
*           R0=MCQESAV;             /* RESTORE R0                    */
         L     R0,MCQESAV(,AWSAPTR)                                0414
*         END;                                                     0415
*     ELSE                                                         0416
*                                                                  0416
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK FOR DEBUG MODE AND PROHIBIT RETRY FLAGS             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0416
*       IF GTFDEBUG=ON              /* IMMEDIATE DUMP REQUESTED      */
*           SDWACLUP=ON THEN        /* NO RETRY ALLOWED              */
         B     @RC00396                                            0416
@RF00396 TM    GTFDEBUG(PCTPTR),B'01000000'                        0416
         BO    @RT00416                                            0416
         TM    SDWACLUP(R1),B'10000000'                            0416
         BNO   @RF00416                                            0416
@RT00416 DS    0H                                                  0417
*         DO;                                                      0417
*           SDWASAV=R1;             /* SAVE R1 ACR0SS CALLS          */
         ST    R1,SDWASAV(,AWSAPTR)                                0418
*           MCQESAV=R0;             /* SAVE R0 ACR0SS CALLS          */
         ST    R0,MCQESAV(,AWSAPTR)                                0419
*           R0=ADDR(DMPLIST);       /* PARM FOR DUMP                 */
         LA    R0,DMPLIST                                          0420
*           CALL DMPMOD;            /* TAKE A DUMP                   */
         L     R15,PCTDMPMD(,PCTPTR)                               0421
         BALR  R14,R15                                             0421
*           WTOUN=R15;              /* MOVE IN BLANKS OR UN          */
         STH   R15,WTOUN(,AWSAPTR)                                 0422
*           R1=ADDR(WTOLIST);       /* SET UP PARM ADDR              */
         LA    R1,WTOLIST(,AWSAPTR)                                0423
*           CALL AHLWTO;            /* ISSUE AHLWTO                  */
         L     R15,PCTWTOMD(,PCTPTR)                               0424
         BALR  R14,R15                                             0424
*           R0=MCQESAV;             /* RESTORE R0                    */
         L     R0,MCQESAV(,AWSAPTR)                                0425
*           R1=SDWASAV;             /* RESTORE SDWA ADDR             */
         L     R1,SDWASAV(,AWSAPTR)                                0426
*           DO;                     /* SETRP RC(SDWACWT)             */
*             RESPECIFY                                            0428
*              (R0,                                                0428
*               R1,                                                0428
*               R14,                                               0428
*               R15) RSTD;                                         0428
*             R1->SDWARCDE=SDWACWT; /* SAVE RC VALUE                 */
         MVI   SDWARCDE(R1),X'00'                                  0429
*             RESPECIFY                                            0430
*              (R0,                                                0430
*               R1,                                                0430
*               R14,                                               0430
*               R15) UNRSTD;                                       0430
*           END;                    /* CONTINUE TERMINATION          */
*         END;                                                     0432
*       ELSE                                                       0433
*         RETURN;                   /* RETURN TO CALLER              */
*/*   RETURN TO RTM. SDWA IS SET UP FOR RETURN                       */
*                                                                  0434
*   R14=SVR14FRR;                   /* SET UP RETURN TO RTM          */
@RC00396 DS    0H                                                  0434
@RC00370 L     R14,SVR14FRR(,R9)                                   0434
*   BC(15,R14);                     /* RETURN                        */
         BCR   15,R14                                              0435
*   END AHLERPRE;                                                  0436
@EL00003 DS    0H                                                  0436
@EF00003 DS    0H                                                  0436
@ER00003 BR    R14                                                 0436
@PB00003 DS    0H                                                  0436
*                                                                  0437
*   /*****************************************************************/
*   /*                                                               */
*   /* COMMON FRR EXIT ROUTINE FOR NONRECOVERABLR FRRS               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0437
*FRRGEN:                                                           0437
*   ERRSLOT=CATERIND;               /* PLACE 'EEEE' IN RECORD        */
FRRGEN   MVC   ERRSLOT(2,AWSAPTR),@CB03013                         0437
*   SDWASAV=R1;                     /* SAVE SDWA PTR                 */
         ST    R1,SDWASAV(,AWSAPTR)                                0438
*   DO;                             /* AHLSTACK                    0439
*                                      DLENGTH(RECLEN)AID(255)FID(00)*/
*                                                                  0439
*     /***************************************************************/
*     /*                                                             */
*     /* THE FOLLOWING CODE IS GENERATED BY THE AHLSTACK MACRO. THIS */
*     /* CODE BUILDS THE GTF RECORD PREFIX AND THEN CALLS AHLSBLOK TO*/
*     /* STACK THE RECORD.                                           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0440
*     RFY                                                          0440
*      (AHLRECPR,                                                  0440
*       AHLSBREG,                                                  0440
*       AHLRETCD) RSTD;                                            0440
*     IF OPTTIME='1'B THEN          /* CHECK FOR TIMESTAMP REQUESTED */
         TM    OPTTIME(PCTPTR),B'00000001'                         0441
         BNO   @RF00441                                            0441
*       DO;                         /* YES, TIMESTAMP                */
*         AHLRECPR=ADDR(MCARECPR);  /* SETUP ADDRESSIBILITY TO PREFIX
*                                      FOR PREFIX WITH TIMESTAMP     */
         LA    AHLRECPR,MCARECPR(,AWSAPTR)                         0443
*         AHLGLGTH=RECLEN+16;       /* SET LENGTH TO INCLUDE ***   0444
*                                      DLENGTH *** PLUS TIMESTAMP  0444
*                                      PREFIX                        */
         LA    R12,16                                              0444
         ALR   R12,RECLEN                                          0444
         STH   R12,AHLGLGTH(,AHLRECPR)                             0444
*         GEN(STCK AHLGTST(AHLRECPR) PUT TOD CLOCK VALUE INTO PREFIX )
*         SETS(AHLGTST) NOEXIT SEQFLOW NOFLOWS;                    0445
         STCK AHLGTST(AHLRECPR) PUT TOD CLOCK VALUE INTO PREFIX
*         AHLGEIDL=MCAMCR->MCREID;  /* *** EID *** NOT SPECIFIED PUT
*                                      DEFAULT INTO PREFIX           */
         L     R12,MCAMCR(,AWSAPTR)                                0446
         LH    R12,MCREID(,R12)                                    0446
         N     R12,@CF03270                                        0446
         STH   R12,AHLGEIDL(,AHLRECPR)                             0446
*       END;                                                       0447
*     ELSE                          /* NO TIMESTAMP TO BE DONE, BUILD
*                                      SHORT PREFIX                  */
*       DO;                                                        0448
         B     @RC00441                                            0448
@RF00441 DS    0H                                                  0449
*         AHLRECPR=ADDR(MCARECPR)+8;/* SETUP ADDRESSIBILITY TO FOR 0449
*                                      SHORT PREFIX WITHOUT TIMESTAMP*/
         LA    R12,8                                               0449
         LA    AHLRECPR,MCARECPR(,AWSAPTR)                         0449
         ALR   AHLRECPR,R12                                        0449
*         AHLGLGTH=RECLEN+8;        /* PUT TOTAL RECORD LENGTH INTO
*                                      PREFIX *** DLENGTH *** PLUS 0450
*                                      PREFIX LENGTH                 */
         ALR   R12,RECLEN                                          0450
         STH   R12,AHLGLGTH(,AHLRECPR)                             0450
*         AHLGEIDS=MCAMCR->MCREID;  /* *** EID *** NOT SPECIFIED PUT
*                                      DEFAULT INTO PREFIX           */
         L     R12,MCAMCR(,AWSAPTR)                                0451
         LH    R12,MCREID(,R12)                                    0451
         N     R12,@CF03270                                        0451
         STH   R12,AHLGEIDS(,AHLRECPR)                             0451
*       END;                                                       0452
*     AHLGRES=0;                    /* ZERO OUT FOR QSAM           0453
*                                      COMPATIBILITY                 */
@RC00441 SLR   R12,R12                                             0453
         STH   R12,AHLGRES(,AHLRECPR)                              0453
*     AHLGAID=255;                  /* PUT *** AID *** INTO PREFIX   */
         MVI   AHLGAID(AHLRECPR),X'FF'                             0454
*     AHLGFID=00;                   /* PUT *** FID *** INTO PREFIX   */
         MVI   AHLGFID(AHLRECPR),X'00'                             0455
*     AHLRETCD=4;                   /* SET DEFAULT RETURN CODE       */
         LA    AHLRETCD,4                                          0456
*     AHLSBREG=SBLOKRTN;            /* GET A STABLE COPY OF AHLSBLOK
*                                      ADDR                          */
         L     AHLSBREG,SBLOKRTN(,PCTPTR)                          0457
*     IF AHLSBREG^=0 THEN           /* CHECK TO SEE IF AHLSBLOK IS 0458
*                                      AVAILABLE                     */
         CR    AHLSBREG,R12                                        0458
         BE    @RF00458                                            0458
*       CALL AHLSBLOK;              /* YES, SO CALL AHLSBLOK TO BLOCK
*                                      RECORD                        */
         LR    R15,AHLSBREG                                        0459
         BALR  R14,R15                                             0459
*     RFY                                                          0460
*      (AHLRECPR,                                                  0460
*       AHLSBREG,                                                  0460
*       AHLRETCD) UNRSTD;                                          0460
@RF00458 DS    0H                                                  0461
*   END;                                                           0461
*   R1=SDWASAV;                     /* RESTORE PTR                   */
         L     R1,SDWASAV(,AWSAPTR)                                0462
*   IF PCTCATF=0 THEN               /* ALL FUNCTION ARE DISABLED     */
         L     R12,PCTCATF(,PCTPTR)                                0463
         LTR   R12,R12                                             0463
         BNZ   @RF00463                                            0463
*     DO;                           /* SETRP RC(SDWACWT)             */
*       RESPECIFY                                                  0465
*        (R0,                                                      0465
*         R1,                                                      0465
*         R14,                                                     0465
*         R15) RSTD;                                               0465
*       R1->SDWARCDE=SDWACWT;       /* SAVE RC VALUE                 */
         MVI   SDWARCDE(R1),X'00'                                  0466
*       RESPECIFY                                                  0467
*        (R0,                                                      0467
*         R1,                                                      0467
*         R14,                                                     0467
*         R15) UNRSTD;                                             0467
*     END;                          /* TERMINATE                     */
*   ELSE                                                           0469
*     DO;                           /* STILL SOME FUNCTIONS RUNNING  */
         B     @RC00463                                            0469
@RF00463 DS    0H                                                  0470
*       DO;                         /* SETRP                       0470
*                                      RETADDR(SVR14RTN)RC(SDWARETY) */
*         RESPECIFY                                                0471
*          (R0,                                                    0471
*           R1,                                                    0471
*           R14,                                                   0471
*           R15) RSTD;                                             0471
*         R1->SDWARCDE=SDWARETY;    /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(R1),X'04'                                  0472
*         R1->SDWARTYA=ADDR(SVR14RTN);/* SAVE RETRY ADDRESS          */
         L     R12,SVR14NRM(,R9)                                   0473
         ST    R12,SDWARTYA(,R1)                                   0473
*         RESPECIFY                                                0474
*          (R0,                                                    0474
*           R1,                                                    0474
*           R14,                                                   0474
*           R15) UNRSTD;                                           0474
*       END;                        /* RETRY TO MCIH                 */
*       R14=SVR14FRR;               /* GET RTM RETURN ADDR           */
         L     R14,SVR14FRR(,R9)                                   0476
*       GEN(SETFRR D,WRKREGS=(R9,R6));                             0477
         SETFRR D,WRKREGS=(R9,R6)
*       BC(15,R14);                 /* RETURN                        */
         BCR   15,R14                                              0478
*     END;                                                         0479
*   R14=SVR14FRR;                   /* GET RTM RETURN ADDR           */
@RC00463 L     R14,SVR14FRR(,R9)                                   0480
*   BC(15,R14);                     /* RETURN                        */
         BCR   15,R14                                              0481
*   GEN(EJECT);                                                    0482
*                                                                  0482
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* FRR FOR UIO ERRORS                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0483
*FRRUIO:                                                           0483
*   ;                                                              0483
FRRUIO   DS    0H                                                  0484
*   GENERATE;                                                      0484
         USING FRRUIO,R15
         L     R11,BASEADDR          PICK UP OLD BASE ADDR
         DROP  R15
*   RFY                                                            0485
*    (R1,                                                          0485
*     R14) RSTD;                                                   0485
*   RFY                                                            0486
*     SDWA BASED(R1);                                              0486
*   R9=SDWAPARM;                    /* PTR TO USER PARM AREA         */
         L     R9,SDWAPARM(,R1)                                    0487
*   SVR14FRR=R14;                   /* SAVE RETURN ADDR TO RTM       */
         ST    R14,SVR14FRR(,R9)                                   0488
*   RFY                                                            0489
*     R14 UNRSTD;                                                  0489
*   TRAILSAV(1)=' ';                /* INDICATE IO FUNCTION          */
         MVI   TRAILSAV(R9),C' '                                   0490
*   CALL AHLERPRE;                  /* CALL COMMON INITIALIZER       */
*                                                                  0491
         BAL   R14,AHLERPRE                                        0491
*   /*****************************************************************/
*   /*                                                               */
*   /* DISABLE FUNCTION AND TAKE DUMP IF NECESSARY                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0492
*UIOCHK:                                                           0492
*   IF PCTIO=ON PCTIOF=ON THEN                                     0492
UIOCHK   TM    PCTIO(PCTPTR),B'00100000'                           0492
         BO    @RT00492                                            0492
         TM    PCTIOF(PCTPTR),B'00001000'                          0492
         BNO   @RF00492                                            0492
@RT00492 DS    0H                                                  0493
*     DO;                           /* FUNCTION NOT YET DISABLED     */
*       RFY                                                        0494
*        (R6,                                                      0494
*         R8FRRWRK) RSTD;                                          0494
*       R6=PCTCATF;                 /* GET CURRENT PICTURE OF FLAGS  */
         L     R6,PCTCATF(,PCTPTR)                                 0495
*       R8FRRWRK=R6&IOOFF;          /* FLAGS WITH THIS FUNCTION OFF  */
         LR    R8FRRWRK,R6                                         0496
         N     R8FRRWRK,@CF02994                                   0496
*       CS(R6,R8FRRWRK,PCTCATF);    /* SET FLAGS TO THIS FUNCTION OFF*/
         CS    R6,R8,PCTCATF(PCTPTR)                               0497
*       BC(4,UIOCHK);               /* SOMEONE ELSE BEAT US TO FLAGS.
*                                      CHECK AGAIN                   */
         BC    4,UIOCHK                                            0498
*       SDWASAV=R1;                 /* SAVE R1 ACR0SS CALLS          */
         ST    R1,SDWASAV(,AWSAPTR)                                0499
*       MCQESAV=R0;                 /* SAVE R0 ACR0SS CALLS          */
         ST    R0,MCQESAV(,AWSAPTR)                                0500
*       CALL DMPMOD;                /* TAKE A DUMP                   */
         L     R15,PCTDMPMD(,PCTPTR)                               0501
         BALR  R14,R15                                             0501
*       WTOUN=R15;                  /* MOVE IN BLANKS OR UN          */
         STH   R15,WTOUN(,AWSAPTR)                                 0502
*       R1=ADDR(WTOLIST);           /* SET UP PARM ADDR              */
         LA    R1,WTOLIST(,AWSAPTR)                                0503
*       CALL AHLWTO;                /* ISSUE AHLWTO                  */
         L     R15,PCTWTOMD(,PCTPTR)                               0504
         BALR  R14,R15                                             0504
*       R0=MCQESAV;                 /* RESTORE MCQE ADDR             */
*                                                                  0505
         L     R0,MCQESAV(,AWSAPTR)                                0505
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE SETEVENT TO DISABLE THIS FUNCTION                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0506
*       DO;                         /* SETEVENT NAME('GTF ')MCQE(MCQE
*                                      )ACTION(DISABLE)EIDAD(IOEIDS)M
*                                      F(E,MCAWTO,COMPLETE)EIDNO(4)  */
*                                                                  0506
*         /***********************************************************/
*         /*                                                         */
*         /* THE FOLLOWING SECTION OF CODE IS GENERATED BY THE       */
*         /* SETEVENT MACRO. THIS CODE WILL BE EITHER AN INITIALIZED */
*         /* PARAMETER LIST, OR IF IT IS THE RESULT OF STANDARD OR   */
*         /* EXECUTE FORM IT WILL FILL IN THE LIST, GENERATE ALL     */
*         /* LINKAGES AND CALL THE PROPER SERVICE, EITHER AHLSETEV OR*/
*         /* AHLSETD                                                 */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0507
*         DCL                                                      0507
*           AHLPPTR REG(1) PTR(31) RSTD;/* PARAMETER LIST ADDRESS    */
*         DCL                                                      0508
*           AHLSETEV ENTRY OPTIONS(EXIT,SEQFLOW) BASED(MCHSETE) VALRG(0
*               );                  /* ENTRY FOR ADD ACTIVAT,FREE    */
*         DCL                                                      0509
*           AHLSETD ENTRY OPTIONS(EXIT,SEQFLOW) BASED(MCHSETD) VALRG(0)
*             ;                     /* ENTRY FOR DISABLE AND CHANGE  */
*         DCL                                                      0510
*           1 SEPL BASED(AHLPPTR) BDY(WORD),/* DSECT PARAMETER LIST  */
*            2 SEFG PTR(8),         /* ACTION GLAGS                  */
*            2 * PTR(8),                                           0510
*            2 SEEN PTR(8),         /* EID COUNT                     */
*            2 SECN PTR(8),         /* CLASS COUNT                   */
*            2 SENM CHAR(8),        /* APPLICATION NMAE              */
*            2 SEEL PTR(31),        /* ADDRESS OF LIST OF EIDS       */
*            2 SECL PTR(31),        /* ADDRESS OF LIST OF CLASSES    */
*            2 SEMC PTR(31);        /* MCQE ADDRESS                  */
*         AHLPPTR=ADDR(MCAWTO);     /* SET UP PLIST PTR              */
         LA    AHLPPTR,MCAWTO(,AWSAPTR)                            0511
*         SEPL=SEPL&&SEPL;          /* INIT PLIST TO ZERO            */
         XC    SEPL(24,AHLPPTR),SEPL(AHLPPTR)                      0512
*         SEMC=ADDR(MCQE);          /* SET UP MCQE ADDRESS           */
         ST    R0,SEMC(,AHLPPTR)                                   0513
*         SENM='GTF     ';          /* MOVE NAME INTO PLIST          */
         MVC   SENM(8,AHLPPTR),@CC03243                            0514
*         SEFG=32;                  /* MOVE FLAGS INTO PLIST         */
         MVI   SEFG(AHLPPTR),X'20'                                 0515
*         SEEN=4;                   /* SET TO VALUE SPECIFIED        */
         MVI   SEEN(AHLPPTR),X'04'                                 0516
*         SEEL=ADDR(IOEIDS);        /* SET TO VALUE SPECIFIED        */
         LA    R12,IOEIDS                                          0517
         ST    R12,SEEL(,AHLPPTR)                                  0517
*         IF SEFG=32 SEFG=8 THEN    /* CHECK FOR DISABLE OR * CHANGE */
         CLI   SEFG(AHLPPTR),32                                    0518
         BE    @RT00518                                            0518
         CLI   SEFG(AHLPPTR),8                                     0518
         BNE   @RF00518                                            0518
@RT00518 DS    0H                                                  0519
*           CALL AHLSETD;           /* YES                           */
         L     R12,CVTPTR                                          0519
         L     R12,CVTGTF-CVT(,R12)                                0519
         L     R15,MCHSETD(,R12)                                   0519
         BALR  R14,R15                                             0519
*         ELSE                      /* NO                            */
*           CALL AHLSETEV;                                         0520
         B     @RC00518                                            0520
@RF00518 L     R12,CVTPTR                                          0520
         L     R12,CVTGTF-CVT(,R12)                                0520
         L     R15,MCHSETE(,R12)                                   0520
         BALR  R14,R15                                             0520
*       END;                                                       0521
@RC00518 DS    0H                                                  0522
*       R1=SDWASAV;                 /* RESTORE SDWA ADDR             */
         L     R1,SDWASAV(,AWSAPTR)                                0522
*     END;                                                         0523
*   IF MCAUIO=ON THEN               /* SET UP UIO RECORD LEN         */
@RF00492 TM    MCAUIO(AWSAPTR),B'00001000'                         0524
         BNO   @RF00524                                            0524
*     RECLEN=LENGTH(UIOREC);        /* LENGTH OF RECORD FOR STACK    */
         LA    RECLEN,33                                           0525
*   ELSE                            /* SET UP IO RECORD LEN          */
*     RECLEN=LENGTH(IOREC);         /* LENGTH OF RECORD FOR STACK    */
         B     @RC00524                                            0526
@RF00524 LA    RECLEN,60                                           0526
*   GO TO FRRGEN;                   /* COMMON EXIT ROUTINE           */
         B     FRRGEN                                              0527
*   GEN(EJECT);                                                    0528
*                                                                  0528
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* FRR FOR IO ERRORS                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0529
*FRRIO:                                                            0529
*   ;                                                              0529
FRRIO    DS    0H                                                  0530
*   GENERATE;                                                      0530
         USING FRRIO,R15
         L     R11,BASEADDR          PICK UP OLD BASE ADDR
         DROP  R15
*   RFY                                                            0531
*    (R1,                                                          0531
*     R14) RSTD;                                                   0531
*   RFY                                                            0532
*     SDWA BASED(R1);                                              0532
*   R9=SDWAPARM;                    /* PTR TO USER PARM AREA         */
         L     R9,SDWAPARM(,R1)                                    0533
*   SVR14FRR=R14;                   /* SAVE RETURN ADDR TO RTM       */
         ST    R14,SVR14FRR(,R9)                                   0534
*   RFY                                                            0535
*     R14 UNRSTD;                                                  0535
*   TRAILSAV=' ';                   /* FLAG IO FUNCTION              */
         MVI   TRAILSAV+1(R9),C' '                                 0536
         MVC   TRAILSAV+2(2,R9),TRAILSAV+1(R9)                     0536
         MVI   TRAILSAV(R9),C' '                                   0536
*   CALL AHLERPRE;                  /* CALL COMMON INITIALIZER       */
         BAL   R14,AHLERPRE                                        0537
*   IF MCAMUCB=ON THEN              /* ERROR GATHERING UCB           */
         TM    MCAMUCB(AWSAPTR),B'01000000'                        0538
         BNO   @RF00538                                            0538
*     DO;                                                          0539
*       IOUCBER=ERRIND;             /* **** IN UCB FIELD             */
         MVC   IOUCBER(5,AWSAPTR),@CC03010                         0540
*RETRYP:                                                           0541
*       DO;                         /* SETRP                       0541
*                                      RETADDR(AHLPSTCM)RC(SDWARETY) */
RETRYP   DS    0H                                                  0542
*         RESPECIFY                                                0542
*          (R0,                                                    0542
*           R1,                                                    0542
*           R14,                                                   0542
*           R15) RSTD;                                             0542
*         R1->SDWARCDE=SDWARETY;    /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(R1),X'04'                                  0543
*         R1->SDWARTYA=ADDR(AHLPSTCM);/* SAVE RETRY ADDRESS          */
         LA    R12,AHLPSTCM                                        0544
         ST    R12,SDWARTYA(,R1)                                   0544
*         RESPECIFY                                                0545
*          (R0,                                                    0545
*           R1,                                                    0545
*           R14,                                                   0545
*           R15) UNRSTD;                                           0545
*       END;                        /* RETRY TO PSTCOM               */
*                                                                  0546
*       /*************************************************************/
*       /*                                                           */
*       /* RETURN TO RTM. SDWA IS SET UP FOR RETURN                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0547
*       R14=SVR14FRR;               /* SET UP RETURN TO RTM          */
         L     R14,SVR14FRR(,R9)                                   0547
*       BC(15,R14);                 /* RETURN                        */
         BCR   15,R14                                              0548
*     END;                                                         0549
*   IF MCAMTCB=ON THEN              /* ERROR GATHERING TCB           */
@RF00538 TM    MCAMTCB(AWSAPTR),B'00010000'                        0550
         BNO   @RF00550                                            0550
*     DO;                                                          0551
*       IOTCB=ERRIND;               /* **** IN TCB FIELD             */
         MVC   IOTCB(4,AWSAPTR),@CC03010                           0552
*RETRY2:                                                           0553
*       DO;                         /* SETRP                       0553
*                                      RETADDR(RCOV2)RC(SDWARETY)    */
RETRY2   DS    0H                                                  0554
*         RESPECIFY                                                0554
*          (R0,                                                    0554
*           R1,                                                    0554
*           R14,                                                   0554
*           R15) RSTD;                                             0554
*         R1->SDWARCDE=SDWARETY;    /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(R1),X'04'                                  0555
*         R1->SDWARTYA=ADDR(RCOV2); /* SAVE RETRY ADDRESS            */
         LA    R12,RCOV2                                           0556
         ST    R12,SDWARTYA(,R1)                                   0556
*         RESPECIFY                                                0557
*          (R0,                                                    0557
*           R1,                                                    0557
*           R14,                                                   0557
*           R15) UNRSTD;                                           0557
*       END;                        /* RETRY TO RCOV2                */
*                                                                  0558
*       /*************************************************************/
*       /*                                                           */
*       /* RETURN TO RTM. SDWA IS SET UP FOR RETURN                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0559
*       R14=SVR14FRR;               /* SET UP RETURN TO RTM          */
         L     R14,SVR14FRR(,R9)                                   0559
*       BC(15,R14);                 /* RETURN                        */
         BCR   15,R14                                              0560
*     END;                                                         0561
*   IF MCAMIOSB=ON THEN             /* ERROR GATHERING IOSB          */
@RF00550 TM    MCAMIOSB(AWSAPTR),B'00001000'                       0562
         BNO   @RF00562                                            0562
*     DO;                                                          0563
*       IOTCB=ERRIND;               /* **** IN RECORD                */
         MVC   IOTCB(4,AWSAPTR),@CC03010                           0564
*       IOUA1=ERRIND;               /* **** IN RECORD                */
         MVC   IOUA1(10,AWSAPTR),@CC03010                          0565
*       IOUA2=ERRIND;               /* **** IN RECORD                */
         MVC   IOUA2(8,AWSAPTR),@CC03010                           0566
*       GO TO RETRY2;               /* RETRY TO RCOV2                */
         B     RETRY2                                              0567
*     END;                                                         0568
*   IF MCAMJOBN=ON THEN                                            0569
@RF00562 TM    MCAMJOBN(AWSAPTR),B'00000001'                       0569
         BO    @RT00569                                            0569
*     GO TO JOBERR1;                /* GO PUT *** IN JOBNAME         */
*   IF MCAMASCB=ON THEN             /* ERROR GATHERING ASCB          */
         TM    MCAMASCB(AWSAPTR),B'00100000'                       0571
         BNO   @RF00571                                            0571
*     DO;                                                          0572
*       IOASCB=ERRIND;              /* **** IN ASCB FIELD            */
         MVC   IOASCB(4,AWSAPTR),@CC03010                          0573
*JOBERR1:                                                          0574
*       IOJOBN=ERRIND;              /* **** IN JOBNAME               */
JOBERR1  MVC   IOJOBN(8,AWSAPTR),@CC03010                          0574
*       DO;                         /* SETRP                       0575
*                                      RETADDR(RCOV1)RC(SDWARETY)    */
*         RESPECIFY                                                0576
*          (R0,                                                    0576
*           R1,                                                    0576
*           R14,                                                   0576
*           R15) RSTD;                                             0576
*         R1->SDWARCDE=SDWARETY;    /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(R1),X'04'                                  0577
*         R1->SDWARTYA=ADDR(RCOV1); /* SAVE RETRY ADDRESS            */
         LA    R12,RCOV1                                           0578
         ST    R12,SDWARTYA(,R1)                                   0578
*         RESPECIFY                                                0579
*          (R0,                                                    0579
*           R1,                                                    0579
*           R14,                                                   0579
*           R15) UNRSTD;                                           0579
*       END;                        /* RETRY TO RCOV1                */
*                                                                  0580
*       /*************************************************************/
*       /*                                                           */
*       /* RETURN TO RTM. SDWA IS SET UP FOR RETURN                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0581
*       R14=SVR14FRR;               /* SET UP RETURN TO RTM          */
         L     R14,SVR14FRR(,R9)                                   0581
*       BC(15,R14);                 /* RETURN                        */
         BCR   15,R14                                              0582
*     END;                                                         0583
*   GO TO UIOCHK;                   /* DISABLE FUNCTION AND TAKE DUMP
*                                      IF NECESSARY                  */
         B     UIOCHK                                              0584
*   GEN(EJECT);                                                    0585
*                                                                  0585
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* FRR FOR SIO ERRORS                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0586
*FRRSIO:                                                           0586
*   ;                                                              0586
FRRSIO   DS    0H                                                  0587
*   GENERATE;                                                      0587
         USING FRRSIO,R15
         L     R11,BASEADDR          PICK UP OLD BASE ADDR
         DROP  R15
*   RFY                                                            0588
*    (R1,                                                          0588
*     R14) RSTD;                                                   0588
*   RFY                                                            0589
*     SDWA BASED(R1);                                              0589
*   R9=SDWAPARM;                    /* PTR TO USER PARM AREA         */
         L     R9,SDWAPARM(,R1)                                    0590
*   SVR14FRR=R14;                   /* SAVE RETURN ADDR TO RTM       */
         ST    R14,SVR14FRR(,R9)                                   0591
*   RFY                                                            0592
*     R14 UNRSTD;                                                  0592
*   TRAILSAV(1)='S';                /* SET FUNCTION TO SIO           */
         MVI   TRAILSAV(R9),C'S'                                   0593
*   CALL AHLERPRE;                  /* CALL COMMON INITIALIZER       */
         BAL   R14,AHLERPRE                                        0594
*   IF MCAMIOSB=ON THEN             /* ERROR GATHERING IOSB          */
         TM    MCAMIOSB(AWSAPTR),B'00001000'                       0595
         BNO   @RF00595                                            0595
*     DO;                                                          0596
*       SIOUA1=ERRIND;              /* **** IN RECORD                */
         MVC   SIOUA1(13,AWSAPTR),@CC03010                         0597
*       SIOUA2=ERRIND;              /* **** IN RECORD                */
         MVC   SIOUA2(14,AWSAPTR),@CC03010                         0598
*       GO TO RETRYP;               /* RETRY TO PSTCOM               */
         B     RETRYP                                              0599
*     END;                                                         0600
*   IF MCAMJOBN=ON THEN                                            0601
@RF00595 TM    MCAMJOBN(AWSAPTR),B'00000001'                       0601
         BNO   @RF00601                                            0601
*     DO;                           /* GO PUT *** IN JOBNAME         */
*RETRYJ:                                                           0603
*       SIOJOBN=ERRIND;             /* **** IN JOBNAME               */
RETRYJ   MVC   SIOJOBN(8,AWSAPTR),@CC03010                         0603
*       DO;                         /* SETRP                       0604
*                                      RETADDR(AHLIOSB)RC(SDWARETY)  */
*         RESPECIFY                                                0605
*          (R0,                                                    0605
*           R1,                                                    0605
*           R14,                                                   0605
*           R15) RSTD;                                             0605
*         R1->SDWARCDE=SDWARETY;    /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(R1),X'04'                                  0606
*         R1->SDWARTYA=ADDR(AHLIOSB);/* SAVE RETRY ADDRESS           */
         LA    R12,AHLIOSB                                         0607
         ST    R12,SDWARTYA(,R1)                                   0607
*         RESPECIFY                                                0608
*          (R0,                                                    0608
*           R1,                                                    0608
*           R14,                                                   0608
*           R15) UNRSTD;                                           0608
*       END;                        /* RETRY TO IOSB                 */
*                                                                  0609
*       /*************************************************************/
*       /*                                                           */
*       /* RETURN TO RTM. SDWA IS SET UP FOR RETURN                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0610
*       R14=SVR14FRR;               /* SET UP RETURN TO RTM          */
         L     R14,SVR14FRR(,R9)                                   0610
*       BC(15,R14);                 /* RETURN                        */
         BCR   15,R14                                              0611
*     END;                                                         0612
*   IF MCAMASCB=ON THEN             /* ERROR GATHERING ASCB          */
@RF00601 TM    MCAMASCB(AWSAPTR),B'00100000'                       0613
         BNO   @RF00613                                            0613
*     DO;                                                          0614
*       SIOASCB=ERRIND;             /* **** IN ASCB FIELD            */
         MVC   SIOASCB(4,AWSAPTR),@CC03010                         0615
*       GO TO RETRYJ;               /* RETRY                         */
         B     RETRYJ                                              0616
*     END;                                                         0617
*                                                                  0617
*   /*****************************************************************/
*   /*                                                               */
*   /* DISABLE FUNCTION AND TAKE DUMP IF NECESSARY                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0618
*SIOCHK:                                                           0618
*   IF PCTSIO=ON PCTSIOF=ON THEN                                   0618
@RF00613 DS    0H                                                  0618
SIOCHK   TM    PCTSIO(PCTPTR),B'00010000'                          0618
         BO    @RT00618                                            0618
         TM    PCTSIOF(PCTPTR),B'00000100'                         0618
         BNO   @RF00618                                            0618
@RT00618 DS    0H                                                  0619
*     DO;                           /* FUNCTION NOT DISABLED         */
*       RFY                                                        0620
*        (R6,                                                      0620
*         R8FRRWRK) RSTD;                                          0620
*       R6=PCTCATF;                 /* GET CURRENT PICTURE OF FLAGS  */
         L     R6,PCTCATF(,PCTPTR)                                 0621
*       R8FRRWRK=R6&SIOOFF;         /* FLAGS WITH THIS FUNCTION OFF  */
         LR    R8FRRWRK,R6                                         0622
         N     R8FRRWRK,@CF02996                                   0622
*       CS(R6,R8FRRWRK,PCTCATF);    /* SET FLAGS TO THIS FUNCTION OFF*/
         CS    R6,R8,PCTCATF(PCTPTR)                               0623
*       BC(4,SIOCHK);               /* SOMEONE ELSE BEAT US TO FLAGS.
*                                      CHECK AGAIN                   */
         BC    4,SIOCHK                                            0624
*       SDWASAV=R1;                 /* SAVE R1 ACR0SS CALLS          */
         ST    R1,SDWASAV(,AWSAPTR)                                0625
*       MCQESAV=R0;                 /* SAVE R0 ACR0SS CALLS          */
         ST    R0,MCQESAV(,AWSAPTR)                                0626
*       CALL DMPMOD;                /* TAKE A DUMP                   */
         L     R15,PCTDMPMD(,PCTPTR)                               0627
         BALR  R14,R15                                             0627
*       WTOUN=R15;                  /* MOVE IN BLANKS OR UN          */
         STH   R15,WTOUN(,AWSAPTR)                                 0628
*       R1=ADDR(WTOLIST);           /* SET UP PARM ADDR              */
         LA    R1,WTOLIST(,AWSAPTR)                                0629
*       CALL AHLWTO;                /* ISSUE AHLWTO                  */
         L     R15,PCTWTOMD(,PCTPTR)                               0630
         BALR  R14,R15                                             0630
*       R0=MCQESAV;                 /* RESTORE MCQE ADDR             */
*                                                                  0631
         L     R0,MCQESAV(,AWSAPTR)                                0631
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE SETEVENT TO DISABLE THIS FUNCTION                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0632
*       DO;                         /* SETEVENT NAME('GTF ')MCQE(MCQE
*                                      )ACTION(DISABLE)EIDAD(SIOEID)M
*                                      F(E,MCAWTO,COMPLETE)EIDNO(1)  */
*                                                                  0632
*         /***********************************************************/
*         /*                                                         */
*         /* THE FOLLOWING SECTION OF CODE IS GENERATED BY THE       */
*         /* SETEVENT MACRO. THIS CODE WILL BE EITHER AN INITIALIZED */
*         /* PARAMETER LIST, OR IF IT IS THE RESULT OF STANDARD OR   */
*         /* EXECUTE FORM IT WILL FILL IN THE LIST, GENERATE ALL     */
*         /* LINKAGES AND CALL THE PROPER SERVICE, EITHER AHLSETEV OR*/
*         /* AHLSETD                                                 */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0633
*         AHLPPTR=ADDR(MCAWTO);     /* SET UP PLIST PTR              */
         LA    AHLPPTR,MCAWTO(,AWSAPTR)                            0633
*         SEPL=SEPL&&SEPL;          /* INIT PLIST TO ZERO            */
         XC    SEPL(24,AHLPPTR),SEPL(AHLPPTR)                      0634
*         SEMC=ADDR(MCQE);          /* SET UP MCQE ADDRESS           */
         ST    R0,SEMC(,AHLPPTR)                                   0635
*         SENM='GTF     ';          /* MOVE NAME INTO PLIST          */
         MVC   SENM(8,AHLPPTR),@CC03243                            0636
*         SEFG=32;                  /* MOVE FLAGS INTO PLIST         */
         MVI   SEFG(AHLPPTR),X'20'                                 0637
*         SEEN=1;                   /* SET TO VALUE SPECIFIED        */
         MVI   SEEN(AHLPPTR),X'01'                                 0638
*         SEEL=ADDR(SIOEID);        /* SET TO VALUE SPECIFIED        */
         LA    R12,SIOEID                                          0639
         ST    R12,SEEL(,AHLPPTR)                                  0639
*         IF SEFG=32 SEFG=8 THEN    /* CHECK FOR DISABLE OR * CHANGE */
         CLI   SEFG(AHLPPTR),32                                    0640
         BE    @RT00640                                            0640
         CLI   SEFG(AHLPPTR),8                                     0640
         BNE   @RF00640                                            0640
@RT00640 DS    0H                                                  0641
*           CALL AHLSETD;           /* YES                           */
         L     R12,CVTPTR                                          0641
         L     R12,CVTGTF-CVT(,R12)                                0641
         L     R15,MCHSETD(,R12)                                   0641
         BALR  R14,R15                                             0641
*         ELSE                      /* NO                            */
*           CALL AHLSETEV;                                         0642
         B     @RC00640                                            0642
@RF00640 L     R12,CVTPTR                                          0642
         L     R12,CVTGTF-CVT(,R12)                                0642
         L     R15,MCHSETE(,R12)                                   0642
         BALR  R14,R15                                             0642
*       END;                                                       0643
@RC00640 DS    0H                                                  0644
*       R1=SDWASAV;                 /* RESTORE SDWA ADDR             */
         L     R1,SDWASAV(,AWSAPTR)                                0644
*     END;                                                         0645
*   RECLEN=LENGTH(SIOREC);          /* LENGTH OF RECORD FOR STACK    */
@RF00618 LA    RECLEN,50                                           0646
*   GO TO FRRGEN;                   /* COMMON EXIT ROUTINE           */
         B     FRRGEN                                              0647
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     R0 PTR(31) REG(0),                                           0648
*     R1 PTR(31) REG(1),                                           0648
*     R14 PTR(31) REG(14),                                         0648
*     R15 PTR(31) REG(15);                                         0648
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0649
*     I031F FIXED(31) BASED,                                       0649
*     I031P PTR(31) BASED,                                         0649
*     I015F FIXED(15) BASED,                                       0649
*     I015P PTR(15) BASED,                                         0649
*     I008P PTR(8) BASED,                                          0649
*     I001C CHAR(1) BASED;                                         0649
*AHLTEND:                                                          0650
*   END AHLTSIO                                                    0650
*                                                                  0650
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IHAASVT )                                       */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (IHALCCA )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (MCHEAD  )                                       */
*/*%INCLUDE SYSLIB  (IHAPCCA )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (MCQE    )                                       */
*/*%INCLUDE SYSLIB  (IMDMEDIT)                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (EWAMAP  )                                       */
*/*%INCLUDE SYSLIB  (GTFPCT  )                                       */
*/*%INCLUDE SYSLIB  (MCAWSA  )                                       */
*/*%INCLUDE SYSLIB  (MCRWSA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*                                                                  0650
*       ;                                                          0650
AHLTEND  DS    0H                                                  0650
@DATA    DS    0H
@DATD    DSECT
         DS    0F
AHLTSIO  CSECT
         DS    0F
@CF02994 DC    XL4'DFF7FFFF'
@CF02996 DC    XL4'EFFBFFFF'
@CF03270 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
AHLTSIO  CSECT
         NOPR  ((@ENDDATD-@DATD)/61*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
BASEADDR DC    AL4(AHLTSIO)
@CC03010 DC    C'***********************'
@CC03000 DC    C'N/A     '
@CC03243 DC    C'GTF     '
@CB03013 DC    X'EEEE'
ZERO     DC    X'0000000000000000'
UNAVAL   DC    CL32'U/A     U/A U/A     U/A     U/A '
RECID    DC    CL24'ahltsIO ahltsIO ahltsIO '
DMPHDR   DS    CL27
         ORG   DMPHDR
@NM00118 DC    AL1(26)
@NM00119 DC    CL26'DUMP OF GTF MODULE AHLTSIO'
         ORG   DMPHDR+27
WTONAMES DC    CL16'SIO  IO   TRAC  '
DMPLIST  DS    CL12
         ORG   DMPLIST
HDRPTR   DC    AL4(DMPHDR)
SIOSTRT  DC    AL4(AHLTEND)
SIOEND   DC    AL4(AHLTSIO)
         ORG   SIOEND
EOL      DC    X'80'
         ORG   DMPLIST+12
EIDLIST  DS    CL30
         ORG   EIDLIST
IOEIDS   DS    CL6
         ORG   IOEIDS+0
@NM00124 DC    X'5200'
@NM00125 DS    CL4
         ORG   IOEIDS+6
         ORG   IOEIDS+6
         DC    X'5101'
         ORG   IOEIDS+12
         ORG   IOEIDS+12
         DC    X'2100'
         ORG   IOEIDS+18
         ORG   IOEIDS+18
         DC    X'5201'
         ORG   EIDLIST+24
SIOEID   DC    X'5100'
@NM00126 DS    CL4
         ORG   EIDLIST+30
TSIOPTCH DC    100X'00'
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
PCTPTR   EQU   R2
AWSAPTR  EQU   R3
R8FRRWRK EQU   R8
RTCAREG  EQU   R4
RECLEN   EQU   R5
AHLRECPR EQU   R1
AHLSBREG EQU   R14
AHLRETCD EQU   R15
AHLPPTR  EQU   R1
         ENTRY TSIOPTCH
         ENTRY AHLTIO
         ENTRY AHLTUIO
         ENTRY AHLTSIO1
         SPACE
         PRINT NOGEN                                            ZP60011
         IHAPSA                                                 ZP60011
         CVT   DSECT=YES                                        ZP60011
         IHAPVT                                                 ZP60011
         IHAPFTE                                                ZP60011
         IHAASCB                                                ZP60011
         IHASRB                                                 ZP60011
         IEFUCBOB LIST=NO,PREFIX=YES                            ZP60011
         PRINT GEN                                              ZP60011
         SPACE
ASVT     EQU   0
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSDVRID EQU   IOSB+4
IOSASID  EQU   IOSB+6
IOSPKEY  EQU   IOSB+12
IOSOPT   EQU   IOSB+14
IOSOPT2  EQU   IOSB+15
@NM00005 EQU   IOSB+20
IOSCC    EQU   @NM00005
IOSCSW   EQU   @NM00005+1
IOSTATUS EQU   IOSCSW+3
IOSSRB   EQU   IOSB+28
IOSIPIB  EQU   IOSB+44
IOSERP   EQU   IOSB+52
IOSRST   EQU   IOSB+72
IOSDSID  EQU   IOSB+80
IOSAFF   EQU   IOSB+85
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSFMSK  EQU   IOSB+88
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
LCCA     EQU   0
LCCAPGR2 EQU   LCCA+72
LCCAIHRC EQU   LCCA+520
LCCAIHR1 EQU   LCCAIHRC
LCCAIHR2 EQU   LCCAIHRC+1
LCCAIHR3 EQU   LCCAIHRC+2
LCCAIHR4 EQU   LCCAIHRC+3
LCCASPIN EQU   LCCA+524
LCCASPN1 EQU   LCCASPIN
LCCASPN2 EQU   LCCASPIN+1
LCCASPN3 EQU   LCCASPIN+2
LCCASPN4 EQU   LCCASPIN+3
LCCACPUS EQU   LCCA+536
LCCADSF1 EQU   LCCA+540
LCCADSF2 EQU   LCCA+541
LCCASPSA EQU   LCCA+544
LCCACRFL EQU   LCCA+692
LCCACREX EQU   LCCA+693
LCCALKFG EQU   LCCA+694
LCCASRBF EQU   LCCA+720
MCHEAD   EQU   0
MCHFLGS  EQU   MCHEAD+24
MCHFLG1  EQU   MCHFLGS
MCHSETE  EQU   MCHEAD+28
MCHSETD  EQU   MCHEAD+32
WSAG     EQU   0
WSAC     EQU   0
WSACGTF  EQU   WSAC+4
MCQE     EQU   0
MCQEASCB EQU   MCQE+16
MCQEAT   EQU   MCQE+32
MCQEFLGS EQU   MCQE+41
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSCURR EQU   FRRSHEAD+12
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWAREGU EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAMCHK EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAPERC EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAERRD EQU   SDWAFLGS+3
SDWACLUP EQU   SDWAERRD
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
EWA      EQU   0
EWAHDR   EQU   EWA
EWAFLAGS EQU   EWA+4
EWAFLG1  EQU   EWAFLAGS
EWASCCD  EQU   EWAFLG1
EWASCC3  EQU   EWASCCD
EWAFLG2  EQU   EWAFLAGS+1
EWASNSCT EQU   EWAFLAGS+3
EWACNTRS EQU   EWA+10
EWAERPIB EQU   EWA+16
EWARGFG1 EQU   EWAERPIB+4
EWARGFG2 EQU   EWAERPIB+5
EWAXCSW1 EQU   EWAERPIB+6
EWAXCSW2 EQU   EWAERPIB+7
EWAIERP  EQU   EWA+32
GTFPCT   EQU   0
GTFSTAT  EQU   GTFPCT+8
GTFDEBUG EQU   GTFSTAT
GTFOPTS  EQU   GTFPCT+12
GTFOPTS1 EQU   GTFOPTS
OPTTRC   EQU   GTFOPTS1
GTFOPTS2 EQU   GTFOPTS+1
GTFOPTS3 EQU   GTFOPTS+2
GTFOPTS4 EQU   GTFOPTS+3
OPTTIME  EQU   GTFOPTS4
PCTCATF  EQU   GTFPCT+16
PCTIO    EQU   PCTCATF
PCTSIO   EQU   PCTCATF
PCTIOF   EQU   PCTCATF+1
PCTSIOF  EQU   PCTCATF+1
NEXTBLOK EQU   GTFPCT+180
SBLOKRTN EQU   GTFPCT+188
WRTRCOM  EQU   GTFPCT+204
TRMWRIT  EQU   GTFPCT+212
WRTRERR  EQU   GTFPCT+216
GTFSSRB  EQU   GTFPCT+220
QLOCKWRD EQU   GTFPCT+236
QLOCKECB EQU   GTFPCT+240
AUDITFLG EQU   GTFPCT+296
GTFASCB  EQU   GTFPCT+300
PCTDMPMD EQU   GTFPCT+308
PCTWTOMD EQU   GTFPCT+312
MCAWSA   EQU   0
MCATRAIL EQU   MCAWSA+256
MCATRL1  EQU   MCATRAIL
MCAIO    EQU   MCATRL1
MCASIO   EQU   MCATRL1
MCATRL2  EQU   MCATRAIL+1
MCAUIO   EQU   MCATRL2
MCAERROR EQU   MCATRL2
MCATRL3  EQU   MCATRAIL+2
MCATRL4  EQU   MCATRAIL+3
MCAMUCB  EQU   MCATRL4
MCAMASCB EQU   MCATRL4
MCAMTCB  EQU   MCATRL4
MCAMIOSB EQU   MCATRL4
MCAMJOBN EQU   MCATRL4
MCATRL5  EQU   MCATRAIL+4
MCATRL6  EQU   MCATRAIL+5
MCATRL7  EQU   MCATRAIL+6
MCATRL8  EQU   MCATRAIL+7
MCAMCR   EQU   MCAWSA+264
MCARECPR EQU   MCAWSA+268
MCAREC   EQU   MCAWSA+284
MCAWORK  EQU   MCAWSA+584
MCRWSA   EQU   0
MCROUTSA EQU   MCRWSA+64
MCRMCA   EQU   MCRWSA+128
MCRWSAF  EQU   MCRWSA+132
MCREID   EQU   MCRWSA+134
JOBNAME  EQU   0
JBNMTEST EQU   JOBNAME
MCHKRTY  EQU   0
FRRPARM  EQU   0
TRAILSAV EQU   FRRPARM+4
SVR14NRM EQU   FRRPARM+8
SVR14FRR EQU   FRRPARM+12
SVR14RTN EQU   0
DMPMOD   EQU   0
AHLWTO   EQU   0
AHLGREC  EQU   0
AHLGLGTH EQU   AHLGREC
AHLGRES  EQU   AHLGREC+2
AHLGAID  EQU   AHLGREC+4
AHLGFID  EQU   AHLGREC+5
AHLGTST  EQU   AHLGREC+6
AHLGEIDS EQU   AHLGTST
AHLGEIDL EQU   AHLGREC+14
AHLSBLOK EQU   0
I256C    EQU   0
AHLSETEV EQU   0
AHLSETD  EQU   0
SEPL     EQU   0
SEFG     EQU   SEPL
SEEN     EQU   SEPL+2
SENM     EQU   SEPL+4
SEEL     EQU   SEPL+12
SEMC     EQU   SEPL+20
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
SRBPTR   EQU   IOSSRB
ASVTPTR  EQU   CVTASVT-CVT
EVREGS   EQU   LCCAPGR2
EVREG01  EQU   EVREGS
EVREG0   EQU   EVREG01
EVREG2   EQU   EVREGS+8
EVREG6   EQU   EVREGS+24
EVREG7   EQU   EVREGS+28
IOSBPTR  EQU   EVREG2
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
LCCAPTR  EQU   PSALCCAV
ASCBPTR  EQU   MCQEASCB
FRRSPTR  EQU   PSACSTK
FRREPTR  EQU   FRRSCURR
EWAPTR   EQU   IOSERP
EWADDIOS EQU   EWAIERP
EWASNS   EQU   EWADDIOS
WORKAREA EQU   MCAWORK
MCQESAV  EQU   WORKAREA
SDWASAV  EQU   WORKAREA+4
MCAWTO   EQU   WORKAREA+8
WTOLIST  EQU   MCAWTO
WTOFUNC  EQU   WTOLIST+4
WTOUN    EQU   WTOLIST+14
ERRSLOT  EQU   MCAREC
IOSCPA   EQU   IOSRST
MCRREGS  EQU   MCROUTSA
MCRREG0  EQU   MCRREGS
IOREC    EQU   MCAREC
IOASCB   EQU   IOREC
IOJOBN   EQU   IOREC+6
IOPSW    EQU   IOREC+14
IOTCB    EQU   IOREC+22
IOCSW    EQU   IOREC+26
IOCPA    EQU   IOREC+34
IOSENSE  EQU   IOREC+42
IODEV    EQU   IOREC+44
IODSID   EQU   IOREC+46
IOFLGS   EQU   IOREC+50
IOFLA    EQU   IOFLGS
IOOPT    EQU   IOFLGS+1
IOFMSK   EQU   IOFLGS+2
IODVRID  EQU   IOFLGS+3
IOUCBER  EQU   IOFLGS+4
IOCSID   EQU   IOREC+59
SIOREC   EQU   MCAREC
SIOASCB  EQU   SIOREC
SIOJOBN  EQU   SIOREC+6
SIOCPA   EQU   SIOREC+14
SIODSID  EQU   SIOREC+22
SIOCC    EQU   SIOREC+26
SIODEV   EQU   SIOREC+27
SIOCAW   EQU   SIOREC+29
SIOSTS   EQU   SIOREC+33
SIOSEEK  EQU   SIOREC+35
SIOFLGS  EQU   SIOREC+43
SIOAFF   EQU   SIOFLGS
SIOPATH  EQU   SIOFLGS+1
SIOOPT   EQU   SIOFLGS+3
SIOFMSK  EQU   SIOFLGS+4
SIODVRID EQU   SIOFLGS+5
SIOCSID  EQU   SIOREC+49
SIOCCW#  EQU   SIOREC+50                                        ZP60011
SIOCCWS  EQU   SIOREC+52                                        ZP60011
UIOREC   EQU   MCAREC
UIOASCB  EQU   UIOREC
UIOJOBN  EQU   UIOREC+6
UIOPSW   EQU   UIOREC+14
UIOCSW   EQU   UIOREC+22
UIODEV   EQU   UIOREC+30
UIOCSID  EQU   UIOREC+32
PRECM    EQU   MCAREC
PRECPUID EQU   PRECM+4
IOUA1    EQU   IOCPA
IOUA2    EQU   IODSID
SIOUA1   EQU   SIOCPA
SIOUA2   EQU   SIOSEEK
*                                      START UNREFERENCED COMPONENTS
PREASCB  EQU   PRECM
UIOCPUID EQU   UIOREC+4
SIOCPUID EQU   SIOREC+4
IOCHAN   EQU   IOUCBER+3
IOCPU    EQU   IOUCBER+2
IOSFLS   EQU   IOUCBER
IOCPUID  EQU   IOREC+4
MCRREG1  EQU   MCRREGS+4
WTOMODE  EQU   WTOLIST+8
WTOMOD   EQU   WTOLIST
EWAEND   EQU   EWADDIOS+71
EWASCSW  EQU   EWADDIOS+64
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00010 EQU   IOSPCISC+4
@NM00009 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00008 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
EVREG15  EQU   EVREGS+60
@NM00122 EQU   EVREGS+32
@NM00121 EQU   EVREGS+12
EVREG1   EQU   EVREG01+4
@NM00120 EQU   EVREG0+2
EVREG0ID EQU   EVREG0
SECL     EQU   SEPL+16
SECN     EQU   SEPL+3
@NM00127 EQU   SEPL+1
SVR14CAL EQU   FRRPARM+16
@NM00123 EQU   FRRPARM+2
RECURCTR EQU   FRRPARM
MCRRESV  EQU   MCRWSAF
MCRBRENT EQU   MCRWSAF
MCERROR  EQU   MCRWSAF
MCINFGBR EQU   MCRWSAF
MCINCTL  EQU   MCRWSAF
MCRMCIH  EQU   MCRWSA
MCASWORK EQU   MCAWSA+644
@NM00115 EQU   MCATRL8
@NM00114 EQU   MCATRL8
@NM00113 EQU   MCATRL8
@NM00112 EQU   MCATRL8
MCAFRECT EQU   MCATRL7
MCAFRECC EQU   MCATRL7
MCAFRESP EQU   MCATRL7
MCAFREXJ EQU   MCATRL7
MCAFRSBR EQU   MCATRL6
MCAFRDMJ EQU   MCATRL6
MCAFRDPC EQU   MCATRL6
MCAFRPIC EQU   MCATRL6
MCAFRPIJ EQU   MCATRL6
@NM00111 EQU   MCATRL5
MCADREGS EQU   MCATRL5
MCAFRRB  EQU   MCATRL5
MCAFRRJ  EQU   MCATRL5
MCAFRRA  EQU   MCATRL5
MCAFRERT EQU   MCATRL5
MCAFREPC EQU   MCATRL5
MCAMSDWA EQU   MCATRL4
MCAMBTU  EQU   MCATRL4
MCAMEXT  EQU   MCATRL4
MCAFRFRT EQU   MCATRL3
MCAFRFA  EQU   MCATRL3
MCAFRSJ  EQU   MCATRL3
MCAFRSA  EQU   MCATRL3
MCAPIF   EQU   MCATRL3
MCASIOF  EQU   MCATRL3
MCAIOF   EQU   MCATRL3
MCASVCF  EQU   MCATRL3
MCATDIR  EQU   MCATRL2
MCALSR   EQU   MCATRL2
MCASTA   EQU   MCATRL2
MCAFRR   EQU   MCATRL2
MCASRM   EQU   MCATRL2
MCARNIO  EQU   MCATRL2
MCAUSR   EQU   MCATRL1
MCAPI    EQU   MCATRL1
MCASRB   EQU   MCATRL1
MCADSP   EQU   MCATRL1
MCAEXT   EQU   MCATRL1
MCASVC   EQU   MCATRL1
MCAMSG   EQU   MCAWSA+192
MCASETEV EQU   MCAWSA+128
MCAFWORK EQU   MCAWSA+112
MCASFEOB EQU   MCAWSA+56
MCASBLOK EQU   MCAWSA
TRANSMAX EQU   GTFPCT+304
@NM00110 EQU   AUDITFLG+3
AFSLEBLD EQU   AUDITFLG+3
WSERFG06 EQU   AUDITFLG+3
WSERFG05 EQU   AUDITFLG+3
WSERFG04 EQU   AUDITFLG+3
WSERFG03 EQU   AUDITFLG+3
WSERFG02 EQU   AUDITFLG+2
WSERFLAG EQU   AUDITFLG+2
TERMFLAG EQU   AUDITFLG+2
AFXWRIT  EQU   AUDITFLG+2
AFQLWAIT EQU   AUDITFLG+2
AFSLEGET EQU   AUDITFLG+2
AFBUFGET EQU   AUDITFLG+2
AFFEOB   EQU   AUDITFLG+2
AFBLKFIX EQU   AUDITFLG+1
AFEQFIX  EQU   AUDITFLG+1
AFPGRLSE EQU   AUDITFLG+1
AFWRAP   EQU   AUDITFLG+1
AFBUFOFF EQU   AUDITFLG+1
AFLDFX   EQU   AUDITFLG+1
AFCLOSE  EQU   AUDITFLG+1
AFOPEN   EQU   AUDITFLG+1
AFGMBLOK EQU   AUDITFLG
AFGMSRB  EQU   AUDITFLG
AFWAIT   EQU   AUDITFLG
AFTERM   EQU   AUDITFLG
AFINIT   EQU   AUDITFLG
AFWWRIT  EQU   AUDITFLG
AFCWRIT  EQU   AUDITFLG
AFIWRIT  EQU   AUDITFLG
EQSHORT  EQU   GTFPCT+292
SLEMAX   EQU   GTFPCT+288
SLECNT   EQU   GTFPCT+284
RQPURGE  EQU   GTFPCT+280
RQTOTAL  EQU   GTFPCT+276
WRTDLST  EQU   GTFPCT+272
NUMOFBUF EQU   GTFPCT+268
SBUFDISA EQU   GTFPCT+264
SLESUSED EQU   GTFPCT+260
EQMIN    EQU   GTFPCT+256
EQLENGTH EQU   GTFPCT+252
WQMAX    EQU   GTFPCT+248
WQLENGTH EQU   GTFPCT+244
QLECBP   EQU   QLOCKECB
@NM00109 EQU   QLOCKECB
@NM00108 EQU   QLOCKWRD+3
SCHEDBUF EQU   QLOCKWRD+2
POSTWRIT EQU   QLOCKWRD+1
QLOCK    EQU   QLOCKWRD
WRITERDD EQU   GTFPCT+228
GTFLOSTR EQU   GTFPCT+224
SRBAVAIL EQU   GTFSSRB
WRTRERRP EQU   WRTRERR
@NM00107 EQU   WRTRERR
TRMWRITP EQU   TRMWRIT
@NM00106 EQU   TRMWRIT
GTFCMECB EQU   GTFPCT+208
WRTRCOMP EQU   WRTRCOM
@NM00105 EQU   WRTRCOM
TRANSCNT EQU   GTFPCT+200
AHLRDPLQ EQU   GTFPCT+196
SFEOBRTN EQU   GTFPCT+192
CURRBLOK EQU   GTFPCT+184
GBCDS    EQU   NEXTBLOK
WSMODEND EQU   GTFPCT+176
WSMODBEG EQU   GTFPCT+172
BCBPAGE  EQU   GTFPCT+156
SLEPAGE  EQU   GTFPCT+152
SAVECNT  EQU   GTFPCT+148
SLQHEAD  EQU   GTFPCT+144
HQLENGTH EQU   GTFPCT+140
QTAIL    EQU   GTFPCT+136
HQHEAD   EQU   GTFPCT+132
WQHEAD   EQU   GTFPCT+128
RQHEAD   EQU   GTFPCT+124
EQHEAD   EQU   GTFPCT+120
WPOSTSRB EQU   GTFPCT+116
WTSKTCBA EQU   GTFPCT+112
WRTRTCBA EQU   GTFPCT+108
TRMWTASK EQU   GTFPCT+104
WTSKATTH EQU   GTFPCT+100
WTSKINIT EQU   GTFPCT+96
WTASKECB EQU   GTFPCT+92
WMTABPTR EQU   GTFPCT+88
ATTCHECB EQU   GTFPCT+84
AHLECB   EQU   GTFPCT+80
STOPECBA EQU   GTFPCT+76
ECBADRLT EQU   GTFPCT+72
FIXLEN   EQU   GTFPCT+68
FIXPTR   EQU   GTFPCT+64
INITPTR  EQU   GTFPCT+60
MCQEPTR  EQU   GTFPCT+56
GTFEIDL  EQU   GTFPCT+52
GTFPIBL  EQU   GTFPCT+48
GTFPIFT  EQU   GTFPCT+44
GTFSVCBL EQU   GTFPCT+40
GTFSVCFT EQU   GTFPCT+36
GTFIOBL  EQU   GTFPCT+32
GTFIOFT  EQU   GTFPCT+28
GTFSIOBL EQU   GTFPCT+24
GTFSIOFT EQU   GTFPCT+20
@NM00104 EQU   PCTCATF+1
PCTPIF   EQU   PCTCATF+1
PCTSVCF  EQU   PCTCATF+1
PCTRR    EQU   PCTCATF+1
PCTSRM   EQU   PCTCATF+1
PCTRNIO  EQU   PCTCATF+1
PCTUSR   EQU   PCTCATF
PCTPI    EQU   PCTCATF
@NM00103 EQU   PCTCATF
PCTDSP   EQU   PCTCATF
PCTEXT   EQU   PCTCATF
PCTSVC   EQU   PCTCATF
OPTRES3  EQU   GTFOPTS4
OPTIOSIO EQU   GTFOPTS3
OPTRES2  EQU   GTFOPTS3
OPTRR    EQU   GTFOPTS3
OPTSRM   EQU   GTFOPTS3
OPTRNIO  EQU   GTFOPTS3
OPTEXT   EQU   GTFOPTS3
OPTIOP   EQU   GTFOPTS2
OPTIO    EQU   GTFOPTS2
OPTPIP   EQU   GTFOPTS2
OPTPI    EQU   GTFOPTS2
OPTSIOP  EQU   GTFOPTS2
OPTSIO   EQU   GTFOPTS2
OPTSVCP  EQU   GTFOPTS2
OPTSVC   EQU   GTFOPTS2
OPTPCI   EQU   GTFOPTS1
OPTRES1  EQU   GTFOPTS1
OPTDSP   EQU   GTFOPTS1
OPTUSR   EQU   GTFOPTS1
OPTSYS   EQU   GTFOPTS1
OPTSYSP  EQU   GTFOPTS1
OPTSYSM  EQU   GTFOPTS1
GTFRESV  EQU   GTFSTAT
GTFMODE  EQU   GTFSTAT
GTFPCTID EQU   GTFPCT
EWADDISP EQU   EWA+29
EWADCNT  EQU   EWA+28
EWACPU   EQU   EWA+27
@NM00102 EQU   EWA+26
EWACHA   EQU   EWA+24
EWACSEQ  EQU   EWAXCSW2
EWACDIN  EQU   EWAXCSW2
@NM00101 EQU   EWAXCSW2
EWACTEC  EQU   EWAXCSW2
EWACDAV  EQU   EWAXCSW1
EWACCHV  EQU   EWAXCSW1
EWACCMD  EQU   EWAXCSW1
EWACUNS  EQU   EWAXCSW1
EWACSQV  EQU   EWAXCSW1
@NM00100 EQU   EWAXCSW1
EWACITF  EQU   EWAXCSW1
@NM00099 EQU   EWARGFG2
EWACCUE  EQU   EWARGFG2
EWACSTG  EQU   EWARGFG2
EWACSCU  EQU   EWARGFG2
EWACCHA  EQU   EWARGFG2
EWACCPU  EQU   EWARGFG2
EWANORTY EQU   EWARGFG1
EWACCNT  EQU   EWARGFG1
EWACSNS  EQU   EWARGFG1
@NM00098 EQU   EWARGFG1
EWACHIO  EQU   EWARGFG1
EWACTIO  EQU   EWARGFG1
EWACINT  EQU   EWARGFG1
EWACSIO  EQU   EWARGFG1
EWAUCB   EQU   EWAERPIB+1
@NM00097 EQU   EWAERPIB
EWASTUP  EQU   EWA+14
EWACNTR4 EQU   EWACNTRS+3
EWACNTR3 EQU   EWACNTRS+2
EWACNTR2 EQU   EWACNTRS+1
EWACNTR1 EQU   EWACNTRS
EWASSTAT EQU   EWA+8
EWASCTMX EQU   EWASNSCT
@NM00096 EQU   EWASNSCT
EWAFLG3  EQU   EWAFLAGS+2
@NM00095 EQU   EWAFLG2
EWADIR   EQU   EWAFLG2
EWACOVF  EQU   EWAFLG2
EWAWTEMP EQU   EWAFLG2
EWAMDR   EQU   EWAFLG2
EWABDSNS EQU   EWAFLG1
EWADDMSG EQU   EWAFLG1
EWASCC1  EQU   EWASCC3
EWASCC2  EQU   EWASCC3
@NM00094 EQU   EWAFLG1
EWASLIS  EQU   EWAFLG1
EWAEXT   EQU   EWAHDR
@NM00093 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00092 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00091 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00090 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00089 EQU   SDWADDAT+3
@NM00088 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00087 EQU   SDWADDAT+1
@NM00086 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00085 EQU   SDWADUMP+2
@NM00084 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00083 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00082 EQU   SDWALKWA+32
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00081 EQU   SDWAACF3
@NM00080 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00079 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00078 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00077 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00076 EQU   SDWA+239
@NM00075 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00074 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
@NM00073 EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00072 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00071 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00070 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00069 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00068 EQU   SDWAINC2
@NM00067 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00066 EQU   SDWAILC2
@NM00065 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00064 EQU   SDWANXT2
@NM00063 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00062 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00061 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00060 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00059 EQU   SDWAINC1
@NM00058 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00057 EQU   SDWAILC1
@NM00056 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00055 EQU   SDWANXT1
@NM00054 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00053 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00052 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00051 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00050 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00049 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00048 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00047 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00046 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
FRRSPARM EQU   FRRSENTR+8
@NM00045 EQU   FRRSFLGS+1
@NM00044 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
MCQESRB  EQU   MCQE+44
@NM00043 EQU   MCQE+42
@NM00042 EQU   MCQEFLGS
MCQEACT  EQU   MCQEFLGS
MCQESCHE EQU   MCQE+40
MCQETECB EQU   MCQE+36
MCQEMCCL EQU   MCQE+28
MCQEMCEE EQU   MCQE+24
MCQEMCQE EQU   MCQE+20
MCQENAME EQU   MCQE+8
MCQEIDEN EQU   MCQE
@NM00038 EQU   UCB
WSACCCH  EQU   WSAC+52
WSACRRSA EQU   WSAC+48
WSACREST EQU   WSAC+44
WSACRSTI EQU   WSAC+40
WSACABTM EQU   WSAC+36
WSACMF1  EQU   WSAC+32
WSACEDS0 EQU   WSAC+28
WSACIOS  EQU   WSAC+24
WSACRTMK EQU   WSAC+20
WSACACR  EQU   WSAC+16
WSACTIME EQU   WSAC+12
WSACOPTM EQU   WSAC+8
WSACCWSA EQU   WSAC
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGGMFM EQU   WSAG+4
WSAGPGIO EQU   WSAG
MCHEADTR EQU   MCHEAD+48
MCHEADRD EQU   MCHEAD+44
MCHFRRAD EQU   MCHEAD+40
MCHMCER  EQU   MCHEAD+36
@NM00012 EQU   MCHFLGS+1
@NM00011 EQU   MCHFLG1
MCHTERM  EQU   MCHFLG1
MCHACT   EQU   MCHFLG1
MCHDIS   EQU   MCHEAD+20
MCHCTL   EQU   MCHEAD+16
MCHCNT   EQU   MCHEAD+12
MCHCUR   EQU   MCHEAD+8
MCHIDEN  EQU   MCHEAD
LCCAR125 EQU   LCCA+964
LCCAR124 EQU   LCCA+960
LCCASGPR EQU   LCCA+896
LCCADRT2 EQU   LCCA+888
LCCADRT1 EQU   LCCA+880
LCCAR103 EQU   LCCA+876
LCCAESS2 EQU   LCCA+872
LCCASPLJ EQU   LCCA+868
LCCASMQJ EQU   LCCA+864
LCCAIRT  EQU   LCCA+736
LCCARV90 EQU   LCCA+732
LCCARV89 EQU   LCCA+728
LCCAPGTA EQU   LCCASRBF+2
LCCASAFN EQU   LCCASRBF
LCCAECSA EQU   LCCA+716
LCCAICR0 EQU   LCCA+712
LCCALWTM EQU   LCCA+704
LCCARV78 EQU   LCCA+700
LCCAPINV EQU   LCCA+696
LCCARV88 EQU   LCCA+695
LCCARV87 EQU   LCCALKFG
LCCARV86 EQU   LCCALKFG
LCCARV85 EQU   LCCALKFG
LCCARV84 EQU   LCCALKFG
LCCALKRD EQU   LCCALKFG
LCCALKAQ EQU   LCCALKFG
LCCALKSA EQU   LCCALKFG
LCCALKDP EQU   LCCALKFG
LCCACRST EQU   LCCACREX
LCCACRDP EQU   LCCACREX
LCCACRLM EQU   LCCACREX
LCCACRIN EQU   LCCACREX
LCCACRRT EQU   LCCACREX
LCCACRLE EQU   LCCACREX
LCCACRRM EQU   LCCACREX
LCCACREF EQU   LCCACREX
LCCAVARY EQU   LCCACRFL
LCCARV73 EQU   LCCACRFL
LCCARV72 EQU   LCCACRFL
LCCARV71 EQU   LCCACRFL
LCCARV70 EQU   LCCACRFL
LCCARV69 EQU   LCCACRFL
LCCACLMS EQU   LCCACRFL
LCCACRTM EQU   LCCACRFL
LCCALCR0 EQU   LCCA+688
LCCACRLC EQU   LCCA+684
LCCARCPU EQU   LCCA+680
LCCADCPU EQU   LCCA+676
LCCASRBJ EQU   LCCA+672
LCCADSSR EQU   LCCA+668
LCCADSSC EQU   LCCA+660
LCCADSS3 EQU   LCCA+648
LCCADSS2 EQU   LCCA+636
LCCADSS1 EQU   LCCA+624
LCCAWTIM EQU   LCCA+616
LCCAITOD EQU   LCCA+608
LCCADTOD EQU   LCCA+600
LCCASTOD EQU   LCCA+592
LCCARIR5 EQU   LCCASPSA+44
LCCARIR4 EQU   LCCASPSA+40
LCCARIR3 EQU   LCCASPSA+36
LCCARIR2 EQU   LCCASPSA+32
LCCARPR5 EQU   LCCASPSA+28
LCCARPR4 EQU   LCCASPSA+24
LCCARPR3 EQU   LCCASPSA+20
LCCARPR2 EQU   LCCASPSA+16
LCCADSR5 EQU   LCCASPSA+12
LCCADSR4 EQU   LCCASPSA+8
LCCADSR3 EQU   LCCASPSA+4
LCCADSR2 EQU   LCCASPSA
LCCARV68 EQU   LCCA+543
LCCAPSMK EQU   LCCA+542
LCCARV67 EQU   LCCADSF2
LCCARV66 EQU   LCCADSF2
LCCARV65 EQU   LCCADSF2
LCCARV64 EQU   LCCADSF2
LCCADSRW EQU   LCCADSF2
LCCADSPL EQU   LCCADSF2
LCCAGSRB EQU   LCCADSF2
LCCASRBM EQU   LCCADSF2
LCCARV61 EQU   LCCADSF1
LCCARV60 EQU   LCCADSF1
LCCARV59 EQU   LCCADSF1
LCCARV58 EQU   LCCADSF1
LCCATIMR EQU   LCCADSF1
LCCADSS  EQU   LCCADSF1
LCCAVCPU EQU   LCCADSF1
LCCAACR  EQU   LCCADSF1
LCCAASCP EQU   LCCA+532
LCCAESSA EQU   LCCA+528
LCCARV55 EQU   LCCASPN4
LCCARV54 EQU   LCCASPN4
LCCARV53 EQU   LCCASPN4
LCCARV52 EQU   LCCASPN4
LCCARV51 EQU   LCCASPN4
LCCARV50 EQU   LCCASPN4
LCCARV49 EQU   LCCASPN4
LCCARV48 EQU   LCCASPN4
LCCARV47 EQU   LCCASPN3
LCCARV46 EQU   LCCASPN3
LCCARV45 EQU   LCCASPN3
LCCARV44 EQU   LCCASPN3
LCCARV43 EQU   LCCASPN3
LCCARV42 EQU   LCCASPN3
LCCARV41 EQU   LCCASPN3
LCCARV40 EQU   LCCASPN3
LCCARV39 EQU   LCCASPN2
LCCARV38 EQU   LCCASPN2
LCCARV37 EQU   LCCASPN2
LCCARV36 EQU   LCCASPN2
LCCARV35 EQU   LCCASPN2
LCCARV34 EQU   LCCASPN2
LCCARV33 EQU   LCCASPN2
LCCARV32 EQU   LCCASPN2
LCCARV31 EQU   LCCASPN1
LCCARV30 EQU   LCCASPN1
LCCAMFIO EQU   LCCASPN1
LCCARSTR EQU   LCCASPN1
LCCATSPN EQU   LCCASPN1
LCCALOCK EQU   LCCASPN1
LCCASIGP EQU   LCCASPN1
LCCAPTLB EQU   LCCASPN1
LCCARV27 EQU   LCCAIHR4
LCCARV26 EQU   LCCAIHR4
LCCARV25 EQU   LCCAIHR4
LCCARV24 EQU   LCCAIHR4
LCCARV23 EQU   LCCAIHR4
LCCARV22 EQU   LCCAIHR4
LCCARV21 EQU   LCCAIHR4
LCCARV20 EQU   LCCAIHR4
LCCARV19 EQU   LCCAIHR3
LCCARV18 EQU   LCCAIHR3
LCCARV17 EQU   LCCAIHR3
LCCARV16 EQU   LCCAIHR3
LCCARV15 EQU   LCCAIHR3
LCCARV14 EQU   LCCAIHR3
LCCARV13 EQU   LCCAIHR3
LCCARV12 EQU   LCCAIHR3
LCCARV11 EQU   LCCAIHR2
LCCARV10 EQU   LCCAIHR2
LCCARV09 EQU   LCCAIHR2
LCCARV08 EQU   LCCAIHR2
LCCARV07 EQU   LCCAIHR2
LCCARV06 EQU   LCCAIHR2
LCCARV05 EQU   LCCAIHR2
LCCARV04 EQU   LCCAIHR2
LCCARV03 EQU   LCCAIHR1
LCCARV02 EQU   LCCAIHR1
LCCARV01 EQU   LCCAIHR1
LCCAPPIE EQU   LCCAIHR1
LCCAPSG1 EQU   LCCAIHR1
LCCAPDAT EQU   LCCAIHR1
LCCAXRC2 EQU   LCCAIHR1
LCCAXRC1 EQU   LCCAIHR1
LCCAIOPS EQU   LCCA+512
LCCAGPGR EQU   LCCA+448
LCCAR133 EQU   LCCA+444
LCCAR132 EQU   LCCA+440
LCCAR131 EQU   LCCA+436
LCCAR130 EQU   LCCA+432
LCCAR129 EQU   LCCA+428
LCCAR128 EQU   LCCA+424
LCCAR127 EQU   LCCA+420
LCCAR126 EQU   LCCA+416
LCCARSGR EQU   LCCA+352
LCCAXGR3 EQU   LCCA+288
LCCAXGR2 EQU   LCCA+224
LCCAXGR1 EQU   LCCA+160
LCCACR0  EQU   LCCA+156
LCCAMCR1 EQU   LCCA+152
LCCAPVAD EQU   LCCA+148
LCCAPINT EQU   LCCA+144
LCCAPPSW EQU   LCCA+136
LCCAPGR1 EQU   LCCA+8
LCCARV77 EQU   LCCA+6
LCCACPUA EQU   LCCA+4
LCCALCCA EQU   LCCA
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSSKM   EQU   IOSEEKA
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00007 EQU   IOSCKEY
IOSCUDEV EQU   IOSPATH+1
@NM00006 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSGDP   EQU   IOSCHN
IOSRSS1B EQU   IOSB+84
IOSVST   EQU   IOSB+76
IOSDIE   EQU   IOSB+68
IOSABN   EQU   IOSB+64
IOSNRM   EQU   IOSB+60
IOSPCI   EQU   IOSB+56
IOSPCHN  EQU   IOSB+48
IOSSNS   EQU   IOSB+42
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSUSE   EQU   IOSB+32
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSTSA   EQU   IOSTATUS
IOSCSWCA EQU   IOSCSW
IOSUCB   EQU   IOSB+16
IOSOPT2X EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSRELSE EQU   IOSOPT
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSBYP   EQU   IOSOPT
IOSCOD   EQU   IOSB+13
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00004 EQU   IOSPKEY
IOSPGAD  EQU   IOSB+8
IOSPRLVL EQU   IOSB+5
IOSPROC  EQU   IOSB+3
IOSFLC7  EQU   IOSFLC
IOSFLC6  EQU   IOSFLC
IOSGLC5  EQU   IOSFLC
IOSFLC4  EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSFLB2  EQU   IOSFLB
IOSFLB1  EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTMAXU EQU   ASVT+516
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00003 EQU   ASVT
@NM00002 EQU   SRB+40
@NM00001 EQU   SRB+38
*                                      END UNREFERENCED COMPONENTS
@RT00246 EQU   AHLASCB1
@RT00248 EQU   AHLPSCM2
@RT00258 EQU   NOJBNM1
@RT00320 EQU   AHLASCB2
@RT00322 EQU   AHLPSCM2
@RT00332 EQU   NOJBNM2
@RC00371 EQU   @RC00370
@RC00397 EQU   @RC00396
@RF00416 EQU   @EL00003
@RC00524 EQU   FRRGEN
@RT00569 EQU   JOBERR1
@RF00571 EQU   UIOCHK
@ENDDATA EQU   *
         END   AHLTSIO,(C'PLS1241',0800,78217)
/*
//*
//STEP3   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY AHLTSIO('ZP60011')
++MOD(AMDSYS00) DISTLIB(AOS12).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP4   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'AMDSYS00 - EDIT FORMATTING ROUTINE, SIO-IO RECORDS     *
                        '
*
*  MODIFIED BY GREG PRICE 3RD MARCH 2003 FOR USERMOD ZP60011
*           TO DISPLAY CCW CONTENTS PRESENT IN SIO RECORDS
*
AMDSYS00 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,R15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(32)                                          ZP60011
         DC    C'AMDSYS00 78219  '                              01S0001
         DC    C'UZ86400 '
         DC    C'ZP60011 '                                      ZP60011
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                  01S0001
         BALR  R10,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,R10                                      01S0001
*/********************************************************************/
*/*                                                                  */
*/*                             AMDSYS00                             */
*/*                                                                  */
*/********************************************************************/
* R11=R1;                          /* MOVE PARM ADDRESS TO R11       */
         LR    R11,R1                                           01S0039
* R12=WKAREADD;                    /* R12 IS BASE FOR 200 BYTE WORK  */
         L     R12,WKAREADD(,R11)                               01S0040
*                                  /* AREA USED FOR DSECT            */
* GEN SETS(R13,R15);               /* SET UP USING, SAVE AREA REG    */
         USING @DATD,R12
         ST    R13,@SA00001+4
         LA    R15,@SA00001
         ST    R15,8(R13)
         LR    R13,R15
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT CHECKS THE INPUT RECORD TO SEE IF IT SHOULD BE     */
*/*  PRINTED OR NOT, AND IF SO, WHETHER THE RECORD IS TO BE DUMPED   */
*/*  IN HEX, FORMATTED IN 2 LINES, OR FORMATTED IN 1 LINE. THE       */
*/*  APPROPRIATE RETURN CODE IS SET UP FOR EACH CASE.                */
*/*                                                                  */
*/********************************************************************/
* IF RECERR='EEEE'X THEN           /* IF RECORD WAS IN ERROR,        */
         L     R14,DATAPTR(,R11)                                02S0042
         CLC   RECERR(2,R14),@CB00622                           02S0042
         BNE   @RF00042                                         02S0042
*   RC=HEXDUMP;                    /* DUMP IT IN HEX                 */
         LA    RC,12                                            02S0043
* ELSE                                                          02S0044
*   DO;                                                         02S0044
         B     @RC00042                                         02S0044
@RF00042 DS    0H                                               02S0045
*     IF TIME2SW=ON   RECEID=IMDMIO1 THEN /* IF 2ND TIME THRU, OR    */
         TM    SWITCHES,TIME2SW                                 02S0045
         BO    @RT00045                                         02S0045
         L     R14,EIDPTR(,R11)                                 02S0045
         CLC   RECEID(2,R14),@CB00208                           02S0045
         BNE   @RF00045                                         02S0045
@RT00045 DS    0H                                               02S0046
*                                  /* IF UIO RECORD, THEN ONLY       */
*       RC=PRNTLAST;               /* 1 LINE NEEDED                  */
         LA    RC,4                                             02S0046
*     ELSE                                                      02S0047
*       DO;                                                     02S0047
         B     @RC00045                                         02S0047
@RF00045 DS    0H                                               02S0048
*         DO CTR=1 TO DIM(MYEIDTAB) WHILE LOOPDONE=OFF;         02S0048
         LA    CTR,1                                            02S0048
@DL00048 TM    SWITCHES,LOOPDONE                                02S0048
         BNZ   @DC00048                                         02S0048
*           IF RECEID=MYEIDTAB(CTR) THEN /* IF 2 LINE EID FOUND,     */
         L     R14,EIDPTR(,R11)                                 02S0049
         LR    R8,CTR                                           02S0049
         ALR   R8,R8                                            02S0049
         LA    R7,MYEIDTAB-2(R8)                                02S0049
         CLC   RECEID(2,R14),0(R7)                              02S0049
         BNE   @RF00049                                         02S0049
*             LOOPDONE=ON;         /* FORCE LOOP EXIT                */
         OI    SWITCHES,LOOPDONE                                02S0050
*         END;                                                  02S0051
@RF00049 AL    CTR,@CF00044                                     02S0051
         C     CTR,@CF00098                                     02S0051
         BNH   @DL00048                                         02S0051
@DC00048 DS    0H                                               02S0052
*         IF LOOPDONE=ON THEN      /* IF EXIT WAS FORCED, THEN       */
         TM    SWITCHES,LOOPDONE                                02S0052
         BNO   @RF00052                                         02S0052
*           DO;                    /* EID WAS FOUND                  */
*             LOOPDONE=OFF;        /* RESET SWITCH, AND INDICATE     */
         NI    SWITCHES,255-LOOPDONE                            02S0054
*             RC=PRNTFRST;         /* LINE 1 OF 2 TO BE PROCESSED    */
         SLR   RC,RC                                            02S0055
*           END;                                                02S0056
*         ELSE                     /* NO EID FOUND,                  */
*           RC=RECSKIP;            /* SKIP RECORD                    */
         B     @RC00052                                         02S0057
@RF00052 LA    RC,8                                             02S0057
*       END;                                                    02S0058
@RC00052 DS    0H                                               02S0059
*   END;                                                        02S0059
@RC00045 DS    0H                                               02S0060
* IF RC=PRNTFRST   RC=PRNTLAST THEN  /* IF RECORD IS FORMATTED BY    */
@RC00042 LTR   RC,RC                                            01S0060
         BZ    @RT00060                                         01S0060
         C     RC,@CF00098                                      01S0060
         BNE   @RF00060                                         01S0060
@RT00060 DS    0H                                               01S0061
*                                  /* THIS ROUTINE,                  */
*   DO;                            /* THEN FORMAT IT                 */
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT FORMATS THE INPUT RECORD AFTER DECIDING WHICH      */
*/*  FORMAT TO USE.                                                  */
*/*                                                                  */
*/********************************************************************/
* R4=SNAPPARM->ADPLBUF;            /* LOAD ADDR OF LOCAL BUFFER      */
         L     R14,SNAPPARM(,R11)                               02S0062
         L     R4,ADPLBUF(,R14)                                 02S0062
* IF RECEID=IMDMIO1 THEN           /* IF UIO RECORD, FORMAT IT       */
         L     R14,EIDPTR(,R11)                                 02S0063
         CLC   RECEID(2,R14),@CB00208                           02S0063
         BNE   @RF00063                                         02S0063
*   DO;                                                         02S0064
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT FORMATS THE UIO RECORD INTO 1 OUTPUT LINE.         */
*/*                                                                  */
*/********************************************************************/
* CALL CHECKDEV (UIODEV,IO);       /* SEE IF DEVICE IS BEING TRACED  */
         L     R14,DATAPTR(,R11)                                03S0065
         LA    R14,UIODEV(,R14)                                 03S0065
         ST    R14,@AL00001                                     03S0065
         LA    R14,IO(,AEDITCBR)                                03S0065
         ST    R14,@AL00001+4                                   03S0065
         LA    R1,@AL00001                                      03S0065
         BAL   R14,CHECKDEV                                     03S0065
* IF R15=0 THEN                    /* IF DEVICE IS BEING TRACED,     */
         LTR   R15,R15                                          03S0066
         BNZ   @RF00066                                         03S0066
*   DO;                            /* FORMAT THE RECORD              */
*     R0=ADDR(UIOPTRN);            /* SET UP PATTERN ADDRESS         */
         LA    R0,UIOPTRN                                       03S0068
*     R1=SNAPPARM;                 /* POINT TO PARM FOR FORMAT       */
         L     R1,SNAPPARM(,R11)                                03S0069
*     ADPLFMT1=ADDR(UIOLBLS);      /* INITIALIZE LABEL POINTER       */
         LA    R14,UIOLBLS                                      03S0070
         ST    R14,ADPLFMT1(,R1)                                03S0070
*     ADPLFMT2=DATAPTR;            /* INITIALIZE DATA POINTER        */
         L     R14,DATAPTR(,R11)                                03S0071
         ST    R14,ADPLFMT2(,R1)                                03S0071
*     CALL FRMT;                   /* FORMAT THE LINE                */
         L     R15,FRMADDR(,R11)                                03S0072
         BALR  R14,R15                                          03S0072
*   END;                                                        03S0073
* ELSE                             /* DEVICE IS NOT BEING TRACED     */
*   RC=RECSKIP;                    /* SKIP RECORD                    */
         B     @RC00066                                         03S0074
@RF00066 LA    RC,8                                             03S0074
*   END;                                                        02S0075
* ELSE                                                          02S0076
*   DO;                                                         02S0076
         B     @RC00063                                         02S0076
@RF00063 DS    0H                                               02S0077
*     IF RECEID=IMDMSIO THEN       /* IF SIO RECORD, FORMAT 1 LINE   */
         L     R14,EIDPTR(,R11)                                 02S0077
         CLC   RECEID(2,R14),@CB00212                           02S0077
         BNE   @RF00077                                         02S0077
*       DO;                                                     02S0078
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT FORMATS A LINE OF THE SIO RECORD.                  */
*/*                                                                  */
*/********************************************************************/
* IF TIME2SW=OFF THEN              /* IF THIS IS THE FIRST TIME FOR  */
         TM    SWITCHES,TIME2SW                                 03S0079
         BNZ   @RF00079                                         03S0079
*                                  /* THIS RECORD,                   */
*   DO;                            /* FORMAT THE FIRST LINE          */
*     CALL CHECKDEV (SIODEV,SIF);  /* ARE WE FORMATTING THIS DEVICE  */
         L     R14,DATAPTR(,R11)                                03S0081
         LA    R14,SIODEV(,R14)                                 03S0081
         ST    R14,@AL00001                                     03S0081
         LA    R14,SIF(,AEDITCBR)                               03S0081
         ST    R14,@AL00001+4                                   03S0081
         LA    R1,@AL00001                                      03S0081
         BAL   R14,CHECKDEV                                     03S0081
*     IF R15=0 THEN                                             03S0082
         LTR   R15,R15                                          03S0082
         BNZ   @RF00082                                         03S0082
*       DO;                        /* YES, FORMAT LINE ONE           */
*         R1=SNAPPARM;             /* SET UP PARM FOR FORMAT         */
         L     R1,SNAPPARM(,R11)                                03S0084
*         R0=ADDR(SIOPTRN1);       /* POINT TO FIRST PATTERN         */
         LA    R0,SIOPTRN1                                      03S0085
*         ADPLFMT1=ADDR(SIOLBLS);  /* INITIALIZE LABEL POINTER       */
         LA    R14,SIOLBLS                                      03S0086
         ST    R14,ADPLFMT1(,R1)                                03S0086
*         ADPLFMT2=DATAPTR;        /* INITIALIZE DATA POINTER        */
         L     R14,DATAPTR(,R11)                                03S0087
         ST    R14,ADPLFMT2(,R1)                                03S0087
*         CALL FRMT;               /* FORMAT PART OF LINE            */
         L     R15,FRMADDR(,R11)                                03S0088
         BALR  R14,R15                                          03S0088
*         R0=ADDR(SIOPTRN2);       /* SET UP 2ND PATTERN             */
         LA    R0,SIOPTRN2                                      03S0089
*         ADPLFMT2=ADDR(SIODEV);   /* POINT TO REST OF DATA          */
         L     R14,DATAPTR(,R11)                                03S0090
         LA    R14,SIODEV(,R14)                                 03S0090
         ST    R14,ADPLFMT2(,R1)                                03S0090
*         CALL FRMT;               /* FORMAT REST OF LINE            */
         L     R15,FRMADDR(,R11)                                03S0091
         BALR  R14,R15                                          03S0091
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT CHECKS CERTAIN FIELDS IN THE SIO RECORD FOR        */
*/*  'U/A' OR ASTERISKS. IF THE FIELD CONTAINS EITHER INDICATOR, THE */
*/*  FORMATTED LINE IN THE OUTPUT BUFFER IS MODIFIED TO REFLECT THE  */
*/*  INDICATION.                                                     */
*/*                                                                  */
*/********************************************************************/
* IF SIOASCB=UA(1:LENGTH(SIOASCB)) THEN  /* CHECK ASCB FIELD         */
         L     R14,DATAPTR(,R11)                                04S0092
         CLC   SIOASCB(4,R14),UA                                04S0092
         BNE   @RF00092                                         04S0092
*   BUFFER(16:23)=UA;                                           04S0093
         MVC   BUFFER+15(8,R4),UA                               04S0093
* ELSE                                                          04S0094
*   IF SIOASCB=ASTER(1:LENGTH(SIOASCB)) THEN                    04S0094
         B     @RC00092                                         04S0094
@RF00092 L     R14,DATAPTR(,R11)                                04S0094
         CLC   SIOASCB(4,R14),ASTER                             04S0094
         BNE   @RF00094                                         04S0094
*     BUFFER(16:23)=ASTER;                                      04S0095
         MVC   BUFFER+15(8,R4),ASTER                            04S0095
* IF SIOCPA=UA THEN                /* CHECK CPA FIELD                */
@RF00094 DS    0H                                               04S0096
@RC00092 L     R14,DATAPTR(,R11)                                04S0096
         CLC   SIOCPA(8,R14),UA                                 04S0096
         BNE   @RF00096                                         04S0096
*   DO;                                                         04S0097
*     BUFFER(59:66)=UA;                                         04S0098
         MVC   BUFFER+58(8,R4),UA                               04S0098
*     BUFFER(68:75)='';                                         04S0099
         MVI   BUFFER+67(R4),C' '                               04S0099
         MVC   BUFFER+68(7,R4),BUFFER+67(R4)                    04S0099
*   END;                                                        04S0100
* ELSE                                                          04S0101
*   IF SIOCPA=ASTER THEN                                        04S0101
         B     @RC00096                                         04S0101
@RF00096 L     R14,DATAPTR(,R11)                                04S0101
         CLC   SIOCPA(8,R14),ASTER                              04S0101
         BNE   @RF00101                                         04S0101
*     DO;                                                       04S0102
*       BUFFER(59:66)=ASTER;                                    04S0103
         MVC   BUFFER+58(8,R4),ASTER                            04S0103
*       BUFFER(68:75)=ASTER;                                    04S0104
         MVC   BUFFER+67(8,R4),ASTER                            04S0104
*     END;                                                      04S0105
* IF SIODSID=UA(1:LENGTH(SIODSID)) THEN  /* CHECK DSID FIELD         */
@RF00101 DS    0H                                               04S0106
@RC00096 L     R14,DATAPTR(,R11)                                04S0106
         CLC   SIODSID(4,R14),UA                                04S0106
         BNE   @RF00106                                         04S0106
*   BUFFER(97:104)=UA;                                          04S0107
         MVC   BUFFER+96(8,R4),UA                               04S0107
* ELSE                                                          04S0108
*   IF SIODSID=ASTER(1:LENGTH(SIODSID)) THEN                    04S0108
         B     @RC00106                                         04S0108
@RF00106 L     R14,DATAPTR(,R11)                                04S0108
         CLC   SIODSID(4,R14),ASTER                             04S0108
         BNE   @RF00108                                         04S0108
*     BUFFER(97:104)=ASTER;                                     04S0109
         MVC   BUFFER+96(8,R4),ASTER                            04S0109
*         TIME2SW=ON;              /* SET SWITCH TO FORMAT LINE 2    */
@RF00108 DS    0H                                               03S0110
@RC00106 OI    SWITCHES,TIME2SW                                 03S0110
*       END;                                                    03S0111
*     ELSE                         /* IF DEVICE IS NOT BEING DONE,   */
*       RC=RECSKIP;                /* SKIP THE RECORD                */
         B     @RC00082                                         03S0112
@RF00082 LA    RC,8                                             03S0112
*   END;                                                        03S0113
* ELSE                             /* IF THIS IS THE 2ND TIME FOR    */
*                                  /* THIS RECORD,                   */
*   DO;                            /* FORMAT THE SECOND LINE         */
         B     @RC00079                                         03S0114
@RF00079 DS    0H                                               03S0115
         TM    SWITCHES,TIME2SW2      FORMATTING CCWS NOW?      ZP60011
         BO    FMTCCWS                YES, GO TO IT             ZP60011
*     R1=SNAPPARM;                 /* SET UP PARM FOR FORMAT         */
         L     R1,SNAPPARM(,R11)                                03S0115
*     R0=ADDR(SIOPTRN3);           /* SET UP 3RD PATTERN     @ZA09664*/
         LA    R0,SIOPTRN3                                      03S0116
*     SIOCC=SIOCC&'30'X;           /*  CONDITION CODE        @ZA09664*/
         L     R14,DATAPTR(,R11)                                03S0117
         NI    SIOCC(R14),X'30'                                 03S0117
*     ADPLFMT2=ADDR(SIOCC);        /* POINT TO DATA                  */
         LA    R14,SIOCC(,R14)                                  03S0118
         ST    R14,ADPLFMT2(,R1)                                03S0118
*     CALL FRMT;                   /* FORMAT PART OF LINE 2          */
         L     R15,FRMADDR(,R11)                                03S0119
         BALR  R14,R15                                          03S0119
*     BLNKCC=' ';               /* BLANK OUT SECOND BYTE CC  @YM09151*/
         MVI   BLNKCC(R4),C' '                                  03S0120
*     R0=ADDR(SIOPTRN4);           /* SET UP 4TH PATTERN             */
         LA    R0,SIOPTRN4                                      03S0121
*     ADPLFMT2=ADDR(SIOSTS);       /* DATA FOR LAST PATTERN          */
         L     R14,DATAPTR(,R11)                                03S0122
         LA    R14,SIOSTS(,R14)                                 03S0122
         ST    R14,ADPLFMT2(,R1)                                03S0122
*     CALL FRMT;                   /* FORMAT REST OF RECORD          */
         L     R15,FRMADDR(,R11)                                03S0123
         BALR  R14,R15                                          03S0123
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT CHECKS CERTAIN FIELDS IN THE SIO RECORD FOR        */
*/*  'U/A' OR ASTERISKS. IF THE FIELD CONTAINS EITHER INDICATOR, THE */
*/*  FORMATTED LINE IN THE OUTPUT BUFFER IS MODIFIED TO REFLECT THE  */
*/*  INDICATION.                                                     */
*/*                                                                  */
*/********************************************************************/
* IF SIOFLAGS=UA(1:LENGTH(SIOFLAGS)) THEN  /* CHECK FLAGS FIELD      */
         L     R14,DATAPTR(,R11)                                04S0124
         CLC   SIOFLAGS(6,R14),UA                               04S0124
         BNE   @RF00124                                         04S0124
*   DO;                                                         04S0125
*     BUFFER(16:23)=UA;                                         04S0126
         MVC   BUFFER+15(8,R4),UA                               04S0126
*     BUFFER(25:28)='';                                         04S0127
         MVI   BUFFER+24(R4),C' '                               04S0127
         MVC   BUFFER+25(3,R4),BUFFER+24(R4)                    04S0127
*   END;                                                        04S0128
* ELSE                                                          04S0129
*   IF SIOFLAGS=ASTER(1:LENGTH(SIOFLAGS)) THEN                  04S0129
         B     @RC00124                                         04S0129
@RF00124 L     R14,DATAPTR(,R11)                                04S0129
         CLC   SIOFLAGS(6,R14),ASTER                            04S0129
         BNE   @RF00129                                         04S0129
*     DO;                                                       04S0130
*       BUFFER(16:23)=ASTER;                                    04S0131
         MVC   BUFFER+15(8,R4),ASTER                            04S0131
*       BUFFER(25:28)=ASTER(1:4);                               04S0132
         MVC   BUFFER+24(4,R4),ASTER                            04S0132
*     END;                                                      04S0133
* IF SIOSEEK=UA THEN               /* CHECK FLAGS FIELD              */
@RF00129 DS    0H                                               04S0134
@RC00124 L     R14,DATAPTR(,R11)                                04S0134
         CLC   SIOSEEK(8,R14),UA                                04S0134
         BNE   @RF00134                                         04S0134
*   DO;                                                         04S0135
*     BUFFER(59:66)=UA;                                         04S0136
         MVC   BUFFER+58(8,R4),UA                               04S0136
*     BUFFER(68:75)='';                                         04S0137
         MVI   BUFFER+67(R4),C' '                               04S0137
         MVC   BUFFER+68(7,R4),BUFFER+67(R4)                    04S0137
*   END;                                                        04S0138
* ELSE                                                          04S0139
*   IF SIOSEEK=ASTER THEN                                       04S0139
         B     @RC00134                                         04S0139
@RF00134 L     R14,DATAPTR(,R11)                                04S0139
         CLC   SIOSEEK(8,R14),ASTER                             04S0139
         BNE   @RF00139                                         04S0139
*     DO;                                                       04S0140
*       BUFFER(59:66)=ASTER;                                    04S0141
         MVC   BUFFER+58(8,R4),ASTER                            04S0141
*       BUFFER(68:75)=ASTER;                                    04S0142
         MVC   BUFFER+67(8,R4),ASTER                            04S0142
*     END;                                                      04S0143
* IF SIOCC=UA(1) THEN              /* CHECK CC FIELD                 */
@RF00139 DS    0H                                               04S0144
@RC00134 L     R14,DATAPTR(,R11)                                04S0144
         CLC   SIOCC(1,R14),UA                                  04S0144
         BNE   @RF00144                                         04S0144
*   BUFFER(81:83)=UA(1:3);    /*                             @YM09151*/
         MVC   BUFFER+80(3,R4),UA                               04S0145
* ELSE                                                          04S0146
*   IF SIOCC=ASTER(1) THEN                                      04S0146
         B     @RC00144                                         04S0146
@RF00144 L     R14,DATAPTR(,R11)                                04S0146
         CLC   SIOCC(1,R14),ASTER                               04S0146
         BNE   @RF00146                                         04S0146
*     BUFFER(81:82)=ASTER(1:2);       /*                     @YM09151*/
         MVC   BUFFER+80(2,R4),ASTER                            04S0147
*     TIME2SW=OFF;                 /* RESET SECOND TIME SWITCH       */
@RF00146 DS    0H                                               03S0148
@RC00144 NI    SWITCHES,255-TIME2SW                             03S0148
*   END;                                                        03S0149
*       END;                                                    02S0150
         SLR   R14,R14                CLEAR FOR INSERT          ZP60011
         ICM   R14,7,RECDLL(AEDITCBR) GET THE RECORD LENGTH     ZP60011
         S     R14,DATAPTR(,R11)                                ZP60011
         A     R14,RECPTR(,R11)       GET SIOREC LENGTH         ZP60011
         LA    R0,SIOCCWS-SIOREC      GET NEW DATA OFFSET       ZP60011
         CR    R14,R0                 CCW DATA PRESENT?         ZP60011
         BNH   @RC00077               NO, NOT LONG ENOUGH       ZP60011
         L     R14,DATAPTR(,R11)      POINT TO DATA             ZP60011
         OI    SWITCHES,TIME2SW+TIME2SW2                        ZP60011
         XC    ZEROCCW,ZEROCCW        SETUP CCW WORK AREA       ZP60011
         MVC   CCWMAX+3(1),SIOCCW#+1(R14)                       ZP60011
         CLI   CCWMAX+3,28            ENFORCE MAXIMUM           ZP60011
         BNH   *+8                    (MORE WOULD LIKELY EXCEED ZP60011
         MVI   CCWMAX+3,28             GTF RECORD SIZE LIMIT)   ZP60011
         TM    SIOCCW#(R14),X'80'     ANY WRITE DATA CAPTURED?  ZP60011
         BNO   *+10                   NO                        ZP60011
         MVC   BUFFER+50(7,R4),WRTTXT YES, LABEL THIS           ZP60011
         SLR   RC,RC                  NEED TO RETURN BACK HERE  ZP60011
*     ELSE                                                      02S0151
*       DO;                                                     02S0151
         B     @RC00077                                         02S0151
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT WAS ADDED BY USERMOD ZP60011 TO FORMAT ANY CCWS    */
*/*  CAPTURED IN THE SIO TRACE RECORD.  ONE CCW IS FORMATTED PER     */
*/*  PRINT LINE.                                                     */
*/*                                                                  */
*/********************************************************************/
FMTCCWS  L     R14,DATAPTR(,R11)      POINT TO RECORD'S DATA
         L     R15,CCWNUM
         SLL   R15,3
         LA    R14,SIOCCWS(R15,R14)   POINT TO CURRENT CCW
         MVC   WORKCCW,0(R14)         COPY IT FOR PROCESSING
         LA    R0,CCWPTRN             SET UP PATTERN ADDRESS
         L     R1,SNAPPARM(,R11)      POINT TO PARM FOR FORMAT
         LA    R14,CCWLBLS            INITIALIZE LABEL POINTER
         ST    R14,ADPLFMT1(,R1)
         LA    R14,WORKCCW            INITIALIZE DATA POINTER
         ST    R14,ADPLFMT2(,R1)
         L     R15,FRMADDR(,R11)      FORMAT THE LINE
         BALR  R14,R15
         MVC   BUFFER+13(1,R4),CCWNUM+3
         TR    BUFFER+13(1,R4),CCW#TB SHOW RELATIVE CCW NUMBER
         IC    R14,WORKCCW            GET COMMAND CODE
         LA    R15,CCTABB             POINT TO LITERAL TABLE
         TM    WORKCCW,X'03'          LOW TWO BITS ZERO?
         BNZ   CCTABOK                NO, HAVE RIGHT TABLE
         LA    R15,CCTABA             YES, POINT TO LITERAL TABLE
         SRL   R14,2                  DISCARD ZERO BITS
CCTABOK  LA    R0,3                   GET MASK
         NR    R14,R0                 JUST KEEP LOW TWO BITS
         SLL   R14,3                  GET TABLE INDEX
         AR    R15,R14                POINT TO LITERAL
         MVC   BUFFER+27(8,R4),0(R15) SHOW CCW OPERATION TYPE
         TM    WORKCCW+4,X'80'        CHAIN DATA?
         BNO   *+10                   NO
         MVC   BUFFER+59(2,R4),LITCD  YES
         TM    WORKCCW+4,X'40'        CHAIN COMMAND?
         BNO   *+10                   NO
         MVC   BUFFER+62(2,R4),LITCC  YES
         TM    WORKCCW+4,X'20'        SUPPRESS LENGTH INDICATOR?
         BNO   *+10                   NO
         MVC   BUFFER+65(3,R4),LITSLI YES
         TM    WORKCCW+4,X'10'        SUPPRESS DATA TRANSFER?
         BNO   *+10                   NO
         MVC   BUFFER+69(4,R4),LITSKP YES
         TM    WORKCCW+4,X'08'        PROGRAM CONTROLLED INTERRUPTION?
         BNO   *+10                   NO
         MVC   BUFFER+74(3,R4),LITPCI YES
         TM    WORKCCW+4,X'04'        INDIRECT ADDRESSING?
         BNO   *+10                   NO
         MVC   BUFFER+78(3,R4),LITIDA YES
         SLR   R14,R14
         ICM   R14,3,WORKCCW+6        GET BYTE COUNT
         CVD   R14,WORK
         MVC   BUFFER+108(7,R4),ED5MSK
         LA    R1,BUFFER+113(,R4)     IN CASE COUNT IS UNDER 10
         EDMK  BUFFER+108(6,R4),WORK+5
         BCTR  R1,0
         MVI   0(R1),C'('
         LA    R0,1
         A     R0,CCWNUM              INCREMENT CCW NUMBER
         ST    R0,CCWNUM
         SLR   RC,RC                  MAY NEED TO COME HERE AGAIN
         CLC   CCWNUM,CCWMAX          PROCESSED LAST CCW?
         BL    @RC00077               NO, NEED TO RETURN
         LA    RC,4                   YES, NO NEED TO RETURN
         NI    SWITCHES,255-TIME2SW-TIME2SW2
         XC    ZEROCCW,ZEROCCW        CLEAN UP WORK AREA
         B     @RC00077               RETURN TO CALLER
*/************ END OF ZP60011 CCW FORMATTING ROUTINE *****************/
@RF00077 DS    0H                                               02S0152
*         IF RECEID=IMDMIO2        /* IF IO RECORD OR                */
*            RECEID=IMDMPCI        /* PCI RECORD OR                  */
*            RECEID=IMDMEOS THEN   /* EOS RECORD, FORMAT 1 LINE      */
         L     R14,EIDPTR(,R11)                                 02S0152
         CLC   RECEID(2,R14),@CB00210                           02S0152
         BE    @RT00152                                         02S0152
         CLC   RECEID(2,R14),@CB00202                           02S0152
         BE    @RT00152                                         02S0152
         CLC   RECEID(2,R14),@CB00224                           02S0152
         BNE   @RF00152                                         02S0152
@RT00152 DS    0H                                               02S0153
*           DO;                                                 02S0153
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT FORMATS A LINE OF THE IO, PCI, AND EOS RECORDS.    */
*/*                                                                  */
*/********************************************************************/
* IF TIME2SW=OFF THEN              /* IF THIS IS THE FIRST TIME FOR  */
         TM    SWITCHES,TIME2SW                                 03S0154
         BNZ   @RF00154                                         03S0154
*                                  /* THIS RECORD,                   */
*   DO;                            /* FORMAT THE FIRST LINE          */
*     CALL CHECKDEV (IODEV,IO);    /* ARE WE FORMATTING THIS DEVICE  */
         L     R14,DATAPTR(,R11)                                03S0156
         LA    R14,IODEV(,R14)                                  03S0156
         ST    R14,@AL00001                                     03S0156
         LA    R14,IO(,AEDITCBR)                                03S0156
         ST    R14,@AL00001+4                                   03S0156
         LA    R1,@AL00001                                      03S0156
         BAL   R14,CHECKDEV                                     03S0156
*     IF R15=0 THEN                                             03S0157
         LTR   R15,R15                                          03S0157
         BNZ   @RF00157                                         03S0157
*       DO;                        /* YES, FORMAT LINE ONE           */
*         IF RECEID=IMDMIO2 THEN   /* CHECK FOR IO RECORD            */
         L     R14,EIDPTR(,R11)                                 03S0159
         CLC   RECEID(2,R14),@CB00210                           03S0159
         BNE   @RF00159                                         03S0159
*           BUFFER(1:3)='IO ';     /* PUT RECORD TYPE IN LINE        */
         MVC   BUFFER(3,R4),@CC00637                            03S0160
*         IF RECEID=IMDMPCI THEN   /* CHECK FOR PCI RECORD           */
@RF00159 L     R14,EIDPTR(,R11)                                 03S0161
         CLC   RECEID(2,R14),@CB00202                           03S0161
         BNE   @RF00161                                         03S0161
*           BUFFER(1:3)='PCI';     /* PUT RECORD TYPE IN LINE        */
         MVC   BUFFER(3,R4),@CC00638                            03S0162
*         IF RECEID=IMDMEOS THEN   /* CHECK FOR EOS RECORD           */
@RF00161 L     R14,EIDPTR(,R11)                                 03S0163
         CLC   RECEID(2,R14),@CB00224                           03S0163
         BNE   @RF00163                                         03S0163
*           BUFFER(1:3)='EOS';     /* PUT RECORD TYPE IN LINE        */
         MVC   BUFFER(3,R4),@CC00639                            03S0164
*         R1=SNAPPARM;             /* SET UP PARM FOR FORMAT         */
@RF00163 L     R1,SNAPPARM(,R11)                                03S0165
*         R0=ADDR(IOPTRN1);        /* POINT TO FIRST PATTERN         */
         LA    R0,IOPTRN1                                       03S0166
*         ADPLFMT1=ADDR(IOLBLS);   /* INITIALIZE LABEL POINTER       */
         LA    R14,IOLBLS                                       03S0167
         ST    R14,ADPLFMT1(,R1)                                03S0167
*         ADPLFMT2=DATAPTR;        /* INITIALIZE DATA POINTER        */
         L     R14,DATAPTR(,R11)                                03S0168
         ST    R14,ADPLFMT2(,R1)                                03S0168
*         CALL FRMT;               /* FORMAT PART OF LINE            */
         L     R15,FRMADDR(,R11)                                03S0169
         BALR  R14,R15                                          03S0169
*         R0=ADDR(IOPTRN2);        /* SET UP 2ND PATTERN             */
         LA    R0,IOPTRN2                                       03S0170
*         ADPLFMT2=ADDR(IODEV);    /* POINT TO REST OF DATA          */
         L     R14,DATAPTR(,R11)                                03S0171
         LA    R14,IODEV(,R14)                                  03S0171
         ST    R14,ADPLFMT2(,R1)                                03S0171
*         CALL FRMT;               /* FORMAT REST OF LINE            */
         L     R15,FRMADDR(,R11)                                03S0172
         BALR  R14,R15                                          03S0172
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT CHECKS CERTAIN FIELDS IN THE IO RECORD FOR 'N/A',  */
*/*  'U/A' OR ASTERISKS. IF THE FIELD CONTAINS ANY INDICATOR, THE    */
*/*  FORMATTED LINE IN THE OUTPUT BUFFER IS MODIFIED TO REFLECT THE  */
*/*  INDICATION.                                                     */
*/*                                                                  */
*/********************************************************************/
* IF IOASCB=UA(1:LENGTH(IOASCB)) THEN  /* CHECK ASCB FIELD           */
         L     R14,DATAPTR(,R11)                                04S0173
         CLC   IOASCB(4,R14),UA                                 04S0173
         BNE   @RF00173                                         04S0173
*   BUFFER(16:23)=UA;                                           04S0174
         MVC   BUFFER+15(8,R4),UA                               04S0174
* ELSE                                                          04S0175
*   IF IOASCB=ASTER(1:LENGTH(IOASCB)) THEN                      04S0175
         B     @RC00173                                         04S0175
@RF00173 L     R14,DATAPTR(,R11)                                04S0175
         CLC   IOASCB(4,R14),ASTER                              04S0175
         BNE   @RF00175                                         04S0175
*     BUFFER(16:23)=ASTER;                                      04S0176
         MVC   BUFFER+15(8,R4),ASTER                            04S0176
* IF IOTCB=UA(1:LENGTH(IOTCB)) THEN  /* CHECK TCB FIELD              */
@RF00175 DS    0H                                               04S0177
@RC00173 L     R14,DATAPTR(,R11)                                04S0177
         CLC   IOTCB(4,R14),UA                                  04S0177
         BNE   @RF00177                                         04S0177
*   BUFFER(82:89)=UA;                                           04S0178
         MVC   BUFFER+81(8,R4),UA                               04S0178
* ELSE                                                          04S0179
*   IF IOTCB=ASTER(1:LENGTH(IOTCB)) THEN                        04S0179
         B     @RC00177                                         04S0179
@RF00177 L     R14,DATAPTR(,R11)                                04S0179
         CLC   IOTCB(4,R14),ASTER                               04S0179
         BNE   @RF00179                                         04S0179
*     BUFFER(82:89)=ASTER;                                      04S0180
         MVC   BUFFER+81(8,R4),ASTER                            04S0180
*   ELSE                                                        04S0181
*     IF IOTCB=NA(1:LENGTH(IOTCB)) THEN                         04S0181
         B     @RC00179                                         04S0181
@RF00179 L     R14,DATAPTR(,R11)                                04S0181
         CLC   IOTCB(4,R14),NA                                  04S0181
         BNE   @RF00181                                         04S0181
*       BUFFER(82:89)=NA;                                       04S0182
         MVC   BUFFER+81(8,R4),NA                               04S0182
* IF IODSID=UA(1:LENGTH(IODSID)) THEN  /* CHECK DSID FIELD           */
@RF00181 DS    0H                                               04S0183
@RC00179 DS    0H                                               04S0183
@RC00177 L     R14,DATAPTR(,R11)                                04S0183
         CLC   IODSID(4,R14),UA                                 04S0183
         BNE   @RF00183                                         04S0183
*   BUFFER(97:104)=UA;                                          04S0184
         MVC   BUFFER+96(8,R4),UA                               04S0184
* ELSE                                                          04S0185
*   IF IODSID=ASTER(1:LENGTH(IODSID)) THEN                      04S0185
         B     @RC00183                                         04S0185
@RF00183 L     R14,DATAPTR(,R11)                                04S0185
         CLC   IODSID(4,R14),ASTER                              04S0185
         BNE   @RF00185                                         04S0185
*     BUFFER(97:104)=ASTER;                                     04S0186
         MVC   BUFFER+96(8,R4),ASTER                            04S0186
*         TIME2SW=ON;              /* SET SWITCH TO FORMAT LINE 2    */
@RF00185 DS    0H                                               03S0187
@RC00183 OI    SWITCHES,TIME2SW                                 03S0187
*       END;                                                    03S0188
*     ELSE                         /* IF DEVICE IS NOT BEING DONE,   */
*       RC=RECSKIP;                /* SKIP THE RECORD                */
         B     @RC00157                                         03S0189
@RF00157 LA    RC,8                                             03S0189
*   END;                                                        03S0190
* ELSE                             /* IF THIS IS THE 2ND TIME FOR    */
*                                  /* THIS RECORD,                   */
*   DO;                            /* FORMAT THE SECOND LINE         */
         B     @RC00154                                         03S0191
@RF00154 DS    0H                                               03S0192
*     R1=SNAPPARM;                 /* SET UP PARM FOR FORMAT         */
         L     R1,SNAPPARM(,R11)                                03S0192
*     R0=ADDR(IOPTRN3);            /* SET UP 3RD PATTERN             */
         LA    R0,IOPTRN3                                       03S0193
*     ADPLFMT2=ADDR(IOCSW);        /* POINT TO DATA                  */
         L     R14,DATAPTR(,R11)                                03S0194
         LA    R14,IOCSW(,R14)                                  03S0194
         ST    R14,ADPLFMT2(,R1)                                03S0194
*     CALL FRMT;                   /* FORMAT PART OF LINE 2          */
         L     R15,FRMADDR(,R11)                                03S0195
         BALR  R14,R15                                          03S0195
*     R0=ADDR(IOPTRN4);            /* SET UP 4TH PATTERN             */
         LA    R0,IOPTRN4                                       03S0196
*     ADPLFMT2=ADDR(IOFLA);        /* DATA FOR LAST PATTERN          */
         L     R14,DATAPTR(,R11)                                03S0197
         LA    R14,IOFLA(,R14)                                  03S0197
         ST    R14,ADPLFMT2(,R1)                                03S0197
*     CALL FRMT;                   /* FORMAT REST OF RECORD          */
         L     R15,FRMADDR(,R11)                                03S0198
         BALR  R14,R15                                          03S0198
*/********************************************************************/
*/*                                                                  */
*/*  THIS SEGMENT CHECKS CERTAIN FIELDS IN THE IO RECORD FOR 'N/A',  */
*/*  'U/A' OR ASTERISKS. IF THE FIELD CONTAINS ANY INDICATOR, THE    */
*/*  FORMATTED LINE IN THE OUTPUT BUFFER IS MODIFIED TO REFLECT THE  */
*/*  INDICATION.                                                     */
*/*                                                                  */
*/********************************************************************/
* IF IOSNS=UA(1:LENGTH(IOSNS)) THEN  /* CHECK SNS FIELD              */
         L     R14,DATAPTR(,R11)                                04S0199
         CLC   IOSNS(2,R14),UA                                  04S0199
         BNE   @RF00199                                         04S0199
*   BUFFER(41:44)=UA(1:4);                                      04S0200
         MVC   BUFFER+40(4,R4),UA                               04S0200
* ELSE                                                          04S0201
*   IF IOSNS=ASTER(1:LENGTH(IOSNS)) THEN                        04S0201
         B     @RC00199                                         04S0201
@RF00199 L     R14,DATAPTR(,R11)                                04S0201
         CLC   IOSNS(2,R14),ASTER                               04S0201
         BNE   @RF00201                                         04S0201
*     BUFFER(41:44)=ASTER(1:4);                                 04S0202
         MVC   BUFFER+40(4,R4),ASTER                            04S0202
*   ELSE                                                        04S0203
*     IF IOSNS=NA(1:LENGTH(IOSNS)) THEN                         04S0203
         B     @RC00201                                         04S0203
@RF00201 L     R14,DATAPTR(,R11)                                04S0203
         CLC   IOSNS(2,R14),NA                                  04S0203
         BNE   @RF00203                                         04S0203
*       BUFFER(41:44)=NA(1:4);                                  04S0204
         MVC   BUFFER+40(4,R4),NA                               04S0204
* IF IOCPA=UA THEN                 /* CHECK CPA FIELD                */
@RF00203 DS    0H                                               04S0205
@RC00201 DS    0H                                               04S0205
@RC00199 L     R14,DATAPTR(,R11)                                04S0205
         CLC   IOCPA(8,R14),UA                                  04S0205
         BNE   @RF00205                                         04S0205
*   DO;                                                         04S0206
*     BUFFER(59:66)=UA;                                         04S0207
         MVC   BUFFER+58(8,R4),UA                               04S0207
*     BUFFER(68:75)='';                                         04S0208
         MVI   BUFFER+67(R4),C' '                               04S0208
         MVC   BUFFER+68(7,R4),BUFFER+67(R4)                    04S0208
*   END;                                                        04S0209
* ELSE                                                          04S0210
*   IF IOCPA=ASTER THEN                                         04S0210
         B     @RC00205                                         04S0210
@RF00205 L     R14,DATAPTR(,R11)                                04S0210
         CLC   IOCPA(8,R14),ASTER                               04S0210
         BNE   @RF00210                                         04S0210
*     DO;                                                       04S0211
*       BUFFER(59:66)=ASTER;                                    04S0212
         MVC   BUFFER+58(8,R4),ASTER                            04S0212
*       BUFFER(68:75)=ASTER;                                    04S0213
         MVC   BUFFER+67(8,R4),ASTER                            04S0213
*     END;                                                      04S0214
* IF IOFLAGS(1:4)=UA(1:4) THEN     /* CHECK 1ST PART OF FLAGS FIELD  */
@RF00210 DS    0H                                               04S0215
@RC00205 L     R14,DATAPTR(,R11)                                04S0215
         CLC   IOFLAGS(4,R14),UA                                04S0215
         BNE   @RF00215                                         04S0215
*   BUFFER(82:89)=UA;                                           04S0216
         MVC   BUFFER+81(8,R4),UA                               04S0216
* ELSE                                                          04S0217
*   IF IOFLAGS(1:4)=ASTER(1:4) THEN                             04S0217
         B     @RC00215                                         04S0217
@RF00215 L     R14,DATAPTR(,R11)                                04S0217
         CLC   IOFLAGS(4,R14),ASTER                             04S0217
         BNE   @RF00217                                         04S0217
*     BUFFER(82:89)=ASTER;                                      04S0218
         MVC   BUFFER+81(8,R4),ASTER                            04S0218
* IF IOFLAGS(5:9)=ASTER(1:5) THEN  /* CHECK 2ND PART OF FLAGS FIELD  */
@RF00217 DS    0H                                               04S0219
@RC00215 L     R14,DATAPTR(,R11)                                04S0219
         CLC   IOFLAGS+4(5,R14),ASTER                           04S0219
         BNE   @RF00219                                         04S0219
*   DO;                                                         04S0220
*     BUFFER(92:99)=ASTER;                                      04S0221
         MVC   BUFFER+91(8,R4),ASTER                            04S0221
*     BUFFER(101:102)=ASTER(1:2);                               04S0222
         MVC   BUFFER+100(2,R4),ASTER                           04S0222
*   END;                                                        04S0223
*     TIME2SW=OFF;                 /* RESET SECOND TIME SWITCH       */
@RF00219 NI    SWITCHES,255-TIME2SW                             03S0224
*   END;                                                        03S0225
*           END;                                                02S0226
@RC00154 DS    0H                                               02S0227
*       END;                                                    02S0227
@RF00152 DS    0H                                               02S0228
*   END;                                                        02S0228
@RC00077 DS    0H                                               02S0229
*   END;                                                        01S0229
@RC00063 DS    0H                                               01S0230
* RETURN CODE(RC);                 /* RETURN CODE HAS BEEN SET UP    */
@RF00060 LR    R15,RC                                           01S0230
         L     R13,4(,R13)                                      01S0230
         L     R14,12(,R13)                                     01S0230
         LM    R0,R12,20(R13)                                   01S0230
         BR    R14                                              01S0230
*/********************************************************************/
*/*                                                                  */
*/*  THIS SUBROUTINE DETERMINES WHETHER THE DEVICE IN THE TRACE      */
*/*  RECORD IS TO BE TRACED OR NOT, AND PASSES A RETURN CODE BACK    */
*/*  IN REGISTER 15.                                                 */
*/*                                                                  */
*/********************************************************************/
*CHECKDEV:                                                      02S0231
* PROC (DEV,TABL);                                              02S0231
CHECKDEV STM   R14,R12,12(R13)                                  02S0231
         MVC   @PC00002(8),0(R1)                                02S0231
* DCL DEV CHAR(2);                 /* DEVICE TO BE CHECKED           */
* DCL 1 TABL,                      /* TABLE TO CHECK WITH            */
*       3 * BIT(32),                                            02S0233
*         5 ALL BIT(1),            /* ALL DEVICES ACCEPTABLE         */
*         5 SEL BIT(1),            /* DEVICES IN LIST ACCEPTABLE     */
*       3 DVCS(50) CHAR(2);        /* LIST OF ACCEPTABLE DEVICES     */
* DCL DELIM CHAR(2) CONSTANT('  '); /* LIST DELIMITER                */
* IF ALL=ON THEN                   /* IF ALL DEVICES ARE OK,         */
         L     R14,@PC00002+4                                   02S0235
         TM    ALL(R14),B'10000000'                             02S0235
         BNO   @RF00235                                         02S0235
*   R15=0;                         /* SET GOOD RETURN CODE           */
         SLR   R15,R15                                          02S0236
* ELSE                             /* IF ALL ARE NOT OK,             */
*   DO;                            /* CHECK FOR SOME OK              */
         B     @RC00235                                         02S0237
@RF00235 DS    0H                                               02S0238
*     IF SEL=ON THEN               /* IF SOME DEVICES ARE OK,        */
         L     R14,@PC00002+4                                   02S0238
         TM    SEL(R14),B'01000000'                             02S0238
         BNO   @RF00238                                         02S0238
*       DO;                        /* CHECK FOR SPECIFIC DEVICE      */
*         DO CTR=1 TO DIM(DVCS) WHILE DEVFOUND=OFF;             02S0240
         LA    CTR,1                                            02S0240
@DL00240 TM    SWITCHES,DEVFOUND                                02S0240
         BNZ   @DC00240                                         02S0240
*           IF DVCS(CTR)=DEV THEN  /* IF DEVICE MATCH FOUND,         */
         LR    R14,CTR                                          02S0241
         ALR   R14,R14                                          02S0241
         L     R8,@PC00002+4                                    02S0241
         L     R7,@PC00002                                      02S0241
         ALR   R8,R14                                           02S0241
         CLC   DVCS-2(2,R8),DEV(R7)                             02S0241
         BNE   @RF00241                                         02S0241
*             DEVFOUND=ON;         /* INDICATE SO                    */
         OI    SWITCHES,DEVFOUND                                02S0242
*           ELSE                                                02S0243
*             IF DVCS(CTR)=DELIM THEN /* IF DELIMITER REACHED,       */
         B     @RC00241                                         02S0243
@RF00241 LR    R14,CTR                                          02S0243
         ALR   R14,R14                                          02S0243
         L     R8,@PC00002+4                                    02S0243
         ALR   R8,R14                                           02S0243
         CLC   DVCS-2(2,R8),@CC00658                            02S0243
         BNE   @RF00243                                         02S0243
*               CTR=DIM(DVCS);     /* SET CTR TO LEAVE LOOP          */
         LA    CTR,50                                           02S0244
*         END;                                                  02S0245
@RF00243 DS    0H                                               02S0245
@RC00241 AL    CTR,@CF00044                                     02S0245
         C     CTR,@CF00103                                     02S0245
         BNH   @DL00240                                         02S0245
@DC00240 DS    0H                                               02S0246
*         IF DEVFOUND=ON THEN      /* IF DEVICE WAS OK TO TRACE,     */
         TM    SWITCHES,DEVFOUND                                02S0246
         BNO   @RF00246                                         02S0246
*           DO;                    /* RESET SWITCH, SET RETURN CODE  */
*             DEVFOUND=OFF;                                     02S0248
         NI    SWITCHES,255-DEVFOUND                            02S0248
*             R15=0;                                            02S0249
         SLR   R15,R15                                          02S0249
*           END;                                                02S0250
*         ELSE                     /* IF DEVICE MATCH NOT FOUND,     */
*           R15=4;                 /* SET BAD RETURN CODE            */
         B     @RC00246                                         02S0251
@RF00246 LA    R15,4                                            02S0251
*       END;                                                    02S0252
*     ELSE                         /* IF NO DEVICES ARE BEING TRACED, *
*       R15=4;                     /* SET BAD RETURN CODE            */
         B     @RC00238                                         02S0253
@RF00238 LA    R15,4                                            02S0253
*   END;                                                        02S0254
@RC00238 DS    0H                                               02S0255
* RETURN CODE(R15);                                             02S0255
@RC00235 L     R14,12(,R13)                                     02S0255
         LM    R0,R12,20(R13)                                   02S0255
         BR    R14                                              02S0255
* END CHECKDEV;                                                 02S0256
* END AMDSYS00                                                  01S0257
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSUT5  (SYSPROLG)                                        *
*/*%INCLUDE SYSUT5  (MACROS  )                                        *
*/*%INCLUDE SYSUT5  (DECLARES)                                        *
*/*%INCLUDE SYSLIB  (AMDPRTAB)                                        *
*/*%INCLUDE SYSLIB  (IHAABDPL)                                        *
*/*%INCLUDE SYSLIB  (IMDMEDIT)                                        *
*/*%INCLUDE SYSUT5  (CHECKREC)                                        *
*/*%INCLUDE SYSUT5  (FMTREC  )                                        *
*/*%INCLUDE SYSUT5  (FMTUIO  )                                        *
*/*%INCLUDE SYSUT5  (FMTSIO  )                                        *
*/*%INCLUDE SYSUT5  (CKSIOL1 )                                        *
*/*%INCLUDE SYSUT5  (CKSIOL2 )                                        *
*/*%INCLUDE SYSUT5  (FMTIO   )                                        *
*/*%INCLUDE SYSUT5  (CKIOL1  )                                        *
*/*%INCLUDE SYSUT5  (CKIOL2  )                                        *
*/*%INCLUDE SYSUT5  (CHECKDEV)                                        *
*;                                                              01S0257
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00002 DS    2F
@AL00001 DS    2A
AMDSYS00 CSECT
         DS    0F
@CF00044 DC    F'1'
@CF00098 DC    F'4'
@CF00103 DC    F'50'
@DATD    DSECT
         DS    0D
SWITCHES DS    BL1
TIME2SW  EQU   B'10000000'
LOOPDONE EQU   B'01000000'
DEVFOUND EQU   B'00100000'
TIME2SW2 EQU   B'00010000'                                      ZP60011
         DS    0D                                               ZP60011
ZEROCCW  DS    0CL24                       AREA TO CLEAR        ZP60011
WORKCCW  DS    D                                                ZP60011
WORK     DS    D                                                ZP60011
CCWMAX   DS    F                                                ZP60011
CCWNUM   DS    F                                                ZP60011
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
AMDSYS00 CSECT
         NOPR  ((@ENDDATD-@DATD)/201*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC00637 DC    C'IO '
@CC00638 DC    C'PCI'
@CC00639 DC    C'EOS'
@CC00658 DC    C'  '
@CB00202 DC    X'2100'
@CB00208 DC    X'5201'
@CB00210 DC    X'5200'
@CB00212 DC    X'5100'
@CB00224 DC    X'5101'
@CB00622 DC    X'EEEE'
UA       DC    CL8'U/A'
NA       DC    CL8'N/A'
ASTER    DC    CL8'********'
         DS    CL1
UIOPTRN  DS    CL41
         ORG   UIOPTRN
@NM00004 DC    AL1(55)
@NM00005 DC    AL1(51)
@NM00006 DC    AL1(10)
@NM00007 DC    AL1(15)
@NM00008 DC    AL4(UIOLBLS)
@NM00009 DC    AL1(21)
@NM00010 DC    AL1(33)
@NM00011 DC    AL1(25)
@NM00012 DC    AL1(29)
@NM00013 DC    AL1(53)
@NM00014 DC    AL1(55)
@NM00015 DC    AL1(35)
@NM00016 DC    AL1(40)
@NM00017 DC    AL1(21)
@NM00018 DC    AL1(99)
@NM00019 DC    AL1(50)
@NM00020 DC    AL1(58)
@NM00021 DC    AL1(20)
@NM00022 DC    AL1(3)
@NM00023 DC    AL1(0)
@NM00024 DC    AL1(67)
@NM00025 DC    AL1(21)
@NM00026 DC    AL1(35)
@NM00027 DC    AL1(77)
@NM00028 DC    AL1(81)
@NM00029 DC    AL1(20)
@NM00030 DC    AL1(3)
@NM00031 DC    AL1(0)
@NM00032 DC    AL1(90)
@NM00033 DC    AL1(21)
@NM00034 DC    AL1(33)
@NM00035 DC    AL1(0)
@NM00036 DC    AL1(5)
         DC    AL1(21,16,100,103)
@NM00037 DC    AL1(0)
         ORG   UIOPTRN+41
UIOLBLS  DC    CL26'ASCBCPUJOBNOLD PSWCSWUIOCS'
         DS    CL1
SIOPTRN1 DS    CL29
         ORG   SIOPTRN1
@NM00038 DC    AL1(23)
@NM00039 DC    XL1'33'
@NM00040 DC    AL1(10)
@NM00041 DC    AL1(15)
@NM00042 DC    AL4(SIOLBLS)
@NM00043 DC    AL1(21)
@NM00044 DC    XL1'21'
@NM00045 DC    AL1(25)
@NM00046 DC    AL1(29)
@NM00047 DC    AL1(53)
@NM00048 DC    XL1'37'
@NM00049 DC    AL1(35)
@NM00050 DC    AL1(40)
@NM00051 DC    AL1(21)
@NM00052 DC    XL1'63'
@NM00053 DC    AL1(50)
@NM00054 DC    AL1(58)
@NM00055 DC    AL1(20)
@NM00056 DC    AL1(3)
@NM00057 DC    AL1(0)
@NM00058 DC    AL1(67)
@NM00059 DC    AL1(21)
@NM00060 DC    AL1(51)
@NM00061 DC    AL1(91)
@NM00062 DC    AL1(96)
@NM00063 DC    AL1(0)
         ORG   SIOPTRN1+29
SIOLBLS  DS    CL47
         ORG   SIOLBLS
@NM00099 DC    CL22'ASCBCPUJOBNR/V CPADSID'
@NM00100 DC    CL6'SIOCAW'
@NM00101 DC    CL2'CC'
@NM00102 DC    CL17'STATSK ADDRFLGSCS'
         ORG   SIOLBLS+47
SIOPTRN2 DS    CL9
         ORG   SIOPTRN2
@NM00064 DC    AL1(21)
@NM00065 DC    AL1(33)
@NM00066 DC    AL1(0)
@NM00067 DC    AL1(5)
@NM00068 DC    AL1(21)
@NM00069 DC    AL1(35)
@NM00070 DC    AL1(77)
@NM00071 DC    AL1(81)
@NM00072 DC    AL1(0)
         ORG   SIOPTRN2+9
         DS    CL3
SIOPTRN3 DS    CL5
         ORG   SIOPTRN3
@NM00073 DC    AL1(21)
@NM00074 DC    AL1(16)
@NM00075 DC    AL1(77)
@NM00076 DC    AL1(80)
@NM00077 DC    AL1(0)
         ORG   SIOPTRN3+5
         DS    CL3
SIOPTRN4 DS    CL25
         ORG   SIOPTRN4
@NM00078 DC    AL1(21)
@NM00079 DC    AL1(49)
@NM00080 DC    AL1(35)
@NM00081 DC    AL1(40)
@NM00082 DC    AL1(21)
@NM00083 DC    AL1(99)
@NM00084 DC    AL1(50)
@NM00085 DC    AL1(58)
@NM00086 DC    AL1(20)
@NM00087 DC    AL1(3)
@NM00088 DC    AL1(0)
@NM00089 DC    AL1(67)
@NM00090 DC    AL1(21)
@NM00091 DC    AL1(51)
@NM00092 DC    AL1(10)
@NM00093 DC    AL1(15)
@NM00094 DC    AL1(20)
@NM00095 DC    AL1(1)
@NM00096 DC    AL1(0)
@NM00097 DC    AL1(24)
         DC    AL1(21,16,84,87)
@NM00098 DC    AL1(0)
         ORG   SIOPTRN4+25
         DS    CL3
IOPTRN1  DS    CL29
         ORG   IOPTRN1
@NM00103 DC    AL1(23)
@NM00104 DC    AL1(51)
@NM00105 DC    AL1(10)
@NM00106 DC    AL1(15)
@NM00107 DC    AL4(IOLBLS)
@NM00108 DC    AL1(21)
@NM00109 DC    AL1(33)
@NM00110 DC    AL1(25)
@NM00111 DC    AL1(29)
@NM00112 DC    AL1(53)
@NM00113 DC    AL1(55)
@NM00114 DC    AL1(35)
@NM00115 DC    AL1(40)
@NM00116 DC    AL1(21)
@NM00117 DC    AL1(99)
@NM00118 DC    AL1(50)
@NM00119 DC    AL1(58)
@NM00120 DC    AL1(20)
@NM00121 DC    AL1(3)
@NM00122 DC    AL1(0)
@NM00123 DC    AL1(67)
@NM00124 DC    AL1(21)
@NM00125 DC    AL1(35)
@NM00126 DC    AL1(77)
@NM00127 DC    AL1(81)
@NM00128 DC    AL1(0)
         ORG   IOPTRN1+29
IOLBLS   DS    CL43
         ORG   IOLBLS
@NM00176 DC    CL21'ASCBCPUJOBNOLD PSWTCB'
@NM00177 DC    CL4'DSID'
@NM00178 DC    CL13'CSWR/V CPASNS'
@NM00179 DC    CL5'FLGCS'
         ORG   IOLBLS+43
IOPTRN2  DS    CL9
         ORG   IOPTRN2
@NM00129 DC    AL1(20)
@NM00130 DC    AL1(1)
@NM00131 DC    AL1(0)
@NM00132 DC    AL1(5)
@NM00133 DC    AL1(21)
@NM00134 DC    AL1(51)
@NM00135 DC    AL1(91)
@NM00136 DC    AL1(96)
@NM00137 DC    AL1(0)
         ORG   IOPTRN2+9
         DS    CL3
IOPTRN3  DS    CL21
         ORG   IOPTRN3
@NM00138 DC    AL1(21)
@NM00139 DC    AL1(35)
@NM00140 DC    AL1(10)
@NM00141 DC    AL1(15)
@NM00142 DC    AL1(20)
@NM00143 DC    AL1(3)
@NM00144 DC    AL1(0)
@NM00145 DC    AL1(24)
@NM00146 DC    AL1(21)
@NM00147 DC    AL1(99)
@NM00148 DC    AL1(50)
@NM00149 DC    AL1(58)
@NM00150 DC    AL1(20)
@NM00151 DC    AL1(3)
@NM00152 DC    AL1(0)
@NM00153 DC    AL1(67)
@NM00154 DC    AL1(21)
@NM00155 DC    AL1(33)
@NM00156 DC    AL1(35)
@NM00157 DC    AL1(40)
@NM00158 DC    AL1(0)
         ORG   IOPTRN3+21
         DS    CL3
IOPTRN4  DS    CL21
         ORG   IOPTRN4
@NM00159 DC    AL1(21)
@NM00160 DC    AL1(35)
@NM00161 DC    AL1(77)
@NM00162 DC    AL1(81)
@NM00163 DC    AL1(20)
@NM00164 DC    AL1(1)
@NM00165 DC    AL1(0)
@NM00166 DC    AL1(91)
@NM00167 DC    AL1(20)
@NM00168 DC    AL1(0)
@NM00169 DC    AL1(0)
@NM00170 DC    AL1(100)
@NM00171 DC    AL1(20)
@NM00172 DC    AL1(1)
@NM00173 DC    AL1(0)
@NM00174 DC    AL1(95)
         DC    AL1(21,16,103,106)
@NM00175 DC    AL1(0)
         ORG   IOPTRN4+21
         DS    CL3
CCWPTRN  DS    0F                                               ZP60011
         DC    X'17'                   FLAGS                    ZP60011
         DC    X'C0'                   LENGTH CODES             ZP60011
         DC    AL1(10)                 LABEL OFFSET             ZP60011
         DC    AL1(24)                 DATA OFFSET              ZP60011
         DC    AL4(CCWLBLS)            LABELS ADDRESS           ZP60011
         DC    X'15'                   FLAGS                    ZP60011
         DC    X'32'                   LENGTH CODES             ZP60011
         DC    AL1(35)                 LABEL OFFSET             ZP60011
         DC    AL1(40)                 DATA OFFSET              ZP60011
         DC    X'15'                   FLAGS                    ZP60011
         DC    X'40'                   LENGTH CODES             ZP60011
         DC    AL1(50)                 LABEL OFFSET             ZP60011
         DC    AL1(56)                 DATA OFFSET              ZP60011
         DC    X'15'                   FLAGS                    ZP60011
         DC    X'30'                   LENGTH CODES             ZP60011
         DC    AL1(83)                 LABEL OFFSET             ZP60011
         DC    AL1(88)                 DATA OFFSET              ZP60011
         DC    X'15'                   FLAGS                    ZP60011
         DC    X'91'                   LENGTH CODES             ZP60011
         DC    AL1(92)                 LABEL OFFSET             ZP60011
         DC    AL1(103)                DATA OFFSET              ZP60011
         DC    4AL1(0)                 END OF LIST MARKER       ZP60011
WRTTXT   DC    C'WRT TXT'                                       ZP60011
CCWLBLS  DC    C'CCW   COMMANDADDRFLAGSFILLBYTE COUNT'          ZP60011
ED5MSK   DC    X'402020202120',C')'                             ZP60011
CCW#TB   DC    C'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'          ZP60011
LITCD    DC    C'CD'                                            ZP60011
LITCC    DC    C'CC'                                            ZP60011
LITSLI   DC    C'SLI'                                           ZP60011
LITSKP   DC    C'SKIP'                                          ZP60011
LITPCI   DC    C'PCI'                                           ZP60011
LITIDA   DC    C'IDA'                                           ZP60011
         DS    0F                                               ZP60011
CCTABA   DC    CL8'INVALID '                                    ZP60011
         DC    CL8'SENSE   '                                    ZP60011
         DC    CL8'T-I-C   '                                    ZP60011
         DC    CL8'RDBKWD  '                                    ZP60011
CCTABB   EQU   *-8                                              ZP60011
         DC    CL8'WRITE   '                                    ZP60011
         DC    CL8'READ    '                                    ZP60011
         DC    CL8'CONTROL '                                    ZP60011
MYEIDTAB DC    X'2100'
         DC    X'5200'
         DC    X'5100'
         DC    X'5101'
SYS00PCH DC    25F'0'
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
CTR      EQU   R6
RC       EQU   R6
AEDITCBR EQU   R9
AMDPRTAB EQU   0
DEBGFLGS EQU   AMDPRTAB+8
PTHFLGS1 EQU   DEBGFLGS
PTHFLGS2 EQU   DEBGFLGS+1
INRFCFGS EQU   DEBGFLGS+2
IOFLGS   EQU   DEBGFLGS+3
STARTIME EQU   AMDPRTAB+40
STOPTIME EQU   AMDPRTAB+52
NAMES    EQU   AMDPRTAB+64
ADS      EQU   AMDPRTAB+104
AADS     EQU   ADS
SIF      EQU   AMDPRTAB+124
SIOFLGS  EQU   SIF
DVADS1   EQU   AMDPRTAB+128
IO       EQU   AMDPRTAB+228
IOFLGS2  EQU   IO
DVADS2   EQU   AMDPRTAB+232
VCF      EQU   AMDPRTAB+332
SVCFLGS  EQU   VCF
USR      EQU   AMDPRTAB+368
USRFLGS  EQU   USR
USRTAB   EQU   AMDPRTAB+372
PI       EQU   AMDPRTAB+452
PIFLGS   EQU   PI
PGMNGEN  EQU   AMDPRTAB+456
GENFLAGS EQU   PGMNGEN+3
GENFLGS1 EQU   AMDPRTAB+460
RECDLL   EQU   AMDPRTAB+461
ESTARTME EQU   AMDPRTAB+500
ESTOPTME EQU   AMDPRTAB+509
ABDPL    EQU   0
ADPLFLAG EQU   ABDPL+7
ADPLBUF  EQU   ABDPL+8
ADPLFMT1 EQU   ABDPL+44
ADPLFMT2 EQU   ABDPL+48
PARMLIST EQU   0
RECPTR   EQU   PARMLIST
EIDPTR   EQU   PARMLIST+12
DATAPTR  EQU   PARMLIST+16
FRMADDR  EQU   PARMLIST+20
WKAREADD EQU   PARMLIST+24
SNAPPARM EQU   PARMLIST+28
RECEID   EQU   0
BUFFER   EQU   0
FRMT     EQU   0
DATAREC  EQU   0
ASCBPTR  EQU   DATAREC
RECERR   EQU   ASCBPTR
SIOREC   EQU   0
SIOASCB  EQU   SIOREC
SIOCPUID EQU   SIOREC+4
SIOJOBN  EQU   SIOREC+6
SIOCPA   EQU   SIOREC+14
SIODSID  EQU   SIOREC+22
SIOCC    EQU   SIOREC+26
SIODEV   EQU   SIOREC+27
SIOCAW   EQU   SIOREC+29
SIOSTS   EQU   SIOREC+33
SIOSEEK  EQU   SIOREC+35
SIOFLAGS EQU   SIOREC+43
SIOAFF   EQU   SIOFLAGS
SIOPATH  EQU   SIOFLAGS+1
SIOOPT   EQU   SIOFLAGS+3
SIOFMSK  EQU   SIOFLAGS+4
SIODVRID EQU   SIOFLAGS+5
SIOCSID  EQU   SIOREC+49
SIOCCW#  EQU   SIOREC+50                                        ZP60011
SIOCCWS  EQU   SIOREC+52                                        ZP60011
IOREC    EQU   0
IOASCB   EQU   IOREC
IOTCB    EQU   IOREC+22
IOCSW    EQU   IOREC+26
IOCPA    EQU   IOREC+34
IOSNS    EQU   IOREC+42
IODEV    EQU   IOREC+44
IODSID   EQU   IOREC+46
IOFLAGS  EQU   IOREC+50
IOFLA    EQU   IOFLAGS
UIOREC   EQU   0
UIODEV   EQU   UIOREC+30
DEV      EQU   0
TABL     EQU   0
@NM00180 EQU   TABL
ALL      EQU   @NM00180
SEL      EQU   @NM00180
DVCS     EQU   TABL+4
ABDPLPTR EQU   SNAPPARM
BLNKCC   EQU   BUFFER+81
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UIOCSW   EQU   UIOREC+22
UIOPSW   EQU   UIOREC+14
UIOJOBN  EQU   UIOREC+6
UIOCPUID EQU   UIOREC+4
UIOASCB  EQU   UIOREC
IOCHAN   EQU   IOFLAGS+7
IOCPU    EQU   IOFLAGS+6
IOSFLS   EQU   IOFLAGS+4
IODVRID  EQU   IOFLAGS+3
IOFMSK   EQU   IOFLAGS+2
IOOPT    EQU   IOFLAGS+1
IOPSW    EQU   IOREC+14
IOJOBN   EQU   IOREC+6
IOCPUID  EQU   IOREC+4
JOBNAME  EQU   DATAREC+6
CPUID    EQU   DATAREC+4
GTFOPTR  EQU   PARMLIST+8
BUFPTR   EQU   PARMLIST+4
ADPLEXT  EQU   ABDPL+52
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
ADPLCOM2 EQU   ABDPL+32
ADPLCOM1 EQU   ABDPL+28
ADPLFRMT EQU   ABDPL+24
ADPLMEMA EQU   ABDPL+20
ADPLCVT  EQU   ABDPL+16
ADPLPRNT EQU   ABDPL+12
@NM00002 EQU   ADPLFLAG
ADPLSYTM EQU   ADPLFLAG
ADPLSNPR EQU   ADPLFLAG
ADPLSBPL EQU   ABDPL+6
ADPLASID EQU   ABDPL+4
ADPLTCB  EQU   ABDPL
RESERVED EQU   AMDPRTAB+522
CVTTZONE EQU   AMDPRTAB+518
ESPSEC   EQU   ESTOPTME+7
ESPMIN   EQU   ESTOPTME+5
ESPHR    EQU   ESTOPTME+3
ESPDAY   EQU   ESTOPTME
ESSEC    EQU   ESTARTME+7
ESMIN    EQU   ESTARTME+5
ESHR     EQU   ESTARTME+3
ESDAY    EQU   ESTARTME
ADTSBUF  EQU   AMDPRTAB+496
OFSTDATA EQU   AMDPRTAB+494
OFSTEID  EQU   AMDPRTAB+492
AFRMAD   EQU   AMDPRTAB+488
REENTWKA EQU   AMDPRTAB+484
PRFMTADD EQU   AMDPRTAB+480
AEIOCT   EQU   AMDPRTAB+476
EXITADDR EQU   AMDPRTAB+472
EXITNM   EQU   AMDPRTAB+464
@NM00001 EQU   GENFLGS1
FIRSTHSW EQU   GENFLGS1
TSFOUND  EQU   GENFLGS1
EOFINPRO EQU   GENFLGS1
TS       EQU   GENFLGS1
EOF      EQU   GENFLAGS
RR       EQU   GENFLAGS
SRM      EQU   GENFLAGS
RNIO     EQU   GENFLAGS
SYSM     EQU   GENFLAGS
SYS      EQU   GENFLAGS
DSP      EQU   GENFLAGS
EXT      EQU   GENFLAGS
PICODEA  EQU   PGMNGEN+2
PICODES  EQU   PGMNGEN
Q        EQU   PI+1
P01R     EQU   PIFLGS
SELP     EQU   PIFLGS
ALLP     EQU   PIFLGS
USRNGTAB EQU   USRTAB
O        EQU   USR+1
N01R     EQU   USRFLGS
SELU     EQU   USRFLGS
ALLU     EQU   USRFLGS
SVCNUMS  EQU   AMDPRTAB+336
M        EQU   VCF+1
L        EQU   SVCFLGS
SELV     EQU   SVCFLGS
ALLV     EQU   SVCFLGS
IODVADS  EQU   DVADS2
K01RES   EQU   IO+1
JJ       EQU   IOFLGS2
SELI     EQU   IOFLGS2
ALLI     EQU   IOFLGS2
SIODVADS EQU   DVADS1
II       EQU   SIF+1
H        EQU   SIOFLGS
NOEQU    EQU   SIOFLGS
EQUIV    EQU   SIOFLGS
SELS     EQU   SIOFLGS
ALLS     EQU   SIOFLGS
ASCBADDR EQU   AADS
JOBNAMES EQU   NAMES
DAY2     EQU   STOPTIME+10
F        EQU   STOPTIME+8
TIME2    EQU   STOPTIME
DAY      EQU   STARTIME+10
D        EQU   STARTIME+8
TIME     EQU   STARTIME
DDNAME   EQU   AMDPRTAB+32
USEREXIT EQU   AMDPRTAB+24
GTFWDPTR EQU   AMDPRTAB+20
C        EQU   DEBGFLGS+4
B        EQU   IOFLGS
GETEOF   EQU   IOFLGS
DMDFMT   EQU   INRFCFGS
EDITSTOP EQU   INRFCFGS
EXTTRC   EQU   INRFCFGS
RET      EQU   INRFCFGS
FMT      EQU   INRFCFGS
SPIE     EQU   INRFCFGS
TERM     EQU   INRFCFGS
FLMODE   EQU   INRFCFGS
REMAIN   EQU   PTHFLGS2
APP      EQU   PTHFLGS2
REXT     EQU   PTHFLGS1
FRM      EQU   PTHFLGS1
FLT      EQU   PTHFLGS1
HEX      EQU   PTHFLGS1
CON      EQU   PTHFLGS1
GET      EQU   PTHFLGS1
SCN      EQU   PTHFLGS1
ROOT     EQU   PTHFLGS1
CURREC   EQU   AMDPRTAB+4
AFMG     EQU   AMDPRTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00066 EQU   @RC00063
@RC00079 EQU   @RC00077
@RC00157 EQU   @RC00154
@RC00246 EQU   @RC00238
@RC00082 EQU   @RC00079
@ENDDATA EQU   *
         END   AMDSYS00,(C'PLS1723',0801,78219)
/*
//*
//STEP5   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY AMDSYS00('ZP60011')
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP6   EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60011)
          .
/*
//*
//STEP7CK EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60011)
        CHECK
        .
/*
//*
//STEP7   EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60011)
        DIS(WRITE)
        .
/*
//
//ZP60012  JOB (SYSGEN),'J07 M26: ZP60012',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  ZAP TO REPORT INTERRUPT CODE OF ABEND IN A TSO SESSION.
//*
//RECEIVE EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  *
++USERMOD(ZP60012)      /* REPORT PIC FOR S0CX OR SODX ABEND */  .
++VER(Z038) FMID(EBB1102) PRE(UZ83396,UY02947)
 /*
   PROBLEM DESCRIPTION:
     THE CONTENTS OF GPR15 IS REPORTED AS THE REASON CODE.
       IN THE ABSENCE OF A "REASON" PARAMETER OF THE ABEND MACRO
       THE VALUE STORED IN GENERAL PURPOSE REGISTER 15 IS INSPECTED
       AND IF (LOGICALLY) LESS THAN 4096 IS THEN ARBITRARILY
       REPORTED AS THE REASON CODE OF THE ABEND.  THIS IS NOT
       APPROPRIATE FOR PROGRAM CHECK ABENDS WHERE IT CAN BE MORE
       USEFUL TO REPORT THE PROGRAM INTERRUPT CODE (PIC).

       THIS USERMOD CHANGES THE TSO TMP ESTAI EXIT ROUTINE IKJEFT04
       AND THE TSO TMP ESTAE EXIT ROUTINE IKJEFT05 SO THAT THE PIC
       IS REPORTED AS THE REASON CODE IN MESSAGE IKJ56641I.  AS A
       RESULT, THE DETERMINATION OF WHETHER THE PSW POINTS TO THE
       FAILING INSTRUCTION (AS FOR PIC10, PIC11 AND PIC12) OR THE
       NEXT INSTRUCTION WILL BE EASIER TO MAKE.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 12.

     A TYPICAL USAGE SCENARIO MIGHT CONSIST OF THE FOLLOWING STEPS:
     1) A PROGRAM OR COMMAND ABENDS RESULTING IN:
           IKJ56641I PGM-NAME ENDED DUE TO ERROR+
           READY
     2) THE USER ENTERS A QUESTION MARK RESULTING IN:
           IKJ56641I SYSTEM ABEND CODE 0C4   REASON CODE 011
           READY
     3) THE USER INITIATES THE TEST COMMAND TO COMMENCE DEBUGGING
        KNOWING THAT THE CURRENT LOCATION CONTAINS THE INSTRUCTION
        CAUSING THE PROGRAM CHECK.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKJEFT04
       IKJEFT05
 */.
++ZAP(IKJEFT04) DISTLIB(AOST4).
 NAME IKJEFT04
 IDRDATA ZP60012
VER 0190 58E0,D004           L     R14,SAVRBAK
VER 0194 D503,E014,B94C      CLC   REG0,=F'12'    SDWA PROVIDED?
VER 019A 4780,B1EC           BE    L1             NO
VER 019E 58E0,E018           L     R14,REG1       SDWA ADDRESS
VER 01A2 D503,E054,B980 L5   CLC   SDWAGR15,=F'4095'
VER 01A8 47D0,B1B6           BNH   L2
VER 01AC 1FEE           L4   SLR   R14,R14        NO REASON CODE
VER 01AE 50E0,A01C      L6   ST    R14,SUBCDRS
VER 01B2 47F0,B1F2           B     L3
VER 01B6 58E0,D004      L2   L     R14,SAVRBAK
VER 01BA 58E0,E018           L     R14,REG1       SDWA ADDRESS
VER 01BE 58E0,E054           L     R14,SDWAGR15
VER 01C2 50E0,A01C           ST    R14,SUBCDRS
VER 08C4 B8C4,B8C6      PA   DC    2S(*)
VER 08C8 B8C8,B8CA           DC    2S(*)
VER 08CC B8CC,B8CE           DC    2S(*)
VER 08D0 B8D0,B8D2           DC    2S(*)
VER 08D4 B8D4,B8D6           DC    2S(*)
VER 08D8 B8D8,B8DA           DC    2S(*)
VER 08DC B8DC,B8DE           DC    2S(*)
REP 019E 47F0,B8C4           B     PA
REP 08C4 58E0,E018           L     R14,REG1       SDWA ADDRESS
REP 08C8 950C,E005           CLI   SDWACMPC,X'0C'
REP 08CC 4740,B1A2           BL    L5             NOT PROGRAM CHECK
REP 08D0 950D,E005           CLI   SDWACMPC,X'0D'
REP 08D4 4720,B1A2           BH    L5             NOT PROGRAM CHECK
REP 08D8 48E0,E00A           LH    R14,SDWAINTA   GET INTERRUPT CODE
REP 08DC 47F0,B1AE           B     L6             GO USE IT AS REASON
++ZAP(IKJEFT05) DISTLIB(AOST4).
 NAME IKJEFT05
 IDRDATA ZP60012
VER 0032 05B0                BALR  R11,0          BASE REGISTERS 1
VER 0034 4140,BFFF           LA    R4,4095(,R11)             AND 2
VER 00F2 D503,3054,42ED      CLC   SDWAGR15,=F'4095'
VER 00F8 47D0,B0D2           BNH   LBL1
VER 00FC 1F77                SLR   R7,R7          NO REASON CODE
VER 00FE 5070,A01C           ST    R7,SUBCDRS
VER 0102 47F0,B0E6           B     LBL2
VER 0106 5830,8008   LBL1    L     R3,8(,R8)
VER 010A 5870,304C           L     R7,76(,R3)
VER 010E 5830,7018           L     R3,24(,R7)
VER 0112 5830,3054           L     R3,SDWAGR15
VER 0116 5030,A01C           ST    R3,SUBCDRS
VER 011A 5060,A00C   LBL2    ST    R6,ABNDCD
VER 011E 8960,0008           SLL   R6,8
VER 0122 8C60,0014   LBL3    SRDL  R6,20
VER 11F6 41C3,41C5   PATCH   DC    2S(*)
VER 11FA 41C7,41C9           DC    2S(*)
VER 11FE 41CB,41CD           DC    2S(*)
VER 1202 41CF,41D1           DC    2S(*)
VER 1206 41D3,41D5           DC    2S(*)
VER 120A 41D7,41D9           DC    2S(*)
VER 120E 41DB,41DD           DC    2S(*)
VER 1212 41DF,41E1           DC    2S(*)
REP 0112 5870,3054           L     R7,SDWAGR15    KEEP R3 AS
REP 0116 5070,A01C           ST    R7,SUBCDRS          SDWA ADDRESS
REP 011E 47F0,41C3           B     PATCH          OVERLAYS SLL
REP 11F6 8960,0008   PATCH   SLL   R6,8           DISPLACED BY BRANCH
REP 11FA 950C,3005           CLI   SDWACMPC,X'0C'
REP 11FE 4740,B0EE           BL    LBL3           NOT PROGRAM CHECK
REP 1202 950D,3005           CLI   SDWACMPC,X'0D'
REP 1206 4720,B0EE           BH    LBL3           NOT PROGRAM CHECK
REP 120A BF73,300A           ICM   R7,3,SDWAINTA  TOP HALF OF R7 IS 0
REP 120E 5070,A01C           ST    R7,SUBCDRS
REP 1212 47F0,B0EE           B     LBL3
/*
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60012)
          .
/*
//*
//APPLYCK EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60012)
        CHECK
        .
/*
//*
//APPLY   EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60012)
        DIS(WRITE)
        .
/*
//
//ZP60013  JOB (SYSGEN),'J08 M27: ZP60013',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  MAINTAIN AN SVC EVENT COUNT FOR EACH SVC NUMBER.
//*
//STEP1   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
++USERMOD(ZP60013)                     /* COUNT SVC EVENTS */  .
++VER(Z038) FMID(FBB1221)
 /*
   PROBLEM DESCRIPTION:
     THE NUMBER OF SVCS ISSUED IS NOT ACCURATELY KNOWN.
       THE SYSTEM DOES NOT PROVIDE A METHOD FOR TRACKING THE
       FREQUENCY OF SUPERVISOR CALLS (SVC INSTRUCTIONS) WITHOUT
       A GTF TRACE.

       THIS USERMOD CHANGES THE SVC FIRST LEVEL INTERRUPT HANDLER
       TO MAINTAIN A FULLWORD COUNTER FOR EACH OF THE 256 SVC
       NUMBERS (0 TO 255) IN A CONTIGUOUS TABLE.  THIS TABLE IS
       AVAILABLE TO MONITORS FOR TRACKING SVC ACTIVITY.  ACCESS
       TO THE TABLE IS VIA THE SECOND WORD OF THE SVC NEW PSW
       FLCSNPSW WHICH POINTS TO THE SVC FLIH.  AFTER THE SYSTEM
       IS REIPLED WITH THIS SYSMOD APPLIED, THE TWELVE BYTES
       BEFORE THE SVC FLIH ENTRY POINT CONTAIN THE EIGHT-BYTE
       LITERAL 'SVCCTTBL' AND A FOUR-BYTE POINTER TO THE TABLE.
       THE PRESENCE OF THE LITERAL SHOULD BE VERIFIED BEFORE
       AN ATTEMPT IS MADE TO ACCESS THE TABLE.

       ADDITIONALLY THE SVC FLIH WILL ABEND (S0F8) ISSUERS OF
       THE SVC INSTRUCTION WHICH ARE IN CROSS-MEMORY MODE.

   SPECIAL CONDITIONS:
     ACTION:
       AN IPL MUST BE PERFORMED FOR THIS SYSMOD TO BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 13.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IEAVESVC
 */.
++MOD(IEAVESVC) DISTLIB(AOSC5).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSALLDA,
//             SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//*
//STEP2   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//         DD  DSN=SYS1.APVTMACS,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'IEAVESVC- SVC FIRST LEVEL INTERRUPT HANDLER'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVESVC
*
*02*     CSECT-NAME = IEAVESVC
*
*01*  DESCRIPTIVE-NAME = SVC FIRST LEVEL INTERRUPT HANDLER
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = VERSION 1
*
*01*  FUNCTION = SEE ENTRY POINT PURPOSES BELOW.
*
*02*     OPERATION = THE SVC FLIH WILL RECEIVE CONTROL VIA THE SVC NEW
*        PSW AFTER AN SVC INTERRUPT. ITS MAIN FUNCTION IS TO DETERMINE
*        IF THE ISSUER IS AUTHORIZED TO ISSUE THE SVC AND IF SO SET UP
*        THE PROPER ENVIRONMENT ON BEHALF OF THE SVC ROUTINE AND THEN
*        BRANCH TO THE ROUTINE.
*
*01*   NOTES = SEE ENTRY POINT DESCRIPTIONS.
*
*02*        DEPENDENCIES =
*
*           GENERAL SVC FLIH DEPENDENCIES:
*           1. NO SVCS MAY BE ISSUED BY ANY BRANCH ENTRY.
*           2. SUPERVISOR STATE,KEY 0 MUST BE MAINTAINED ACROSS
*           INTERFACES.
*           3. DISABLEMENT MUST BE PRESERVED BY ALL INTERFACES(EXCEPT
*           LOCK MANAGER WHERE IT APPLIES).
*           4. THE SVCTABLE CAN NOT CHANGE DYNAMICALLY EXCEPT THE TYPE.
*           IF THE TYPE IS CHANGED THE SVC ROUTINE MUST BE CAPABLE OF
*           RUNNING AS EITHER TYPE.
*
*           EXIT AND END OF TASK:
*           1. BOTH MUST RETURN THE SVRB TO THE SUPERVISOR SVRB
*           POOL.
*
*           SVC ROUTINES:
*           1. SVC ROUTINES AFTER COMPLETING THEIR FUNCTIONS MUST GO
*           TO THE EXIT PROLOGUE(IEAVEXPR) VIA A BRANCH 14(OR PICK UP
*           THE ADDRESS FROM CVTEXPRO).
*           THE SOLE EXCEPTION TO THIS APPLIES TO TYPE 6 SVC   @Z40FPYK
*           ROUTINES WHICH MUST RETURN TO THE SVC FLIH.  THIS  @Z40FPYK
*           MAY BE DONE BY A BR14 OR BY ISSUEING A T6EXIT      @Z40FPYK
*           MACRO.  UNDER NO CONDITIONS MAY A TYPE 6 SVC       @Z40FPYK
*           RETURN TO EITHER EXIT OR EXIT PROLOGUE.            @Z40FPYK
*           2. IF LOCKS WERE OBTAINED ON BEHALF OF AN SVC ROUTINE, A
*           SETFRR MUST BE ISSUED UPON ENTRY TO THE SVC ROUTINE TO
*           ESTABLISH RECOVERY. THIS MEANS THAT ALL TYPE 1 SVCS MUST DO
*           THIS SINCE THEY ARE ALWAYS ENTERED WITH THE LOCAL LOCK.
*           A TYPE 6 SVC ROUTINE MUST NOT EXIT TO THE SVC FLIH @Z40FPYK
*           WHILE HOLDING ANY LOCKS.  LOCKS WILL NOT BE        @Z40FPYK
*           RELEASED.                                          @Z40FPYK
*
*           GETMAIN(CONDITIONAL):
*           1. IF THE TCBABGM BIT IS ON, ALTHOUGH THE REQUEST WAS FOR
*           LSQS, GETMAIN WILL SATISFY THE REQUEST FROM SQS IF LSQS HAS
*           BEEN EXHAUSTED. IF NO SQS IS AVAILABLE, A NORMAL CODE
*           IS SENT BACK FROM GETMAIN.
*
*           RTM(ABTERM ENTRY):
*           1. THE LOCAL LOCK IS NOT NEEDED FOR THIS ENTRY SINCE THE
*           ENTRY IS ENTERED DISABLED AND THE CURRENT TCB IS THE ONE TO
*           BE TERMINATED.
*           2. ABTERM IS EXPECTED TO, IN ALL CASES SET THE TCBABGM BIT
*           WHEN A TASK IS SET UP FOR ABNORMAL TERMINATION. IN THIS WAY
*           ABEND MAY SAFELY ISSUE SVCS AND BE ASSURED THAT SVRBS WILL
*           BE SUPPLIED TO SATISFY THE REQUEST.
*
*           RTM(SVCERR ENTRY):
*           1. RTM WILL INITIATE SVC 13 PROCESSING, IF THE FRR STACK
*           IS EMPTY, EVENTHOUGH THE ISSUER OF THE SVC 13 WAS LOCKED IN
*           SOME WAY. RTM IN THIS CASE WILL FREE ALL OF THE LOCKS HELD
*           AND PROCEED WITH SVC 13 PROCESSING AND USE THE COMPLETION
*           CODE IN REGISTER 1 OF THE INTERRUPT SAVE AREA(LCCASGPR).
*           2. RTM MUST MOVE OR BE FINISHED WITH THE GENERAL REGISTER
*           SAVE AREA LCCASGPR BEFORE ENABLEMENT IS ALLOWED.
*           3. IF AN SVC 13 WAS NOT THE SVC THAT WAS ISSUED, THEN RTM
*           WILL USE THE COMPLETION CODE PASSED FROM THE SVC FLIH IN
*           REGISTER 1.
*
*           SYSGEN:
*           1. THE FOLLOWING VALIDITY CHECKING MUST BE DONE BY SYSGEN:
*              A. TYPES 3 AND 4 CAN NOT INDICATE GLOBAL SPIN LOCKS IN
*              THE SVC TABLE.
*              B. TYPE 1 SVCS MUST INDICATE THE LOCAL LOCK IN THE
*              SVC TABLE.
*              C. AN SVC MAY NOT INDICATE THE CMS LOCK IN THE SVC
*              TABLE WITHOUT ALSO INDICATING THE LOCAL LOCK.
*              D.  TYPE 6 SVC ROUTINES CAN NOT HAVE ANY LOCKS  @Z40FPYK
*              SPECIFIED IN THE SVC TABLE.                     @Z40FPYK
*           2. THE SVC TABLE WILL BE A FULL 256 ENTRY TABLE. THE TABLE
*           WILL CONTAIN AN ENTRY POINT ADDRESS FOR EVERY SVC NUMBER.
*           IF THE SVC NUMBER IS AN INVALID NUMBER, THE SVC MUST BE
*           DESIGNATED AS A TYPE 2 SVC WITH NO LOCKS REQUIRED UPON
*           ENTRY AND AN ENTRY POINT ADDRESS TO IGCERROR.
*           3. THE SVC TABLE MUST REFLECT LOCKING REQUIREMENTS RATHER
*           THAN THE ENABLED-DISABLED FLAG.
*           4. AN ENTRY STATEMENT MUST BE SUPPLIED TO THE BEGINNING
*           OF THE SVC TABLE CALLED SVCTABLE.
*           5. THE FORMAT OF THE SVC TABLE MUST BE AS FOLLOWS:
*           TWO FULL WORD ENTRIES.
*           WORD         BITS
*           1            0-31 ENTRY POINT ADDRESS
*           2            0-3 SVC TYPE: 0=TYPE 1
*                                      2=TYPE 6                @Z40FPYK
*                                      8=TYPE 2                @Z40FPYK
*                                      C=TYPE 3/4              @Z40FPYK
*           2            4  FUNCTION CODE(APF AUTHORIZED)
*                           1=AUTHORIZED,0=UNAUTHORIZED
*           2            5  SVC IS PART OF ESR
*           2            6  SVC IS NON-PREEMPTIVE              @Z40FPYK
*           2            7-15 RESERVED                         @Z40FPYK
*           2            16  LOCAL LOCK TO BE ACQUIRED
*           2            17  CMS LOCK TO BE ACQUIRED
*           2            18  SRM LOCK TO BE ACQUIRED
*           2            19  SALLOC LOCK TO BE ACQUIRED
*           2            20  DISP LOCK TO BE ACQUIRED
*           2            21-31 RESERVED FOR LOCKS
*
*    EXTENDED SVC ROUTER:
*        1.    ESR TABLE FORMAT:
*          A . AN EXSVC TABLE (ESRTABLE) EXTERNAL TO ESR RESIDES
*              IN THE NUCLEUS, CONTAINING A TWO WORD ENTRY FOR
*              EVERY EXTENDED SVC DEFINED TO THE SYSTEM.
*          B . THE ESRTABLE IS DIVIDED INTO FIVE SECTIONS:
*              1. MODID CONTAINING THE C-SECT NAME ESRTABLE IN
*                 EBCDIC.
*              2. HEADER FIELD CONTAINS 4 HALFWORDS OF INFORMATION
*                 USED BY NIP.
*              3. TYPE IV SECTION CONTINING ENTRIES FOR ALL
*                 EXSVCS INVOKED BY SVC 109.
*              4. TYPE I SECTION CONTAINING ENTRIES FOR ALL
*                 EXSVCS INVOKED BY SVC 116.
*              5. TYPE II SECTION CONTAINING ENTRIES FOR ALL
*                 EXSVCS INVOKED BY SVC 122.
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = REFERENCE EQUATE SECTION IN MODULE.
*
*02*     PATCH-LABEL = NONE(NUCLEUS RESIDENT)
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE =  REFERENCE ESD LENGTH AT BEGINNING OF MODULE.
*
*02*     ATTRIBUTES = NUCLEUS, ZERO PROTECT KEY, DISABLED, REFRESHABLE,
*        ADDRSPC=FIXED,SUPERVISOR MODE.
*
*01*  ENTRY-POINT = IEAQSC00
*
*02*     PURPOSE = THIS IS THE MAIN ENTRY INTO THE SVC INTERRUPT
*        HANDLER. IT WILL DECIDE WHETHER THE ISSUER CAN ISSUE SVCS, IF
*        THE ISSUER IS AUTHORIZED, WHAT TYPE OF SVC IS ASKED FOR AND
*        SET UP THE PROPER INPUT ENVIRONMENT FOR THE ROUTINE.
*
*02*     LINKAGE = SEE INPUT SECTION BELOW.
*
*02*     INPUT =
*        INPUT ENVIRONMENT:
*        STATE- DISABLED,SUPERVISOR
*        KEY-0
*        LOCKS REQUIRED-NONE
*        INPUT DATA:
*        SVC OLD PSW-LOCATION DECIMAL 32.
*        SVC INTERRUPT CODE-LOCATION DECIMAL 138.
*        ILC-LOCATION DECIMAL 136-137.
*        SEE CONTROL-BLOCKS SECTION BELOW FOR CONTROL BLOCK INPUTS.
*        INPUT REGISTERS:
*        NONE
*
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY
*
*01*  ENTRY POINT NAME:   IGXERROR
*        MODE OF ENTRY:  BRANCH ENTRY
*        SOURCE OF ENTRY POINT: VIA ADDRESS IN ESR TABLE
*        MACRO TO INVOKE FUNCTION: NONE
*02*     FUNCTION PROVIDED:
*            THIS ENTRY IS TAKEN VIA A BRANCH INSTRUCTION FROM
*            THE SVC INTERRUPT HANDLER MAINLINE. IT WAS TAKEN
*            AS A RESULT OF OBTAINING THE ADDRESS FROM THE ESR
*            TABLE AS THE ENTRY POINT TO THE EXSVC ROUTINE. IT
*            PROVIDES THE COMPLETION CODE PLUS AN ENTRY TO SVC
*            13.
*02*     INPUT ENVIRONMENT:
*            STATE: ENABLED, SUPERVISOR STATE
*            KEY: 0
*            LOCKS REQUIRED: NONE
*        INPUT DATA:
*            ALL AS NORMALLY RECEIVED BY AN SVC ROUTINE.
*        INPUT REGISTERS:
*            ALL AS NORMALLY RECEIVED BY AN SVC ROUTINE.
*        ENVIRONMENT CHANGES: NONE
*        FUNCTIONS CALLED:
*            SVC 13
*02*     EXIT POINTS:
*            TO: SVC 13
*
*                OUTPUT DATA - AS ON ENTRY
*                OUTPUT REGISTERS -
*                   1   -   COMPLETION CODE
*                OUTPUT ENVIRONMENT -
*                   ENABLED, SUPERVISOR STATE
*                   KEY 0
*                   UNLOCKED
*                RETURN CODES - NONE
*
*02*     ABEND CODES:
*             X'16D'   -   INVALID OR UNSUPPORTED EXSVC ISSUED
*01*  ENTRY-POINT = IGCERROR
*
*02*     PURPOSE = THIS ENTRY IS TAKEN VIA A BRANCH INSTRUCTION FROM
*        THE SVC INTERRUPT HANDLER MAINLINE. IT WAS TAKEN AS A RESULT
*        OF OBTAINING THE ADDRESS FROM THE SVC TABLE AS THE ENTRY POINT
*        TO THE SVC ROUTINE. IT PROVIDES THE COMPLETION CODE PLUS AN
*        ENTRY TO SVC 13.
*
*02*     LINKAGE = SEE INPUT SECTION BELOW.
*
*02*     INPUT =
*        INPUT ENVIRONMENT:
*        STATE-ENABLED,SUPERVISOR
*        KEY-0
*        LOCKS REQUIRED-NONE
*        INPUT DATA:
*        ALL AS NORMALLY RECEIVED BY SVC ROUTINE.
*        INPUT REGISTERS:
*        ALL AS NORMALLY RECEIVED BY SVC ROUTINE.
*
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY.
*                                                              @Z40FPYK
*01*  ENTRY-POINT = IEAVET6E                                   @Z40FPYK
*                                                              @Z40FPYK
*02*     PURPOSE = THIS ENTRY IS TAKEN VIA ISSUING A T6EXIT    @Z40FPYK
*        MACRO FROM A TYPE 6 SVC ROUTINE.  THE ROUTINE MAY     @Z40FPYK
*        REUTRN SELECTING ONE OF THREE OPTIONS--RETURN TO THE  @Z40FPYK
*        CALLER, EXIT TO THE DISPATCHER FUNCTION, OR SCHEDULE  @Z40FPYK
*        AN SRB.                                               @Z40FPYK
*                                                              @Z40FPYK
*02*     LINKAGE = SEE INPUT SECTION BELOW.                    @Z40FPYK
*                                                              @Z40FPYK
*02*     INPUT =                                               @Z40FPYK
*        INPUT ENVIRONMENT:                                    @Z40FPYK
*        STATE-DISABLED,SUPERVISOR                             @Z40FPYK
*        KEY-0                                                 @Z40FPYK
*        LOCKS REQUIRED-NONE MUST BE HELD                      @Z40FPYK
*        INPUT DATA:                                           @Z40FPYK
*        EXIT OPTION SELECTED BY THE TYPE 6 ROUTINE.           @Z40FPYK
*        INPUT REGISTERS:                                      @Z40FPYK
*        EXIT OPTION IS INDICATED AS FOLLOWS:                  @Z40FPYK
*             REGISTER 1 HAS SRB ADDRESS IF RETURN=SRB         @Z40FPYK
*             REGISTER 2 HAS AN EIGHT IF RETURN=SRB            @Z40FPYK
*             REGISTER 2 HAS A FOUR IF RETURN=DISPATCH         @Z40FPYK
*             REGISTER 2 HAS A ZERO IF RETURN=CALLER           @Z40FPYK
*                                                              @Z40FPYK
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY.
*
*01*  EXIT-NORMAL = EXIT PROLOGUE(IEAVEEXP) IF RETURN=CALLER   @Z40FPYK
*
*02*     CONDITIONS = IF THE TYPE 6 SVC ROUTINE DOES A BR14 OR @Z40FPYK
*                     A T6EXIT RETURN=CALLER, THE SVC FLIH     @Z40FPYK
*                     WILL EXIT TO EXIT PROLOGUE IN ORDER TO   @Z40FPYK
*                     RE-DISPATCH THE TASK (IF DISPATCHABILITY)@Z40FPYK
*                     TESTS ARE MET.                           @Z40FPYK
*
*02*     OUTPUT =                                              @Z40FPYK
*                   REGISTERS 0,1, AND 15 ARE RETAINED FOR     @Z40FPYK
*                   THE CALLER FROM THE SVC                    @Z40FPYK
*        OUTPUT REGISTERS -                                    @Z40FPYK
*                   R0,R1,R2,R3=UNUSED                         @Z40FPYK
*                   R4=TCB ADDRESS                             @Z40FPYK
*                   R5,R6=UNUSED                               @Z40FPYK
*                   R7=ASCB ADDRESS                            @Z40FPYK
*                   R8,R9,R10,R11,R12,R13=UNUSED               @Z40FPYK
*                   R14=EPA OF EXIT PROLOGUE                   @Z40FPYK
*                   R15=UNUSED                                 @Z40FPYK
*                                                              @Z40FPYK
*02*     RETURN-CODES  =  NONE                                 @Z40FPYK
*                                                              @Z40FPYK
*01*  EXIT-NORMAL = DISPATCHER (GLOBAL SRB DISPATCH ROUTINE)   @Z40FPYK
*
*02*     CONDITIONS = IF THE TYPE 6 SVC ROUTINE DOES A         @Z40FPYK
*                     A T6EXIT RETURN=SRB, THE SVC FLIH        @Z40FPYK
*                     WILL GO TO THE GLOBAL SRB DISPATCHER     @Z40FPYK
*                     ROUTINE IN ORDER TO DISPATCH THE SRB     @Z40FPYK
*                     IMMEDIATELY.                             @Z40FPYK
*
*02*     OUTPUT =                                              @Z40FPYK
*                   NO SPECIAL OUTPUT                          @Z40FPYK
*        OUTPUT REGISTERS -                                    @Z40FPYK
*                   R0,R1=UNUSED                               @Z40FPYK
*                   R2=SRB ADDRESS                             @Z40FPYK
*                   R3,R4=UNUSED                               @Z40FPYK
*                   R5=ASCB ADDRESS                            @Z40FPYK
*                   R6=UNUSED                                  @Z40FPYK
*                   R7=LCCA ADDRESS                            @Z40FPYK
*                   R8=UNUSED                                  @Z40FPYK
*                   R9=DISPATCHER BASE ADDRESS                 @Z40FPYK
*                   R10,R11,R12,R13,R14=UNUSED                 @Z40FPYK
*                   R15=DISPATCHER ENTRY POINT                 @Z40FPYK
*                                                              @Z40FPYK
*02*     RETURN-CODES  =  NONE                                 @Z40FPYK
*                                                              @Z40FPYK
*01*   EXIT-ERROR  = RTM                                       @Z40FPYK
*                                                              @Z40FPYK
*02*     CONDITIONS = THE ISSUER OF THE SVC WAS IN SRB MODE    @Z40FPYK
*                     OWNED A LOCK OR MADE AN ILLEGAL T6EXIT   @Z40FPYK
*                     REQUEST THAT A GOLBAL SRB BE SCHEDULED   @Z40FPYK
*                                                              @Z40FPYK
*02*     OUTPUT =
*        OUTPUT DATA-LCCASGPR(CONTAINS SAVED REGS),PLUS HARDWARE INFO.
*        OUTPUT REGISTERS- 1-CONTAINS COMPLETION CODE
*        OUTPUT ENVIRONMENT-DISABLED,KEY 0,SRB OR LOCKED OR BOTH.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = SVC ROUTINE
*
*02*     CONDITIONS = AFTER ALL OF THE NECESSARY SET UP ON BEHALF OF
*        THE SVC ROUTINE HAS BEEN MADE , A BRANCH TO THE SVC ROUTINE IS
*        MADE VIA ITS CORRESPONDING ADDRESS IN THE SVC TABLE.
*
*02*     OUTPUT =
*        OUTPUT DATA-SVRB SET UP(FOR NON-TYPE1)
*        OUTPUT REGISTERS-
*              3=CVT ADDRESS
*              4=TCB ADDRESS
*              5=RB ADDRESS(SVRB IF NON-TYPE1)
*              6=ENTRY POINT ADDRESS
*              7=ASCB ADDRESS
*              14=RETURN ADDRESS
*              0,1,13,15 AS AT ENTRY TO SVC FLIH
*        OUTPUT ENVIRONMENT-
*              ENABLED OR DISABLED(DEPENDING ON LOCKS REQUESTED)
*              SUPERVISOR STATE
*              KEY 0
*              LOCKS AS INDICATED IN SVC TABLE.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = SVC 13
*
*02*     CONDITIONS = TO ABEND THE CURRENT TASK DUE TO A LOCK MANAGER
*        FAILURE(OTHER THAN LOCAL LOCK). OR TO ABEND THE CURRENT TASK
*        DUE TO ISSUANCE OF AN INVALID SVC.
*
*02*     OUTPUT =
*        OUTPUT DATA- REGS IN TCB(OR SVRB IF NON-TYPE1). PSW IN
*        RBOPSW FIELD.
*        OUTPUT REGISTERS-1=COMPLETION CODE
*        OUTPUT ENVIRONMENT-
*              ENABLED OR DISABLED (DEPENDING ON LOCK STATUS)
*              SUPERVISOR STATE
*              KEY 0
*              ANY LOCKS HELD
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = IEAPDS7 (DISPATCHER)
*
*02*     CONDITIONS = MEMORY TERMINATION HAS BEEN INITIATED DUE TO A
*        FAILURE IN THE LOCK MANAGER IN GETTING THE LOCAL LOCK. SINCE
*        THE SVC INTERRUPT HANDLER IS OPERATING AS A PROLOGUE TO THE
*        SVC ROUTINE, THE NORMAL EXIT TO DISPATCHER IS APPROPRIATE.
*
*02*     OUTPUT =
*        OUTPUT DATA-NONE
*        OUTPUT REGISTERS-NONE
*        OUTPUT ENVIRONMENT-
*              ENABLED,KEY 0
*              SUPERVISOR STATE,UNLOCKED
*
*02*     RETURN-CODES = NONE
*
*01*  EXTERNAL-REFERENCES = SEE ROUTINES,DATA AREAS,CONTROL-BLOCKS
*     BELOW.
*
*02*     ROUTINES =
*        SVC 13
*        RTM(SVCERR)
*        RTM(ABTERM)
*        RTM(MEMTERM)
*        TRSVC(TRACE ENTRY)
*        GETCELL
*        GETMAIN(COND AND UNCOND FOR LSQS)
*        BLDCPOOL
*        SETLOCK(OBTAIN/RELEASE)
*        TESTAUTH
*        IEAPDS7(DISPATCHER ENTRY)
*        DSJSTCSR(DISPATCHER JOB STEP TIMING ENTRY POINT)      @Z40FPYK
*        DSSRBRTN(DISPATCHER GLOBAL SRB DISPATCHER ROUTINE)    @Z40FPYK
*        EXPEPAT6(EXIT PROLOGUE TYPE 6 SVC EXIT ENTRY POINT)   @Z40FPYK
*
*02*     DATA-AREAS = ALL INCLUDED IN CONTROL-BLOCKS BELOW.
*
*02*     CONTROL-BLOCKS =
*        PSA R/W
*        LCCA R/W
*        ASCB R/W
*        TCB R/W
*        RB R/W
*        CVT R
*        SVC TABLE R
*        ASXB R
*        ESRTABLE R
*01*  TABLES = NONE
*
*01*  MACROS =
*        ABEND
*        GETMAIN
*        BLDCPOOL
*        TESTAUTH
*        SETLOCK
*        CALLRTM
*        GETCELL
*        HOOK
*
*02*     SERIALIZATION =
*        DISABLE
*        TCB ACTIVE BIT
*        SVRB NOT ON QUEUE
*
*01*  CHANGE-ACTIVITY = Y02715,Y02751,Y02752,Z40FPYK           @Z40FPYK
*                       OZ09430 - VERIFY THAT THE COMPUTED     @ZA29595
*                                 ADDRESS OF THE ESR TABLE     @ZA29595
*                                 ENTRY IS NOT BEYOND THE END  @ZA29595
*                                 OF THE ESR TABLE.            @ZA29595
*                       OZ12726 - VERIFY THAT THE COMPUTED     @ZA29595
*                                 ADDRESS OF THE ESR TABLE     @ZA29595
*                                 ENTRY IS NOT BEFORE THE      @ZA29595
*                                 BEGINNING OF THE ESR TABLE.  @ZA29595
*                       OZ13392 - WHEN EXPANDING THE SVRB POOL,@ZA29595
*                                 CLEAR THE SCB AND ITS PARM   @ZA29595
*                                 AREA IN THE SVRB'S.          @ZA29595
*                       OZ15765 - PURGE THE FRR STACK UPON     @ZA29595
*                                 RETURN FROM A TYPE 6 SVC     @ZA29595
*                       OZ20352 - VERIFY THAT AN SRB RETURNED  @ZA29595
*                                 BY A TYPE 6 SVC DOES NOT     @ZA29595
*                                 HAVE CPU AFFINITY TO A       @ZA29595
*                                 DIFFERENT PROCESSOR.         @ZA29595
*                       OZ29595 - WHEN A SINGLE SVRB IS GOTTEN @ZA29595
*                                 FOR ABEND, MARK IT SO IT     @ZA29595
*                                 WILL BE FREED BY EXIT        @ZA29595
*                                 PROLOGUE, BECAUSE IT MAY BE  @ZA29595
*                                 GOTTEN FROM SQA.             @ZA29595
*
*     MODIFIED BY GREG PRICE FOR USERMOD ZP60013   2005-01-15   ZP60013
*                                                               ZP60013
*        1. ADD CROSS-MEMORY MODE INDICATED IN ISSUER'S PSW     ZP60013
*           AS ANOTHER REASON TO FAIL WITH ABEND S0F8.          ZP60013
*                                                               ZP60013
*        2. ADD A TABLE OF 256 FULLWORDS TO COUNT THE NUMBER    ZP60013
*           OF TIMES EACH (UNSCREENED) SVC IS ISSUED.           ZP60013
*                                                               ZP60013
*           THIS TABLE IS AVAILABLE FOR USE BY MONITORS:        ZP60013
*              FLCSNPSW+4 POINTS TO THE SVC FLIH.               ZP60013
*              IF SVC_FLIH-X'C' = CL8'SVCCTTBL'                 ZP60013
*              THEN SVC_FLIH-4 -> SVC COUNTER TABLE.            ZP60013
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES =
*        X'047'-UNAUTHORIZED ISSUER OF SVC.
*        X'0F8'-SRB MODE, LOCKS WERE HELD, DISABLED OR XMEM.    ZP60013
*        X'0F9'-UNABLE TO EXPAND SVRB POOL.
*        X'0FA'-UNABLE TO OBTAIN SVRB STORAGE FOR ABTERM IN PROCESS.
*        X'16D'-INVALID OR UNSUPPORTED EXSVC ISSUED.
*        X'FXX'-UNDEFINED SVC ISSUED.(XXX IS NUMBER)
*
**** END OF SPECIFICATIONS ***/
         EJECT
***********************************************************************
*                                                                     *
*                     IEAVESVC MAINLINE                               *
*                                                                     *
***********************************************************************
IEAVESVC CSECT
*        MODID BR=NO
         DC    CL26'IEAVESVC UZ86400 11/09/78 '
         DC    CL18' ZP60013 20050115 '                         ZP60013
         DC    CL8'SVCCTTBL'       FLAG COUNTER TABLE PRESENCE  ZP60013
         DC    A(SVCCTTBL)         SVC COUNTER TABLE POINTER    ZP60013
         SPACE 2
*/*IEAVESVC: CHART SVC FLIH */
*/* HEADER
*/*
*/*
*/*
*/*                                               SECTION 3.1.8.1
*/* SVC FLIH
*/*                                               PAGE # */
         SPACE 2
*/*IEAQSC00: E IEAQSC00 */
         SPACE 2
         ENTRY IEAQSC00
IEAQSC00 DS    0H
         USING PSA,0
         SPACE 2
*/* P MAKE SVC FLIH STACK CURRENT */
         SPACE 2
         MVC   PSASSAV,PSACSTK         SAVE CURRENT FRR STACK
         MVC   PSACSTK,PSASSTK         MAKE SVC FLIH STACK CURRENT
*/* P SET SVC FLIH BIT PSASVC=1 */
         SPACE 2
         OI    PSASUP1,PSASVC          TURN SVC FLIH FLAG ON
         SPACE 2
*/* P SAVE ONE REG TO GET LCCA ADDR IN PSAGPREG */
         SPACE 2
         ST    R7,PSAGPREG             SAVE ONE REGISTER IN PSA
         SPACE 2
*/* P SAVE ALL REGS IN LCCASGPR */
         SPACE 2
         L     R7,PSALCCAV             GET ADDRESS OF LOGICAL CCA
         USING LCCA,R7                 ESTABLISH BASE TO LCCA
         STM   R0,R15,LCCASGPR         SAVE ALL REGISTERS      @YA02598
         L     R14,PSAGPREG            GET REGISTER SAVED INITIALLY
         ST    R14,LCCASGPR+C28        SAVE REGISTER USED      @YA02598
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY */
         SPACE 2
         BALR  R9,C0                   ESTABLISH
         USING *,R9                    ADDRESSABILITY
         SPACE 2
*/*SRBTST: D (YES,SVCINV,NO,) SRB MODE? */
         SPACE 2
SRBTST   DC    0H'0'                   TEST LABEL
         TM    LCCADSF2,LCCASRBM       IS SRB MODE INDICATED
         BO    SVCINV                  IF SO,INVALID ISSUER
         SPACE 2
*/*LOCKTST: L (NO,,YES,SVCINV) SETLOCK-- ANY LOCKS HELD? */
         SPACE 2
LOCKTST  DC    0H'0'                   TEST LABEL
         SETLOCK TEST,TYPE=ALL,REGS=(R8),BRANCH=(HELD,SVCINV)
*                                      ANY LOCKS HELD?
         SPACE 2
*/* D (YES,SVCPROC,NO,SVCINV) USER ENABLED? */
         SPACE 2
         TM    FLCSOPSW,ENABLE         WAS USER ENABLED?
         BNO   SVCINV                  NO GO CALL RTM          @Z40FPYJ
         SPACE 2
*/* D (YES,SVCPROC,NO,SVCINV) CROSS MEMORY MODE? */             ZP60013
         SPACE 2
         TM    FLCSOPSW+2,X'C0'        PRIMARY ADDRESSING MODE? ZP60013
         BNZ   SVCINV                  NO GO CALL RTM           ZP60013
         SPACE 2
*/* SVCPROC: P GET CVTTRACE FROM CVT INTO REG 11 */
         SPACE 2
SVCPROC  L     R13,FLCCVT              GET CVT ADDRESS
         USING CVT,R13                 ESTABLISH BASE TO CVT
         SPACE 2
*/* D (NO,GTFHOOK,YES,) SHOULD TRACE BE ENTERED? */
         SPACE 2
         CLI   CVTTRACE+C1,CXFA        IS TRACE TO BE ENTERED
         BNE   GTFHOOK                 IF NOT DONT TRACE
         SPACE 2
*/* P GET TRSVC ENTRY POINT TO TRACE IN REG 10 */
         SPACE 2
         L     R10,ATRSVC              GET SVC TRACE ENTRY ADDRESS
         SPACE 2
*/*TRACEEP: L TRACE-- VIA BALR 11,10 */
         SPACE 2
TRACEEP  DC    0H'0'                   TEST LABEL
         BALR  R11,R10                 GO TO TRACE
         DROP  R13
         SPACE 2
*/*GTFHOOK: L HOOK--  ISSUE HOOK EID=IEASVCH TYPE=P */
         SPACE 2
GTFHOOK  DC    0H'0'                   TEST LABEL
         HOOK  EID=IEASVCH,TYPE=P      GTF TRACE SVC INTERRUPT
         SPACE 2
*/* P GET TCB ADDR FROM PSATOLD IN REG 4 */
         SPACE 2
         L     R4,PSATOLD              GET CURRENT TCB ADDRESS
         USING TCB,R4                  ESTABLISH BASE TO TCB
         SPACE 2
*/* P GET RB ADDR FROM TCBRBP IN REG 5 */
         SPACE 2
         L     R5,TCBRBP               GET CURRENT RB ADDRESS
         SPACE 2
*/* P SAVE SVCOPSW IN RBOPSW */
         SPACE 2
         USING RBSECT,R5               ESTABLISH BASE TO RB
         MVC   RBOPSW(L8),FLCSOPSW     SAVE PSW IN RB
         LR    R8,R5                   TRANSFER RB ADDRESS
         S     R8,KRBPRFXL             GET PTR TO RB PREFIX
         DROP  R5
         USING RBPRFXST,R8             ESTABLISH BASE TO RB PREFIX
         SPACE 2
*/* P SAVE SVCILC IN RBINLNTH AND SVCNUM IN RBINTCOD */
         SPACE 2
         IC    R6,FLCSVILC             GET SVC INSTRUCTION LENGTH
         STC   R6,RBINLNTH             STORE IN THE RB
         LH    R6,FLCSVCN              GET THE SVC NUMBER
         STH   R6,RBINTCOD             STORE IN THE RB PREFIX
         DROP  R8
         SPACE 2
*/* D (YES,SVCSCREN,NO,) IS SVC SCREENING ACTIVE? */
         SPACE 2
         TM    TCBFLGS7,TCBSVCS   CHECK FOR SVC SCREENING      @Z40EPVC
         BO    SVCSCREN           ACTIVE -- DO SCREENING       @Z40EPVC
         SPACE 2
*/*SVCTENTY: P GET SVCTABLE ENTRY FROM SVC TABLE */            @Z40FPYK
         SPACE 2
SVCTENTY DS    0H                                              @Z40FPYK
         SPACE 2
*/*          P INCREMENT EVENT COUNT FOR THIS SVC NUMBER */     ZP60013
         LR    R10,R6                  COPY SVC NUMBER          ZP60013
         SLL   R10,C2                  MULTIPLY SVC NUMBER BY 4 ZP60013
         LA    R10,SVCCTTBL(R10)       POINT TO SVC COUNTER     ZP60013
         L     R14,0(,R10)             GET CURRENT COUNT        ZP60013
SVCCTLP  LA    R8,C1                   GET INCREMENT SIZE       ZP60013
         AR    R8,R14                  GET NEW SVC EVENT COUNT  ZP60013
         CS    R14,R8,0(R10)           SAVE THE NEW COUNT       ZP60013
         BNZ   SVCCTLP                 RETRY IF NECESSARY       ZP60013
         SPACE 2
         SLL   R6,C3                   MULTIPLY SVC NUMBER BY 8
         A     R6,SVCTAB               GET ADDRESS OF SVC ENTRY
         USING SVCENTRY,R6             ESTABLISH BASE TO SVC ENTRY
         SPACE 2
*/* D (YES,SVCEXT,NO,) ESR APF OR N/P BIT ? */                 @Z40FPYK
         SPACE 2
         TM    SVCATTR1,SVCAPF+SVCESR+SVCNP CHECK FOR ESR,APF, @Z40FPYK
*                                      OR N/P BIT ON IN ENTRY  @Z40FPYK
         BNZ   SVCEXT                  IF NOT ON CONTINUE PROCESSING
         SPACE 2
*/*SVCOK: P GET ASCB ADDR FROM PSAAOLD */
         SPACE 2
SVCOK    LR    R10,R7                  SAVE LCCA ADDRESS
         L     R7,PSAAOLD              GET CURRENT ASCB ADDRESS
         USING ASCB,R7                 ESTABLISH BASE TO ASCB
         USING LCCA,R10
         SPACE 2
*/*TYPTST: D (YES,,NO,SVCCELL) IS SVC A TYPE 1 ? */            @Z40FPYK
         SPACE 2
TYPTST   DC    0H'0'                   TEST LABEL
         TM    SVCATTR1,CXF0-SVCTP1    IS SVC TYPE 1
         BNZ   SVCCELL                 IF NOT, PROCESS TYPE 2, @Z40FPYJ
*                                      3, 4, OR 6
         SPACE 2                                               @Z40FPYK
         EJECT                                                 @Z40FPYK
************************************************************** @Z40FPYK
*                                                            * @Z40FPYK
*        ROUTINE TO PROCESS TYPE 1 SVC                      *  @Z40FPYJ
*                                                           *  @Z40FPYK
*************************************************************  @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*SVC1: S GETRTN:INTERNAL ROUTINE TO GET LOCK */
         SPACE 2
SVC1     MVC   TCBGRS(L64),LCCASGPR    MOVE THE GENERAL REGS TO THE TCB
*                                                              @YA02598
         L     R13,LLCO                GET ENTRY POINT TO LOCK MANAGER
         BALR  R14,R13                 OBTAIN LOCAL LOCK CONDITIONALLY
         LTR   R13,R13                 CHECK IF LOCK OBTAINED OK
         BNZ   BACKUP                  IF NOT BACK UP INSTRUCTION
         SPACE 2
*/* P SET TYPE1 SWITCH */
         SPACE 2
         OI    ASCBFLG1,ASCBTYP1       TURN ON TYPE 1 SVC FLAG
         LA    R1,TCBGRS               POINT REG1 TO SVC ISSUER REGS
         SPACE 2
*/* P CLEAR SVC FLIH BIT */
         SPACE 2
         NI    PSASUP1,CXFF-PSASVC     CLEAR SVC FLIH BIT
         SPACE 2
*/* P MAKE FRR NORMAL STACK CURRENT */
         SPACE 2
         L     R8,PSANSTK              GET NORMAL STACK PTR
         ST    R8,PSACSTK              MAKE NORMAL CURRENT PTR
         SPACE 2
*/*ENABLE1: P ENABLE PSW FOR I/O & EXT INT */
         SPACE 2
ENABLE1  DC    0H'0'                   TEST LABEL
         STOSM LCCAPSMK,ENABLE         ENABLE THE PSW
         SPACE 2
*/*INSLOCK: D (NO,SVCENTPT,YES,CMSCK) ANY MORE LOCKS/ */
         SPACE 2
INSLOCK  DC    0H'0'                   TEST LABEL
         LH    R8,SVCLOCKS             GET LOCK INDICATORS FROM SVC
         SLL   R8,C16                  TABLE INTO HIGH ORDER 2 BYTES
         ALR   R8,R8                   FORCE LOCAL LOCK BIT OUT
         BC    M10,SVCENTPT            IF 0 LEFT THEN NO MORE LOCKS
         B     CMSCK                   OTHERWISE CHECK FOR MORE LOCKS
         EJECT                                                 @Z40FPYK
         CNOP  0,8                                             @Z40FPYK
*/*SVCCELL: N GET AN SVRB FROM THE POOL OF SVRBS */
         SPACE 2
SVCCELL  DS    0H                      GET SVRB FROM POOL      @Z40FPYJ
         SPACE 2
*/* D (YES,TYPE6SVC,NO,) TYPE 6 SVC ? */                       @Z40FPYK
         SPACE 2                                               @Z40FPYK
         TM    SVCATTR1,SVCTP6         TYPE 6 SVC ?            @Z40FPYK
         BO    TYPE6SVC                YES, PROCESS NO SVRB    @Z40FPYK
*                                      IS NECESSARY            @Z40FPYK
         SPACE 2                                               @Z40FPYK
************************************************************** @Z40FPYK
*                                                            * @Z40FPYK
*        ROUTINE FOR TYPE 2,3, AND 4 SVC                     * @Z40FPYK
*        GET AND INITIALIZE AN SVRB.                         * @Z40FPYK
*                                                            * @Z40FPYK
************************************************************** @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P GET FIRST IN POOL ADDRESS AND SYNC COUNT */
         SPACE 2
         L     R2,ASCBSVRB             ADDRESS OF 1ST AVAIL    @Z40FPYJ
         L     R3,ASCBSYNC             ADDRESS OF SYNC FIELD   @Z40FPYJ
         SPACE 2
*/*CKSVRB: D (YES,,NO,GETCORE) SVRB AVAILABLE ? */             @Z40FPYK
         SPACE 2
CKSVRB   LTR   R2,R2                   ANY AVAILABLE?          @Z40FPYJ
         BZ    GETCORE                 NO, EXPAND POOL         @Z40FPYJ
         SPACE 2
*/* P INCREMENT SYNC COUNT */
         SPACE 2
         LA    R15,1(R3)               BUMP COUNT BY ONE       @Z40FPYJ
         SPACE 2
*/* P GET NEXT MAIN CONTROL BLOCK POINTER */
         SPACE 2
         USING MBCB,R2                                         @Z40FPYJ
         L     R14,MBCBLINK            NEXT BLOCK ON CHAIN     @Z40FPYJ
         SPACE 2
*/* P SWAP ADDRESS AND SYNC FIELDS */
         SPACE 2
         CDS   R2,R14,ASCBSUPC         SWAP ADDR AND SYNC      @Z40FPYJ
         BNE   CKSVRB                  RETRY IF COMPARE FAILS  @Z40FPYJ
         SPACE 2
*/*SVRBINIT: P ZERO OUT THE SVRB CELL */                       @Z40FPYK
         SPACE 2
SVRBINIT XC    MBCBPXLN(RBSCBB-RBPRFXST,R2),MBCBPXLN(R2)       @Z40FPYK
*                                      ZERO THE WHOLE  SVRB AREA
*                                      EXCEPT THE SCB. THE DISPL OF
*                                      8 SKIPS THE ID AND LINK FIELDS
*                                      OF THE MAIN CONTROL BLOCK.
         SPACE 2
*/*SVRBINT2: P PLACE PREVIOUS RB ADDR IN RBLINK */             @ZA29595
         SPACE 2                                               @Z40FPYK
SVRBINT2 EQU   *                                               @ZA29595
         USING RBPRFXST-MBCBPXLN,R2                            @Z40FPYK
         ST    R5,RBLINK               CHAIN SVRB TO PREVIOUS  @Z40FPYK
*                                      RB ON TCB CHAIN         @Z40FPYK
         DROP  R2                                              @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P SET UP TO THE MAIN BODY OF SVRB */                       @Z40FPYK
         SPACE 2                                               @Z40FPYK
         LA    R5,RBPRFLNA+MBCBPXLN(R2) ALIGN TO MAIN SVRB     @Z40FPYK
         USING RBSECT,R5                                       @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P MOVE TCBGRS TO RBGRSAVC */                               @Z40FPYK
         SPACE 2                                               @Z40FPYK
         MVC   RBGRSAVE(L64),LCCASGPR  SAVE TCBREGS IN SVRB SAVE AREA
*                                                              @YA02598
         SPACE 2
*/* P PUT SVRB SIZE IN RBSIZE */
         SPACE 2
*/* P SET SVRB BITS: RBFDYN RBATTN RBFTSVRB */
         SPACE 2
*                                                              @Z40FPYK
*        THE RB SIZE, TYPE, AND FLAGS ARE SET BY THE           @Z40FPYK
*        FOLLOWING MASK IN THE SVRB:                           @Z40FPYK
*        RBTRSVRB + RBFDYN +RBSIZE                             @Z40FPYK
*                                                              @Z40FPYK
         L     R1,SVRBMASK             GET MASK                @Z40FPYJ
         ST    R1,RBSIZE               SET MASK IN RB          @Z40FPYJ
         SPACE 2
*/* P PUT LEFT HALF SVCNPSW IN LEFT HALF RBOPSW (ENABLED) */
         SPACE 2
         L     R8,ALHSNPSW             PUT LEFT HALF OF SVC NEW PSW
         ST    R8,RBOPSW               INTO LEFT HALF OF RB OLD PSW
         IC    R8,ASCBSRBM             PUT MODEL PSW BYTE 0
         STC   R8,RBOPSW               INTO BYTE 0 OF RB OLD PSW
         SPACE 2
*/*TYP34TST: D (NO,TYP2,YES,) SVC TYPE 3 OR 4? */
         SPACE 2
TYP34TST DC    0H'0'                   TEST LABEL
         TM    SVCATTR1,SVCTP34        IS SVC A TYPE3 OR 4
         BNO   TYP2                    IF NOT,THEN TYPE2
         SPACE 2
*/*TYP34: P SET SVRB BIT */
         SPACE 2
TYP34    DC    0H'0'                   TEST LABEL
         OI    RBSTAB1,RBTRSVRB        IF TYPE 3 OR 4 INDICATE AS SUCH
         SPACE 2
*/*TYP2: P PLACE SVRB ADDR IN TCBRBP */
         SPACE 2
TYP2     DS    0H
         ST    R5,TCBRBP               CHAIN TCB TO SVRB       @Z40FPYK
         SPACE 2
*/* P SUPPRESS ATTENTIONS SET TCBATT */
         SPACE 2
         OI    TCBTSFLG,TCBATT         SUPPRESS ATTENTIONS IN TCB
         SPACE 2
*/* P REG 1= ADDR REGISTER SAVE AREA IN RB */                  @Z40FPYK
         SPACE 2
         LA    R1,RBGRSAVE             POINT REG1 TO SVC ISSUER REGS
         SPACE 2
*/*SVRBTST: P CLEAR SVC FLIH BIT */
         SPACE 2
SVRBSTST DC    0H'0'                   TEST LABEL
         NI    PSASUP1,CXFF-PSASVC     CLEAR SVC FLIH BIT
         SPACE 2
*/* P MAKE FRR NORMAL STACK CURRENT */
         SPACE 2
         L     R8,PSANSTK              GET NORMAL STACK PTR
         ST    R8,PSACSTK              MAKE NORMAL CURRENT PTR
*                                      FROM HERE ON SVC FLIH ACTS AS
*                                      PART OF SVC ROUTINE
         SPACE 2
*/*ENABLE2: P ENABLE PSW FOR I/O & EXT INT */
         SPACE 2
ENABLE2  DC    0H'0'                   TEST LABEL
         STOSM LCCAPSMK,ENABLE         ENABLE THE PSW FOR I/O AND
*                                      EXTERNAL INTERRUPTS
         SPACE 2
*/*INSLOCK2: D (NO,CMSCK,YES,) LOCAL LOCK NEEDED? */
         SPACE 2
INSLOCK2 DC    0H'0'                   TEST LABEL
         LH    R8,SVCLOCKS             PUT LOCK BYTES OF SVC TABLE INTO
         SLL   R8,C16                  HIGH ORDER 2 BYTES OF REGISTER
         ALR   R8,R8                   DOUBLE VALUE,FORCING HIGH ORDER
*                                      BIT OUT CAUSING CONDITION CODE
         BC    M8,SVCENTPT             IF NO CARRY AND 0 IS LEFT, NO
*                                      LOCKS NEEDED
         BC    M4,CMSCK                IF NO CARRY AND NOT 0,
*                                      CHECK NEXT LOCK
         SPACE 2
*/*LOCLOCK: L SETLOCK-- OBTAIN LOCAL UNCONDITIONAL */
         SPACE 2
LOCLOCK  DS    0H
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('OBTAINED ON BE*
               HALF OF SVC ROUTINE','MAY BE GIVEN UP BY SVC ROUTINE OR *
               BY EXIT PROLOGUE',IEAVEEXP(RELLOCAL)) GET LOCAL LOCK
LOCLCK   DC    0H'0'                   TEST LABEL
         SPACE 2
*/*CMSCK: D (NO,SRMCK,YES,) CMS LOCK NEEDED? */
         SPACE 2
CMSCK    ALR   R8,R8                   CHECK NEXT LOCK BIT
         BC    M8,SVCENTPT             IF NOCARRY AND 0,NO MORE LOCKS
         BC    M4,SRMCK                IF NOCARRY AND NOT 0, CHECK NEXT
         SPACE 2
*/*CMSLK: L SETLOCK-- OBTAIN CMS UNCONDITIONAL */
         SPACE 2
CMSLK    SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=('OBTAINED ON BEHA*
               LF OF SVC ROUTINE','MAY BE GIVEN UP BY SVC ROUTINE OR BY*
               EXIT PROLOGUE',IEAVEEXP(RELCMS)) GET CMS LOCK
CMSLKTST DC    0H'0'                   TEST LABEL
         SPACE 2
*/*SRMCK: D (NO,SALCK,YES,) SRM LOCK NEEDED? */
         SPACE 2
SRMCK    ALR   R8,R8                   CHECK NEXT LOCK BIT
         BC    M8,SVCENTPT             IF NOCARRY AND 0,NO MORE LOCKS
         BC    M4,SALCK                IF NOCARRY AND NOT 0,CHECK NEXT
         SPACE 2
*/*SRMLK: L SETLOCK--  OBTAIN SRM UNCONDITIONAL */
         SPACE 2
SRMLK    SETLOCK OBTAIN,TYPE=SRM,MODE=UNCOND,RELATED=('OBTAINED ON BEHA*
               LF OF SVC ROUTINE','MAY BE GIVEN UP BY SVC ROUTINE OR BY*
               EXIT PROLOGUE',IEAVEEXP(LKDISTST,NOTDIS)) GET SRM LOCK
SRMLKTST DC    0H'0'                   TEST LABEL
         SPACE 2
*/*SALCK: D (NO,DISPPCK,YES,SALLCLK) SALLOC LOCK NEEDED? */
         SPACE 2
SALCK    ALR   R8,R8                   CHECK NEXT LOCK BIT
         BC    M8,SVCENTPT             IF NOCARRY AND 0,NO MORE LOCKS
         BC    M4,DISPPCK              IF NOCARRY AND NOT 0,CHECK NEXT
         SPACE 2
*/*SALLCLK: L SETLOCK-- OBTAIN SALLOC UNCOND */
         SPACE 2
SALLCLK  SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=('OBTAINED ON B*
               EHALF OF SVC ROUTINE','MAY BE GIVEN UP BY SVC ROUTINE OR*
               BY EXIT PROLOGUE',IEAVEEXP(LKDISTST,NOTDIS)) GET SALLOC *
               LOCK
SALCKTST DC    0H'0'                   TEST LABEL
         SPACE 2
*/*DISPPCK: D (NO,SVCENTPT,YES,DISPLK) DISP LOCK NEEDED? */
         SPACE 2
DISPPCK  ALR   R8,R8                   CHECK NEXT LOCK BIT
         BC    M12,SVCENTPT            IF NOCARRY,NO MORE LOCKS
         SPACE 2
*/*DISPLK: L SETLOCK-- OBTAIN DISP UNCONDITIONAL */
         SPACE 2
*                                      GET DISPATCHER LOCK
DISPLK   SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('OBTAINED ON BEH*
               ALF OF SVC ROUTINE','MAY BE GIVEN UP BY SVC ROUTINE OR B*
               Y EXIT PROLOGUE',IEAVEEXP(LKDISTST,NOTDIS))
DISPLTST DC    0H'0'                   TEST LABEL
         EJECT                                                 @Z40FPYK
*/*SVCENTPT: P R3=PTR(CVT) R4=PTR(TCB) R5=PTR(RB) R7=PTR(ASCB) */
         SPACE 2
         CNOP  0,8                     OPTIMAL BRANCH ALIGNMENT
SVCENTPT DS    0H
         L     R3,FLCCVT               GET CVT POINTER IN REG3
         USING CVT,R3
         SPACE 2
*/* P R0,R1,R13,R15 AS ON ENTRY */
         SPACE 2
         L     R13,C52(R1)             GET REG 13 AS UPON ENTRY
         L     R15,C60(R1)             GET REG 15 AS UPON ENTRY
         L     R0,C0(R1)               SET REG 0 AS UPON ENTRY
         L     R1,C4(R1)               SET REG 1 AS UPON ENTRY
         L     R6,C0(,R6)              GET SVC ENTRY POINT ADDRESS
         SPACE 2
*/* P R14= PTR(IEAVEXPR) RETURN ADDR =EXIT PROLOGUE */
         SPACE 2
         L     R14,CVTEXPRO            SET UP RETURN ADDRESS
         SPACE 2
*/*SVCEPTST: R BRANCH TO SVC EP */
         SPACE 2
SVCEPTST DC    0H'0'                   TEST LABEL
         BR    R6                      GO TO SVC ROUTINE
         TITLE 'IEAVESVC- SVCEXT: SPECIAL SVC PROCESSING'
         SPACE 2
*/*SVCEXT: D (NO,APFTST,YES,) ESR? */
         SPACE 2
SVCEXT   TM    SVCATTR1,SVCESR         CHECK FOR ESR BIT
         BZ    APFTST                  NOT ON -- CHECK APF BIT
         SPACE 2
*/* P MPLY ESR CODE BY 8 (= CALLER'S REG 15) */
         SPACE 2
         SLL   R15,C3                  MULT ESR CODE BY 8
         SPACE 2
*/* P GET CORRECT ENTRY IN ESR TABLE FOR INVOKED EXSVC */
         SPACE 2
         L     R6,C0(,R6)              GET START THIS SECTION ESRTABLE
         AR    R6,R15                  GET CORRECT OFFSET IN TABLE
         SPACE 2
*/* D (YES,APFTST,NO,) CHECK THAT ENTRY IS IN ESR TABLE */
         SPACE 2
         CL    R6,ESRTBBGN             CHK ENTRY IS NOT BEFORE @ZA12726
*                                      BEGINNING OF TABLE      @ZA12726
         BL    INVESR                  ESR CODE IS INVALID     @ZA12726
         CL    R6,ESRTBEND             CHK ENTRY IS BEFORE END @ZA09430
*                                      OF TABLE                @ZA12726
*                                      (C INST CHNGED TO CL)   @ZA09430
         BL    APFTST                  ENTRY IS OK -- CONTINUE
         SPACE 2
*/* P (,ABTERMR) LOAD REG 1 WITH ABEND CODE = X'16D' */
         SPACE 2
INVESR   EQU   *                                               @ZA12726
         LA    R1,COMPCDE4             INVALID ESRCODE -- ABEND
         B     ABTERMR                 GO TO ABTERM WITH 16D CODE
         SPACE 2
*/*APFTST: D (NO,NPTST,YES,) IS SVC AUTHORIZED? */             @Z40FPYK
         SPACE 2
APFTST   DC    0H'0'                   TEST LABEL
         TM    SVCATTR1,SVCAPF         IS SVC AUTHORIZED
         BZ    NPTST                   IF NOT AUTHORIZED,CONTINUE
*                                      OTHERWISE CHECK AUTHORIZATION
         SPACE 2
*/*TESTAUTH: L TESTAUTH-- FCTN=1 STATE=YES KEY=YES */
         SPACE 2
TESTAUTH DC    0H'0'                   TEST LABEL
         TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=1,BRANCH=YES        X
                                       GO TO CHECK AUTHORIZATION
         SPACE 2
*/*AUTHTST: D (YES,NPTST,NO,) AUTHORIZED? */                   @Z40FPYK
         SPACE 2
AUTHTST  DC    0H'0'                   TEST LABEL
         LTR   R15,R15                 IS RETURN CODE ZERO
         BZ    NPTST                   IF SO CONTINUE PROCESS  @Z40FPYK
         SPACE 2
*/* P SET COMPLETION CODE = X'047' */
         SPACE 2
         LA    R1,COMPCD2              GET COMPLETION CODE
         SPACE 2
*/*ABTERMR: P MOVE THE GENERAL REGISTERS FROM THE LCCA INTO THE TCB */
         SPACE 2
         DROP  R10                                             @Z40FPYK
         USING LCCA,R7                                         @Z40FPYK
ABTERMR  MVC   TCBGRS(L64),LCCASGPR    MOVE THE REGS INTO THE TCB
*                                                              @YA02598
         DROP  R7                                              @Z40FPYK
         USING LCCA,R10                                        @Z40FPYK
         USING ASCB,R7                                         @Z40FPYK
         SPACE 2
*/*ABTERMRT: L CALLRTM-- TYPE= ABTERM */
         SPACE 2
ABTERMRT CALLRTM TYPE=ABTERM,TCB=0,COMPCOD=(1) GO TO RTM
         SPACE 2
*/*EX1: P CLEAR SVC FLIH BIT */
         SPACE 2
EX1      DC    0H'0'                   TEST LABEL
         L     R6,AIEAPDS7             GET DISPATCHER ADDRESS
         NI    PSASUP1,CXFF-PSASVC     CLEAR SVC FLIH BIT
         SPACE 2
*/*FIN1: R EXIT TO DISPATCHER */
         SPACE 2
FIN1     DC    0H'0'                   TEST LABEL
         BR    R6                      EXIT TO DISPATCHER
         SPACE 2                                               @Z40FPYK
*/*NPTST: D (YES,,NO,SVCOK) N/P SVC ? */                       @Z40FPYK
         SPACE 2                                               @Z40FPYK
NPTST    DS    0H                                              @Z40FPYK
         TM    SVCATTR1,SVCNP          NON-PREEMPTIVE SVC ?    @Z40FPYK
         BNO   SVCOK                   NO--CONTINUE            @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P (,SVCOK) SET TASK NON PREEMPTIVE */                      @Z40FPYK
         SPACE 2                                               @Z40FPYK
         OI    TCBFLGS1,TCBNONPR       SET TASK N/P            @Z40FPYK
         B     SVCOK                   NORMAL SVC PROCESSING   @Z40FPYK
         TITLE 'IEAVESVC- GETCORE: GET SVRB POOL'              @Z40FPYJ
         SPACE 2
*/*GETCORE: P MOVE THE GENERAL REGISTERS INTO THE TCB */
         SPACE 2
GETCORE  MVC   TCBGRS(L64),LCCASGPR    MOVE THE REGISTERS INTO THE TCB
*                                                              @YA02598
         SPACE 2
*/* S GETRTN:INTERNAL ROUTINE TO GET LOCK */
         SPACE 2
         BAL   R2,GETRTN               GO INTERNAL SUBRTN TO GETLOCK
         SPACE 2
*/* P SET UP REGS FOR GETMAIN */
         SPACE 2
         LA    R0,MBCBLEN*SVRBNUM      LOAD AMOUNT OF CORE NEEDED
               SPACE 2
*/* D (YES,,NO,POOLGET) ABEND IN PROCESS? */
         SPACE 2
         TM    TCBFLGS3,TCBABGM        IF OUT OF CORE IS ABEND IN
*                                      PROCESS
         BNO   POOLGET                 IF SO DO GETMAIN FOR SINGLE SVRB
         SPACE 2
*/*ABSVRB: P USE SVRBLEN TO INDICATE AMNT OF CORE */
         SPACE 2
ABSVRB   LA    R0,SVRBLEN CHANGE       AMOUNT OF CORE          @ZA29595
         SPACE 2
*/*POOLGET: L GETMAIN-- GET CORE FOR EXPANDING SVRB POOL */
               SPACE 2
POOLGET  DC    0H'0'                   TEST LABEL
         GETMAIN RC,SP=255,LV=(0),BRANCH=YES GO GET CORE
         SPACE 2
*/*POOLGOT:  L SETLOCK-- RELEASE TYPE=LOCAL */
         SPACE 2
POOLGOT  DC    0H'0'                   TEST LABEL
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=('GETMAIN COMPLETE',IEAVESVC(GETRTN)) CLEAR     *
               LOCAL LOCK
         SPACE 2
*/*POOLGTST: D (NO,GOTCORE,YES,) OUT OF CORE? */
         SPACE 2
POOLGTST DC    0H'0'                   TEST LABEL
         LTR   R15,R15                 WAS CORE GOTTEN
         BZ    GOTCORE                 IF SO GO SET UP
               SPACE 2
*/* D (YES,TERMMEM,NO,) ABEND IN PROCESS? */
         SPACE 2
         TM    TCBFLGS3,TCBABGM        IF OUT OF CORE IS ABEND IN
*                                      PROCESS
         BO    TERMMEM                 IF SO GO TO MEMTERM     @Z40FPYJ
         SPACE 2
*/* P (,ABTERMRT) SET COMPLETION CODE= X'0F9' */               @Z40FPYK
         SPACE 2
         SR    R1,R1                   SET UP R15 = 0          @Z40FPYK
         ST    R1,TCBGRS15             COMPLETION CODE IN TCB  @Z40FPYK
         LA    R1,COMPCD3              GET COMPLETION CODE
         B     ABTERMRT                GO TO ABTERM ISSUER
         SPACE 2
         TITLE 'IEAVESVC- SVCINV: INVOKE RTM'
         SPACE 2
*/*SVCINV: P LOAD COMPLETION CODE */
         SPACE 2
SVCINV   TM    PSASUP1,PSATYPE6        TYPE 6 SVC IN CONTROL?
         BO    SVCINSTK                YES
         NI    PSASUP1,CXFF-PSASVC     NO, NO LONGER IN SVC FLIH
SVCINSTK MVC   PSACSTK,PSASSAV         RESTORE FRR STACK
         LA    R1,COMPCD1              GET COMPLETION CODE
         SPACE 2
*/*SVCERR: R EXIT TO RTM */
         SPACE 2
SVCERR   DC    0H'0'                   TEST LABEL
*                                      GO TO RTM FOR ERROR RECOVERY
         CALLRTM TYPE=SVCERR,COMPCOD=(1)
         B     SVCPROC                 RETURN TO MAINLINE      @Z40FPYJ
         TITLE 'IEAVESVC- IGCERROR:SVC ERROR ROUTINE '
***********************************************************************
*                                                                     *
*                     SVC ERROR ROUTINE                               *
*                                                                     *
***********************************************************************
         ENTRY IGCERROR
         SPACE 2
*/*IGCERROR: E IGCERROR */
         SPACE 2
IGCERROR DS    0H
         USING RBSECT,R5               ESTABLISH BASE TO SVRB
         L     R2,RBLINK               GET ISSUING RB ADDRESS
         S     R2,KRBPRFXL             GET PTR TO RB PREFIX
         SPACE 2
*/* P GET SVC NUMBER FROM PREVIOUS RB */
         SPACE 2
         DROP  R5
         USING RBPRFXST,R2             ESTABLISH BASE TO RB PREFIX
         LH    R1,RBINTCOD             GET SVC NUMBER ISSUED
         SPACE 2
*/* P (,ABTST) SET COMPLETION CODE =X'F(SVCNUM)' */
         SPACE 2
         LA    R1,X'F00'(,R1)          PUT F IN FRONT OF SVC NUMBER
         B     ABTST               BRANCH AROUND IGXERROR ENTRY
         ENTRY IGXERROR            ENTRY FOR INVALID EXSVC NUMBER
         SPACE 2
*/*IGXERROR: E IGXERROR */
         SPACE 2
IGXERROR DS    0H
         LA    R1,COMPCDE4         UNSUPPORTED ESRCODE -- ABEND
         SPACE 2
*/*ABTST: R EXIT VIA SVC 13 */
         SPACE 2
ABTST    DC    0H'0'                   TEST LABEL
         ABEND (1),DUMP,,SYSTEM        ABEND ISSUER OF SVC
         TITLE 'IEAVESVC- GETRTN:INTERNAL ROUTINE TO OBTAIN LOCAL LOCK'
         SPACE 2
*/*GETRTN: E GETRTN */
*/* L SETLOCK-- OBTAIN LOCAL COND */
         SPACE 2
GETRTN   SETLOCK OBTAIN,TYPE=LOCAL,MODE=COND,RELATED=('SVC INTERRUPT PR*
               OCESS FOR GETMAIN OR TYPE 1 SVC',IEAVESVC(POOLFAIL,RELLL*
               2,RELLL3,RELLL4),IEAVEEXP(RELLOCAL)) GET LOCAL LOCK
         SPACE 2
*/*LLTST1: D (NO,BACKUP,YES,) GOTTEN? */
         SPACE 2
LLTST1   DC    0H'0'                   TEST LABEL
         LTR   R13,R13                 WAS REQUEST SUCCESSFUL
         SPACE 2
*/* R RETURN */
         SPACE 2
         BCR   M8,R2                   IF SO RETURN
*                                      NOT GOTTEN BACK UP PSW
         SPACE 2
*/*BACKUP: P BACK UP INSTR ADDR OF SVCOPSW BY SVCILC */
         SPACE 2
BACKUP   DS    0H
         USING RBSECT,R5
         L     R8,FLCSOPSW+C4          GET NEXT INSTRUCTION FROM PSW
         SR    R14,R14                 CLEAR WORK REGISTER
         IC    R14,FLCSVILC            GET INSTRUCTION LENGTH
         SR    R8,R14                  BACK UP PSW BY INSTRUCTION LTH
         SPACE 2
*/* P STORE VALUE IN RBOPSW */
         SPACE 2
         ST    R8,RBOPSW+C4            PUT BACKED UP PSW IN RB OLD PSW
         SPACE 2
*/* P CLEAR SVC FLIH BIT */
         SPACE 2
         L     R6,AIEAPDS7             GET DISPATCHER ADDRESS
         NI    PSASUP1,CXFF-PSASVC     CLEAR SVC FLIH BIT
         SPACE 2
*/*BACKXIT: R EXIT TO DISPATCHER */
         SPACE 2
BACKXIT  DC    0H'0'                   TEST LABEL
         BR    R6                      GO TO DISPATCHER
         TITLE 'IEAVESVC- SVC SCREENING ROUTINE '
SVCSCREN DS    0H                 SVC SCREENING PROCESSING     @Z40EPVC
         SPACE 2
*/*SVCSCREN: P GET ADDRESS SSSCREEN TABLE */
         SPACE 2
         L     R11,TCBSVCA2       GET ADDRESS SS SCREEN TABLE  @Z40EPVC
         USING SSTAB,R11
         SPACE 2
*/* D (YES,SVCTENTY,NO,) OK TO ISSUE THIS SVC? */
         SPACE 2
         LA    R14,SSTMASK-SSTAB(R6,R11)
*                                 GET ADDRESS OF SCREEN FLAG   @Z40EPVC
         TM    0(R14),SSTSVCOK
*                                 CHECK IF OK TO ISSUE         @Z40EPVC
         BO    SVCTENTY           OK -- CONTINUE PROCESSING    @Z40EPVC
         SPACE 2
*/* P (,SVCOK) CHANGE TO SS SVC AND PROCESS */
         SPACE 2
         LR    R6,R11             NOT OK -- CHANGE TO SS SVC   @Z40EPVC
         B     SVCOK              PROCESS SS SVC REQUEST       @Z40EPVC
         TITLE 'IEAVESVC- FORMAT POOL OF SVRBS'
         SPACE 2
*/*GOTCORE: N FORMAT POOL OF SVRBS */
         SPACE 2
GOTCORE  DS    0H
         SPACE 2
*/* D (1,SETT01,9,) HOW MANY SVRBS */
         SPACE 2
         TM    TCBFLGS3,TCBABGM        1 SVRB FOR G/M ABEND    @Z40FPYJ
         BO    SETTO1                  YES, PROCESS ONLY ONE   @Z40FPYJ
         SPACE 2
*/* P SET COUNT TO 9 SVRBS IN POOL    */
         SPACE 2
         LA    R15,SVRBNUM             9 SVRBS IN  POOL        @Z40FPYJ
         SPACE 2
*/* P INIT ID AND MAIN CONTROL BLOCK PTR */
         SPACE 2
         L     R0,IDSVRB               PLACE 'SVRB' IN REG     @Z40FPYJ
         LR    R14,R1                  COPY ADDR OF 1ST MBCB   @Z40FPYJ
         USING MBCB,R14
         SPACE 2
*/*CALCNXT: P CALC ADDR OF NEXT MBCB */
         SPACE 2
CALCNXT  LA    R13,MBCBLEN(R14)        CALCULATE THE NEXT      @Z40FPYJ
*                                      MBCB ADDRESS            @Z40FPYJ
         SPACE 2
*/* P SET UP ID IN THIS MBCB   */
         SPACE 2
         ST    R0,MBCBID               PLACE ID IN MBCBID      @ZA29595
         SPACE 2
*/* P SET UP LINK ADDR */
         SPACE 2
         ST    R13,MBCBLINK            PLACE @  IN MBCB        @Z40FPYJ
         SPACE 2
*/*SKIP1: P BUMP DOWN TO ADDRESS SVRB */
         SPACE 2
SKIP1    EQU   *                                               @ZA29595
         LA    R11,RBPRFLNA+MBCBPXLN(R14) ADDRESS THE MAIN     @Z40FPYJ
*                                         SVRB                 @Z40FPYJ
         USING RBSECT,R11                                      @Z40FPYJ
         SPACE 2                                               @Z40FPYJ
*/* P INITIALIZE THE SCB */                                    @Z40FPYJ
         SPACE 2                                               @Z40FPYJ
         XC    RBSCBB(SVRBEND-RBSCBB),RBSCBB  CLEAR SCB AND    @ZA13392
*                                      PARAMETER AREA          @ZA13392
         ST    R11,RBSOWNR             @RB INTO SCB            @Z40FPYJ
         MVI   RBSPKEY,C0              KEY 0 INTO SCB          @Z40FPYJ
         MVI   RBSID,SCBID             ID  INTO SCB            @Z40FPYJ
         SPACE 2
*/* P MAKE NEXT THE CURRENT MBCB */
         SPACE 2
         LR    R14,R13                 COPY NEXT INTO CURRENT  @Z40FPYJ
         SPACE 2
*/* D (NO,CALCNXT,YES,) COUNT TO 0 */
         SPACE 2
         BCT   R15,CALCNXT             LOOP TO PROCESS ALL RBS @Z40FPYJ
         SPACE 2
*/* D (YES,SVRBINT2,NO,) SINGLE SVRB DONE ? */                 @ZA29595
         SPACE 2
         LR    R2,R1                   COPY ADDR OF 1ST BLOCK  @Z40FPYJ
         LTR   R13,R13                 NEXT IS 0, IF SINGLE RB @Z40FPYJ
         BZ    SVRBINT2                GO TO MAINLINE BUT DO   @ZA29595
*                                      NOT CLEAR RBNOCELL      @ZA29595
         SPACE 2
*/* P SAVE ADDR OF LAST MBCB */
         SPACE 2
         S     R14,LENMBCB             BUMP BACK TO LAST BLOCK @Z40FPYJ
         LR    R11,R14                 ADDRESS LAST BLOCK      @Z40FPYJ
         DROP  R14                                             @Z40FPYJ
         USING MBCB,R11                                        @Z40FPYJ
         SPACE 2
*/* P BUMP TO 2ND MBCB SO 1ST CAN BE RETURNED */
         SPACE 2
         LA    R14,MBCBLEN(R1)         BUMP TO 2ND MBCB        @Z40FPYJ
         SPACE 2
*/* P QUEUE NEW POOL TO ASCB HEADER */
         SPACE 2
         LM    R2,R3,ASCBSUPC          GET ADDR AND SYNC WORDS @Z40FPYJ
CDSLOOP  LA    R15,C1(R3)              BUMP SYNC COUNT         @Z40FPYJ
         ST    R2,MBCBLINK             LINK ADDR OR ZERO       @Z40FPYJ
         CDS   R2,R14,ASCBSUPC         SWAP ADDR + SYNC  WORDS @Z40FPYJ
         BNE   CDSLOOP                 RETRY IF COMPARE FAILS  @Z40FPYJ
         SPACE 2                                               @Z40FPYJ
*/* P SET UP R2 WITH INITIALIZED SVRB */                       @Z40FPYJ
         SPACE 2                                               @Z40FPYJ
         LR    R2,R1                   NEW SVRB FROM POOL      @Z40FPYJ
         SPACE 2                                               @Z40FPYJ
*/* P (,SVRBINIT) RETURN TO MAINLINE WITH BLOCK ADDR IN R2 */
         SPACE 2
         B     SVRBINIT                RETURN TO MAINLINE      @Z40FPYJ
         SPACE 2
*/*SETTO1: N SET UP FOR ONLY ONE SVRB */
*/* P SET COUNT TO ONE AND NEXT TO ZERO */
         SPACE 2
SETTO1   LA    R15,1                   SET COUNT TO ONE        @Z40FPYJ
         SLR   R13,R13                 SET NEXT TO ZERO        @Z40FPYJ
         SPACE
*        SET UP SINGLE SVRB TO LOOK AS IF IT HAS AN MBCB, SO   @ZA29595
*        THE SVRB CAN BE INITIALIZED USING MAINLINE CODE. THE, @ZA29595
*        SVRB CAN NOT HAVE AN MBCB, BECAUSE EXIT PROLOGUE AND  @ZA29595
*        EXIT DO NOT FREE MBCB'S.                              @ZA29595
         SPACE
         LA    R14,MBCBPXLN                                    @ZA29595
         SR    R1,R14                                          @ZA29595
         XC    MBCBPXLN(RBSCBB-RBPRFXST,R1),MBCBPXLN(R1) ZERO  @ZA29595
*                                      SVRB BUT NOT SCB        @ZA29595
         OI    RBCDFLGS-RBPRFXST+MBCBPXLN(R1),RBNOCELL         @ZA29595
*                                      INDICATE THAT RB SHOULD @ZA29595
*                                      BE FREED BY EXIT OR     @ZA29595
*                                      EXIT PROLOGUE           @ZA29595
         LR    R14,R1                  COPY ADDR               @ZA29595
         B     SKIP1                   PROCESS ONE SVRB        @Z40FPYJ
         TITLE 'IEAVESVC- TERMMEM: CALL RTM ROUTINE'
         SPACE 2
*/*TERMMEM: P SET UP PARAMETERS TO PASS TO RTM */
         SPACE 2
TERMMEM  DS    0H
         SPACE 2
*/* S GETRTN:INTERNAL ROUTINE TO GET LOCK */
         SPACE 2
         BAL   R2,GETRTN               GO INTERNAL SUBRTN TO GETLOCK
         SPACE 2
         L     R11,ASCBASXB            GET ASXB ADDRESS
         USING ASXB,R11                                        @Z40FPYJ
         L     R11,ASXBSPSA            GET WSAL ADDRESS
         USING WSAL,R11
         L     R13,WSALABTM            PASS MEMTERMS SAVE AREA IN R13
         LA    R1,COMPCD7              GET COMPLETION CODE VALUE
         SPACE 2
*/*MEM2: L CALLRTM-- TYPE=MEMTERM */
         SPACE 2
MEM2     DC    0H'0'                   TEST LABEL
         CALLRTM TYPE=MEMTERM,COMPCOD=(1)  TERMINATE MEMORY
         SPACE 2
*/*RELLL4: L SETLOCK-- RELEASE LOCAL LOCK */
         SPACE 2
RELLL4   DC    0H'0'                   TEST LABEL
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('GETMAIN COMPLETE',IEAVESV*
               C(GETRTN))              FREE LOCAL LOCK
         L     R6,AIEAPDS7             GET DISPATCHER ADDRESS
         SPACE 2
*/* P CLEAR SVC FLIH BIT */
         SPACE 2
         NI    PSASUP1,CXFF-PSASVC     CLEAR SVC FLIH BIT
         SPACE 2
*/*MEMXIT2: R EXIT TO DISPATCHER */
         SPACE 2
MEMXIT2  DC    0H'0'                   TEST LABEL
         BR    R6                      EXIT TO DISPATCHER
         TITLE 'TYPE 6 SVC PROCESSING'                         @Z40FPYK
************************************************************** @Z40FPYK
*                                                            * @Z40FPYK
*          TYPE 6 SVC INTERFACE ROUTINE                      * @Z40FPYK
*             TYPE 6 ENTRY PROCESSING                        * @Z40FPYK
*                                                            * @Z40FPYK
************************************************************** @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*TYPE6SVC: P PROCESS TYPE 6 SVC ENTRY */                     @Z40FPYK
*/* P MOVE REGISTERS INTO THE TCB */                           @Z40FPYK
         SPACE 2                                               @Z40FPYK
         CNOP  0,8                                             @Z40FPYK
TYPE6SVC DS    0H                                              @Z40FPYK
         MVC   TCBGRS(L64),LCCASGPR    SAVE REGISTERS IN TCB   @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P SET PSA INDICATOR FOR RECOVERY */                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
         OI    PSASUP1,PSATYPE6        SET TYPE 6 SVC IN       @Z40FPYK
*                                      CONTROL INDICATOR       @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P SET UP REGISTERS FOR SVC INPUT */                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
         LA    R1,TCBGRS               PARAMETER REGISTERS     @Z40FPYK
*                                      ARE OBTAINED FROM TCB   @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*  P R3 = CVT ADDR */                                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R3,FLCCVT               SET UP R3 = CVT ADDR    @Z40FPYK
        SPACE 2                                                @Z40FPYK
*/* P R13 = INPUT R13 */                                       @Z40FPYK
        SPACE 2                                                @Z40FPYK
        L     R13,C52(R1)               SET UP R13             @Z40FPYK
        SPACE 2                                                @Z40FPYK
*/* P R0, R1, R15 AS ON ENTRY TO SVC FLIH */                   @Z40FPYK
        SPACE 2                                                @Z40FPYK
        L     R15,C60(R1)               SET UP R15             @Z40FPYK
        L     R0,C0(R1)                 SET UP R0              @Z40FPYK
        L     R1,C4(R1)                 SET UP R1              @Z40FPYK
        SPACE 2                                                @Z40FPYK
*/* P R6 IS TYPE 6 EPA */                                      @Z40FPYK
        SPACE 2                                                @Z40FPYK
        L     R6,C0(R6)                 R6 HAS TYPE 6 EPA      @Z40FPYK
        SPACE 2                                                @Z40FPYK
*/* S TYPE6:GO TO TYPE 6 SVC */                                @Z40FPYK
        SPACE 2                                                @Z40FPYK
        BALR  R14,R6                   GO TO TYPE 6 SVC...R14  @Z40FPYK
*                                      HAS RETURN ADDRESS IF   @Z40FPYK
*                                      A BR 14 OR T6EXIT       @Z40FPYK
*                                      CALLER RETURN IS USED   @Z40FPYK
         EJECT                                                 @Z40FPYK
************************************************************** @Z40FPYK
*                                                            * @Z40FPYK
*         TYPE 6 EXIT PROCESSING                             * @Z40FPYK
*            RETURN = CALLER                                 * @Z40FPYK
*              BR 14 PROCESSING                              * @Z40FPYK
*                                                            * @Z40FPYK
************************************************************** @Z40FPYK
*/* N IF THE TYPE 6 SVC DOES A BR 14 */                        @Z40FPYK
*/* N OR A T6EXIT RETURN = CALLER */                           @Z40FPYK
*/* N CONTROL WILL BE RECEIVED HERE */                         @Z40FPYK
*/* P RE-ESTABLISH ADDRESSIBILITY */                           @Z40FPYK
         SPACE 2                                               @Z40FPYK
         BALR  R9,C0                   ESTABLISH ADDRESSIBILITY@Z40FPYK
         USING *,R9                                            @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*CALLER: P RESTORE THE TCB POINTER */                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
CALLER   DS    0H                                              @Z40FPYK
         L     R4,PSATOLD              RESTORE TCB POINTER     @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P RESTORE ASCB POINTER */                                  @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R7,PSAAOLD              RESTORE ASCB POINTER    @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P SAVE SVC RETURN REGISTERS FOR CALLER */                  @Z40FPYK
         SPACE 2                                               @Z40FPYK
         ST    R0,TCBGRS0              SAVE RETURN REG 0       @Z40FPYK
         ST    R1,TCBGRS1              SAVE RETURN REG 1       @Z40FPYK
         ST    R15,TCBGRS15            SAVE RETURN REG 15      @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P RESET TYPE 6 SVC AND SVC FLIH RECOVERY FLAGS */          @Z40FPYK
         SPACE 2                                               @Z40FPYK
         NI    PSASUP1,CXFF-(PSATYPE6+PSASVC) TURN OFF TYPE 6  @Z40FPYK
*                                             AND SVC FLIH     @Z40FPYK
*                                             SUPER RECOVERY   @Z40FPYK
*                                             INDICATORS       @Z40FPYK
         SPACE 2
*/* P PURGE FRR STACK USED BY TYPE 6 SVC */
         SETFRR P,WRKREGS=(R2,R3)                              @ZA15765
         SPACE 2                                               @Z40FPYK
*/* P RESTORE SUPER STACK TO NORMAL */                         @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R8,PSANSTK              RESTORE FRR STACK       @Z40FPYK
         ST    R8,PSACSTK              TO NORMAL               @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P PICK UP EPA OF COMMON EXIT PROLOGUE ENTRY */             @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R14,EXPEPA              EXIT PROLOGUE EPA       @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* R EXIT TO EXIT PROLOGUE */                                 @Z40FPYK
         SPACE 2                                               @Z40FPYK
         BR    R14                     EXIT TO EXIT PROLOGUE   @Z40FPYK
*                                      EPA                     @Z40FPYK
         EJECT                                                 @Z40FPYK
************************************************************** @Z40FPYK
*                                                            * @Z40FPYK
*            TYPE 6 EXIT ENTRY POINT                         * @Z40FPYK
*              T6EXIT RETURN=SRB                             * @Z40FPYK
*              T6EXIT RETURN=DISP                            * @Z40FPYK
*               IF SRB RETURN, R1 = @SRB                     * @Z40FPYK
*                              R2 = 8 (SRB REQUEST CODE)     * @Z40FPYK
*               IF DISPATCHER RETURN, R2 = 4                 * @Z40FPYK
*               IF CALLER RETURN, R2 = 0                     * @Z40FPYK
*                                                            * @Z40FPYK
************************************************************** @Z40FPYK
         SPACE 2                                               @Z40FPYK
T6EXIT   DS    0H                                              @Z40FPYK
         ENTRY IEAVET6E                                        @Z40FPYK
IEAVET6E DS    0H                                              @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*T6EXIT: E TYPE6 EXIT EPA */                                 @Z40FPYK
*/* P ESTABLISH ADDRESSIBILITY */                              @Z40FPYK
         SPACE 2                                               @Z40FPYK
         BALR  R10,C0                  ADDRESSIBILITY          @Z40FPYK
         USING *,R10                                           @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (SRB,,CALL,RETCALL,DISP,DISPEXIT) REQUEST TYPE ?  */     @Z40FPYK
         SPACE 2                                               @Z40FPYK
BRTAB    DS    0H                                              @Z40FPYK
         B     C4(R2,R10)              REQUEST TYPE ?          @Z40FPYK
         B     RETCALL                 R2=0 RETURN TO CALLER   @Z40FPYK
         B     DISPEXIT                R2=4 RETURN TO DISPATCH @Z40FPYK
*                                      R2=8 RETURN TO SRB IN R1@Z40FPYK
         EJECT                                                 @Z40FPYK
*        DISPATCH AN SRB
*
*/* P ACQUIRE ASCB ADDRESS */                                  @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R8,PSAAOLD              ACQUIRE ASCB ADDRESS    @Z40FPYK
         USING ASCB,R8                                         @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (YES,SRBOK,NO,) SRB ASCB DEFAULTED ? */                  @Z40FPYK
         SPACE 2                                               @Z40FPYK
         USING SRB,R1                                          @Z40FPYK
         L     R5,SRBASCB              GET SRB ASCB ADDRESS    @Z40FPYK
         LTR   R5,R5                   IF ZERO - CURRENT MEM   @Z40FPYK
         BZ    SRBOK                   AND ALL IS OKAY         @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (YES,,NO,ABNDASCB) SRB SCHED IN THIS MEMORY ? */         @Z40FPYK
         SPACE 2                                               @Z40FPYK
         CR    R8,R5                   SRB TO BE SCHEDULED     @Z40FPYK
*                                      IN THIS MEMORY ?        @Z40FPYK
         BNE   ABNDASCB                NO - INVALID REQUEST    @Z40FPYK
*                                      ABEND SVC               @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*SRBOK: P SAVE SRB ADDRESS */                                @Z40FPYK
         SPACE 2                                               @Z40FPYK
SRBOK    DS    0H                                              @Z40FPYK
         LR    R5,R1                   SAVE INPUT SRB ADDRESS  @Z40FPYK
         DROP  R1                                              @Z40FPYK
         USING SRB,R5                                          @ZA20352
         SPACE 2
*        IF CPU AFFINITY WAS SPECIFIED, GO OFF TO CHECK        @ZA20352
*        WHETHER THE SRB CAN RUN ON THIS CPU.                  @ZA20352
*
*        IT IS NOT NECESSARY TO CHECK WHETHER SRB'S ARE        @ZA20352
*        DISPATCHABLE. THAT IS BECAUSE THIS CODE RUNS UNDER A  @ZA20352
*        TCB AND TCB'S ARE ALWAYS MADE NON-DISPATCHABLE EITHER @ZA20352
*        PRIOR TO OR CONCURRENTLY WITH SRB'S BEING STOPPED.    @ZA20352
         SPACE 2
         LH    R7,SRBCPAFF             SRB'S AFFINITY MASK     @ZA20352
         LTR   R7,R7                   ANY?                    @ZA20352
         BNZ   CHKAFFIN                SPECIFIED, GO CHECK     @ZA20352
*                                      AFFINITY                @ZA20352
AFFINOK  DS    0H                                              @ZA20352
         SPACE 2                                               @Z40FPYK
*/* P GET LCCA ADDRESS */                                      @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R7,PSALCCAV             NEED LCCA ADDRESS FOR   @Z40FPYK
*                                      DISPATCHER JST ROUTINE  @Z40FPYK
         USING LCCA,R7                                         @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P NOW NEED TO SAVE STATUS OF TASK */                       @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R4,PSATOLD              SET UP TO TASK ADDRESS  @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P SAVE FLOATING POINT REGISTERS */                         @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R2,KTCBPRFX             NEED PREFIX TO TCB      @Z40FPYK
         AR    R2,R4                   POINT TO TCB PREFIX     @Z40FPYK
         USING TCBFIX,R2                                       @Z40FPYK
         STD   R0,TCBFRS0              SAVE FP REG 0           @Z40FPYK
         STD   R2,TCBFRS2              SAVE FP REG 2           @Z40FPYK
         STD   R4,TCBFRS4              SAVE FP REG 4           @Z40FPYK
         STD   R6,TCBFRS6              SAVE FP REG 6           @Z40FPYK
         DROP  R2                                              @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (NO,SKIPTQE,YES,)  TEST FOR TQE */                       @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R2,TCBTME               TQE ADDRESS             @Z40FPYK
         LTR   R2,R2                   TEST IF TQE EXISTS      @Z40FPYK
         BNH   SKIPTQE                 NO, DO NO UPDATE        @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (NO,SKIPTQE,YES,) IS CPU TIMER WORKING ? */              @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R1,PSAPCCAV             GET PCCA ADDRESS        @Z40FPYK
         USING PCCA,R1                                         @Z40FPYK
         TM    PCCAINTE,PCCANUIN       IS THIS CPU'S TIMER OK? @Z40FPYK
         BO    SKIPTQE                 NO, BYPASS SAVING TIMER @Z40FPYK
         DROP  R1                                              @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P SAVE CPU INTERVAL TIMER VALUE IN TQE */                  @Z40FPYK
         SPACE 2                                               @Z40FPYK
         USING TQE,R2                                          @Z40FPYK
         STPT  TQEVAL                  SAVE TIMER VALUE        @Z40FPYK
         DROP  R2                                              @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P RESET TIMER TO A HIGH VALUE */                           @Z40FPYK
         SPACE 2                                               @Z40FPYK
         SPT   HITIME                  SET CPU TIMER HIGH      @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*SKIPTQE: P RESET SVC FLIH AND TYPE 6 IN CONTROL */          @Z40FPYK
         SPACE 2                                               @Z40FPYK
SKIPTQE  DS    0H                                              @Z40FPYK
         NI    PSASUP1,CXFF-(PSASVC+PSATYPE6) SVC FLIH +       @Z40FPYK
*                                             TYPE 6 NO        @Z40FPYK
*                                             LONGER IN        @Z40FPYK
*                                             CONTROL          @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P PURGE FRR STACK USED BY TYPE 6 SVC */
         SETFRR P,WRKREGS=(R2,R3)                              @ZA15765
         SPACE 2                                               @Z40FPYK
*/* P INDICATE DISPATCHER IN CONTROL */                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
         OI    PSASUP1,PSADISP         INDICATE DISPATCHER IN  @Z40FPYK
*                                      CONTROL                 @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P  GET ADDRESS OF DISPATCHER SRB ROUTINE */                @Z40FPYK
         SPACE 2                                               @Z40FPYK
*  AT THIS TIME THE DISPATCHER JOB STEP TIMING ROUTINE WILL    @Z40FPYK
*  BE INVOLKED.  THIS FUNCTION WILL CLOBBER REG 9 WHICH IS     @Z40FPYK
*  OUR BASE REGISTER.  REGISTER 9 ON RETURN TO THE SVC FLIH    @Z40FPYK
*  WILL CONTAIN THE DISPATCHER'S BASE REGISTER.  THIS WILL BE  @Z40FPYK
*  USED AS THE BASE WHEN WE GO TO THE SRB ROUTINE              @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* S DISPJST:CALCULATE JOB STEP TIMING */                     @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R14,DISPJST             CALCULATE JOB STEP      @Z40FPYK
         BALR  R14,R14                 TIMING FOR TASK         @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P RESET TCB ACTIVE STATE */                                @Z40FPYK
         SPACE 2                                               @Z40FPYK
         SR    R1,R1                   RESET TCB ACTIVE        @Z40FPYK
         ST    R1,TCBXSCT              CLEAR CPUID AND ACTIVE  @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*ACTASK: P DECREMENT COUNT OF CPU'S IN MEMORY */             @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R3,ASCBCPUS             ACTIVE CPUS IN MEMORY   @Z40FPYK
ACTASK   DS    0H                                              @Z40FPYK
         LR    R2,R3                   DUPLICATE COUNT FOR CS  @Z40FPYK
         BCTR  R2,0                    DECREMENT BY 1          @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (YES,ACTASK,NO,) UPDATE FAIL ? */                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
         CS    R3,R2,ASCBCPUS          UPDATE CPU COUNT        @Z40FPYK
         BNE   ACTASK                  FAIL -- TRY AGAIN       @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P TAKE OUT OF TASK MODE */                                 @Z40FPYK
         SPACE 2                                               @Z40FPYK
         ST    R1,PSATNEW              ZERO PSA TCB NEW        @Z40FPYK
         ST    R1,PSATOLD              ZERO PSA TCB OLD        @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P RESTORE SRB TO R2 FOR DISP ROUTINE */                    @Z40FPYK
         SPACE 2                                               @Z40FPYK
         LR    R2,R5                   SRB FOR DISPATCHER      @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P SET UP ASCB FOR DISPATCHER ROUTINE */                    @Z40FPYK
         SPACE 2                                               @Z40FPYK
         LR    R5,R8                   ASCB MUST BE IN R5      @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P ACQUIRE DISPATCHER LOCK */                               @Z40FPYK
         SPACE 2                                               @Z40FPYK
* FOLLOWING IS CODE THAT WOULD BE GENERATED BY A SETLOCK       @Z40FPYK
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=(DISP)   @Z40FPYK
         L     R13,AGSLDISP            ADDRESS OF LOCK MGR     @Z40FPYK
         BALR  R14,R13                 GO TO LOCK MGR          @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* E DISP SRB ROUTINE */                                      @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R15,DISPSRB             SRB DISP ROUTINE ADDR   @Z40FPYK
         BR    R15                     GO TO DISPATCHER        @Z40FPYK
         EJECT
*        CPU AFFINITY WAS SPECIFIED FOR THE SRB.               @ZA20352
*        CHECK WHETHER THE AFFINITY IS TO THIS CPU.            @ZA20352
*
CHKAFFIN DS    0H                                              @ZA20352
         L     R1,PSAPCCAV             PCCA ADDRESS            @ZA20352
         USING PCCA,R1                                         @ZA20352
         LH    R1,PCCACAFM             CPU'S ADDR. AS BIT MASK @ZA20352
         DROP  R1                                              @ZA20352
         NR    R1,R7                   CAN SRB RUN ON THIS CPU @ZA20352
         BNZ   AFFINOK                 YES, RETURN TO MAINLINE @ZA20352
*
*        SRB CAN NOT RUN ON THIS CPU. FALL THROUGH TO SCHEDULE @ZA20352
*        THE SRB TO RUN LATER.                                 @ZA20352
*                                                              @ZA20352
         SCHEDULE SRB=(R5),SCOPE=LOCAL                         @ZA20352
*
*        FALL THROUGH TO CLEAN UP AND EXIT TO DISPATCHER       @ZA20352
         EJECT                                                 @Z40FPYK
*        EXIT TO THE DISPATCHER
*
*/*DISPEXIT: P RESET SVC FLIH + TYPE 6 FLAGS */                @Z40FPYK
         SPACE 2                                               @Z40FPYK
DISPEXIT DS    0H                                              @Z40FPYK
         NI    PSASUP1,CXFF-(PSASVC+PSATYPE6) RESET SVC FLIH + @Z40FPYK
*                                             TYPE 6 FLAGS     @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P PURGE FRR STACK USED BY TYPE 6 SVC */
         SETFRR P,WRKREGS=(R2,R3)                              @ZA15765
         SPACE 2                                               @Z40FPYK
*/* E MAIN DISPATCHER ENTRY */                                 @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R6,AIEAPDS7             MAIN DISPATCHER ENTRY   @Z40FPYK
         BR    R6                      GO TO DISPATCHER        @Z40FPYK
         EJECT                                                 @Z40FPYK
*/*ABNDASCB: P INVALID REQUEST = ABEND 0FD          */         @Z40FPYK
         SPACE 2                                               @Z40FPYK
ABNDASCB DS    0H                                              @Z40FPYK
         NI    PSASUP1,CXFF-(PSASVC+PSATYPE6) RESET SVC FLIH + @Z40FPYK
*                                             TYPE 6 FLAGS     @Z40FPYK
         MVC   PSACSTK,PSANSTK         NORMALIZE FRR STACK
         LA    R1,COMPCDD              SET UP ABEND CODE       @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* E ABEND 0FD */                                             @Z40FPYK
         SPACE 2                                               @Z40FPYK
         CALLRTM TYPE=SVCERR,COMPCOD=(1)                       @Z40FPYK
         EJECT                                                 @Z40FPYK
*        PREPARE TO RETURN TO CALLER
*
*/*RETCALL: P (,CALLER) SET UP COMMON CALLER BASE */           @Z40FPYK
         SPACE 2                                               @Z40FPYK
RETCALL  DS    0H                                              @Z40FPYK
         L     R9,CALLBASE             COMMON BASE FOR CALLER  @Z40FPYK
         USING CALLER,R9               AND BR 14 EXITS         @Z40FPYK
         B     CALLER                  GO TO THE COMMON        @Z40FPYK
*                                      CALLER AND BR14 CODE    @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* FOOTING
*/*
*/* */
*/*IEAVESVC: END SVC FLIH */
         EJECT
***********************************************************************
*                                                                     *
*                        CONSTANTS & STORAGE                          *
*                                                                     *
***********************************************************************
         EXTRN TRSVC
ATRSVC   DC    A(TRSVC)                TRACE ENTRY POINT
LLCO     DC    V(LLCOSVCF)             LOCK MGR -- LOCAL LOCK OBTAIN
AGSLDISP DC    V(GSLSDISP)             ENTRY--DISP LOCK OBTAIN @Z40FPYK
ESRTBBGN DC    V(IGC109)               BEGINNING OF ACTUAL ESR @ZA12726
*                                      TABLE                   @ZA12726
ESRTBEND DC    V(ESREND)               END OF ESRTABLE
         EXTRN IEAPDS7
AIEAPDS7 DC    A(IEAPDS7)              DISPATCHER ENTRY POINT
         EXTRN SVCTABLE
SVCTAB   DC    A(SVCTABLE)             SVC TABLE ENTRY POINT
KRBPRFXL DC    AL4(RBPRFLNA)           LENGTH OF RB PREFIX
FOUR     DC    H'4'                    COMPARE VALUE
CALLBASE DC    A(CALLER)               BASE FOR CALLER EXIT    @Z40FPYK
ALHSNPSW DS    0F                      ENABLED LEFT HALF SVC NPSW
         DC    X'070C0000'
IDSVRB   DC    C'SVRB'                 ID FOR SVRB POOL BLOCK  @Z40FPYJ
LENMBCB  DC    A(MBCBLEN)              LENGTH OF MBCB   BLOCK  @Z40FPYJ
SVRBMASK DC    X'00'                   MASK FOR SETTING SVRB   @Z40FPYJ
         DC    AL1(SVRBDWDS)           LENGTH                  @Z40FPYJ
         DC    AL1(RBFTSVRB)           TYPE                    @Z40FPYJ
         DC    AL1(RBFDYN+RBATTN)      AND FLAGS               @Z40FPYJ
DISPJST  DC    V(DSJSTCSR)             DISPATCHER JOB STEP     @Z40FPYK
*                                      TIMING ROUTINE          @Z40FPYK
DISPSRB  DC    V(DSSRBRTN)             DISPATCHER GLOBAL SRB   @Z40FPYK
*                                      SCHEDULING ROUTINE      @Z40FPYK
EXPEPA   DC    V(EXPEPAT6)             EXIT PROLOGUE TYPE 6    @Z40FPYK
*                                      ENTRY POINT ADDRESS     @Z40FPYK
HITIME   DS    0D                                              @Z40FPYK
         DC    X'7FFFFFFFFFFFFFFF'     HIGH CPU INTERVAL TIMER @Z40FPYK
KTCBPRFX DC    A(-(TCB-TCBFRS))        TCB PREFIX DECREMENT VAL@Z40FPYK
         DS    0D                                               ZP60013
SVCCTTBL DC    256F'0'                 SVC COUNTER TABLE        ZP60013
         TITLE 'IEAVESVC- PCCA DSECT MAPPING'                  @Z40FPYK
         IHAPCCA                                               @Z40FPYK
         TITLE 'IEAVESVC- TQE  DSECT MAPPING'                  @Z40FPYK
         IHATQE                                                @Z40FPYK
         TITLE 'IEAVESVC- LCCA DSECT MAPPING'
         IHALCCA
         TITLE 'IEAVESVC- PSA MAPPING'
         IHAPSA
         TITLE 'IEAVESVC- ASCB DSECT MAPPING'
         IHAASCB
         TITLE 'IEAVESVC- ASXB DSECT MAPPING'
         IHAASXB
         TITLE 'IEAVESVC- TCB DSECT MAPPING'
         IKJTCB
         TITLE 'IEAVESVC- RB DSECT MAPPING'
         IKJRB
         TITLE 'IEAVESVC- SRB DSECT MAPPING'                   @Z40FPYK
         IHASRB                                                @Z40FPYK
         TITLE 'IEAVESVC- SVC DSECT MAPPING'
         IHASVC
         TITLE 'IEAVESVC- MBCB DSECT MAPPING'                  @Z40FPYK
         IHAMBCB                                               @Z40FPYK
         TITLE 'IEAVESVC- CVT DSCET MAPPING'
         CVT   DSECT=YES,PREFIX=NO,LIST=YES
         TITLE 'IEAVESVC- WSAV DSECT MAPPING'
         IHAWSAVT DSECT=YES
         TITLE 'IEAVESVC- FRRS DSECT MAPPING'
         IHAFRRS
         TITLE 'IEAVESVC- SS SCREEN TABLE DSECT'
***********************************************************************
*
* PURPOSE -
*        THE SUBSYSTEM SCREEN TABLE SPECIFIES WHICH SVC'S ARE ALLOWED
*        TO BE ISSUED BY A TASK, AND WHICH ARE BEING SCREENED
*        AGAINST.  THIS AREA IS INITIALIZED BY THE SUB SYSTEM WHICH MAY
*        WISH TO RESTRICT CERTAIN TASKS FROM ISSUING A SUBSET OF SVC'S.
* USAGE -
*        IT IS ACTIVATED FOR A TASK BY SETTING THE TCBSVCS FLAG IN
*        TCBFLGS7 AND SETTING TCBSVCA2 TO THE ADDRESS OF THE SCREEN
*        TABLE.
*        A REQUEST FOR AN SVC BEING SCREENED AGAINST WILL BE CONVERTED
*        TO THE SVC REQUEST SPECIFIED AT THE TOP OF THE SCREEN TABLE.
*        EACH SVC (0-255) IS MAPPED INTO A BYTE IN THE SCREEN TABLE,
*        STARTING AT SSTMASK AND IN ASCENDING ORDER.  WHETHER OR NOT
*        THE SVC MAY BE ISSUED MAY BE DETERMINED BY THE SSTSVCOK FLAG.
*
***********************************************************************
         SPACE 2
SSTAB    DSECT SUB SYSTEM SCREEN TABLE                         @Z40EPVC
SSTSVCN  DS    D                  SUBSYSTEM SVC ENTRY          @Z40EPVC
SSTMASK  DS    CL256              SVC SCREENING MASK           @Z40EPVC
SSTSVCOK EQU   X'80'              SVC MAY BE ISSUED            @Z40EPVC
SSTEND   EQU   *                                               @Z40EPVC
SSTSIZE  EQU   SSTEND-SSTAB       SIZE OF SCREEN TABLE         @Z40EPVC
         SPACE 4
         TITLE 'IEAVESVC- EQUATES'
***********************************************************************
*                                                                     *
*                      REGISTER     EQUATES                           *
*                                                                     *
***********************************************************************
R0       EQU   0                       STORAGE LOCATION REGISTER
*                                      GENERAL REGISTER
R1       EQU   1                       GENERAL REGISTER
R2       EQU   2                       GENERAL REGISTER
*                                      PREVIOUS RB ADDRES
R3       EQU   3                       GENERAL REGISTER        @Z40FPYJ
*                                      CVT ADDRESS
R4       EQU   4                       TCB ADDRESS REGISTER
*                                      REGISTER 4--WORK REG    @Z40FPYK
R5       EQU   5                       RB ADDRESS
*                                      GENERAL REGISTER 5      @Z40FPYK
R6       EQU   6                       SVC NUMBER REGISTER
*                                      SVC TABLE ADDRESS
*                                      DISPATCHER ENTRY ADDRESS
*                                      REGISTER 6--WORK REG    @Z40FPYK
*                                      SVC ENTRY POINT ADDRESS
R7       EQU   7                       LCCA BASE ADDRESS
*                                      GENERAL REGISTER
*                                      ASCB ADDRESS
R8       EQU   8                       RB PREFIX ADDRESS
*                                      GENERAL REGISTER 8      @Z40FPYK
*                                      LOCKS NEEDED REGISTER
*                                      WORK REGISTER
R9       EQU   9                       BASE REGISTER
R10      EQU   10                      LCCA ADDRESS
*                                      TRACE ENTRY POINT ADDRESS
*                                      T6EXIT BASE REGISTER    @Z40FPYK
R11      EQU   11                      GENERAL REGISTER        @Z40FPYJ
*                                      TRACE BR INSTRUCTION ADDRESS
*                                      ASXB ADDRESS REGISTER
*                                      WSAL ADDRESS REG
*                                      SS SCREEN TABLE ADDRESS @Z40EPVC
R12      EQU   12                      UNUSED
R13      EQU   13                      CVT ADDRESS
*                                      GENERAL REGISTER
*                                      RETURN CODE REGISTER
R14      EQU   14                      GENERAL REGISTER        @Z40FPYJ
*                                      WORK REGISTER
*                                      RETURN ADDRESS
R15      EQU   15                      GENERAL REGISTER
*                                      RETURN CODE REGISTER
*                                      ESR CODE = CALLER'S REG 15
         EJECT
***********************************************************************
*                                                                     *
*                      CONSTANT    EQUATES                            *
*                                                                     *
***********************************************************************
C0       EQU   0                       DISPLACEMENT VALUE
C1       EQU   1                       DISPLACEMENT VALUE
C2       EQU   2                       DISPLACEMENT VALUE
C3       EQU   3                       DISPLACEMENT VALUE
C4       EQU   4                       DISPLACEMENT VALUE
C16      EQU   16                      DISPLACEMENT VALUE
C28      EQU   28                      DISPLACEMENT VALUE
C52      EQU   52                      DISPLACEMENT VALUE
C60      EQU   60                      DISPLACEMENT VALUE
C64      EQU   64                      DISPLACEMENT VALUE
CXF0     EQU   X'F0'                   IMMEDIATE VALUE
CXFA     EQU   X'FA'                   IMMEDIATE VALUE
CXFF     EQU   X'FF'                   IMMEDIATE VALUE
SCBID    EQU   X'DB'                   SCB ID VALUE            @Z40FPYJ
L8       EQU   8                       LENGTH VALUE
L64      EQU   64                      LENGTH VALUE
T255     EQU   255                     LENGTH VALUE
EXSARB   EQU   RBGRSAVE+64-RBPRFXST    REMAINDER RB AFTER GR SAVE AREA
M4       EQU   4                       MASK VALUE
M8       EQU   8                       MASK VALUE
M15      EQU   15                      MASK VALUE
ONE      EQU   1                       GENERAL VALUE
TWO      EQU   2                       GENERAL VALUE
COMPCD2  EQU   X'047'                  UNAUTHORIZED COMP CODE
COMPCD1  EQU   X'0F8'                  SRB OR LOCKED ISSUER
COMPCD3  EQU   X'0F9'                  UNABLE TO EXPAND SVRB POOL
COMPCDE4 EQU   X'16D'                  INCORRECT ESR CODE
COMPCD7  EQU   X'0FA'                  NO SVRB CORE FOR ABEND
COMPCDD  EQU   X'0FD'                  TYPE 6 INVALID SRB      @Z40FPYK
AB13     EQU   13                      ABEND SVC NUMBER
M10      EQU   10                      MASK VALUE
M12      EQU   12                      MASK VALUE
SVRBDWDS EQU   (SVRBLEN+7)/8           CALCULATE SVRB IN DWORDS
ENABLE   EQU   X'03'                   MASK FOR STOSM
SVRBNUM  EQU   9                       NUMBER OF SVRBS IN THE  @Z40FPYJ
*                                      POOL,     WITH SOME PADDING
*                                      LEFT BETWEEN THE RBS.
         END
/*
//*
//STEP3   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IEAVESVC('ZP60013')
//*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP4   EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60013)
          .
/*
//*
//STEP5CK EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60013)
        CHECK
        .
/*
//*
//STEP5   EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *

  APPLY
        SELECT(ZP60013)
        DIS(WRITE)
        .
/*
//
//ZP60014  JOB (SYSGEN),'J09 M28: ZP60014',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*  ADD CLIST CONTROL VARIABLE AND BUILT-IN FUNCTION EXTENSIONS.
//*
//STEP01  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
++USERMOD(ZP60014)                 /* ADD CLIST EXTENSIONS */  .
++VER(Z038) FMID(EBB1102)
  PRE(UY16532,UY17021)
 /*
   PROBLEM DESCRIPTION:
     VARIOUS CLIST FACILITIES PRESENT IN TSO/E ARE NOT AVAILABLE.
       MANY USEFUL CLIST FACILITIES SUCH AS VARIOUS DATE AND TIME
       FORMATS, ADDITIONAL ENVIRONMENTAL SYMBOLS, AND THE ABILITY
       TO CAPTURE TERMINAL OUTPUT ARE NOT SUPPLIED AS PART OF TSO.

       THIS USERMOD CHANGES SEVERAL TSO MODULES.

       THE EXEC COMMAND HAS BEEN CHANGED TO DEFINE AND RESOLVE AN
       ADDITIONAL 20 CONTROL VARIABLES AND BUILT-IN FUNCTIONS AS
       WELL AS THE ORIGINAL 19.

       PUTLINE HAS BEEN ALTERED TO SUPPORT THE CAPTURE OF LINE-MODE
       TERMINAL OUTPUT INTO CLIST VARIABLES.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

     DOC:
       TSO PROVIDES THE FOLLOWING CLIST BUILT-IN FUNCTIONS:

         DATATYPE   - DETERMINE DATA TYPE: 'CHAR' OR 'NUM'
         EVAL       - FORCE ARITHMETIC EVALUATION
         LENGTH     - DETERMINE LENGTH OF EXPRESSION IN BYTES
         STR        - DEFINE CHARACTER STRING
         SUBSTR     - DEFINE SUBSTRING

       THIS SYSMOD ADDS THE FOLLOWING CLIST BUILT-IN FUNCTIONS:

         NRSTR      - SCAN DATA ONCE AND RETAIN DOUBLE AMPERSANDS
           EXAMINE THE FOLLOWING SAMPLE CLIST AND ITS OUTPUT TO
           DETERMINE THE APPROPRIATE USES OF NRSTR:
               PROC 0
               SET A = &&B
               SET B = FRED
               SET C = &NRSTR(&A)
               WRITE C IS &C
               WRITE C IS &NRSTR(&C)
               SET DDSTMT = &NRSTR(//SYSUT1 DD DSN=&&UT1,SPACE=(TRK,3),)
               WRITE &DDSTMT
               WRITE &NRSTR(&DDSTMT)

         SYSDSN     - DETERMINE DATA SET AVAILABILITY
           EG. SET ANS = &SYSDSN(&DSNAME)
             &ANS WILL EVALUATE TO ONE OF THE FOLLOWING:
               'OK'
               'UNAVAILABLE DATASET'
               'DATASET NOT FOUND'
               'MEMBER NOT FOUND'
               'MEMBER SPECIFIED, BUT DATASET IS NOT PARTITIONED'
               'VOLUME NOT ON SYSTEM'
               'MISSING DATASET NAME'
               'ERROR PROCESSING REQUESTED DATASET'
               'INVALID DATASET NAME, INPUTDSNAME'

       TSO PROVIDES THE FOLLOWING CLIST CONTROL VARIABLES:

         LASTCC     - LATEST TSO COMMAND RETURN CODE
         MAXCC      - HIGHEST TSO COMMAND RETURN CODE

         SYSDLM     - TERMIN DELIMITER
         SYSDVAL    - DEFAULT INPUT VALUE

         SYSNEST    - DETERMINE CLIST NESTING: 'NO' OR 'YES'
         SYSSCAN    - SYMBOLIC SUBSTITUTION SCAN LIMIT
         SYSICMD    - IMPLICIT COMMAND NAME
         SYSPCMD    - MOST RECENT TSO PRIMARY COMMAND
         SYSSCMD    - MOST RECENT TSO SUBCOMMAND

         SYSUID     - TSO USERID
         SYSPREF    - CURRENT DATA SET NAME PREFIX
         SYSPROC    - NAME OF THE TSO LOGON PROCEDURE

         SYSDATE    - CURRENT DATE:     'MM/DD/YY'
         SYSTIME    - CURRENT TIME:     'HH:MM:SS'

       THIS SYSMOD ADDS THE FOLLOWING CLIST CONTROL VARIABLES:

         SYSSTIME   - SHORTENED TIME:   'HH:MM'
         SYS4DATE   - CURRENT DATE:     'MM/DD/YYYY'
         SYSSDATE   - SORTABLE DATE:    'YY/MM/DD'
         SYS4SDATE  - SORTABLE DATE:    'YYYY/MM/DD'
         SYSJDATE   - JULIAN DATE:      'YY.DDD'
         SYS4JDATE  - JULIAN DATE:      'YYYY.DDD'
         SYS4IDATE  - ISO-FORMAT DATE:  'YYYY-MM-DD'

         SYSENV     - CLIST ENVIRONMENT: 'FORE' OR 'BACK'
         SYSSMFID   - SYSTEM SMF IDENTIFIER
         SYSOPSYS   - OPERATING SYSTEM NAME: 'OS/VS2 3.8 EBB1102'
         SYSJES     - NAME OF SUBSYSTEM PROVIDING JOB ID
         SYSTERMID  - NAME OF TSO TERMINAL WHERE CLIST STARTED

         SYSLTERM   - CURRENT LINE COUNT OF TSO TERMINAL
         SYSWTERM   - CURRENT LINE WIDTH OF TSO TERMINAL

         SYSCPU     - CURRENT TCB TIME ACCUMULATED BY TSO SESSION
         SYSSRV     - CURRENT SERVICE ACCUMULATED BY TSO SESSION

         SYSOUTLINE - NUMBER OF DISPLAY LINES HELD IN VARIABLES
         SYSOUTTRAP - MAXIMUM NUMBER OF DISPLAY LINES TO CAPTURE

           CAPTURED LINES ARE HELD IN VARIABLES CALLED
           SYSOUTLINE1, SYSOUTLINE2, SYSOUTLINE3, ETC.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 14.

     REWORK HISTORY:
       2005-09-18: SKIP OUTTRAP CHECK FOR MESSAGES FROM EXEC (S0C4).
       2005-11-11: SKIP OUTTRAP CHECK FOR MESSAGES FROM COMMAND
                   SCAN/PARSE AND PUTLINE/GETLINE/PUTGET SERVICES.
       2006-07-18: REMOVE MSGID TESTING OF PREVIOUS REWORKS, AND
                   SKIP OUTTRAP CHECK IF CLIST ACTIVE FLAG NOT SET.
       2009-06-13: CORRECT RESUME SCAN DATA ADDRESS AFTER SYSDSN.
       2009-08-23: ADD NRSTR "NO RESCAN STRING".

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKJCT431
       IKJCT433
       IKJEFT56
 */.
++MOD(IKJCT431) DISTLIB(AOST4).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSALLDA,
//             SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//*
//STEP02  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'IKJCT431 EXEC COMMAND SYMBOLIC PARAMETER DEFINITION'
*
*   MODIFIED BY GREG PRICE SEPTEMBER 2005 FOR USERMOD ZP60014
*
*   2009-08-23 - ADD &NRSTR "NO RESCAN STRING"
*
IKJCT431 CSECT ,                                                   0001
         USING PSA,0
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                             0001
         DC    C'IKJCT431  87.344'                                 0001
         DC    C' ZP60014 20090823'
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R11,0                                               0001
@PSTART  LA    R12,4095(,R11)                                      0001
         USING @PSTART,R11                                         0001
         USING @PSTART+4095,R12                                    0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R10,R1                                              0001
         USING @DATD,R10                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R10,8(,R13)                                         0001
         LR    R13,R10                                             0001
         MVC   @PC00001(4),0(R1)                                   0001
*   ECDAPTR=R1;                     /* SAVE ADDRESS OF COMMON DATA   */
         LR    ECDAPTR,R1                                          0093
*   RFY                                                            0094
*     R1 UNRSTD;                                                   0094
*   LINELNG=RECLNG-CON4;            /* LINE LENGTH FOR FIRST RECORD  */
         L     R6,ECDAIREC(,ECDAPTR)                               0095
         LH    R6,RECLNG(,R6)                                      0095
         SL    R6,FW04                                             0095
         ST    R6,LINELNG                                          0095
*   ECB=CON0;                       /* INIT AN ECB FOR SERVICE RTNS  */
         SLR   R6,R6                                               0096
         ST    R6,ECB                                              0096
*   FLGCT431='';                    /* INITIALIZE FLAG AREA          */
         MVI   FLGCT431,X'00'                                      0097
*   ERRPTR=ADDR(ERRPARMS);          /* SERVICE RTN PARMLIST AREA     */
*                                                                  0098
         LA    R6,ERRPARMS                                         0098
         ST    R6,ERRPTR                                           0098
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE GETMAIN FOR: LSD, EXECDATA, SNTAB, SVTAB AND THE FIRST  */
*   /* COMMAND PROCEDURE BLOCK                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0099
*   RFY                                                            0099
*     R15 RSTD;                     /* ISSUE GETMAIN FOR STANDARD    */
*   DO;                             /* GETMAIN (EC) LV(GETSIZE)    0100
*                                      A(ECDAGADD) SP(78) RTCD(R15)  */
*     RESPECIFY                                                    0101
*      (R1,                                                        0101
*       R15) RESTRICTED;                                           0101
*     I004=I004&&I004;              /* INIT LIST                     */
         XC    I004(10),I004                                       0102
*     I00404='20'X;                 /* TYPE                          */
         MVI   I00404,X'20'                                        0103
*     I00401=GETSIZE;               /* LENGTH                        */
         MVC   I00401(4),FW8192     WAS 4096             ZP60014   0104
*     I00403=ADDR(ECDAGADD);        /* ADDR OF ADDR LIST             */
         LA    R14,ECDAGADD(,ECDAPTR)                              0105
         STCM  R14,7,I00403                                        0105
*     I00405=78;                    /* SUBPOOL VALUE                 */
         MVI   I00405,X'4E'                                        0106
*     R1=ADDR(I004);                /* REG1 POINTS TO LIST           */
         LA    R1,I004                                             0107
*     SVC(4);                       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0108
*     R15=R15;                      /* SET RETURN CODE               */
*     RESPECIFY                                                    0110
*      (R1,                                                        0110
*       R15) UNRESTRICTED;                                         0110
*   END;                            /* GETMAIN (EC) LV(GETSIZE)    0111
*                                      A(ECDAGADD) SP(78) RTCD(R15)
*                                      EXEC                          */
*                                                                  0112
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK GETMAIN RETURN CODE                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0112
*   IF R15^=CON0 THEN               /* CONTROL BLOCKS                */
         LTR   R15,R15                                             0112
         BZ    @RF00112                                            0112
*     DO;                           /* IF STORAGE COULD NOT BE       */
*       RFY                                                        0114
*         R15 UNRSTD;               /* OBTAINED THEN NOTIFY USER AND */
*       EXMSGID=M511;               /* RETURN RC=16                  */
         MVC   EXMSGID(4),$MSGM511                                 0115
*       CALL MSGRTN;                /* ISSUE MESSAGE                 */
         BAL   R14,MSGRTN                                          0116
*       NOTEXEC=YES;                /* COMMAND PROCEDURE NOT       0117
*                                      EXECUTABLE                    */
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0117
*       CT431RET=CON16;                                            0118
         MVC   CT431RET(4),FW16                                    0118
*     END;                          /* CONTROL RETURNS TO EXIT POINT */
*                                                                  0119
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ERRORS HAVE OCCURRED THEN CONTROL RETURNS TO IKJCT431 EXIT */
*   /* POINT                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0120
*                                                                  0120
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE EXEC CONTROL BLOCKS - FIRST THE LSD            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0120
*   ELSE                            /* GETMAIN SUCCESSFUL - CONTINUE */
*     DO;                                                          0120
         B     @RC00112                                            0120
@RF00112 DS    0H                                                  0121
         L     R2,PSAAOLD
         L     R6,ASCBCSCB-ASCB(,R2)
         ST    R6,TIOTPTR
*       SP78BLK=YES;                /* INDICATE CORE HAS BEEN GOTTEN */
*       SP78CORE=YES;                                              0122
         OI    SP78BLK(ECDAPTR),B'00100100'                        0122
*       ECDALSD=ECDAGADD;           /* LSD IS FIRST BLOCK IN INITIAL */
         L     R6,ECDAGADD(,ECDAPTR)                               0123
         ST    R6,ECDALSD(,ECDAPTR)                                0123
*       LSDRCLEN=CON0;              /* GETMAIN AREA - RECLEN IS      */
         SLR   R8,R8                                               0124
         L     R9,LSDPTR(,ECDAPTR)                                 0124
         STH   R8,LSDRCLEN-LSD(,R9)                                0124
*       LSDADATA=ECDAGADD+HALF;     /* VARIABLE                      */
         L     R14,FW4096           WAS LA R14,2048      ZP60014   0125
         LR    R15,R6                                              0125
         ALR   R15,R14                                             0125
         ST    R15,LSDADATA-LSD(,R9)                               0125
*       LSDANEXT=LSDADATA+CON12;    /* UPDATE PAST BLOCK HEADER      */
         LA    R0,12                                               0126
         ALR   R15,R0                                              0126
         ST    R15,LSDANEXT-LSD(,R9)                               0126
*       LSDBLKID=CON1;              /* INIT TO ID OF FIRST BLOCK     */
         MVI   LSDBLKID-LSD(R9),X'01'                              0127
*       LSDADAID=CON1;                                             0128
         MVI   LSDADAID-LSD(R9),X'01'                              0128
*       LSDEXEC=ECDALSD+((LENGTH(LSD)+CON7)/CON8*CON8);/* PLACE    0129
*                                      EXECDATA ON DOUBLE WORD     0129
*                                      BOUNDRY                       */
*                                                                  0129
         AL    R6,FW16                                             0129
         ST    R6,LSDEXEC-LSD(,R9)                                 0129
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE COMMAND PROCEDURE BLOCK HEADER INFORMATION */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0130
*       ECDACBLK=LSDADATA;          /* INITIALIZE COMMAND PROCEDURE  */
         L     R1,LSDADATA-LSD(,R9)                                0130
         ST    R1,ECDACBLK(,ECDAPTR)                               0130
*       ECDACNXT=LSDANEXT;                                         0131
         L     R9,LSDANEXT-LSD(,R9)                                0131
         ST    R9,ECDACNXT(,ECDAPTR)                               0131
*       ECDACPRE=ECDACNXT;          /* SAME AS NEXT PTR INITIALLY    */
         ST    R9,ECDACPRE(,ECDAPTR)                               0132
*       COMPRNXT=CON0;              /* INDICATE NO MORE BLOCKS       */
         STCM  R8,7,COMPRNXT(R1)                                   0133
*       COMPRID=CON1;               /* THIS IS FIRST BLOCK           */
         MVI   COMPRID(R1),X'01'                                   0134
*       COMPRLNG=HALF;              /* ORIGIONAL SIZE IS HALF OF PAGE*/
         ST    R14,COMPRLNG(,R1)                                   0135
*       COMPRUSE=CON12;                                            0136
         ST    R0,COMPRUSE(,R1)                                    0136
*                                                                  0137
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE EXEC DATA CONTROL BLOCK                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0137
*       EXECDATA=EXECDATA&&EXECDATA;/* CLEAR CORE                    */
         XC    EXECDATA(64,R6),EXECDATA(R6)                        0137
*       IF NESTED=YES THEN          /* IF THIS IS A NESTED EXEC THEN */
         TM    NESTED(ECDAPTR),B'00000010'                         0138
         BNO   @RF00138                                            0138
*         GEXECDAT=ECDAGDAT->GEXECDAT;/* PICK UP ADDRESS OF NEXT   0139
*                                      LOWER EXECDATA OTHERWISE      */
         L     R1,ECDAGDAT(,ECDAPTR)                               0139
         L     R1,GEXECDAT(,R1)                                    0139
         ST    R1,GEXECDAT(,R6)                                    0139
*       ELSE                        /* SAVE THE ADDRESS OF FIRST     */
*         GEXECDAT=ADDR(EXECDATA);  /* LEVEL EXECDATA                */
         B     @RC00138                                            0140
@RF00138 L     R6,LSDPTR(,ECDAPTR)                                 0140
         L     R6,LSDEXEC-LSD(,R6)                                 0140
         ST    R6,GEXECDAT(,R6)                                    0140
*       SNTABFST=LSDEXEC+(LENGTH(EXECDATA)+CON7)/CON8*CON8;/* SPLIT  */
@RC00138 L     R6,LSDPTR(,ECDAPTR)                                 0141
         L     R6,LSDEXEC-LSD(,R6)                                 0141
         LA    R14,64                                              0141
         ALR   R14,R6                                              0141
         ST    R14,SNTABFST(,R6)                                   0141
*       SNTABPTR=SNTABFST;          /* REMAINING CORE BETWEEN SNTAB
*                                      AND SVTAB                     */
         ST    R14,SNTABPTR                                        0142
*       SVTABFST=SNTABPTR+((((CPBLKPTR-SNTABBLK)/CON2)+CON7)/CON8*CON8)
*           ;                                                      0143
         SLR   R15,R15                                             0143
         ICM   R15,7,SNTABBLK                                      0143
         SLR   R0,R0                                               0143
         ICM   R0,7,CPBLKPTR(ECDAPTR)                              0143
         LR    R2,R0                                               0143
         SLR   R2,R15                                              0143
         SRDA  R2,32                                               0143
         D     R2,FW02                                             0143
         LR    R4,R3                                               0143
         AL    R4,FW07                                             0143
         SRDA  R4,32                                               0143
         D     R4,FW08                                             0143
         SLA   R5,3                                                0143
         ALR   R5,R14                                              0143
         ST    R5,SVTABFST(,R6)                                    0143
*       SVTABPTR=SVTABFST;                                         0144
*                                                                  0144
         ST    R5,SVTABPTR                                         0144
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE FIRST SNTAB                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0145
*       SNTABNXT=CON0;              /* ONLY ONE BLOCK                */
         SLR   R6,R6                                               0145
         ST    R6,SNTABNXT(,R14)                                   0145
*       SNTABLNG=SVTABBLK-SNTABBLK; /* TOTAL LENGTH                  */
         SLR   R1,R1                                               0146
         ICM   R1,7,SVTABBLK                                       0146
         LCR   R15,R15                                             0146
         ALR   R15,R1                                              0146
         ST    R15,SNTABLNG(,R14)                                  0146
*       SNTABUSE=LENGTH(SNTAB);     /* 12 BYTES OCCUPIED BY HEADER   */
         MVC   SNTABUSE(4,R14),FW12                                0147
*       SNTELPTR=ADDR(SNTELFST);    /* FIRST AVAILABLE SLOT          */
*                                                                  0148
         LA    SNTELPTR,SNTELFST(,R14)                             0148
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE FIRST SVTAB                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0149
*       SVTABNXT=CON0;              /* ONLY ONE BLOCK                */
         ST    R6,SVTABNXT(,R5)                                    0149
*       SVTABLNG=CPBLKPTR-SVTABBLK; /* TOTAL LENGTH                  */
         SLR   R0,R1                                               0150
         ST    R0,SVTABLNG(,R5)                                    0150
*       SVTABUSE=LENGTH(SVTAB);     /* 16 BYTES OCCUPIED BY HEADER   */
         MVC   SVTABUSE(4,R5),FW16                                 0151
*       SVTABFRE=CON0;              /* NO UNUSED BYTES               */
         ST    R6,SVTABFRE(,R5)                                    0152
*       SVTELPTR=ADDR(SVTELFST);    /* ALL CONTROL BLOCKS ARE BUILT  */
         LA    SVTELPTR,SVTELFST(,R5)                              0153
*       SP78BLK=NO;                                                0154
         NI    SP78BLK(ECDAPTR),B'11111011'                        0154
*                                                                  0155
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE CONTROL VARIABLES INITIALIZE A NULL VALUE  */
*       /* ELEMENT AND ALL CONTROL VARIABLES WITH A NULL VALUE LIST  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0155
*       SVTELPTR->SVTLNG=CON0;      /* NULL ELEMENT LENGTH           */
         STH   R6,SVTLNG(,SVTELPTR)                                0155
*       SVTELPTR->SVTORIG=CON0;     /* NULL ELEMENT FREE LENGTH      */
         STH   R6,SVTORIG(,SVTELPTR)                               0156
*       CALL SVTELUPT;                                             0157
         BAL   R14,SVTELUPT                                        0157
*       RFY                                                        0158
*        (R2,                                                      0158
*         R3,                                                      0158
*         R4,                                                      0158
*         R5) RSTD;                                                0158
*       R2=ADDR(CVARMAP);           /* ADDRESS OF CVAR AREA          */
         L     R2,SNTABPTR                                         0159
         LA    R2,CVARMAP(,R2)                                     0159
*       R3=LENGTH(CVARMAP);         /* LENGTH TO INITIALIZE          */
         LA    R3,272                                              0160
*       R4=R2;                      /* NO DATA TO MOVE               */
         LR    R4,R2                                               0161
*       R5=CON0;                    /* PADS CVARMAP WITH ZEROS       */
         SLR   R5,R5                                               0162
*       MVCL(R2,R4);                /* ZERO AREA                     */
         MVCL  R2,R4                                               0163
*       RFY                                                        0164
*        (R2,                                                      0164
*         R3,                                                      0164
*         R4,                                                      0164
*         R5) UNRSTD;                                              0164
*       DO ICTR=1 TO DIM(NULLVAR);  /* INITIALIZE NULL VALUE       0165
*                                      VARIABLES                     */
         LA    ICTR,1                                              0165
@DL00165 DS    0H                                                  0166
*         SNTDATA(1:NULLEN(ICTR))=NULLADR(ICTR)->NULLVDAT(1:NULLEN(ICTR
*             ));                                                  0166
         LR    R14,ICTR                                            0166
         SLA   R14,2                                               0166
         SLR   R15,R15                                             0166
         IC    R15,NULLEN-4(R14)                                   0166
         LR    R0,R15                                              0166
         BCTR  R0,0                                                0166
         LA    R1,NULLADR-4(R14)                                   0166
         SLR   R14,R14                                             0166
         ICM   R14,7,0(R1)                                         0166
         LR    R1,R0                                               0166
         EX    R1,@SM01540                                         0166
*         SNTLNG=NULLEN(ICTR);                                     0167
         STH   R15,SNTLNG(,SNTELPTR)                               0167
*         SNTVLPTR=ADDR(SVTELFST);                                 0168
         L     R1,SVTABPTR                                         0168
         LA    R2,SVTELFST(,R1)                                    0168
         ST    R2,SNTVLPTR(,SNTELPTR)                              0168
         C     ICTR,FW#EVAL         NEW IMMEDIATE EVALUATION?   ZP60014
         BH    @SYMEVAL             YES, GO SET THE FLAG        ZP60014
*         IF ICTR<CON11 THEN        /* FIRST 10 VARIABLES REQUIRE    */
         C     ICTR,FW11                                           0169
         BNL   @RF00169                                            0169
@SYMEVAL EQU   *                                                ZP60014
*           SNTEVAL=YES;            /* IMMEDIATE EVALUATION          */
         OI    SNTEVAL(SNTELPTR),B'00000010'                       0170
*         IF ICTR<=CON15 THEN       /* FIRST 15 VARIABLES CAN NOT    */
@RF00169 EQU   *                                                   0171
         C     ICTR,FW#GRP1         NO USER UPDATE 2ND GROUP?   ZP60014
         BH    @SYMNOUU             YES, SET THE FLAG           ZP60014
         C     ICTR,FW15                                           0171
         BH    @RF00171                                            0171
@SYMNOUU EQU   *                                                ZP60014
*           SNTNAUTH=YES;           /* BE SET BY USER                */
         OI    SNTNAUTH(SNTELPTR),B'00000100'                      0172
*         SNTABUSE=SNTABUSE+SNTLNG+LENGTH(SNTELEM);                0173
@RF00171 L     R3,SNTABPTR                                         0173
         LA    R2,8                                                0173
         LH    R4,SNTLNG(,SNTELPTR)                                0173
         L     R5,SNTABUSE(,R3)                                    0173
         ALR   R5,R4                                               0173
         ALR   R5,R2                                               0173
         ST    R5,SNTABUSE(,R3)                                    0173
*         SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);                0174
         ALR   R4,SNTELPTR                                         0174
         ALR   R4,R2                                               0174
         LR    SNTELPTR,R4                                         0174
*       END;                                                       0175
         AL    ICTR,FW01                                           0175
         C     ICTR,FW#SYM          ORIGINALLY 19         ZP60014  0175
         BNH   @DL00165                                            0175
*       RFY                                                        0176
*         SVTELEM BASED(SVTELPTR);                                 0176
*                                                                  0177
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THOSE CONTROL VARIABLES REQUIRING VALUES       */
*       /* -SYSUID                                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0177
*       SVTDATA(1:PSCBUSRL)=PSCBUSER(1:PSCBUSRL);                  0177
         L     R6,CPPLPTR(,ECDAPTR)                                0177
         L     R6,CPPLPSCB-CPPL(,R6)                               0177
         SLR   R14,R14                                             0177
         IC    R14,PSCBUSRL-PSCB(,R6)                              0177
         LR    R15,R14                                             0177
         BCTR  R15,0                                               0177
         EX    R15,@SM01544                                        0177
*       SVTLNG=PSCBUSRL;            /* USERID LENGTH                 */
         STH   R14,SVTLNG(,SVTELPTR)                               0178
*       SVTORIG=SVTLNG;             /* ORIGIONAL LENGTH SAME         */
         STH   R14,SVTORIG(,SVTELPTR)                              0179
*       CUIDVAL=SVTELPTR;           /* SNTAB VALUE POINTER           */
         L     R6,SNTABPTR                                         0180
         STCM  SVTELPTR,15,CUIDVAL(R6)                             0180
*       CALL SVTELUPT;                                             0181
*                                                                  0181
         BAL   R14,SVTELUPT                                        0181
*                                                                  0182
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSPROC                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0182
*       DO ICTR=8 TO 1 BY-1 WHILE(CSCBPROC(ICTR)=BLANK);/* DETERMINE */
         LA    ICTR,8                                              0192
@DL00192 L     R1,TIOTPTR                                          0192
         ALR   R1,ICTR                                             0192
         CLI   CSCBPROC-1(R1),C' '                                 0192
         BNE   @DC00192                                            0192
*       END;                        /* LENGTH OF THE PROCEDURE NAME  */
         BCTR  ICTR,0                                              0193
         LTR   ICTR,ICTR                                           0193
         BP    @DL00192                                            0193
@DC00192 DS    0H                                                  0194
*       IF ICTR>CON0 THEN           /* MOVE PROCNAME IN IF PRESENT   */
         LTR   ICTR,ICTR                                           0194
         BNP   @RF00194                                            0194
*         DO;                                                      0195
*           SVTDATA(1:ICTR)=CSCBPROC(1:ICTR);                      0196
         LR    R2,ICTR                                             0196
         BCTR  R2,0                                                0196
         L     R1,TIOTPTR                                          0196
         EX    R2,@SM01546                                         0196
*           SVTLNG=ICTR;                                           0197
         STH   ICTR,SVTLNG(,SVTELPTR)                              0197
*           SVTORIG=ICTR;                                          0198
         STH   ICTR,SVTORIG(,SVTELPTR)                             0198
*           CPROCVAL=SVTELPTR;                                     0199
         L     R6,SNTABPTR                                         0199
         STCM  SVTELPTR,15,CPROCVAL(R6)                            0199
*           CALL SVTELUPT;                                         0200
         BAL   R14,SVTELUPT                                        0200
*         END;                                                     0201
*       ELSE                        /* IF NO PROCNAME THEN SET TO    */
*         CPROCVAL=ADDR(SVTELFST);  /* NULL ELEMENT                  */
         B     @RC00194                                            0202
@RF00194 L     R6,SVTABPTR                                         0202
         LA    R6,SVTELFST(,R6)                                    0202
         L     R1,SNTABPTR                                         0202
         STCM  R6,15,CPROCVAL(R1)                                  0202
*                                                                  0203
*       /*************************************************************/
*       /*                                                           */
*       /* - LASTCC                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0203
*       SVTDATA(1)=CONC0;           /* LASTCC INITIALIZED TO ZERO    */
@RC00194 MVI   SVTDATA(SVTELPTR),C'0'                              0203
*       SVTLNG=LENGTH(CONC0);                                      0204
         MVC   SVTLNG(2,SVTELPTR),HW01                             0204
*       SVTORIG=CON4;               /* RESERVE FOUR BYTES            */
         MVC   SVTORIG(2,SVTELPTR),HW04                            0205
*       CLCCVAL=SVTELPTR;                                          0206
         L     R6,SNTABPTR                                         0206
         STCM  SVTELPTR,15,CLCCVAL(R6)                             0206
*       SVTABFRE=SVTABFRE+CON3;     /* UP FREE SPACE                 */
         L     R6,SVTABPTR                                         0207
         LA    R14,3                                               0207
         AL    R14,SVTABFRE(,R6)                                   0207
         ST    R14,SVTABFRE(,R6)                                   0207
*       CALL SVTELUPT;                                             0208
*                                                                  0208
         BAL   R14,SVTELUPT                                        0208
*                                                                  0209
*       /*************************************************************/
*       /*                                                           */
*       /* -MAXCC                                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0209
*       SVTDATA(1)=CONC0;                                          0209
         MVI   SVTDATA(SVTELPTR),C'0'                              0209
*       SVTLNG=LENGTH(CONC0);                                      0210
         MVC   SVTLNG(2,SVTELPTR),HW01                             0210
*       SVTORIG=CON4;                                              0211
         MVC   SVTORIG(2,SVTELPTR),HW04                            0211
*       CMCCVAL=SVTELPTR;                                          0212
         L     R6,SNTABPTR                                         0212
         ST    SVTELPTR,CMCCVAL(,R6)                               0212
*       SVTABFRE=SVTABFRE+CON3;                                    0213
         L     R6,SVTABPTR                                         0213
         LA    R14,3                                               0213
         AL    R14,SVTABFRE(,R6)                                   0213
         ST    R14,SVTABFRE(,R6)                                   0213
*       CALL SVTELUPT;                                             0214
*                                                                  0214
         BAL   R14,SVTELUPT                                        0214
*                                                                  0215
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSSCAN                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0215
*       SVTDATA(1:2)=CONC16;        /* DEFAULT IS 16                 */
         MVC   SVTDATA(2,SVTELPTR),$CHAR16                         0215
*       SVTLNG=LENGTH(CONC16);                                     0216
         LA    R6,2                                                0216
         STH   R6,SVTLNG(,SVTELPTR)                                0216
*       SVTORIG=CON4;               /* FOUR BYTES ALLOCATED TO THIS  */
         MVC   SVTORIG(2,SVTELPTR),HW04                            0217
*       CSCANVAL=SVTELPTR;          /* VARIABLE                      */
         L     R1,SNTABPTR                                         0218
         STCM  SVTELPTR,15,CSCANVAL(R1)                            0218
*       SVTABFRE=SVTABFRE+CON2;                                    0219
         L     R2,SVTABPTR                                         0219
         AL    R6,SVTABFRE(,R2)                                    0219
         ST    R6,SVTABFRE(,R2)                                    0219
*       CALL SVTELUPT;                                             0220
         BAL   R14,SVTELUPT                                        0220
*                                                                  0221
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSDLM                                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0221
*       SVTDATA(1)=CONC0;           /* DEFAULT VALUE IS 0            */
         MVI   SVTDATA(SVTELPTR),C'0'                              0221
*       SVTLNG=LENGTH(CONC0);                                      0222
         LA    R6,1                                                0222
         STH   R6,SVTLNG(,SVTELPTR)                                0222
*       SVTORIG=CON2;                                              0223
         MVC   SVTORIG(2,SVTELPTR),HW02                            0223
*       CDLMVAL=SVTELPTR;                                          0224
         L     R1,SNTABPTR                                         0224
         STCM  SVTELPTR,15,CDLMVAL(R1)                             0224
*       SVTABFRE=SVTABFRE+CON1;                                    0225
         L     R2,SVTABPTR                                         0225
         AL    R6,SVTABFRE(,R2)                                    0225
         ST    R6,SVTABFRE(,R2)                                    0225
*       CALL SVTELUPT;                                             0226
*                                                                  0226
         BAL   R14,SVTELUPT                                        0226
*                                                                  0227
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSNEST                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0227
*       IF NESTED=YES THEN          /* IF WE ARE EXECUTING IN A      */
         TM    NESTED(ECDAPTR),B'00000010'                         0227
         BNO   @RF00227                                            0227
*         DO;                       /* NESTED LEVEL THEN VALUE IS    */
*           SVTDATA(1:LENGTH(NYES))=NYES;/* YES                      */
         MVC   SVTDATA(3,SVTELPTR),$YES                            0229
*           SVTORIG=LENGTH(NYES);                                  0230
         MVC   SVTORIG(2,SVTELPTR),HW03                            0230
*         END;                                                     0231
*       ELSE                        /* ELSE IT IS NO                 */
*         DO;                                                      0232
         B     @RC00227                                            0232
@RF00227 DS    0H                                                  0233
*           SVTDATA(1:LENGTH(NNO))=NNO;                            0233
         MVC   SVTDATA(2,SVTELPTR),$NO                             0233
*           SVTORIG=LENGTH(NNO);                                   0234
         MVC   SVTORIG(2,SVTELPTR),HW02                            0234
*         END;                                                     0235
*       SVTLNG=SVTORIG;             /* LENGTH IS SAME AS ORIGIONAL 0236
*                                      LNG                           */
@RC00227 LH    R6,SVTORIG(,SVTELPTR)                               0236
         STH   R6,SVTLNG(,SVTELPTR)                                0236
*       CNESTVAL=SVTELPTR;          /* SAVE ADDRESS OF VALUE         */
         L     R6,SNTABPTR                                         0237
         ST    SVTELPTR,CNESTVAL(,R6)                              0237
*       CALL SVTELUPT;                                             0238
*                                                                  0238
         BAL   R14,SVTELUPT                                        0238
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSOUTLINE                                      ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         L     R14,CPPLPTR(,ECDAPTR)
         L     R14,CPPLECT-CPPL(,R14)
         XC    44(4,R14),44(R14)           RESET ECTNUM
         MVI   SVTDATA(SVTELPTR),C'0'      SET VALUE FOR SYSOUTLINE
         LA    R0,1                        GET THE VALUE LENGTH
         STH   R0,SVTLNG(,SVTELPTR)        SET CURRENT VALUE LENGTH
         LA    R0,10                       GET THE VALUE LENGTH LIMIT
         STH   R0,SVTORIG(,SVTELPTR)       SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,COUTLINE(R6)    SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSOUTTRAP                                      ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         MVI   SVTDATA(SVTELPTR),C'0'      SET VALUE FOR SYSOUTLINE
         LA    R0,1                        GET THE VALUE LENGTH
         STH   R0,SVTLNG(,SVTELPTR)        SET CURRENT VALUE LENGTH
         LA    R0,10                       GET THE VALUE LENGTH LIMIT
         STH   R0,SVTORIG(,SVTELPTR)       SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,COUTTRAP(R6)    SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSENV                                          ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         L     R2,PSAAOLD                  POINT TO THE CURRENT ASCB
         ICM   R1,15,$FORE                 PREPARE FOR FOREGROUND
         ICM   R0,15,ASCBTSB-ASCB(R2)      GET ADDRESS OF TSB
         BNZ   GROUNDOK                    IT EXISTS SO IN FOREGROUND
         ICM   R1,15,$BACK                 NOT THERE SO IN BACKGROUND
GROUNDOK STCM  R1,15,SVTDATA(SVTELPTR)     SET VALUE FOR SYSENV
         LA    R0,4                        GET THE VALUE LENGTH
         STH   R0,SVTLNG(,SVTELPTR)        SET CURRENT VALUE LENGTH
         STH   R0,SVTORIG(,SVTELPTR)       SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,CENVVAL(R6)     SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSTERMID                                       ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         LA    R0,GTTRMPRM
         ST    R0,GTTRMLST
         LA    R0,GTTRMALT
         ST    R0,GTTRMLST+4
         LA    R0,GTTRMATR
         ST    R0,GTTRMLST+8
         LA    R0,GTTRMNAM
         ST    R0,GTTRMLST+12
         OI    GTTRMLST+12,X'80'           FLAG LAST PARAMETER
         LA    R1,GTTRMLST                 POINT TO PLIST
         LA    R0,17                       GET GTTERM MACRO ID
         SLL   R0,24                       PROMOTE TO FLAG BYTE
         SVC   94                          ISSUE GTTERM
         LTR   R15,R15                     SUCCESS?
         BNZ   TERMDONE                    NO, CANNOT SET TERMINAL ID
         LA    R1,GTTRMNAM                 YES, POINT TO TERMINAL NAME
         LA    ICTR,8                      GET MAXIMUM NAME LENGTH
TERMBLNK LA    R2,0(ICTR,R1)               POINT PAST TRAILING CHAR
         BCTR  R2,0                        POINT TO TRAILING CHAR
         CLI   0(R2),C' '                  TRAILING BLANK?
         BH    TERMOKAY                    NO, HAVE LENGTH
         BCT   ICTR,TERMBLNK               YES, DECREMENT LENGTH
         B     TERMDONE                    TERMINAL NAME NOT ACQUIRED
TERMOKAY LTR   R2,ICTR                     GET LENGTH OF TERMINAL NAME
         BNP   TERMDONE                    NAME NOT SUPPLIED
         BCTR  R2,0                        GET TERMINAL ID LENGTH CODE
         EX    R2,@SM01548                 MOVE IN TERMINAL NAME
         STH   ICTR,SVTLNG(,SVTELPTR)      SET CURRENT VALUE LENGTH
         STH   ICTR,SVTORIG(,SVTELPTR)     SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,CTERMVAL(R6)    SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
TERMDONE EQU   *
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSSMFID                                        ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         L     R2,CVTPTR                   ---> CVT
         L     R2,CVTSMCA-CVT(,R2)         ---> SMCA
         LA    R1,SMCASID-SMCABASE(,R2)    ---> SMCASID
         LA    ICTR,3
SMFBLANK LA    R2,0(ICTR,R1)               ---> END OF SMCASID
         CLI   0(R2),C' '                  TRAILING BLANK?
         BNE   SMFIDOK                     NO, HAVE LENGTH
         BCT   ICTR,SMFBLANK               YES, DECREMENT LENGTH
SMFIDOK  LR    R2,ICTR                     GET LENGTH CODE OF SID
         EX    R2,@SM01548                 MOVE IN SMF ID
         LA    ICTR,1(,ICTR)               RESTORE LENGTH
         STH   ICTR,SVTLNG(,SVTELPTR)      SET CURRENT VALUE LENGTH
         STH   ICTR,SVTORIG(,SVTELPTR)     SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,CSMFVAL(R6)     SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSOPSYS                                        ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         MVC   SVTDATA(L'$OSLEVEL,SVTELPTR),$OSLEVEL
         LA    R0,L'$OSLEVEL               GET THE VALUE LENGTH
         STH   R0,SVTLNG(,SVTELPTR)        SET CURRENT VALUE LENGTH
         STH   R0,SVTORIG(,SVTELPTR)       SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,COPERVAL(R6)    SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSJES                                          ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         L     R14,PSATOLD                 ---> TCB
         L     R14,TCBJSCB-TCB(,R14)       ---> JSCB
         L     R14,JSCBSSIB-IEZJSCB(,R14)  ---> SSIB
         LA    R1,SSIBSSNM-SSIB(,R14)      ---> JOB'S SUBSYSTEM NAME
         LA    ICTR,4                      GET MAXIMUM NAME LENGTH
JSNMBLNK LA    R2,0(ICTR,R1)               POINT PAST TRAILING CHAR
         BCTR  R2,0                        POINT TO TRAILING CHAR
         CLI   0(R2),C' '                  TRAILING BLANK?
         BH    JSNMOKAY                    NO, HAVE LENGTH
         BCT   ICTR,JSNMBLNK               YES, DECREMENT LENGTH
         B     JSNMDONE                    JES NAME NOT ACQUIRED
JSNMOKAY LTR   R2,ICTR                     GET LENGTH OF JES NAME
         BNP   JSNMDONE                    NAME NOT SUPPLIED
         BCTR  R2,0                        GET JES NAME LENGTH CODE
         EX    R2,@SM01548                 MOVE IN JES NAME
         STH   ICTR,SVTLNG(,SVTELPTR)      SET CURRENT VALUE LENGTH
         STH   ICTR,SVTORIG(,SVTELPTR)     SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,CJESVAL(R6)     SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
JSNMDONE EQU   *
*                                                                  0239
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSICMD                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0239
*       IF IMPLICIT=YES THEN        /* INIT TO IMPLICIT INVOC NAME   */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0239
         BNO   @RF00239                                            0239
*         DO;                                                      0240
*           SVTDATA(1:ECDAILNG)=PROCNAME(1:ECDAILNG);/* IMPLICIT NME */
         SLR   R6,R6                                               0241
         IC    R6,ECDAILNG(,ECDAPTR)                               0241
         LR    R14,R6                                              0241
         BCTR  R14,0                                               0241
         L     R1,ECDAINME(,ECDAPTR)                               0241
         EX    R14,@SM01548                                        0241
*           SVTORIG=ECDAILNG;       /* SAVE LENGTH                   */
         STH   R6,SVTORIG(,SVTELPTR)                               0242
*           SVTLNG=SVTORIG;                                        0243
         STH   R6,SVTLNG(,SVTELPTR)                                0243
*           CICMDVAL=SVTELPTR;      /* ADDR OF VALUE                 */
         L     R6,SNTABPTR                                         0244
         STCM  SVTELPTR,15,CICMDVAL(R6)                            0244
*           CALL SVTELUPT;          /* UPDATE TABLE INFO             */
         BAL   R14,SVTELUPT                                        0245
*         END;                                                     0246
*       ECDALNEL=ADDR(CLASTVAL);                          ZP60014  0247
@RF00239 L     R14,SNTABPTR                                        0247
         LA    R15,CLASTVAL(,R14)                         ZP60014  0247
         ST    R15,ECDALNEL(,ECDAPTR)                              0247
*       USNTABST=SNTABPTR+SNTABUSE;                                0248
         LR    R15,R14                                             0248
         AL    R15,SNTABUSE(,R14)                                  0248
         ST    R15,USNTABST                                        0248
*       RFY                                                        0249
*         SVTELEM BASED(SNTVLPTR);                                 0249
*                                                                  0249
*       /*************************************************************/
*       /*                                                           */
*       /* DETERMINE IF FIRST STATEMENT IS A PROC STATEMENT          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0250
*       ICTR=CON1;                                                 0250
         LA    ICTR,1                                              0250
*       CALL SKIPSEP;               /* SKIP LEADING SEPERATORS       */
         BAL   R14,SKIPSEP                                         0251
*       SCTR=ICTR;                  /* SAVE START OF PARM            */
         LR    SCTR,ICTR                                           0252
         C     SCTR,LINELNG
         BNH   DOFNDSEP
         MVC   CT431RET(4),FW08
         B     @RC00112
*       CALL FINDSEP;               /* LOCATE THE NEXT SEPERATOR     */
DOFNDSEP BAL   R14,FINDSEP                                         0253
*       IF(ICTR-SCTR)^=LENGTH(CPROC) RECORD(SCTR:ICTR-CON1)^=CPROC THEN
         LR    R9,ICTR                                             0254
         SLR   R9,SCTR                                             0254
         C     R9,FW04                                             0254
         BNE   @RT00254                                            0254
         L     R3,ECDAIREC(,ECDAPTR)                               0254
         ALR   R3,SCTR                                             0254
         CLC   RECORD-1(4,R3),$PROC                                0254
         BE    @RF00254                                            0254
@RT00254 DS    0H                                                  0255
*         DO;                                                      0255
*           IF(IMPLICIT=NO&(VLST=YES&VLSTLNG^=CON0)) (IMPLICIT=YES&
*               ECTNOPD=NO) THEN    /* IF THERE WERE PARMS IN        */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0256
         BNZ   @GL00002                                            0256
         L     R9,ECDAEANS(,ECDAPTR)                               0256
         TM    VLST(R9),B'10000000'                                0256
         BNO   @GL00002                                            0256
         LH    R9,VLSTLNG(,R9)                                     0256
         LTR   R9,R9                                               0256
         BNZ   @RT00256                                            0256
@GL00002 TM    IMPLICIT(ECDAPTR),B'10000000'                       0256
         BNO   @RF00256                                            0256
         L     R9,CPPLPTR(,ECDAPTR)                                0256
         L     R9,CPPLECT-CPPL(,R9)                                0256
         TM    ECTSWS-ECT(R9),ECTNOPD                              0256
         BNZ   @RF00256                                            0256
@RT00256 DS    0H                                                  0257
*             DO;                   /* VALUE LIST AND NO PROC STMT   */
*               EXMSGID=A529;       /* THEN TELL USER THE VALUE LIST
*                                      PARMS ARE IGNORED             */
         MVC   EXMSGID(4),$MSGA529                                 0258
*               IF IMPLICIT=NO THEN /* EXPLICIT - PICK UP ADDRESS OF */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0259
         BNZ   @RF00259                                            0259
*                 DO;               /* VALUE LIST FROM PARSE PDL     */
*                   MVAR(1)=VLSTPTR;                               0261
         L     R9,ECDAEANS(,ECDAPTR)                               0261
         L     R15,VLSTPTR(,R9)                                    0261
         ST    R15,MVAR                                            0261
*                   MVARLEN(1)=VLSTLNG;                            0262
         LH    R9,VLSTLNG(,R9)                                     0262
         STC   R9,MVARLEN                                          0262
*                 END;                                             0263
*               ELSE                /* IMPLICIT - PICK UP ADDRESS    */
*                 DO;               /* OF VALUE LIST ADDRESS USING   */
         B     @RC00259                                            0264
@RF00259 DS    0H                                                  0265
*                   MVAR(1)=ADDR(CBUFTEXT)+CBUFOFF;/* CMD BUFFER   0265
*                                      OFFSETS                       */
         L     R9,CPPLPTR(,ECDAPTR)                                0265
         L     R9,CPPLCBUF-CPPL(,R9)                               0265
         LA    R14,CBUFTEXT(,R9)                                   0265
         LH    R15,CBUFOFF(,R9)                                    0265
         ALR   R14,R15                                             0265
         ST    R14,MVAR                                            0265
*                   MVARLEN(1)=CBUFLNG-CBUFOFF;                    0266
         LCR   R15,R15                                             0266
         AH    R15,CBUFLNG(,R9)                                    0266
         STC   R15,MVARLEN                                         0266
*                 END;                                             0267
*               CALL MSGRTN;                                       0268
@RC00259 BAL   R14,MSGRTN                                          0268
*             END;                                                 0269
*
*
*             CT431RET=CON0;
@RF00256 SLR   R9,R9
         ST    R9,CT431RET
         B     @RF00270                                            0272
*         END;                                                     0273
*                                                                  0273
*       /*************************************************************/
*       /*                                                           */
*       /* CONTROL RETURNS TO IKJCT431 EXIT POINT                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0274
*                                                                  0274
*       /*************************************************************/
*       /*                                                           */
*       /* SYNTAX CHECK THE POSITIONAL SPECIFICATION                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0274
*       ELSE                        /* CHECK POSIT SPECIFICATION     */
*         DO;                                                      0274
@RF00254 DS    0H                                                  0275
*           CT431RET=CON4;                                         0275
         MVC   CT431RET(4),FW04                                    0275
*                                   /* STMTS OTHER THAN PROC STMT ARE
*                                      RETURNED TO IKJCT430 SO THEY  */
*                                   /* WILL BE PROCESSED BY IKJCT432 */
@RF00270 CLC   CT431RET(4),FW04
         BNE   @RC00112
*           CALL SKIPSEP;           /* FIND START OF NUMBER          */
         BAL   R14,SKIPSEP                                         0276
*           SCTR=ICTR;                                             0277
         LR    SCTR,ICTR                                           0277
*           CALL FINDSEP;           /* FIND END OF NUMBER            */
         BAL   R14,FINDSEP                                         0278
*           IF ICTR-SCTR>CON0&ICTR-SCTR<CON9 THEN/* IF NUMBER EIGHT
*                                      OR LESS BYTES                 */
         LR    R3,ICTR                                             0279
         SLR   R3,SCTR                                             0279
         LTR   R3,R3                                               0279
         BNP   @RF00279                                            0279
         C     R3,FW09                                             0279
         BNL   @RF00279                                            0279
*             DO;                   /* LONG THEN IT MAY BE VALID-    */
*               PCTR=CON8;          /* OVER EIGHT BYTES IT IS INVALID*/
         LA    PCTR,8                                              0281
*               PACKLOC='';                                        0282
*                                                                  0282
         MVI   PACKLOC,C' '                                        0282
         MVC   PACKLOC+1(7),PACKLOC                                0282
*               /*****************************************************/
*               /*                                                   */
*               /* PREPARE TO PACK AND CONVERT POSITIONAL            */
*               /* SPECIFICATION                                     */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0283
*               DO JCTR=ICTR-CON1 TO SCTR BY-1 WHILE RECORD(JCTR)^<
*                     CONC0&RECORD(JCTR)^>CONC9;                   0283
         LR    R9,ICTR                                             0283
         BCTR  R9,0                                                0283
         ST    R9,JCTR                                             0283
         B     @DE00283                                            0283
@DL00283 L     R3,ECDAIREC(,ECDAPTR)                               0283
         ALR   R9,R3                                               0283
         CLI   RECORD-1(R9),C'0'                                   0283
         BL    @DC00283                                            0283
         L     R4,JCTR                                             0283
         ALR   R4,R3                                               0283
         CLI   RECORD-1(R4),C'9'                                   0283
         BH    @DC00283                                            0283
*                 PACKLOC(PCTR)=RECORD(JCTR);/* POSITIONAL         0284
*                                      SPECIFICATION MUST            */
         LA    R9,PACKLOC-1(PCTR)                                  0284
         L     R4,JCTR                                             0284
         ALR   R3,R4                                               0284
         MVC   0(1,R9),RECORD-1(R3)                                0284
*                 PCTR=PCTR-CON1;   /* BE NUMERIC                    */
         BCTR  PCTR,0                                              0285
*               END;                                               0286
         BCTR  R4,0                                                0286
         LR    R9,R4                                               0286
         ST    R9,JCTR                                             0286
@DE00283 CR    R9,SCTR                                             0286
         BNL   @DL00283                                            0286
@DC00283 DS    0H                                                  0287
*               IF JCTR^<SCTR THEN  /* IF ALL DIGITS WERE NOT MOVED  */
         C     SCTR,JCTR                                           0287
         BH    @RF00287                                            0287
*                 POSPCERR=YES;     /* IN THEN ONE OF THE DIGITS WAS
*                                      NOT NUMERIC - INDICATE      0288
*                                      POSITIONAL SPECIFICATION    0288
*                                      INVALID                       */
         OI    POSPCERR,B'01000000'                                0288
*               ELSE                /* CONVERT THE NUMBER TO BINARY  */
*                 DO;               /* AND SAVE                      */
         B     @RC00287                                            0289
@RF00287 DS    0H                                                  0290
*                   PACK(CVERTLOC,PACKLOC);                        0290
         PACK  CVERTLOC(8),PACKLOC(8)                              0290
*                   CVB(POSNUM,CVERTLOC);                          0291
         CVB   R9,CVERTLOC                                         0291
         ST    R9,POSNUM                                           0291
*                 END;                                             0292
*             END;                                                 0293
*           ELSE                                                   0294
*             POSPCERR=YES;                                        0294
         B     @RC00279                                            0294
@RF00279 OI    POSPCERR,B'01000000'                                0294
*           IF POSPCERR=YES THEN    /* IF POSITIONAL SPECIFICATION   */
@RC00279 TM    POSPCERR,B'01000000'                                0295
         BNO   @RF00295                                            0295
*             DO;                   /* INVALID NOTIFY USER AND       */
*               NOTEXEC=YES;        /* EXIT TO IKJCT430              */
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0297
*               MVAR(1)=ADDR(RECORD(SCTR));                        0298
         L     R3,ECDAIREC(,ECDAPTR)                               0298
         LA    R3,RECORD-1(SCTR,R3)                                0298
         ST    R3,MVAR                                             0298
*               MVARLEN(1)=ICTR-SCTR;                              0299
         LR    R3,ICTR                                             0299
         SLR   R3,SCTR                                             0299
         STC   R3,MVARLEN                                          0299
*               EXMSGID=M506;                                      0300
         MVC   EXMSGID(4),$MSGM506                                 0300
*               CALL MSGRTN;                                       0301
         BAL   R14,MSGRTN                                          0301
*             END;                                                 0302
*                                                                  0303
*           /*********************************************************/
*           /*                                                       */
*           /* SYNTAX CHECK EACH POSITIONAL PARAMETER                */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0303
*           ELSE                    /* POSIT SPECIFICATION O.K.      */
*             DO;                                                  0303
         B     @RC00295                                            0303
@RF00295 DS    0H                                                  0304
*               POSCHAR=CON0;                                      0304
         SLR   POSCHAR,POSCHAR                                     0304
*               CALL SKIPSEP;       /* SKIP PRECEEDING SEPERATORS    */
         BAL   R14,SKIPSEP                                         0305
*               DO PCTR=1 TO POSNUM WHILE ICTR<=LINELNG&STABERR=NO;/*
*                                      FIND PARAMETER START          */
         LA    PCTR,1                                              0306
         B     @DE00306                                            0306
@DL00306 C     ICTR,LINELNG                                        0306
         BH    @DC00306                                            0306
         TM    STABERR,B'10000000'                                 0306
         BNZ   @DC00306                                            0306
*                 SCTR=ICTR;        /* SAVE START OF PARAMETER       */
         LR    SCTR,ICTR                                           0307
*                 POSERR=NO;                                       0308
         NI    POSERR,B'11011111'                                  0308
*                 IF(RECORD(SCTR)^<CONCA&/* FIRST CHARACTER MUST BE  */
*                     RECORD(SCTR)^>CONCI) (RECORD(SCTR)^<CONCJ&RECORD(
*                     SCTR)^>CONCR) (RECORD(SCTR)^<CONCS&RECORD(SCTR)^>
*                     CONCZ) THEN   /* ALPHA                         */
         L     R9,ECDAIREC(,ECDAPTR)                               0309
         LR    R3,R9                                               0309
         ALR   R3,SCTR                                             0309
         CLI   RECORD-1(R3),C'A'                                   0309
         BL    @GL00010                                            0309
         ALR   R9,SCTR                                             0309
         CLI   RECORD-1(R9),C'I'                                   0309
         BNH   @RT00309                                            0309
@GL00010 L     R9,ECDAIREC(,ECDAPTR)                               0309
         LR    R3,R9                                               0309
         ALR   R3,SCTR                                             0309
         CLI   RECORD-1(R3),C'J'                                   0309
         BL    @GL00009                                            0309
         ALR   R9,SCTR                                             0309
         CLI   RECORD-1(R9),C'R'                                   0309
         BNH   @RT00309                                            0309
@GL00009 L     R9,ECDAIREC(,ECDAPTR)                               0309
         LR    R3,R9                                               0309
         ALR   R3,SCTR                                             0309
         CLI   RECORD-1(R3),C'S'                                   0309
         BL    @RF00309                                            0309
         ALR   R9,SCTR                                             0309
         CLI   RECORD-1(R9),C'Z'                                   0309
         BH    @RF00309                                            0309
@RT00309 DS    0H                                                  0310
*                   CALL VALIDATE;                                 0310
         BAL   R14,VALIDATE                                        0310
*                 ELSE              /* IF FIRST CHARACTER NOT ALPHA  */
*                   POSERR=YES;     /* THEN IT IS AN ERROR           */
         B     @RC00309                                            0311
@RF00309 OI    POSERR,B'00100000'                                  0311
*                 IF POSERR=NO&     /* IF THERE HAVE BEEN NO ERRORS  */
*                     VALIDERR=NO&  /* AND THE PARAMETER HAS A GOOD  */
*                     JCTR-SCTR<CON253 THEN/* LENGTH                 */
@RC00309 TM    POSERR,B'00100100'                                  0312
         BNZ   @RF00312                                            0312
         L     R9,JCTR                                             0312
         SLR   R9,SCTR                                             0312
         C     R9,FW253                                            0312
         BNL   @RF00312                                            0312
*                   DO;                                            0313
*                     PARMADR=ADDR(RECORD(SCTR));/* USE THE        0314
*                                      SNTAB/SVTAB                   */
         L     R3,ECDAIREC(,ECDAPTR)                               0314
         LA    R3,RECORD-1(SCTR,R3)                                0314
         ST    R3,PARMADR                                          0314
*                     PARMLNG=JCTR-SCTR;/* UPDATE ROUTINE TO PLACE IN*/
         ST    R9,PARMLNG                                          0315
*                     POSCHAR=POSCHAR+PARMLNG;/* TABLES              */
         ALR   POSCHAR,R9                                          0316
*                     PARMTYPE=POSIT;                              0317
         SLR   R9,R9                                               0317
         STH   R9,PARMTYPE                                         0317
*                     CALL SNTABUPT;                               0318
         BAL   R14,SNTABUPT                                        0318
*                   END;                                           0319
*                 ELSE                                             0320
*                   DO;                                            0320
         B     @RC00312                                            0320
@RF00312 DS    0H                                                  0321
*                     IF ICTR-SCTR^<CON253 THEN/* USE INVALID PARM 0321
*                                      LENGTH                        */
         LR    R3,ICTR                                             0321
         SLR   R3,SCTR                                             0321
         C     R3,FW253                                            0321
         BL    @RF00321                                            0321
*                       EXMSGID=A507;/* MESSAGE                      */
         MVC   EXMSGID(4),$MSGA507                                 0322
*                     ELSE          /* OTHERWISE EXPLAIN WHY PARM    */
*                       DO;         /* INVALID                       */
         B     @RC00321                                            0323
@RF00321 DS    0H                                                  0324
*                         EXMSGID=M507;                            0324
         MVC   EXMSGID(4),$MSGM507                                 0324
*                         ICTR=ICTR+CON1;                          0325
         AL    ICTR,FW01                                           0325
*                       END;                                       0326
*                     MVAR(1)=ADDR(CPOSIT);                        0327
@RC00321 LA    R9,@CC01304                                         0327
         ST    R9,MVAR                                             0327
*                     MVARLEN(1)=LENGTH(CPOSIT);                   0328
         MVI   MVARLEN,X'0A'                                       0328
*                     MVAR(2)=ADDR(RECORD(SCTR));                  0329
         L     R3,ECDAIREC(,ECDAPTR)                               0329
         LA    R9,RECORD-1(SCTR,R3)                                0329
         ST    R9,MVAR+4                                           0329
*                     MVARLEN(2)=ICTR-SCTR;                        0330
         LR    R3,ICTR                                             0330
         SLR   R3,SCTR                                             0330
         STC   R3,MVARLEN+4                                        0330
*                     IF ICTR-SCTR>CON127 THEN/* TRUNCATE            */
         C     R3,FW127                                            0331
         BNH   @RF00331                                            0331
*                       MVARLEN(2)=CON127;/* LENGTHS GT 127          */
         MVI   MVARLEN+4,X'7F'                                     0332
*                     NOTEXEC=YES;  /* PROCEDURE HAS ERRORS          */
@RF00331 OI    NOTEXEC(ECDAPTR),B'01000000'                        0333
*                     CALL MSGRTN;  /* ISSUE MESSAGE TO USER         */
         BAL   R14,MSGRTN                                          0334
*                     CALL SKIPSEP; /* FIND START OF NEXT PARM       */
         BAL   R14,SKIPSEP                                         0335
*                   END;                                           0336
*               END;                                               0337
@RC00312 AL    PCTR,FW01                                           0337
@DE00306 C     PCTR,POSNUM                                         0337
         BNH   @DL00306                                            0337
@DC00306 DS    0H                                                  0338
*               IF PCTR<=POSNUM&STABERR=NO THEN/* IF WE DID NOT    0338
*                                      PROCESS ENOUGH                */
         C     PCTR,POSNUM                                         0338
         BH    @RF00338                                            0338
         TM    STABERR,B'10000000'                                 0338
         BNZ   @RF00338                                            0338
*                 DO;               /* PARMS THEN NOTIFY USER        */
*                   NOTEXEC=YES;                                   0340
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0340
*                   EXMSGID=M509;                                  0341
         MVC   EXMSGID(4),$MSGM509                                 0341
*                   CALL MSGRTN;                                   0342
         BAL   R14,MSGRTN                                          0342
*                 END;                                             0343
*                                                                  0344
*               /*****************************************************/
*               /*                                                   */
*               /* SYNTAX CHECK KEYWORD SPECIFICATIONS               */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0344
*               KEYWORD=YES;        /* CURRENTLY PROCESSING KEYWORDS */
@RF00338 OI    KEYWORD,B'00001000'                                 0344
*               KEYWCHAR=CON0;                                     0345
         SLR   KEYWCHAR,KEYWCHAR                                   0345
*               KEYCHAR=CON0;                                      0346
         SLR   KEYCHAR,KEYCHAR                                     0346
*               KEYWNUM=CON0;                                      0347
         SLR   R9,R9                                               0347
         ST    R9,KEYWNUM                                          0347
*               KEYNUM=CON0;                                       0348
         ST    R9,KEYNUM                                           0348
*               DO WHILE ICTR<=LINELNG&STABERR=NO;                 0349
         B     @DE00349                                            0349
@DL00349 DS    0H                                                  0350
*                 SCTR=ICTR;                                       0350
         LR    SCTR,ICTR                                           0350
*                 KEYERR=NO;                                       0351
         NI    KEYERR,B'11101111'                                  0351
*                 IF(RECORD(SCTR)^<CONCA&/* FIRST CHARACTER MUST BE
*                                      ALPHA                         */
*                     RECORD(SCTR)^>CONCI) (RECORD(SCTR)^<CONCJ&RECORD(
*                     SCTR)^>CONCR) (RECORD(SCTR)^<CONCS&RECORD(SCTR)^>
*                     CONCZ) THEN                                  0352
         L     R9,ECDAIREC(,ECDAPTR)                               0352
         LR    R1,R9                                               0352
         ALR   R1,SCTR                                             0352
         CLI   RECORD-1(R1),C'A'                                   0352
         BL    @GL00017                                            0352
         ALR   R9,SCTR                                             0352
         CLI   RECORD-1(R9),C'I'                                   0352
         BNH   @RT00352                                            0352
@GL00017 L     R9,ECDAIREC(,ECDAPTR)                               0352
         LR    R1,R9                                               0352
         ALR   R1,SCTR                                             0352
         CLI   RECORD-1(R1),C'J'                                   0352
         BL    @GL00016                                            0352
         ALR   R9,SCTR                                             0352
         CLI   RECORD-1(R9),C'R'                                   0352
         BNH   @RT00352                                            0352
@GL00016 L     R9,ECDAIREC(,ECDAPTR)                               0352
         LR    R1,R9                                               0352
         ALR   R1,SCTR                                             0352
         CLI   RECORD-1(R1),C'S'                                   0352
         BL    @RF00352                                            0352
         ALR   R9,SCTR                                             0352
         CLI   RECORD-1(R9),C'Z'                                   0352
         BH    @RF00352                                            0352
@RT00352 DS    0H                                                  0353
*                   CALL VALIDATE;                                 0353
         BAL   R14,VALIDATE                                        0353
*                 ELSE              /* OTHERWISE IT IS AN ERROR      */
*                   KEYERR=YES;                                    0354
         B     @RC00352                                            0354
@RF00352 OI    KEYERR,B'00010000'                                  0354
*                 IF(KEYERR=NO&VALIDERR=NO)&JCTR-SCTR<=CON31 THEN/*
*                                      IF THERE HAVE BEEN NO ERRORS  */
@RC00352 TM    KEYERR,B'00010100'                                  0355
         BNZ   @RF00355                                            0355
         L     R9,JCTR                                             0355
         SLR   R9,SCTR                                             0355
         C     R9,FW31                                             0355
         BH    @RF00355                                            0355
*                   DO;             /* THEN PREPARE FOR SNTAB ENTRY  */
*                     PARMADR=ADDR(RECORD(SCTR));                  0357
         L     R14,ECDAIREC(,ECDAPTR)                              0357
         LA    R15,RECORD-1(SCTR,R14)                              0357
         ST    R15,PARMADR                                         0357
*                     PARMLNG=JCTR-SCTR;/* IF THE NEXT NON SEPERATOR
*                                      IS                            */
         ST    R9,PARMLNG                                          0358
*                     IF ICTR<=LINELNG&RECORD(ICTR)=LFPAREN THEN/* A
*                                      LEFT PAREN THEN IT A          */
         C     ICTR,LINELNG                                        0359
         BH    @RF00359                                            0359
         ALR   R14,ICTR                                            0359
         CLI   RECORD-1(R14),C'('                                  0359
         BNE   @RF00359                                            0359
*                       DO;         /* KEYWORD WITH VALUE            */
*                         PARMTYPE=KEYW;                           0361
         MVC   PARMTYPE(2),HW03                                    0361
*                         KEYWCHAR=KEYWCHAR+PARMLNG;               0362
         ALR   KEYWCHAR,R9                                         0362
*                         KEYWNUM=KEYWNUM+CON1;                    0363
         LA    R2,1                                                0363
         AL    R2,KEYWNUM                                          0363
         ST    R2,KEYWNUM                                          0363
*                         CALL VALUECHK;/* SYNTAX CHECK THE VALUE    */
         BAL   R14,VALUECHK                                        0364
*                         IF VALSTR^=CON0 THEN                     0365
         L     R9,VALSTR                                           0365
         LTR   R9,R9                                               0365
         BZ    @RF00365                                            0365
*                           DO;                                    0366
*                             VALLNG=VALEND-VALSTR+CON1;           0367
         L     R2,VALEND                                           0367
         SLR   R2,R9                                               0367
         AL    R2,FW01                                             0367
         ST    R2,VALLNG                                           0367
*                             VALADR=ADDR(RECORD(VALSTR));         0368
         L     R2,ECDAIREC(,ECDAPTR)                               0368
         LA    R9,RECORD-1(R9,R2)                                  0368
         ST    R9,VALADR                                           0368
*                           END;                                   0369
*                         ELSE                                     0370
*                           VALLNG=CON0;                           0370
         B     @RC00365                                            0370
@RF00365 SLR   R2,R2                                               0370
         ST    R2,VALLNG                                           0370
*                       END;                                       0371
*                     ELSE          /* IF CHARACTER NOT A LEFT PAREN */
*                       DO;         /* THEN IT A KEYWORD WITH NO     */
         B     @RC00359                                            0372
@RF00359 DS    0H                                                  0373
*                         KEYCHAR=KEYCHAR+PARMLNG;/* VALUE           */
         AL    KEYCHAR,PARMLNG                                     0373
*                         PARMTYPE=KEYWO;                          0374
         LA    R9,1                                                0374
         STH   R9,PARMTYPE                                         0374
*                         KEYNUM=KEYNUM+CON1;                      0375
         AL    R9,KEYNUM                                           0375
         ST    R9,KEYNUM                                           0375
*                       END;                                       0376
*                     CALL SNTABUPT;/* CREATE ENTRY IN SNTAB/SVTAB   */
@RC00359 BAL   R14,SNTABUPT                                        0377
*                   END;                                           0378
*                 ELSE              /* IF ERRORS HAD BEEN DETECTED   */
*                   DO;                                            0379
         B     @RC00355                                            0379
@RF00355 DS    0H                                                  0380
*                     IF JCTR-SCTR>CON31 THEN/* THEN NOTIFY USER AND
*                                      CONTINUE                      */
         L     R9,JCTR                                             0380
         SLR   R9,SCTR                                             0380
         C     R9,FW31                                             0380
         BNH   @RF00380                                            0380
*                       EXMSGID=A507;/* SYNTAX CHECKING ANY OTHER    */
         MVC   EXMSGID(4),$MSGA507                                 0381
*                     ELSE          /* PARMS ON PROC STATEMENT       */
*                       DO;                                        0382
         B     @RC00380                                            0382
@RF00380 DS    0H                                                  0383
*                         EXMSGID=M507;                            0383
         MVC   EXMSGID(4),$MSGM507                                 0383
*                         ICTR=ICTR+CON1;                          0384
         AL    ICTR,FW01                                           0384
*                       END;                                       0385
*                     MVAR(1)=ADDR(CKEYWORD);                      0386
@RC00380 LA    R9,$KEYWORD                                         0386
         ST    R9,MVAR                                             0386
*                     MVARLEN(1)=LENGTH(CKEYWORD);                 0387
         MVI   MVARLEN,X'07'                                       0387
*                     MVAR(2)=ADDR(RECORD(SCTR));                  0388
         L     R9,ECDAIREC(,ECDAPTR)                               0388
         LA    R9,RECORD-1(SCTR,R9)                                0388
         ST    R9,MVAR+4                                           0388
*                     MVARLEN(2)=ICTR-SCTR;                        0389
         LR    R9,ICTR                                             0389
         SLR   R9,SCTR                                             0389
         STC   R9,MVARLEN+4                                        0389
*                     NOTEXEC=YES;                                 0390
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0390
*                     CALL MSGRTN;                                 0391
         BAL   R14,MSGRTN                                          0391
*                   END;                                           0392
*                 CALL SKIPSEP;     /* UPDATE TO NEXT KEYWORD        */
@RC00355 BAL   R14,SKIPSEP                                         0393
*               END;                                               0394
@DE00349 C     ICTR,LINELNG                                        0394
         BH    @DC00349                                            0394
         TM    STABERR,B'10000000'                                 0394
         BZ    @DL00349                                            0394
@DC00349 DS    0H                                                  0395
*               IF NOTEXEC=YES (POSNUM+KEYNUM+KEYWNUM=CON0) THEN   0395
         TM    NOTEXEC(ECDAPTR),B'01000000'                        0395
         BO    @RT00395                                            0395
         L     R2,POSNUM                                           0395
         AL    R2,KEYNUM                                           0395
         AL    R2,KEYWNUM                                          0395
         LTR   R2,R2                                               0395
         BNZ   @RF00395                                            0395
@RT00395 DS    0H                                                  0396
*                 DO;                                              0396
*                   IF NOTEXEC=NO THEN                             0397
         TM    NOTEXEC(ECDAPTR),B'01000000'                        0397
         BNZ   @RF00397                                            0397
*                     DO;                                          0398
*                       IF(IMPLICIT=NO&(VLST=YES&VLSTLNG^=CON0)) ( 0399
*                           IMPLICIT=YES&ECTNOPD=NO) THEN          0399
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0399
         BNZ   @GL00025                                            0399
         L     R6,ECDAEANS(,ECDAPTR)                               0399
         TM    VLST(R6),B'10000000'                                0399
         BNO   @GL00025                                            0399
         LH    R6,VLSTLNG(,R6)                                     0399
         LTR   R6,R6                                               0399
         BNZ   @RT00399                                            0399
@GL00025 TM    IMPLICIT(ECDAPTR),B'10000000'                       0399
         BNO   @RF00399                                            0399
         L     R6,CPPLPTR(,ECDAPTR)                                0399
         L     R6,CPPLECT-CPPL(,R6)                                0399
         TM    ECTSWS-ECT(R6),ECTNOPD                              0399
         BNZ   @RF00399                                            0399
@RT00399 DS    0H                                                  0400
*                         DO;                                      0400
*                           EXMSGID=B529;                          0401
         MVC   EXMSGID(4),$MSGB529                                 0401
*                           IF IMPLICIT=NO THEN/* EXPLICIT - PICK UP
*                                      ADDR FROM                     */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0402
         BNZ   @RF00402                                            0402
*                             DO;   /* FROM PDL                      */
*                               MVAR(1)=VLSTPTR;                   0404
         L     R6,ECDAEANS(,ECDAPTR)                               0404
         L     R9,VLSTPTR(,R6)                                     0404
         ST    R9,MVAR                                             0404
*                               MVARLEN(1)=VLSTLNG;                0405
         LH    R6,VLSTLNG(,R6)                                     0405
         STC   R6,MVARLEN                                          0405
*                             END;                                 0406
*                           ELSE    /* IMPLICIT - PICK UP ADDR USING */
*                             DO;                                  0407
         B     @RC00402                                            0407
@RF00402 DS    0H                                                  0408
*                               MVAR(1)=ADDR(CBUFTEXT)+CBUFOFF;    0408
         L     R6,CPPLPTR(,ECDAPTR)                                0408
         L     R6,CPPLCBUF-CPPL(,R6)                               0408
         LA    R8,CBUFTEXT(,R6)                                    0408
         LH    R9,CBUFOFF(,R6)                                     0408
         ALR   R8,R9                                               0408
         ST    R8,MVAR                                             0408
*                               MVARLEN(1)=CBUFLNG-CBUFOFF;        0409
         LCR   R9,R9                                               0409
         AH    R9,CBUFLNG(,R6)                                     0409
         STC   R9,MVARLEN                                          0409
*                             END;                                 0410
*                           CALL MSGRTN;                           0411
@RC00402 BAL   R14,MSGRTN                                          0411
*                         END;                                     0412
*                     END;                                         0413
*                 END;                                             0414
*                                                                  0414
*               /*****************************************************/
*               /*                                                   */
*               /* IF ERRORS HAVE OCCURRED THEN CONTROL GOES TO EXIT */
*               /* AT THIS POINT                                     */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0415
*                                                                  0415
*               /*****************************************************/
*               /*                                                   */
*               /* GET CORE FOR THE VALUE LIST PCL                   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0415
*               ELSE                /* PARAMETER SYNTAX O.K.         */
*                 DO;                                              0415
         B     @RC00395                                            0415
@RF00395 DS    0H                                                  0416
*                   POSAR=POSNUM*LENGTH(IDMOD)+POSCHAR;/* AMOUNT   0416
*                                      NEEDED FOR POSITIONAL       0416
*                                      PARAMETERS                    */
         L     POSAR,POSNUM                                        0416
         MH    POSAR,HW56                                          0416
         ALR   POSAR,POSCHAR                                       0416
*                   KEYAR=KEYNUM*LENGTH(KWMOD)+KEYCHAR;/* AMOUNT   0417
*                                      NEEDED FOR KEYWORDS WITHOUT 0417
*                                      VALUES                        */
         L     R9,KEYNUM                                           0417
         MH    R9,HW11                                             0417
         ALR   R9,KEYCHAR                                          0417
         ST    R9,KEYAR                                            0417
*                   KEYWAR=KEYWNUM*(LENGTH(KWMOD)+CON2+LENGTH(SUBMOD)+
*                       LENGTH(VIDMAP))+KEYWCHAR*CON2;/* AMOUNT FOR
*                                      KEYWORDS WITH VALUES          */
         L     KEYWAR,KEYWNUM                                      0418
         MH    KEYWAR,HW69                                         0418
         LR    R4,KEYWCHAR                                         0418
         ALR   R4,R4                                               0418
         ALR   KEYWAR,R4                                           0418
*                   GETAMT=POSAR+KEYAR+KEYWAR+LENGTH(PCEHEAD)+LENGTH(
*                       PCEEND);                                   0419
         ALR   R9,POSAR                                            0419
         ALR   R9,KEYWAR                                           0419
         AL    R9,FW08                                             0419
         ST    R9,GETAMT                                           0419
*                   GETAMT=GETAMT-1;                                 */
         BCTR  R9,0
         ST    R9,GETAMT
*                   PCLAMT=GETAMT;  /* SAVE LENGTH OF PCL            */
*                                                                  0420
         ST    R9,PCLAMT                                           0420
*                   /*************************************************/
*                   /*                                               */
*                   /* IF THIS IS AN EXPLICIT EXEC WITH A VALUE LIST */
*                   /* THEN GET EXTRA SO WE CAN COPY OVER THE VALUE  */
*                   /* LIST                                          */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0421
*                   IF IMPLICIT=NO&VLST=YES&VLSTLNG^=CON0 THEN/* IF
*                                      EXPLICIT THEN                 */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0421
         BNZ   @RF00421                                            0421
         L     R6,ECDAEANS(,ECDAPTR)                               0421
         TM    VLST(R6),B'10000000'                                0421
         BNO   @RF00421                                            0421
         LH    R4,VLSTLNG(,R6)                                     0421
         LTR   R4,R4                                               0421
         BZ    @RF00421                                            0421
*                     DO;           /* ADD EXTRA                     */
*                       GETAMT=GETAMT+VLSTLNG+CON4;                0423
         ALR   R9,R4                                               0423
         AL    R9,FW04                                             0423
         ST    R9,GETAMT                                           0423
*                       COPYVLST=YES;                              0424
         OI    COPYVLST,B'00000010'                                0424
*                     END;                                         0425
*                   RFY                                            0426
*                     R15 RSTD;                                    0426
@RF00421 DS    0H                                                  0427
*                   DO;             /* GETMAIN (EC) LV(GETAMT)     0427
*                                      A(GETADR) SP(1)               */
*                     RESPECIFY                                    0428
*                      (R1) RESTRICTED;                            0428
*                     I004=I004&&I004;/* INIT LIST                   */
         XC    I004(10),I004                                       0429
*                     I00404='20'X; /* TYPE                          */
         MVI   I00404,X'20'                                        0430
*                     I00401=GETAMT;/* LENGTH                        */
         L     R9,GETAMT                                           0431
         ST    R9,I00401                                           0431
*                     I00403=ADDR(GETADR);/* ADDR OF ADDR LIST       */
         LA    R14,GETADR                                          0432
         STCM  R14,7,I00403                                        0432
*                     I00405=1;     /* SUBPOOL VALUE                 */
         MVI   I00405,X'01'                                        0433
*                     R1=ADDR(I004);/* REG1 POINTS TO LIST           */
         LA    R1,I004                                             0434
*                     SVC(4);       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0435
*                     RESPECIFY                                    0436
*                      (R1) UNRESTRICTED;                          0436
*                   END;            /* GETMAIN (EC) LV(GETAMT)     0437
*                                      A(GETADR) SP(1)               */
*                   IF R15^=CON0 THEN/* IF STORAGE COULD NOT BE      */
         LTR   R15,R15                                             0438
         BZ    @RF00438                                            0438
*                     DO;           /* OBTAINED THEN NOTIFY USER     */
*                       EXMSGID=M511;/* AND TERMINATE                */
         MVC   EXMSGID(4),$MSGM511                                 0440
*                       NOTEXEC=YES;                               0441
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0441
*                       CT431RET=CON16;                            0442
         MVC   CT431RET(4),FW16                                    0442
*                       CALL MSGRTN;                               0443
         BAL   R14,MSGRTN                                          0443
*                     END;                                         0444
*                   ELSE                                           0445
*                     DO;                                          0445
         B     @RC00438                                            0445
@RF00438 DS    0H                                                  0446
*                       PCLCUR=GETADR;/* INIT ADDRESS OF CURRENT PCL */
         L     PCLCUR,GETADR                                       0446
*                       PCLLNG=PCLAMT;/* LENGTH OF PCL               */
         L     R14,PCLAMT                                          0447
         STH   R14,PCLLNG(,PCLCUR)                                 0447
*                       PCLBASE=PCLCUR;                            0448
         LR    PCLBASE,PCLCUR                                      0448
*                       PCLKEYOF=POSAR+LENGTH(PCEHEAD);/* OFFSET TO
*                                      KEYWORDS ADDRESS OF START OF
*                                      SUBFIELD AREA                 */
         LA    R6,6                                                0449
         LR    R14,POSAR                                           0449
         ALR   R14,R6                                              0449
         STH   R14,PCLKEYOF(,PCLCUR)                               0449
*                       SBFCUR=PCLCUR+LENGTH(PCEHEAD)+POSAR+KEYAR+ 0450
*                           KEYWNUM*(LENGTH(KWMOD)+CON2)+KEYWCHAR; 0450
         LR    SBFCUR,PCLCUR                                       0450
         ALR   SBFCUR,R6                                           0450
         ALR   SBFCUR,POSAR                                        0450
         AL    SBFCUR,KEYAR                                        0450
         L     R14,KEYWNUM                                         0450
         MH    R14,HW13                                            0450
         ALR   SBFCUR,R14                                          0450
         ALR   SBFCUR,KEYWCHAR                                     0450
*                       SBFBASE=SBFCUR;                            0451
         ST    SBFCUR,SBFBASE                                      0451
*                       PCLCUR=PCLCUR+LENGTH(PCEHEAD);/* UPDATE TO 0452
*                                      NEXT PCE                      */
         ALR   PCLCUR,R6                                           0452
*                       PDLCUR=CON8;/* DSECT OFFSET PAST PDL HEADER  */
         LA    PDLCUR,8                                            0453
*                                                                  0454
*                       /*********************************************/
*                       /*                                           */
*                       /* INITIALIZE PCES FOR THE POSITIONAL        */
*                       /* PARAMETERS                                */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0454
*                       SNTELPTR=USNTABST;/* ELEMENT BASE TO FIRST 0454
*                                      USER                          */
         L     SNTELPTR,USNTABST                                   0454
*                       SNTABPTR=SNTABFST;/* PARM                    */
         L     R14,LSDPTR(,ECDAPTR)                                0455
         L     R5,LSDEXEC-LSD(,R14)                                0455
         L     R14,SNTABFST(,R5)                                   0455
         ST    R14,SNTABPTR                                        0455
*                       DO PCTR=1 TO POSNUM;/* MOVE IN A COPY OF THE
*                                      MODEL                         */
         LA    PCTR,1                                              0456
         B     @DE00456                                            0456
@DL00456 DS    0H                                                  0457
*                         PCELMT(1:LENGTH(IDMOD))=IDMOD;           0457
         MVC   PCELMT(56,PCLCUR),IDMOD                             0457
*                         IDPRNME(1:SNTLNG)=SNTDATA(1:SNTLNG);/* COPY
*                                      POSIT PARM NAME               */
         LH    R6,SNTLNG(,SNTELPTR)                                0458
         LR    R14,R6                                              0458
         BCTR  R14,0                                               0458
         EX    R14,@SM01557                                        0458
*                         IDLNG=IDLNG+SNTLNG;/* ADJUST TOTAL LENGTH
*                                      TO INCLUDE NAME               */
         ICM   R14,12,IDLNG(PCLCUR)                                0459
         SRA   R14,16                                              0459
         ALR   R14,R6                                              0459
         STCM  R14,3,IDLNG(PCLCUR)                                 0459
*                         IF IDPRMLNG+SNTLNG>CON223 THEN/* IF PROMPT
*                                      INFO TOO LARGE                */
         SLR   R14,R14                                             0460
         IC    R14,IDPRMLNG(,PCLCUR)                               0460
         ALR   R6,R14                                              0460
         C     R6,FW223                                            0460
         BNH   @RF00460                                            0460
*                           IDPRMLNG=CON223;/* FOR PARSE PROMPT    0461
*                                      MESSAGE THEN                  */
         MVI   IDPRMLNG(PCLCUR),X'DF'                              0461
*                         ELSE                                     0462
*                           IDPRMLNG=IDPRMLNG+SNTLNG;              0462
         B     @RC00460                                            0462
@RF00460 SLR   R6,R6                                               0462
         IC    R6,IDPRMLNG(,PCLCUR)                                0462
         AH    R6,SNTLNG(,SNTELPTR)                                0462
         STC   R6,IDPRMLNG(,PCLCUR)                                0462
*                         IDPDLOFF=PDLCUR;/* OFFSET TO PCE           */
@RC00460 STCM  PDLCUR,3,IDPDLOFF(PCLCUR)                           0463
*                         PCLCUR=PCLCUR+IDLNG;/* UPDATE TO START OF
*                                      NEXT PCE                      */
         ICM   R14,12,IDLNG(PCLCUR)                                0464
         SRA   R14,16                                              0464
         ALR   PCLCUR,R14                                          0464
*                         PDLCUR=PDLCUR+LENGTH(IDENTPDE);/* UPDATE TO
*                                      NEXT PDE                      */
         AL    PDLCUR,FW08                                         0465
*                         IF SNTLAST=YES THEN/* IF THIS IS LAST SNTAB
*                                      ELEMENT                       */
         TM    SNTLAST(SNTELPTR),B'00000001'                       0466
         BNO   @RF00466                                            0466
*                           DO;     /* UPDATE TO NEXT SNTAB TABLE    */
*                             SNTABPTR=SNTABNXT;                   0468
         L     R6,SNTABPTR                                         0468
         L     R14,SNTABNXT(,R6)                                   0468
         ST    R14,SNTABPTR                                        0468
*                             SNTELPTR=SNTABPTR+LENGTH(SNTAB);     0469
         AL    R14,FW12                                            0469
         LR    SNTELPTR,R14                                        0469
*                           END;                                   0470
*                         ELSE      /* OTHERWISE STEP UP TO NEXT     */
*                           SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);
         B     @RC00466                                            0471
@RF00466 LR    R6,SNTELPTR                                         0471
         AH    R6,SNTLNG(,SNTELPTR)                                0471
         AL    R6,FW08                                             0471
         LR    SNTELPTR,R6                                         0471
*                                   /* ELEMENT                       */
*                       END;                                       0472
@RC00466 AL    PCTR,FW01                                           0472
@DE00456 C     PCTR,POSNUM                                         0472
         BNH   @DL00456                                            0472
*                                                                  0473
*                       /*********************************************/
*                       /*                                           */
*                       /* BUILD PCES FOR EACH KEYWORD ENTRY         */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0473
*                       DO PCTR=1 TO(KEYWNUM+KEYNUM);/* MOVE IN MODEL
*                                      PCL                           */
         LA    PCTR,1                                              0473
         B     @DE00473                                            0473
@DL00473 DS    0H                                                  0474
*                         PCELMT(1:LENGTH(KWMOD))=KWMOD;           0474
         MVC   PCELMT(11,PCLCUR),KWMOD                             0474
*                         KWPDLOFF=PDLCUR;/* SAVE OFFSET TO PDL      */
         STCM  PDLCUR,3,KWPDLOFF(PCLCUR)                           0475
*                         NADAT(1:SNTLNG)=SNTDATA(1:SNTLNG);/* COPY
*                                      NAME AND                      */
         LH    R6,SNTLNG(,SNTELPTR)                                0476
         LR    R14,R6                                              0476
         BCTR  R14,0                                               0476
         EX    R14,@SM01559                                        0476
*                         NALNG=SNTLNG+LENGTH(NAMPCE);/* LENGTH FROM
*                                      SNTAB                         */
         LA    R0,5                                                0477
         ALR   R0,R6                                               0477
         STCM  R0,3,NALNG(PCLCUR)                                  0477
*                         NADATLNG=SNTLNG-CON1;                    0478
         STC   R14,NADATLNG(,PCLCUR)                               0478
*                         PDLCUR=PDLCUR+LENGTH(KEYPDE);/* UPDATE TO
*                                      NEXT PDL                      */
         LA    R1,2                                                0479
         ALR   PDLCUR,R1                                           0479
*                         IF SNTKEYW=YES THEN/* IF THIS A KEYWORD  0480
*                                      WITH                          */
         TM    SNTKEYW(SNTELPTR),B'00100000'                       0480
         BNO   @RF00480                                            0480
*                           DO;     /* WITH VALUE THEN BUILD SUBFIELD*/
*                             NALNG=NALNG+CON2;/* ADD TWO BYTES FOR
*                                      SBFD OFFSET                   */
         ALR   R0,R1                                               0482
         STCM  R0,3,NALNG(PCLCUR)                                  0482
*                             KWSUBFLD=YES;/* SET SUBFLD INDICATOR   */
         OI    KWSUBFLD(PCLCUR),B'00000100'                        0483
*                             PCLCUR=PCLCUR+KEYLNG+NALNG;/* UPDATE TO
*                                      NEXT PCE                      */
         LR    R6,PCLCUR                                           0484
         ICM   R0,12,KEYLNG(PCLCUR)                                0484
         SRA   R0,16                                               0484
         ALR   R6,R0                                               0484
         ICM   R0,12,NALNG(PCLCUR)                                 0484
         SRA   R0,16                                               0484
         ALR   R6,R0                                               0484
         LR    PCLCUR,R6                                           0484
*                             SBFOFF=SBFCUR-PCLBASE+CON1;/* SAVE   0485
*                                      OFFSET TO SUBFIELD            */
         LCR   R1,R1                                               0485
         ALR   R1,PCLCUR                                           0485
         LR    R6,SBFCUR                                           0485
         SLR   R6,PCLBASE                                          0485
         LA    R0,1                                                0485
         ALR   R0,R6                                               0485
         STH   R0,SBFOFF(,R1)                                      0485
*                             SBFELMT(1:LENGTH(SUBMOD))=SUBMOD;/*  0486
*                                      COPY MODEL SUBFLD             */
         MVC   SBFELMT(3,SBFCUR),SUBMOD                            0486
*                             SUBNXSUB=SBFCUR-PCLBASE+LENGTH(SUBFLD)+
*                                 LENGTH(VIDMAP)+SNTLNG;/* FIND    0487
*                                      OFFSET TO NEXT SUBFIELD       */
         AL    R6,FW56                                             0487
         LH    R1,SNTLNG(,SNTELPTR)                                0487
         ALR   R6,R1                                               0487
         STCM  R6,3,SUBNXSUB(SBFCUR)                               0487
*                             SBFCUR=SBFCUR+LENGTH(SUBFLD);/* UPDATE
*                                      TO NEXT JBF PCE               */
         LA    R6,3                                                0488
         ALR   SBFCUR,R6                                           0488
*                             SBFELMT(1:LENGTH(VIDMAP))=IDMOD;/* COPY
*                                      IDENT MODEL                   */
         MVC   SBFELMT(53,SBFCUR),IDMOD                            0489
*                             SBFCUR->IDMODTYP=KEYTYPE;/* MODIFY TYPE
*                                      TO KEYWORD                    */
         MVC   IDMODTYP(21,SBFCUR),@CC01285                        0490
*                             SBFCUR->VIDPRINF=KEYTYPE;            0491
         MVC   VIDPRINF(18,SBFCUR),@CC01285                        0491
*                             SBFCUR->VIDNAME(1:SNTLNG)=SNTDATA(1: 0492
*                                 SNTLNG);/* KEY-NAME                */
         EX    R14,@SM01561                                        0492
*                             SBFCUR->IDPRMLNG=SBFCUR->IDPRMLNG+SNTLNG-
*                                 CON3;                            0493
         SLR   R14,R14                                             0493
         IC    R14,IDPRMLNG(,SBFCUR)                               0493
         ALR   R14,R1                                              0493
         SLR   R14,R6                                              0493
         STC   R14,IDPRMLNG(,SBFCUR)                               0493
*                             SBFCUR->IDLNG=SBFCUR->IDLNG+SNTLNG-CON3;
         ICM   R14,12,IDLNG(SBFCUR)                                0494
         SRA   R14,16                                              0494
         ALR   R1,R14                                              0494
         SLR   R1,R6                                               0494
         STCM  R1,3,IDLNG(SBFCUR)                                  0494
*                                   /* SAVE PCE LENGTH               */
*                             SBFCUR->IDCHAR=YES;/* INDICATE IDENT IS
*                                      CHARACTER                     */
         OI    IDCHAR(SBFCUR),B'00001000'                          0495
*                             SBFCUR->IDPDLOFF=PDLCUR;/* PDL OFFSET
*                                      FOR THIS PCE                  */
         STCM  PDLCUR,3,IDPDLOFF(SBFCUR)                           0496
*                             SBFCUR=SBFCUR+SBFCUR->IDLNG;/* UPDATE
*                                      TO NEXT SBF PCE               */
         ALR   SBFCUR,R1                                           0497
*                             PDLCUR=PDLCUR+LENGTH(IDENTPDE);/* NEXT
*                                      AVAILABLE PDE                 */
         AL    PDLCUR,FW08                                         0498
*                           END;                                   0499
*                         ELSE      /* FOR KEYWORDS WITHOUT VALUES   */
*                           PCLCUR=PCLCUR+KEYLNG+NALNG;/* NO SUBFIELD
*                                      NECESSARY                     */
         B     @RC00480                                            0500
@RF00480 LR    R6,PCLCUR                                           0500
         ICM   R14,12,KEYLNG(PCLCUR)                               0500
         SRA   R14,16                                              0500
         ALR   R6,R14                                              0500
         ICM   R14,12,NALNG(PCLCUR)                                0500
         SRA   R14,16                                              0500
         ALR   R6,R14                                              0500
         LR    PCLCUR,R6                                           0500
*                         IF SNTLAST=YES THEN/* IF LAST ELEMENT THEN
*                                      UPDATE                        */
@RC00480 TM    SNTLAST(SNTELPTR),B'00000001'                       0501
         BNO   @RF00501                                            0501
*                           DO;     /* TO NEXT SNTAB                 */
*                             SNTABPTR=SNTABNXT;                   0503
         L     R6,SNTABPTR                                         0503
         L     R14,SNTABNXT(,R6)                                   0503
         ST    R14,SNTABPTR                                        0503
*                             SNTELPTR=SNTABPTR+LENGTH(SNTAB);     0504
         AL    R14,FW12                                            0504
         LR    SNTELPTR,R14                                        0504
*                           END;                                   0505
*                         ELSE      /* OTHERWISE-STEP TO NEXT ELEMT  */
*                           SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);
         B     @RC00501                                            0506
@RF00501 LR    R6,SNTELPTR                                         0506
         AH    R6,SNTLNG(,SNTELPTR)                                0506
         AL    R6,FW08                                             0506
         LR    SNTELPTR,R6                                         0506
*                       END;                                       0507
@RC00501 AL    PCTR,FW01                                           0507
@DE00473 L     R14,KEYWNUM                                         0507
         AL    R14,KEYNUM                                          0507
         CR    PCTR,R14                                            0507
         BNH   @DL00473                                            0507
*                       SBFELMT(1)=ENDMOD;/* INITIALIZE THE END PCE  */
         MVC   SBFELMT(1,SBFCUR),ENDMOD                            0508
*                       PCLBASE->PDLLNG=PDLCUR;/* UPDATE FINAL PDL 0509
*                                      LENGTH                        */
         STH   PDLCUR,PDLLNG(,PCLBASE)                             0509
*                                                                  0510
*                       /*********************************************/
*                       /*                                           */
*                       /* PARSE THE VALUE LIST                      */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0510
*                       PPLPTR=ADDR(SERVBLK);/* SET UP PARSE PARMS   */
         LA    PPLPTR,SERVBLK                                      0510
*                       PPLUPT=CPPLUPT;                            0511
         L     R14,CPPLPTR(,ECDAPTR)                               0511
         L     R6,CPPLUPT-CPPL(,R14)                               0511
         ST    R6,PPLUPT-PPL(,PPLPTR)                              0511
*                       PPLPCL=PCLBASE;                            0512
         ST    PCLBASE,PPLPCL-PPL(,PPLPTR)                         0512
*                       PPLECT=CPPLECT;                            0513
         L     R14,CPPLECT-CPPL(,R14)                              0513
         ST    R14,PPLECT-PPL(,PPLPTR)                             0513
*                       PPLECB=ADDR(ECB);                          0514
         LA    R6,ECB                                              0514
         ST    R6,PPLECB-PPL(,PPLPTR)                              0514
*                       PPLANS=ADDR(VLSTANS);                      0515
         LA    R14,VLSTANS                                         0515
         ST    R14,PPLANS-PPL(,PPLPTR)                             0515
*                       IF COPYVLST=YES THEN/* COPY OVER THE VALUE   */
         TM    COPYVLST,B'00000010'                                0516
         BNO   @RF00516                                            0516
*                         DO;       /* LIST IF NECESSARY             */
*                           RFY                                    0518
*                            (R2,                                  0518
*                             R3,                                  0518
*                             R4,                                  0518
*                             R5) RSTD;                            0518
*                           R4=VLSTPTR;/* ADDRESS OF VALUE LIST      */
         L     R6,ECDAEANS(,ECDAPTR)                               0519
         L     R4,VLSTPTR(,R6)                                     0519
*                           R3=VLSTLNG;/* LENGTH OF VALUE LIST       */
         LH    R6,VLSTLNG(,R6)                                     0520
         LR    R3,R6                                               0520
*                           R5=R3;  /* NEW LENGTH IS SAME            */
         LR    R5,R3                                               0521
*                           R2=PCLBASE+PCLAMT;/* ADDR OF NEW VLIST   */
         LR    R2,PCLBASE                                          0522
         AL    R2,PCLAMT                                           0522
*                           R2->NVLSTLNG=VLSTLNG+CON4;/* INIT      0523
*                                      STANDARD                      */
         LA    R14,4                                               0523
         ALR   R6,R14                                              0523
         STH   R6,NVLSTLNG(,R2)                                    0523
*                           R2->NVLSTOFF=CON0;/* LENGTH AND OFFSET   */
         SLR   R6,R6                                               0524
         STH   R6,NVLSTOFF(,R2)                                    0524
*                           PPLCBUF=R2;/* ADDRESS OF VALUE LIST      */
         ST    R2,PPLCBUF-PPL(,PPLPTR)                             0525
*                           R2=R2+CON4;/* UPDATE TO DATA AREA        */
         ALR   R2,R14                                              0526
*                           MVCL(R2,R4);/* MOVE DATA                 */
         MVCL  R2,R4                                               0527
*                           RFY                                    0528
*                            (R2,                                  0528
*                             R3,                                  0528
*                             R4,                                  0528
*                             R5) UNRSTD;                          0528
*                         END;                                     0529
*                       ELSE        /* SET ADDRESS OF THE VALUE LIST */
*                         PPLCBUF=CPPLCBUF;                        0530
         B     @RC00516                                            0530
@RF00516 L     R14,CPPLPTR(,ECDAPTR)                               0530
         L     R14,CPPLCBUF-CPPL(,R14)                             0530
         ST    R14,PPLCBUF-PPL(,PPLPTR)                            0530
*                       RFY                                        0531
*                        (R1,                                      0531
*                         R15) RSTD;                               0531
@RC00516 DS    0H                                                  0532
*                       R1=PPLPTR;                                 0532
         LR    R1,PPLPTR                                           0532
*                       DO;         /* CALLTSSR EP(IKJPARS)          */
*                         RESPECIFY                                0534
*                           R1 RSTD;                               0534
*                         IF CVTPARS=0 THEN                        0535
         L     R6,CVTPTR                                           0535
         L     R8,CVTPARS-CVT(,R6)                                 0535
         LTR   R8,R8                                               0535
         BNZ   @RF00535                                            0535
*                           GEN(LINK EP=IKJPARS);                  0536
         LINK EP=IKJPARS
*                         ELSE                                     0537
*                           CALL CVTPARS;                          0537
         B     @RC00535                                            0537
@RF00535 L     R6,CVTPTR                                           0537
         L     R15,CVTPARS-CVT(,R6)                                0537
         BALR  R14,R15                                             0537
*                         RESPECIFY                                0538
*                           R1 UNRSTD;                             0538
@RC00535 DS    0H                                                  0539
*                       END;                                       0539
*                       RFY                                        0540
*                         R1 UNRSTD;                               0540
*                                                                  0541
*                       /*********************************************/
*                       /*                                           */
*                       /* IF THE PARSE RETURN CODE IS NON ZERO THEN */
*                       /* CALL IKJEFF19 TO ANALIZE THE PARSE ERROR  */
*                       /* CODE AND ISSUE A MESSAGE                  */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0541
*                       IF R15^=CON0 THEN/* IF PARSE ERROR THEN USE  */
         SLR   R6,R6                                               0541
         CR    R15,R6                                              0541
         BE    @RF00541                                            0541
*                         DO;       /* IKJEFF19 TO DIAGNOSE          */
*                           GFPARMS=GFPARMS&&GFPARMS;              0543
         L     R8,ERRPTR                                           0543
         XC    GFPARMS(44,R8),GFPARMS(R8)                          0543
*                           GFRCODE=R15;                           0544
         ST    R15,GFRCODE(,R8)                                    0544
*                           RFY                                    0545
*                             R15 UNRSTD;                          0545
*                           GFCPPLP=CPPLPTR;                       0546
         L     R15,CPPLPTR(,ECDAPTR)                               0546
         ST    R15,GFCPPLP(,R8)                                    0546
*                           GFCALLID=GFPARSE;                      0547
         MVC   GFCALLID(2,R8),HW21                                 0547
*                           GF02PTR=CON0;                          0548
         ST    R6,GF02PTR(,R8)                                     0548
*                           RFY                                    0549
*                             R1 RSTD;                             0549
*                           R1=ADDR(ERRPTR);                       0550
         LA    R1,ERRPTR                                           0550
*                           DO;     /* LINK EP(IKJEFF19)             */
*                             I00601='00'X;/* EP/DE FLAG             */
         MVI   I00601,X'00'                                        0552
*                             I00602=ADDR(IKJEFF19);/* ADDR OF EP/DE */
         LA    R8,IKJEFF19                                         0553
         STCM  R8,7,I00602                                         0553
*                             I00604=0;/* DCB PTR                    */
         STCM  R6,7,I00604                                         0554
*                             I00603='00'X;/* ERRET FLAG             */
         MVI   I00603,X'00'                                        0555
*                             RESPECIFY                            0556
*                              (R15) RESTRICTED;                   0556
*                             R15=ADDR(I006);/* ADDR OF LINK LIST */
         LA    R15,I006                                            0557
*                             SVC(6);/* ISSUE LINK SVC               */
         SVC   6                                                   0558
*                             RESPECIFY                            0559
*                              (R15) UNRESTRICTED;                 0559
*                           END;    /* LINK EP(IKJEFF19)             */
*                           RFY                                    0561
*                             R1 UNRSTD;                           0561
*                           NOTEXEC=YES;                           0562
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0562
*                         END;                                     0563
*                       ELSE        /* PARSE SUCCESSFUL - CONTINUE   */
*                         DO;                                      0564
         B     @RC00541                                            0564
@RF00541 DS    0H                                                  0565
*                           SNTABPTR=SNTABFST;/* RESET BASES TO START
*                                      OF PROC                       */
         L     R5,LSDPTR(,ECDAPTR)                                 0565
         L     R6,LSDEXEC-LSD(,R5)                                 0565
         L     R6,SNTABFST(,R6)                                    0565
         ST    R6,SNTABPTR                                         0565
*                           SNTELPTR=USNTABST;/* PARMS LOOP CONTROL  */
         L     SNTELPTR,USNTABST                                   0566
*                           PDLCUR=VLSTANS+LENGTH(PDLHEAD);/* RESET
*                                      BASES- PDLSTART               */
         LA    PDLCUR,8                                            0567
         AL    PDLCUR,VLSTANS                                      0567
*                           PCLCUR=PCLBASE+LENGTH(PCEHEAD);/* -    0568
*                                      PCLSTART                      */
         LA    PCLCUR,6                                            0568
         ALR   PCLCUR,PCLBASE                                      0568
*                           SBFCUR=SBFBASE+LENGTH(SUBFLD);/* -     0569
*                                      SUBSTART                      */
*                                                                  0569
         LA    SBFCUR,3                                            0569
         AL    SBFCUR,SBFBASE                                      0569
*                           /*****************************************/
*                           /*                                       */
*                           /* PLACE POSITIONAL PARAMETER VALUES IN  */
*                           /* SVTAB                                 */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0570
*                           DO PCTR=1 TO POSNUM WHILE STABERR=NO;  0570
         LA    PCTR,1                                              0570
         B     @DE00570                                            0570
@DL00570 TM    STABERR,B'10000000'                                 0570
         BNZ   @DC00570                                            0570
*                             VALADR=IDPDEPTR;/* VALUE ADDRESS       */
         MVC   VALADR(4),IDPDEPTR(PDLCUR)                          0571
*                             VALLNG=IDPDELNG;/* VALUE LENGTH        */
         ICM   R6,12,IDPDELNG(PDLCUR)                              0572
         SRA   R6,16                                               0572
         ST    R6,VALLNG                                           0572
*                             RFY                                  0573
*                               R15 RSTD;                          0573
*                             CALL SVTABUPT;/* CREATE VALUE ENTRY    */
         BAL   R14,SVTABUPT                                        0574
*                             RFY                                  0575
*                               R15 UNRSTD;                        0575
*                             IF SNTLAST=YES THEN/* IF THIS IS LAST
*                                      ELEMT IN THIS                 */
         TM    SNTLAST(SNTELPTR),B'00000001'                       0576
         BNO   @RF00576                                            0576
*                               DO; /* TABLE THEN UPDATE TO NEXT     */
*                                 SNTABPTR=SNTABNXT;               0578
         L     R2,SNTABPTR                                         0578
         L     R4,SNTABNXT(,R2)                                    0578
         ST    R4,SNTABPTR                                         0578
*                                 SNTELPTR=SNTABPTR+LENGTH(SNTAB); 0579
         AL    R4,FW12                                             0579
         LR    SNTELPTR,R4                                         0579
*                               END;                               0580
*                             ELSE  /* OTHERWISE UPDATE TO NEXT    0581
*                                      ELEMENT IN THE CURRENT SNTAB  */
*                               SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM
*                                   );                             0581
         B     @RC00576                                            0581
@RF00576 LR    R6,SNTELPTR                                         0581
         AH    R6,SNTLNG(,SNTELPTR)                                0581
         AL    R6,FW08                                             0581
         LR    SNTELPTR,R6                                         0581
*                             PDLCUR=PDLCUR+LENGTH(IDENTPDE);      0582
@RC00576 AL    PDLCUR,FW08                                         0582
*                           END;                                   0583
         AL    PCTR,FW01                                           0583
@DE00570 C     PCTR,POSNUM                                         0583
         BNH   @DL00570                                            0583
@DC00570 DS    0H                                                  0584
*                                                                  0584
*                           /*****************************************/
*                           /*                                       */
*                           /* PLACE KEYWORD VALUES IN SVTAB         */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0584
*                           DO PCTR=1 TO(KEYNUM+KEYWNUM) WHILE STABERR=
*                                 NO;                              0584
         LA    PCTR,1                                              0584
         B     @DE00584                                            0584
@DL00584 TM    STABERR,B'10000000'                                 0584
         BNZ   @DC00584                                            0584
*                             IF SNTKEY=YES THEN/* IF THIS IS A    0585
*                                      KEYWORD WITHOUT               */
         TM    SNTKEY(SNTELPTR),B'01000000'                        0585
         BNO   @RF00585                                            0585
*                               DO; /* VALUE THEN CHECK PDL TO SEE IF
*                                      FOUND OR NOT                  */
*                                 IF KEYPDEP=CON1 THEN/* IF FOUND IN
*                                      VALUE LIST THEN               */
         CLC   KEYPDEP(2,PDLCUR),HW01                              0587
         BNE   @RF00587                                            0587
*                                   DO;/* CONVERT IT TO A KEYWORD  0588
*                                      WITH VALUE WITH ITS VALUE THE */
*                                    VALADR=ADDR(SNTDATA);/* KEYWORD
*                                      NAME                          */
         LA    R6,SNTDATA(,SNTELPTR)                               0589
         ST    R6,VALADR                                           0589
*                                    VALLNG=SNTLNG;                0590
         LH    R2,SNTLNG(,SNTELPTR)                                0590
         ST    R2,VALLNG                                           0590
*                                   END;                           0591
*                                 ELSE/* IF NOT FOUND-STILL CONVERT  */
*                                   DO;/* HOWEVER IT HAS A NULL VLAUE*/
         B     @RC00587                                            0592
@RF00587 DS    0H                                                  0593
*                                    VALADR=ADDR(SNTDATA);         0593
         LA    R4,SNTDATA(,SNTELPTR)                               0593
         ST    R4,VALADR                                           0593
*                                    VALLNG=CON0;                  0594
         SLR   R6,R6                                               0594
         ST    R6,VALLNG                                           0594
*                                   END;                           0595
*                               END;                               0596
*                             ELSE  /* OTHERWISE UPDATE THE SVTAB  0597
*                                      WITH THE NEW VALUE IF IT WAS  */
*                               DO; /* SPECIFIED                     */
         B     @RC00585                                            0597
@RF00585 DS    0H                                                  0598
*                                 IF KEYPDEP=CON1 THEN/* IF KEYWORD
*                                      FOUND THEN                    */
         CLC   KEYPDEP(2,PDLCUR),HW01                              0598
         BNE   @RF00598                                            0598
*                                   DO;/* REPLACE OLD VALUE          */
*                                    VALADR=VIPDEPTR;              0600
         LA    R2,2                                                0600
         ALR   R2,PDLCUR                                           0600
         MVC   VALADR(4),VIPDEPTR(R2)                              0600
*                                    VALLNG=VIPDELNG;              0601
         ICM   R4,12,VIPDELNG(R2)                                  0601
         SRA   R4,16                                               0601
         ST    R4,VALLNG                                           0601
*                                   END;                           0602
*                               END;                               0603
@RF00598 DS    0H                                                  0604
*                             IF SNTKEY=YES /* IF THE KEYWORD VALUE
*                                      HAS                           */
*                                 KEYPDEP=CON1 THEN/* BEEN CHANGED 0604
*                                      THEN GO UPDATE                */
@RC00585 TM    SNTKEY(SNTELPTR),B'01000000'                        0604
         BO    @RT00604                                            0604
         CLC   KEYPDEP(2,PDLCUR),HW01                              0604
         BNE   @RF00604                                            0604
@RT00604 DS    0H                                                  0605
*                               DO; /* THE SVTAB                     */
*                                 RFY                              0606
*                                   R15 RSTD;                      0606
*                                 CALL SVTABUPT;/* UPDATE SVTAB      */
         BAL   R14,SVTABUPT                                        0607
*                                 RFY                              0608
*                                   R15 UNRSTD;                    0608
*                               END;                               0609
*                             IF SNTKEY=YES THEN/* UPDATE PDLCUR FOR
*                                      KEYWORDS                      */
@RF00604 TM    SNTKEY(SNTELPTR),B'01000000'                        0610
         BNO   @RF00610                                            0610
*                               PDLCUR=PDLCUR+LENGTH(KEYPDE);      0611
         AL    PDLCUR,FW02                                         0611
*                             ELSE  /* UPEATE PDLCUR FOR KEYWORDS  0612
*                                      WITH VALUE                    */
*                               PDLCUR=PDLCUR+LENGTH(KEYPDE)+LENGTH(
*                                   IDENTPDE);                     0612
         B     @RC00610                                            0612
@RF00610 AL    PDLCUR,FW10                                         0612
*                             IF SNTLAST=YES THEN/* IF THIS IS THE 0613
*                                      LAST ELMT IN                  */
@RC00610 TM    SNTLAST(SNTELPTR),B'00000001'                       0613
         BNO   @RF00613                                            0613
*                               DO; /* SNTAB THEN UPDATE TO NEXT     */
*                                 SNTABPTR=SNTABNXT;               0615
         L     R6,SNTABPTR                                         0615
         L     R2,SNTABNXT(,R6)                                    0615
         ST    R2,SNTABPTR                                         0615
*                                 SNTELPTR=SNTABPTR+LENGTH(SNTAB); 0616
         AL    R2,FW12                                             0616
         LR    SNTELPTR,R2                                         0616
*                               END;                               0617
*                             ELSE  /* OTHERWISE UPDATE TO NEXT ELMT
*                                      IN THE CURRENT SNTAB          */
*                               SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM
*                                   );                             0618
         B     @RC00613                                            0618
@RF00613 LR    R4,SNTELPTR                                         0618
         AH    R4,SNTLNG(,SNTELPTR)                                0618
         AL    R4,FW08                                             0618
         LR    SNTELPTR,R4                                         0618
*                           END;                                   0619
@RC00613 AL    PCTR,FW01                                           0619
@DE00584 L     R6,KEYNUM                                           0619
         AL    R6,KEYWNUM                                          0619
         CR    PCTR,R6                                             0619
         BNH   @DL00584                                            0619
@DC00584 DS    0H                                                  0620
*                         END;                                     0620
*                       GEN(IKJRLSA VLSTANS);/* FREE VALUE LIST PDL
*                                      CORE                          */
@RC00541 DS    0H                                                  0621
         IKJRLSA VLSTANS
*                       FREEADR=PCLBASE;/* FREE THE VALUE LIST PCL   */
         ST    PCLBASE,FREEADR                                     0622
*                       FREEAMT=PCLBASE->PCLLNG;/* FREE LENGTH       */
         LH    R8,PCLLNG(,PCLBASE)                                 0623
         ST    R8,FREEAMT                                          0623
*                       IF COPYVLST=YES THEN/* IF VALUE LIST WAS     */
         TM    COPYVLST,B'00000010'                                0624
         BNO   @RF00624                                            0624
*                         FREEAMT=FREEAMT+VLSTLNG+CON4;/* COPIED THEN
*                                      UP THE AMT TO BE FREED        */
         L     R6,ECDAEANS(,ECDAPTR)                               0625
         AH    R8,VLSTLNG(,R6)                                     0625
         AL    R8,FW04                                             0625
         ST    R8,FREEAMT                                          0625
*                       DO;         /* FREEMAIN (E) LV(FREEAMT)    0626
*                                      A(FREEADR) SP(CON1)           */
@RF00624 DS    0H                                                  0627
*                         RESPECIFY                                0627
*                          (R1) RESTRICTED;                        0627
*                         I005=I005&&I005;/* INIT LIST               */
         XC    I005(10),I005                                       0628
*                         I00505='00'X;/* SET TYPE                   */
         MVI   I00505,X'00'                                        0629
*                         I00502=FREEAMT;/* LENGTH                   */
         MVC   I00502(3),FREEAMT+1                                 0630
*                         I00504=ADDR(FREEADR);/* ADDR OF ADDR LIST  */
         LA    R0,FREEADR                                          0631
         STCM  R0,7,I00504                                         0631
*                         I00506=CON1;/* SUBPOOL VALUE               */
         MVI   I00506,X'01'                                        0632
*                         R1=ADDR(I005);/* REG1 POINTS TO LIST       */
         LA    R1,I005                                             0633
*                         SVC(5);   /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0634
*                         RESPECIFY                                0635
*                          (R1) UNRESTRICTED;                      0635
*                       END;        /* FREEMAIN (E) LV(FREEAMT)    0636
*                                      A(FREEADR) SP(CON1)           */
*                     END;                                         0637
*                 END;                                             0638
@RC00438 DS    0H                                                  0639
*             END;                                                 0639
@RC00395 DS    0H                                                  0640
*         END;                                                     0640
@RC00295 DS    0H                                                  0641
*     END;                                                         0641
*                                                                  0641
@RC00254 DS    0H                                                  0642
*   /*****************************************************************/
*   /*                                                               */
*   /* IKJCT431 EXIT POINT                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0642
*   RETURN CODE(CT431RET);                                         0642
@RC00112 L     R2,CT431RET                                         0642
         L     R13,4(,R13)                                         0642
         L     R0,@SIZDATD                                         0642
         LR    R1,R10                                              0642
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R2                                              0642
         L     R14,12(,R13)                                        0642
         LM    R0,R12,20(R13)                                      0642
         BR    R14                                                 0642
*                                                                  0643
*   /*****************************************************************/
*   /*                                                               */
*   /* SVTELUPT - UPDATES THE SVTABUSE WITH THE LENGTH OF THE VALUE  */
*   /* JUST ADDED AND UPDATES SNTELPTR TO THE NEXT AVAILABLE SLOT    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0643
*SVTELUPT:                                                         0643
*   PROC;                                                          0643
SVTELUPT STM   R14,R8,12(R13)                                      0643
         STM   R10,R12,60(R13)                                     0643
*   RFY                                                            0644
*     SVTELEM BASED(SVTELPTR);                                     0644
*   SVTABUSE=SVTABUSE+LENGTH(SVTELEM)+SVTORIG;                     0645
         L     R8,SVTABPTR                                         0645
         LA    R14,4                                               0645
         L     R15,SVTABUSE(,R8)                                   0645
         ALR   R15,R14                                             0645
         LH    R0,SVTORIG(,SVTELPTR)                               0645
         ALR   R15,R0                                              0645
         ST    R15,SVTABUSE(,R8)                                   0645
*   SVTELPTR=SVTELPTR+LENGTH(SVTELEM)+SVTORIG;                     0646
         ALR   R14,SVTELPTR                                        0646
         ALR   R14,R0                                              0646
         LR    SVTELPTR,R14                                        0646
*   RFY                                                            0647
*     SVTELEM BASED(SNTVLPTR);                                     0647
*   END SVTELUPT;                                                  0648
@EL00002 DS    0H                                                  0648
@EF00002 DS    0H                                                  0648
@ER00002 LM    R14,R8,12(R13)                                      0648
         LM    R10,R12,60(R13)                                     0648
         BR    R14                                                 0648
*                                                                  0649
*   /*****************************************************************/
*   /*                                                               */
*   /* SKIPSEP- SKIP BLANKS, COMMAS, TABS AND COMMENTS IN THE INPUT  */
*   /* RECORD LOCATED BY ECDAIREC                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0649
*SKIPSEP:                                                          0649
*   PROC;                                                          0649
SKIPSEP  STM   R14,R5,12(R13)                                      0649
         STM   R7,R8,48(R13)                                       0649
         STM   R10,R12,60(R13)                                     0649
*   CYCLE=CON1;                                                    0650
         LA    CYCLE,1                                             0650
*   DO WHILE CYCLE=CON1;                                           0651
         B     @DE00651                                            0651
@DL00651 DS    0H                                                  0652
*     DO ICTR=ICTR TO LINELNG WHILE RECORD(ICTR)=BLANK RECORD(ICTR)=
*           COMMA RECORD(ICTR)=TAB;                                0652
         B     @DE00652                                            0652
@DL00652 L     R8,ECDAIREC(,ECDAPTR)                               0652
         LR    R1,R8                                               0652
         ALR   R1,ICTR                                             0652
         CLI   RECORD-1(R1),C' '                                   0652
         BE    @DB00652                                            0652
         LR    R1,R8                                               0652
         ALR   R1,ICTR                                             0652
         CLI   RECORD-1(R1),C','                                   0652
         BE    @DB00652                                            0652
         ALR   R8,ICTR                                             0652
         CLI   RECORD-1(R8),X'05'                                  0652
         BNE   @DC00652                                            0652
@DB00652 DS    0H                                                  0653
*     END;                                                         0653
         AL    ICTR,FW01                                           0653
@DE00652 C     ICTR,LINELNG                                        0653
         BNH   @DL00652                                            0653
@DC00652 DS    0H                                                  0654
*     IF ICTR<LINELNG&RECORD(ICTR:ICTR+CON1)=SLASHAST THEN         0654
         C     ICTR,LINELNG                                        0654
         BNL   @RF00654                                            0654
         L     R8,ECDAIREC(,ECDAPTR)                               0654
         ALR   R8,ICTR                                             0654
         CLC   RECORD-1(2,R8),SLSHASTR                             0654
         BNE   @RF00654                                            0654
*       DO;                                                        0655
*         DO ICTR=(ICTR+CON2) TO(LINELNG-CON1) WHILE RECORD(ICTR:ICTR+
*               CON1)^=ASTSLASH;                                   0656
         LA    R8,2                                                0656
         ALR   R8,ICTR                                             0656
         LR    ICTR,R8                                             0656
         B     @DE00656                                            0656
@DL00656 L     R8,ECDAIREC(,ECDAPTR)                               0656
         ALR   R8,ICTR                                             0656
         CLC   RECORD-1(2,R8),ASTRSLSH                             0656
         BE    @DC00656                                            0656
*         END;                                                     0657
         AL    ICTR,FW01                                           0657
@DE00656 L     R8,LINELNG                                          0657
         BCTR  R8,0                                                0657
         CR    ICTR,R8                                             0657
         BNH   @DL00656                                            0657
@DC00656 DS    0H                                                  0658
*         IF ICTR=LINELNG THEN                                     0658
         C     ICTR,LINELNG                                        0658
         BNE   @RF00658                                            0658
*           DO;                                                    0659
*             CYCLE=CON0;                                          0660
         SLR   CYCLE,CYCLE                                         0660
*             ICTR=ICTR+CON1;                                      0661
         AL    ICTR,FW01                                           0661
*           END;                                                   0662
*         ELSE                                                     0663
*           ICTR=ICTR+CON2;                                        0663
         B     @RC00658                                            0663
@RF00658 AL    ICTR,FW02                                           0663
*       END;                                                       0664
*     ELSE                                                         0665
*       CYCLE=CON0;                                                0665
         B     @RC00654                                            0665
@RF00654 SLR   CYCLE,CYCLE                                         0665
*   END;                                                           0666
@RC00654 DS    0H                                                  0666
@DE00651 C     CYCLE,FW01                                          0666
         BE    @DL00651                                            0666
*   END;                            /* PROCEDURE END                 */
@EL00003 DS    0H                                                  0667
@EF00003 DS    0H                                                  0667
@ER00003 LM    R14,R5,12(R13)                                      0667
         LM    R7,R8,48(R13)                                       0667
         LM    R10,R12,60(R13)                                     0667
         BR    R14                                                 0667
*                                                                  0668
*   /*****************************************************************/
*   /*                                                               */
*   /* FINDSEP - FINDS NEXT SEPERATOR IN RECORD LOCATED BY TCDAIBUF  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0668
*FINDSEP:                                                          0668
*   PROC;                                                          0668
FINDSEP  STM   R14,R5,12(R13)                                      0668
         STM   R7,R12,48(R13)                                      0668
*   CYCLE=CON1;                                                    0669
         LA    CYCLE,1                                             0669
*   DO WHILE CYCLE=CON1;                                           0670
         B     @DE00670                                            0670
@DL00670 DS    0H                                                  0671
*     DO ICTR=ICTR TO LINELNG WHILE RECORD(ICTR)^=BLANK&RECORD(ICTR)^=
*           COMMA&RECORD(ICTR)^=TAB&RECORD(ICTR)^=SLASH;           0671
         B     @DE00671                                            0671
@DL00671 L     R8,ECDAIREC(,ECDAPTR)                               0671
         LR    R1,R8                                               0671
         ALR   R1,ICTR                                             0671
         CLI   RECORD-1(R1),C' '                                   0671
         BE    @DC00671                                            0671
         LR    R1,R8                                               0671
         ALR   R1,ICTR                                             0671
         CLI   RECORD-1(R1),C','                                   0671
         BE    @DC00671                                            0671
         LR    R1,R8                                               0671
         ALR   R1,ICTR                                             0671
         CLI   RECORD-1(R1),X'05'                                  0671
         BE    @DC00671                                            0671
         ALR   R8,ICTR                                             0671
         CLI   RECORD-1(R8),C'/'                                   0671
         BE    @DC00671                                            0671
*     END;                                                         0672
*                                                                  0672
         AL    ICTR,FW01                                           0672
@DE00671 C     ICTR,LINELNG                                        0672
         BNH   @DL00671                                            0672
@DC00671 DS    0H                                                  0673
*     /***************************************************************/
*     /*                                                             */
*     /* IF NOT OPENING COMMENT THEN CONTINUE SEARCH                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0673
*     IF RECORD(ICTR)=SLASH&(ICTR=LINELNG ICTR<LINELNG&RECORD(ICTR:ICTR
*         +CON1)^=SLASHAST) THEN                                   0673
         L     R8,ECDAIREC(,ECDAPTR)                               0673
         LR    R1,R8                                               0673
         ALR   R1,ICTR                                             0673
         CLI   RECORD-1(R1),C'/'                                   0673
         BNE   @RF00673                                            0673
         L     R2,LINELNG                                          0673
         CR    ICTR,R2                                             0673
         BE    @RT00673                                            0673
         CR    ICTR,R2                                             0673
         BNL   @RF00673                                            0673
         ALR   R8,ICTR                                             0673
         CLC   RECORD-1(2,R8),SLSHASTR                             0673
         BE    @RF00673                                            0673
@RT00673 DS    0H                                                  0674
*       ICTR=ICTR+CON1;                                            0674
         AL    ICTR,FW01                                           0674
*     ELSE                                                         0675
*       CYCLE=CON0;                                                0675
         B     @RC00673                                            0675
@RF00673 SLR   CYCLE,CYCLE                                         0675
*   END;                                                           0676
@RC00673 DS    0H                                                  0676
@DE00670 C     CYCLE,FW01                                          0676
         BE    @DL00670                                            0676
*   END;                            /* END OF FINDSEP PROCEDURE      */
@EL00004 DS    0H                                                  0677
@EF00004 DS    0H                                                  0677
@ER00004 LM    R14,R5,12(R13)                                      0677
         LM    R7,R12,48(R13)                                      0677
         BR    R14                                                 0677
*                                                                  0678
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE ROUTINE - THIS SUBROUTINE VERIFIES THAT REMAINING    */
*   /* CHARACTERS OF A SYMBOLIC PARAMETER UP TO FIRST SEPERATOR (OR  */
*   /* LEFT PAREN FOR KEYWORDS) ARE VALID ALPHANUMERIC               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0678
*VALIDATE:                                                         0678
*   PROC;                                                          0678
VALIDATE STM   R14,R5,@SA00005                                     0678
         STM   R7,R12,@SA00005+32                                  0678
*   VALIDERR=NO;                                                   0679
         NI    VALIDERR,B'11111011'                                0679
*   CYCLE=CON1;                                                    0680
         LA    CYCLE,1                                             0680
*   DO ICTR=ICTR TO LINELNG WHILE CYCLE=CON1&VALIDERR=NO;          0681
         B     @DE00681                                            0681
@DL00681 C     CYCLE,FW01                                          0681
         BNE   @DC00681                                            0681
         TM    VALIDERR,B'00000100'                                0681
         BNZ   @DC00681                                            0681
*     IF RECORD(ICTR)<CONCA         /* IF THE CHARACTER IS NOT A THRU*/
*         (RECORD(ICTR)>CONCI&      /* Z OR O THRU 9 THEN MAKE SURE  */
*         RECORD(ICTR)<CONCJ)       /* IT WAS A SEPERATOR BY CALLING */
*         (RECORD(ICTR)>CONCR&RECORD(ICTR)<CONCS) (RECORD(ICTR)>CONCZ&
*         RECORD(ICTR)<CONC0) RECORD(ICTR)>CONC9 THEN/* SKIPSEP - IF
*                                      OFFSETS DIFFER                */
         L     R8,ECDAIREC(,ECDAPTR)                               0682
         LR    R1,R8                                               0682
         ALR   R1,ICTR                                             0682
         CLI   RECORD-1(R1),C'A'                                   0682
         BL    @RT00682                                            0682
         LR    R1,R8                                               0682
         ALR   R1,ICTR                                             0682
         CLI   RECORD-1(R1),C'I'                                   0682
         BNH   @GL00044                                            0682
         ALR   R8,ICTR                                             0682
         CLI   RECORD-1(R8),C'J'                                   0682
         BL    @RT00682                                            0682
@GL00044 L     R8,ECDAIREC(,ECDAPTR)                               0682
         LR    R1,R8                                               0682
         ALR   R1,ICTR                                             0682
         CLI   RECORD-1(R1),C'R'                                   0682
         BNH   @GL00043                                            0682
         ALR   R8,ICTR                                             0682
         CLI   RECORD-1(R8),C'S'                                   0682
         BL    @RT00682                                            0682
@GL00043 L     R8,ECDAIREC(,ECDAPTR)                               0682
         LR    R1,R8                                               0682
         ALR   R1,ICTR                                             0682
         CLI   RECORD-1(R1),C'Z'                                   0682
         BNH   @GL00042                                            0682
         ALR   R8,ICTR                                             0682
         CLI   RECORD-1(R8),C'0'                                   0682
         BL    @RT00682                                            0682
@GL00042 L     R8,ECDAIREC(,ECDAPTR)                               0682
         ALR   R8,ICTR                                             0682
         CLI   RECORD-1(R8),C'9'                                   0682
         BNH   @RF00682                                            0682
@RT00682 DS    0H                                                  0683
*       DO;                         /* UPON RETURN THEN IT IS AN     */
*         JCTR=ICTR;                /* ERROR SYNTAX UNLESS THIS IS   */
         ST    ICTR,JCTR                                           0684
*         CALL SKIPSEP;             /* A KEYWORD WITH VALUE          */
         BAL   R14,SKIPSEP                                         0685
*         IF ICTR=JCTR THEN                                        0686
         C     ICTR,JCTR                                           0686
         BNE   @RF00686                                            0686
*           IF KEYWORD=YES&RECORD(ICTR)=LFPAREN THEN               0687
         TM    KEYWORD,B'00001000'                                 0687
         BNO   @RF00687                                            0687
         L     R8,ECDAIREC(,ECDAPTR)                               0687
         ALR   R8,ICTR                                             0687
         CLI   RECORD-1(R8),C'('                                   0687
         BNE   @RF00687                                            0687
*             CYCLE=CON0;                                          0688
         SLR   CYCLE,CYCLE                                         0688
*           ELSE                                                   0689
*             VALIDERR=YES;                                        0689
         B     @RC00687                                            0689
@RF00687 OI    VALIDERR,B'00000100'                                0689
*         ELSE                                                     0690
*           CYCLE=CON0;                                            0690
         B     @RC00686                                            0690
@RF00686 SLR   CYCLE,CYCLE                                         0690
*       END;                                                       0691
@RC00686 DS    0H                                                  0692
*   END;                                                           0692
@RF00682 AL    ICTR,FW01                                           0692
@DE00681 C     ICTR,LINELNG                                        0692
         BNH   @DL00681                                            0692
@DC00681 DS    0H                                                  0693
*   IF CYCLE=CON1 THEN                                             0693
         C     CYCLE,FW01                                          0693
         BNE   @RF00693                                            0693
*     JCTR=ICTR;                                                   0694
         ST    ICTR,JCTR                                           0694
*   ELSE                                                           0695
*     ICTR=ICTR-CON1;                                              0695
         B     @RC00693                                            0695
@RF00693 BCTR  ICTR,0                                              0695
*   END;                            /* END OF VALIDATE PROCEDURE     */
@EL00005 DS    0H                                                  0696
@EF00005 DS    0H                                                  0696
@ER00005 LM    R14,R5,@SA00005                                     0696
         LM    R7,R12,@SA00005+32                                  0696
         BR    R14                                                 0696
*                                                                  0697
*   /*****************************************************************/
*   /*                                                               */
*   /* SNTABUPT = THE SNTABUPT ROUTINE UPDATES THE SNTAB(AND SVTAB)  */
*   /* BASED ON AN INPUT OPERATION CODE AND PARM TYPE PARMOP=CREATE-0*/
*   /* CREATE AN ENTRY PARMOP=LOCATE-1 LOCATE AN ENTRY (OR CREATE AN */
*   /* ENTRY IF ENTRY NOT FOUND AND THIS IS NOT A LABLE REQUEST      */
*   /* PARMTYPE=POSIT-1 POSITIONAL PARAMETER =KEY -2 KEYWORD WITHOUT */
*   /* VALUE =KEYWV-3 KEYWORD WITH VALUE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0697
*SNTABUPT:                                                         0697
*   PROC;                                                          0697
SNTABUPT STM   R14,R7,@SA00006                                     0697
         STM   R9,R12,@SA00006+40                                  0697
*   SNTABPTR=SNTABFST;                                             0698
         L     R3,LSDPTR(,ECDAPTR)                                 0698
         L     R6,LSDEXEC-LSD(,R3)                                 0698
         L     R3,SNTABFST(,R6)                                    0698
         ST    R3,SNTABPTR                                         0698
*   UPTPTR1=SNTABFST+LENGTH(SNTAB); /* ADDRESS OF FIRST ELEMENT      */
*                                                                  0699
         AL    R3,FW12                                             0699
         LR    UPTPTR1,R3                                          0699
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF NAME ALREADY DEFINED IN SNTAB                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0700
*   CYCLE=CON1;                                                    0700
         LA    CYCLE,1                                             0700
*   DO WHILE UPTPTR1^=SNTELPTR&CYCLE=CON1;                         0701
         B     @DE00701                                            0701
@DL00701 DS    0H                                                  0702
*     IF UPTPTR1->SNTLNG=PARMLNG&UPTPTR1->SNTDATA(1:UPTPTR1->SNTLNG)=
*         PARMDAT(1:UPTPTR1->SNTLNG) THEN                          0702
         LH    R3,SNTLNG(,UPTPTR1)                                 0702
         C     R3,PARMLNG                                          0702
         BNE   @RF00702                                            0702
         BCTR  R3,0                                                0702
         L     R6,PARMADR                                          0702
         EX    R3,@SC01563                                         0702
         BNE   @RF00702                                            0702
*       CYCLE=CON0;                                                0703
         SLR   CYCLE,CYCLE                                         0703
*     ELSE                                                         0704
*       IF UPTPTR1->SNTLAST=YES THEN                               0704
         B     @RC00702                                            0704
@RF00702 TM    SNTLAST(UPTPTR1),B'00000001'                        0704
         BNO   @RF00704                                            0704
*         DO;                                                      0705
*           SNTABPTR=SNTABNXT;                                     0706
         L     R3,SNTABPTR                                         0706
         L     R6,SNTABNXT(,R3)                                    0706
         ST    R6,SNTABPTR                                         0706
*           UPTPTR1=SNTABPTR+LENGTH(SNTAB);                        0707
         AL    R6,FW12                                             0707
         LR    UPTPTR1,R6                                          0707
*         END;                                                     0708
*       ELSE                                                       0709
*         UPTPTR1=UPTPTR1+UPTPTR1->SNTLNG+LENGTH(SNTELEM);         0709
         B     @RC00704                                            0709
@RF00704 LR    R3,UPTPTR1                                          0709
         AH    R3,SNTLNG(,UPTPTR1)                                 0709
         AL    R3,FW08                                             0709
         LR    UPTPTR1,R3                                          0709
*   END;                                                           0710
@RC00704 DS    0H                                                  0710
@RC00702 DS    0H                                                  0710
@DE00701 CR    UPTPTR1,SNTELPTR                                    0710
         BE    @DC00701                                            0710
         C     CYCLE,FW01                                          0710
         BE    @DL00701                                            0710
@DC00701 DS    0H                                                  0711
*   IF CYCLE=CON0 THEN              /* CYCLE SET TO ZERO IF PARAMETER*/
         LTR   CYCLE,CYCLE                                         0711
         BNZ   @RF00711                                            0711
*     DO;                           /* IS MULTIPLY DEFINED           */
*       EXMSGID=M530;                                              0713
         MVC   EXMSGID(4),$MSGM530                                 0713
*       MVAR(1)=ADDR(MSGINS);                                      0714
         LA    R6,$STMT1                                           0714
         ST    R6,MVAR                                             0714
*       MVARLEN(1)=LENGTH(MSGINS);                                 0715
         MVI   MVARLEN,X'06'                                       0715
*       MVAR(2)=PARMADR;                                           0716
         L     R6,PARMADR                                          0716
         ST    R6,MVAR+4                                           0716
*       MVARLEN(2)=PARMLNG;                                        0717
         L     R6,PARMLNG                                          0717
         STC   R6,MVARLEN+4                                        0717
*       NOTEXEC=YES;                                               0718
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0718
*       CALL MSGRTN;                                               0719
         BAL   R14,MSGRTN                                          0719
*     END;                                                         0720
*   ELSE                            /* PARAMETER WAS NOT ALREADY     */
*     DO;                           /* DEFINED SO WE MUST CREATE AN
*                                      ENTRY                         */
         B     @RC00711                                            0721
@RF00711 DS    0H                                                  0722
*       IF NOTEXEC=NO&(SNTABLNG-SNTABUSE<PARMLNG+LENGTH(SNTELEM)) THEN
         TM    NOTEXEC(ECDAPTR),B'01000000'                        0722
         BNZ   @RF00722                                            0722
         L     R9,SNTABPTR                                         0722
         L     R6,SNTABLNG(,R9)                                    0722
         L     R14,SNTABUSE(,R9)                                   0722
         LR    R15,R6                                              0722
         SLR   R15,R14                                             0722
         LA    R0,8                                                0722
         L     R1,PARMLNG                                          0722
         ALR   R1,R0                                               0722
         CR    R15,R1                                              0722
         BNL   @RF00722                                            0722
*         DO;                       /* IF REMAINING SNTAB NOT LARGE
*                                      ENOUGH THEN GET A NEW BLOCK   */
*           ECDALNEL->SNTLAST=YES;  /* INDICATE LAST ELEMENT IN    0724
*                                      CURRENT SNTAB                 */
*                                                                  0724
         L     R1,ECDALNEL(,ECDAPTR)                               0724
         OI    SNTLAST(R1),B'00000001'                             0724
*           /*********************************************************/
*           /*                                                       */
*           /* FREE UNUSED AMOUNT                                    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0725
*           FREEADR=(SNTABPTR+SNTABUSE+CON7)/CON8*CON8;            0725
         LR    R2,R9                                               0725
         ALR   R2,R14                                              0725
         AL    R2,FW07                                             0725
         SRDA  R2,32                                               0725
         DR    R2,R0                                               0725
         SLA   R3,3                                                0725
         ST    R3,FREEADR                                          0725
*           FREEAMT=SNTABPTR+SNTABLNG-FREEADR;                     0726
         ALR   R6,R9                                               0726
         SLR   R6,R3                                               0726
         ST    R6,FREEAMT                                          0726
*           SNTABLNG=SNTABUSE;                                     0727
         ST    R14,SNTABLNG(,R9)                                   0727
         C     R6,FW09
         BNL   LBL01200
         ST    R0,FREEAMT
         B     LBL01222
*           DO;                     /* FREEMAIN (E) LV(FREEAMT)    0728
*                                      A(FREEADR) SP(78)             */
*             RESPECIFY                                            0729
*              (R1) RESTRICTED;                                    0729
*             I005=I005&&I005;      /* INIT LIST                     */
LBL01200 XC    I005(10),I005                                       0730
*             I00505='00'X;         /* SET TYPE                      */
         MVI   I00505,X'00'                                        0731
*             I00502=FREEAMT;       /* LENGTH                        */
         MVC   I00502(3),FREEAMT+1                                 0732
*             I00504=ADDR(FREEADR); /* ADDR OF ADDR LIST             */
         LA    R6,FREEADR                                          0733
         STCM  R6,7,I00504                                         0733
*             I00506=78;            /* SUBPOOL VALUE                 */
         MVI   I00506,X'4E'                                        0734
*             R1=ADDR(I005);        /* REG1 POINTS TO LIST           */
         LA    R1,I005                                             0735
*             SVC(5);               /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0736
*             RESPECIFY                                            0737
*              (R1) UNRESTRICTED;                                  0737
*           END;                    /* FREEMAIN (E) LV(FREEAMT)    0738
*                                      A(FREEADR) SP(78)             */
*           GETAMT=(SNTABLNG+FREEAMT+PARMLNG+CON7)/CON8*CON8;      0739
LBL01222 L     R6,SNTABPTR                                         0739
         L     R4,SNTABLNG(,R6)                                    0739
         AL    R4,FREEAMT                                          0739
         AL    R4,PARMLNG                                          0739
         AL    R4,FW07                                             0739
         SRDA  R4,32                                               0739
         D     R4,FW08                                             0739
         SLA   R5,3                                                0739
         ST    R5,GETAMT                                           0739
*           RFY                                                    0740
*             R15 RSTD;                                            0740
*           DO;                     /* GETMAIN (EC) LV(GETAMT)     0741
*                                      A(GETADR) SP(78) RTCD(R15)    */
*             RESPECIFY                                            0742
*              (R1,                                                0742
*               R15) RESTRICTED;                                   0742
*             I004=I004&&I004;      /* INIT LIST                     */
         XC    I004(10),I004                                       0743
*             I00404='20'X;         /* TYPE                          */
         MVI   I00404,X'20'                                        0744
*             I00401=GETAMT;        /* LENGTH                        */
         ST    R5,I00401                                           0745
*             I00403=ADDR(GETADR);  /* ADDR OF ADDR LIST             */
         LA    R9,GETADR                                           0746
         STCM  R9,7,I00403                                         0746
*             I00405=78;            /* SUBPOOL VALUE                 */
         MVI   I00405,X'4E'                                        0747
*             R1=ADDR(I004);        /* REG1 POINTS TO LIST           */
         LA    R1,I004                                             0748
*             SVC(4);               /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0749
*             R15=R15;              /* SET RETURN CODE               */
*             RESPECIFY                                            0751
*              (R1,                                                0751
*               R15) UNRESTRICTED;                                 0751
*           END;                    /* GETMAIN (EC) LV(GETAMT)     0752
*                                      A(GETADR) SP(78) RTCD(R15)    */
*           IF R15^=CON0 THEN       /* RETURN CODE NON ZERO NOTIFY   */
         LTR   R15,R15                                             0753
         BZ    @RF00753                                            0753
*             DO;                   /* TYE USER -NOT ENOUGH STORAGE  */
*               RFY                                                0755
*                 R15 UNRSTD;                                      0755
*               EXMSGID=M511;                                      0756
         MVC   EXMSGID(4),$MSGM511                                 0756
*               NOTEXEC=YES;                                       0757
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0757
*               CALL MSGRTN;                                       0758
         BAL   R14,MSGRTN                                          0758
*               CT431RET=CON16;                                    0759
         MVC   CT431RET(4),FW16                                    0759
*               STABERR=YES;        /* SET ERROR FLAG TO             */
         OI    STABERR,B'10000000'                                 0760
*             END;                  /* AVOID ANY FURHTER PARMS       */
*           ELSE                    /* GETMAIN SUCCESSFUL -          */
*             DO;                   /* INITIALIZE HEADER OF NEW      */
         B     @RC00753                                            0762
@RF00753 DS    0H                                                  0763
*               GETADR->SNTABNXT=CON0;/* BLOCK                       */
         L     R2,GETADR                                           0763
         L     R3,GETAMT                                           0763
         XR    R4,R4                                               0763
         XR    R5,R5                                               0763
         MVCL  R2,R4                                               0763
         L     R6,GETADR
         SLR   R9,R9
         ST    R9,SNTABNXT(,R6)
*               GETADR->SNTABLNG=GETAMT;                           0764
         L     R9,GETAMT                                           0764
         ST    R9,SNTABLNG(,R6)                                    0764
*               GETADR->SNTABUSE=LENGTH(SNTAB);                    0765
         LA    R9,12                                               0765
         ST    R9,SNTABUSE(,R6)                                    0765
*               SNTABNXT=GETADR;                                   0766
         L     R1,SNTABPTR                                         0766
         ST    R6,SNTABNXT(,R1)                                    0766
*               SNTABPTR=SNTABNXT;                                 0767
         ST    R6,SNTABPTR                                         0767
*               SNTELPTR=SNTABPTR+LENGTH(SNTAB);                   0768
         ALR   R6,R9                                               0768
         LR    SNTELPTR,R6                                         0768
*             END;                                                 0769
*         END;                                                     0770
@RC00753 DS    0H                                                  0771
*       IF NOTEXEC=NO THEN          /* MOVE IN NAME OF SYMBOLIC PARM */
@RF00722 TM    NOTEXEC(ECDAPTR),B'01000000'                        0771
         BNZ   @RF00771                                            0771
*         DO;                                                      0772
*           SNTDATA(1:PARMLNG)=PARMDAT(1:PARMLNG);                 0773
         L     R6,PARMLNG                                          0773
         LR    R9,R6                                               0773
         BCTR  R9,0                                                0773
         L     R1,PARMADR                                          0773
         EX    R9,@SM01567                                         0773
*           SNTLNG=PARMLNG;                                        0774
         STH   R6,SNTLNG(,SNTELPTR)                                0774
*           SNTFLAGS=SNTFLAGS&&SNTFLAGS;                           0775
         XC    SNTFLAGS(2,SNTELPTR),SNTFLAGS(SNTELPTR)             0775
*           SNTVLPTR=ADDR(SVTELFST);                               0776
         L     R9,SVTABPTR                                         0776
         LA    R9,SVTELFST(,R9)                                    0776
         ST    R9,SNTVLPTR(,SNTELPTR)                              0776
*           SNTABUSE=SNTABUSE+SNTLNG+LENGTH(SNTELEM);              0777
         L     R9,SNTABPTR                                         0777
         AL    R6,SNTABUSE(,R9)                                    0777
         AL    R6,FW08                                             0777
         ST    R6,SNTABUSE(,R9)                                    0777
*           IF PARMTYPE=POSIT THEN  /* TURN ON APPROPRIATE SNTFLAGS  */
         LH    R6,PARMTYPE                                         0778
         LTR   R6,R6                                               0778
         BNZ   @RF00778                                            0778
*             SNTPOSIT=YES;                                        0779
         OI    SNTPOSIT(SNTELPTR),B'10000000'                      0779
*           ELSE                                                   0780
*             IF PARMTYPE=KEYWO THEN/* IS IT A KEYWORD WITHOUT VALUE */
         B     @RC00778                                            0780
@RF00778 CLC   PARMTYPE(2),HW01                                    0780
         BNE   @RF00780                                            0780
*               SNTKEY=YES;                                        0781
         OI    SNTKEY(SNTELPTR),B'01000000'                        0781
*             ELSE                  /* IF IT IS A KEYWORD WITH VALUE */
*               DO;                 /* THEN ASSIGN A VTABELEMENT     */
         B     @RC00780                                            0782
@RF00780 DS    0H                                                  0783
*                 SNTKEYW=YES;                                     0783
         OI    SNTKEYW(SNTELPTR),B'00100000'                       0783
*                 CALL SVTABUPT;                                   0784
         BAL   R14,SVTABUPT                                        0784
*               END;                                               0785
*           ECDALNEL=SNTELPTR;                                     0786
@RC00780 DS    0H                                                  0786
@RC00778 ST    SNTELPTR,ECDALNEL(,ECDAPTR)                         0786
*           SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);              0787
         LR    R9,SNTELPTR                                         0787
         AH    R9,SNTLNG(,SNTELPTR)                                0787
         AL    R9,FW08                                             0787
         LR    SNTELPTR,R9                                         0787
*         END;                                                     0788
*     END;                                                         0789
*   END;                            /* END OF SNTAB UPDATE PROCEDURE */
@EL00006 DS    0H                                                  0790
@EF00006 DS    0H                                                  0790
@ER00006 LM    R14,R7,@SA00006                                     0790
         LM    R9,R12,@SA00006+40                                  0790
         BR    R14                                                 0790
*                                                                  0791
*   /*****************************************************************/
*   /*                                                               */
*   /* SVTABUPT - SVTABUPT ROUTINE WILL CREATE OR ASSIGN A NEW VALUE */
*   /* ELEMENT FOR THE VALUE SPECIFIED IN THE SNTAB/SVTAB PARM BLOCK */
*   /* UPON ENTRY THE SNTELPTR IS POINTING TO THE SNTAB ELEMENT      */
*   /* REQUIRING A VALUE ELEMENT                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0791
*SVTABUPT:                                                         0791
*   PROC;                                                          0791
SVTABUPT STM   R14,R7,@SA00007                                     0791
         STM   R9,R12,@SA00007+40                                  0791
*   TOBEADD=SNTELPTR;                                              0792
         LR    TOBEADD,SNTELPTR                                    0792
*   SVTABPTR=SVTABFST;                                             0793
*                                                                  0793
         L     R6,LSDPTR(,ECDAPTR)                                 0793
         L     R6,LSDEXEC-LSD(,R6)                                 0793
         L     R6,SVTABFST(,R6)                                    0793
         ST    R6,SVTABPTR                                         0793
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST DETERMINE IF THE NEW VALUE WILL FIT IN THE OLD SLOT     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0794
*   IF VALLNG>SVTORIG THEN          /* IF A NEW ELEMENT MUST BE      */
         L     R14,SNTVLPTR(,SNTELPTR)                             0794
         LH    R15,SVTORIG(,R14)                                   0794
         C     R15,VALLNG                                          0794
         BNL   @RF00794                                            0794
*     DO;                           /* ASSIGNED THEN ADD THE CURRENT */
*       IF SNTVLPTR^=ADDR(SVTELFST) THEN/* ELEMENT LENGTH TO THE     */
         LA    R0,SVTELFST(,R6)                                    0796
         CR    R14,R0                                              0796
         BE    @RF00796                                            0796
*         SVTABFRE=SVTABFRE+SVTORIG+LENGTH(SVTELEM);/* FREE SPACE    */
*                                                                  0797
         AL    R15,SVTABFRE(,R6)                                   0797
         AL    R15,FW04                                            0797
         ST    R15,SVTABFRE(,R6)                                   0797
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE NEW VALUE WILL NOT FIT IN THE EXISTING SVTAB       */
*       /* ELEMENT THEN A NEW ELEMENT MUST BE ASSIGNED FROM THE      */
*       /* REMAINING SPACE IN THE SVTAB.                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0798
*       IF(VALLNG+LENGTH(SVTELEM))>(SVTABLNG-SVTABUSE) THEN/* IF   0798
*                                      VALUE                         */
@RF00796 L     R6,VALLNG                                           0798
         LA    R14,4                                               0798
         ALR   R14,R6                                              0798
         L     R15,SVTABPTR                                        0798
         L     R0,SVTABLNG(,R15)                                   0798
         L     R1,SVTABUSE(,R15)                                   0798
         LR    R2,R0                                               0798
         SLR   R2,R1                                               0798
         CR    R14,R2                                              0798
         BNH   @RF00798                                            0798
*         DO;                       /* WILL NOT FIX IN EXISTING SVTAB
*                                      THEN WE WILL HAVE TO GET A NEW
*                                      SVTAB                         */
*           GETAMT=SVTABUSE-SVTABFRE;                              0800
         SL    R1,SVTABFRE(,R15)                                   0800
         ST    R1,GETAMT                                           0800
*           GETAMT=MAX(GETAMT,SVTABLNG);/* SELECT THE MAXIMUM OF THE
*                                      AMOUNT CALCULATED ABOVE AND 0801
*                                      THE LENGTH OF THE CURRENT   0801
*                                      SVTAB TABLE                   */
         CR    R1,R0                                               0801
         BNL   *+6
         LR    R1,R0                                               0801
         ST    R1,GETAMT                                           0801
*           GETAMT=GETAMT+MAX(GETAMT/2,VALLNG+GAS);                0802
         LR    R14,R1                                              0802
         SRDA  R14,32                                              0802
         D     R14,FW02                                            0802
         AL    R6,FW300                                            0802
         CR    R15,R6                                              0802
         BNL   *+6
         LR    R15,R6                                              0802
         ALR   R1,R15                                              0802
         ST    R1,GETAMT                                           0802
*           RFY                                                    0803
*             R15 RSTD;                                            0803
*           DO;                     /* GETMAIN (EC) LV(GETAMT)     0804
*                                      A(GETADR) SP(78) RTCD(R15)    */
*             RESPECIFY                                            0805
*              (R1,                                                0805
*               R15) RESTRICTED;                                   0805
*             I004=I004&&I004;      /* INIT LIST                     */
         XC    I004(10),I004                                       0806
*             I00404='20'X;         /* TYPE                          */
         MVI   I00404,X'20'                                        0807
*             I00401=GETAMT;        /* LENGTH                        */
         L     R6,GETAMT                                           0808
         ST    R6,I00401                                           0808
*             I00403=ADDR(GETADR);  /* ADDR OF ADDR LIST             */
         LA    R14,GETADR                                          0809
         STCM  R14,7,I00403                                        0809
*             I00405=78;            /* SUBPOOL VALUE                 */
         MVI   I00405,X'4E'                                        0810
*             R1=ADDR(I004);        /* REG1 POINTS TO LIST           */
         LA    R1,I004                                             0811
*             SVC(4);               /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0812
*             R15=R15;              /* SET RETURN CODE               */
*             RESPECIFY                                            0814
*              (R1,                                                0814
*               R15) UNRESTRICTED;                                 0814
*           END;                    /* GETMAIN (EC) LV(GETAMT)     0815
*                                      A(GETADR) SP(78) RTCD(R15)    */
*           IF R15^=CON0 THEN                                      0816
         LTR   R15,R15                                             0816
         BZ    @RF00816                                            0816
*             DO;                                                  0817
*               RFY                                                0818
*                 R15 UNRSTD;                                      0818
*               EXMSGID=M511;                                      0819
         MVC   EXMSGID(4),$MSGM511                                 0819
*               CT431RET=CON16;                                    0820
         MVC   CT431RET(4),FW16                                    0820
*               NOTEXEC=YES;                                       0821
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0821
*               CALL MSGRTN;                                       0822
         BAL   R14,MSGRTN                                          0822
*               STABERR=YES;                                       0823
         OI    STABERR,B'10000000'                                 0823
*               RETURN;                                            0824
@EL00007 DS    0H                                                  0824
@EF00007 DS    0H                                                  0824
@ER00007 LM    R14,R7,@SA00007                                     0824
         LM    R9,R12,@SA00007+40                                  0824
         BR    R14                                                 0824
*             END;                                                 0825
*           ELSE                    /* INITIAL SVTAB HEADER FIELDS   */
*             DO;                   /* IN THE NEW BLOCK              */
@RF00816 DS    0H                                                  0827
         L     R2,GETADR
         L     R3,GETAMT
         XR    R4,R4
         XR    R5,R5
         MVCL  R2,R4
*               GETADR->SVTABNXT=CON0;                             0827
         SLR   R4,R4                                               0827
         L     R5,GETADR                                           0827
         ST    R4,SVTABNXT(,R5)                                    0827
*               GETADR->SVTABLNG=GETAMT;                           0828
         L     R15,GETAMT                                          0828
         ST    R15,SVTABLNG(,R5)                                   0828
*               GETADR->SVTABUSE=LENGTH(SVTAB);                    0829
         LA    R0,16                                               0829
         ST    R0,SVTABUSE(,R5)                                    0829
*               GETADR->SVTABFRE=CON0;                             0830
         ST    R4,SVTABFRE(,R5)                                    0830
*               SVTABNXT=GETADR;                                   0831
         L     R1,SVTABPTR                                         0831
         ST    R5,SVTABNXT(,R1)                                    0831
*               NEWVELEM=SVTABNXT+LENGTH(SVTAB);/* FITST ASSIGNABLE
*                                      ELEMENT IN NEW SVTAB          */
         ALR   R0,R5                                               0832
         LR    NEWVELEM,R0                                         0832
*               NEWVELEM->SVTLNG=CON0;/* CREATE A NULL ELEMENT AS    */
         STH   R4,SVTLNG(,NEWVELEM)                                0833
*               NEWVELEM->SVTORIG=CON0;/* FIRST ELEMENT IN NEW SVTAB */
         STH   R4,SVTORIG(,NEWVELEM)                               0834
*               NEWVELEM=NEWVELEM+LENGTH(SVTELEM);                 0835
         LA    R4,4                                                0835
         ALR   NEWVELEM,R4                                         0835
*               SVTABNXT->SVTABUSE=SVTABNXT->SVTABUSE+LENGTH(SVTELEM);
         AL    R4,SVTABUSE(,R5)                                    0836
         ST    R4,SVTABUSE(,R5)                                    0836
*               SAVSNTAB=SNTABPTR;  /* SAVE ADDRESS OF CURRENT SNTAB
*                                      ESTABLISH BASE TO FIRST SNTAB */
         L     R14,SNTABPTR                                        0837
         ST    R14,SAVSNTAB                                        0837
*               SNTABPTR=SNTABFST;  /* AND FIRST SNTAB ELEMENT       */
         L     R1,LSDPTR(,ECDAPTR)                                 0838
         L     R1,LSDEXEC-LSD(,R1)                                 0838
         L     R2,SNTABFST(,R1)                                    0838
         ST    R2,SNTABPTR                                         0838
*               SNTELPTR=SNTABPTR+LENGTH(SNTAB);                   0839
         AL    R2,FW12                                             0839
         LR    SNTELPTR,R2                                         0839
*               RFY                                                0840
*                (R2) RSTD;                                        0840
*               R2=NEWVELEM;        /* REGISTER TWO IS START OF FREE
*                                      SPACE IN NEW SVTAB, UPDATED 0841
*                                      AUTO BY MVCL                  */
*                                                                  0841
         LR    R2,NEWVELEM                                         0841
*               /*****************************************************/
*               /*                                                   */
*               /* COPY VALUE ELEMENTS TO NEW TABLE                  */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0842
*               LASTELMT=ECDALNEL+ECDALNEL->SNTLNG+LENGTH(SNTELEM);
         L     R3,ECDALNEL(,ECDAPTR)                               0842
         LH    LASTELMT,SNTLNG(,R3)                                0842
         ALR   LASTELMT,R3                                         0842
         AL    LASTELMT,FW08                                       0842
*               DO WHILE SNTELPTR^=LASTELMT;                       0843
         B     @DE00843                                            0843
@DL00843 DS    0H                                                  0844
*                 IF SNTELPTR^=TOBEADD THEN/* IF WE ARE AT THE     0844
*                                      ELEMENT                       */
         CR    SNTELPTR,TOBEADD                                    0844
         BE    @RF00844                                            0844
*                   DO;             /* THAT IS CHANGING THEN BYPASS
*                                      THE VALUE MOVE                */
*                     IF SNTVLPTR^=ADDR(SVTELFST) THEN/* IF THIS IS
*                                      NOT                           */
         L     R3,SNTVLPTR(,SNTELPTR)                              0846
         L     R1,SVTABPTR                                         0846
         LA    R4,SVTELFST(,R1)                                    0846
         CR    R3,R4                                               0846
         BE    @RF00846                                            0846
*                       DO;         /* A NULL VALUE THEN COPY VALUE  */
*                         RFY                                      0848
*                          (R3,                                    0848
*                           R4,                                    0848
*                           R5) RSTD;                              0848
*                         R4=SNTVLPTR;                             0849
         L     R14,SNTVLPTR(,SNTELPTR)                             0849
         LR    R4,R14                                              0849
*                         R3=SVTORIG+LENGTH(SVTELEM);              0850
         LA    R3,4                                                0850
         AH    R3,SVTORIG(,R14)                                    0850
*                         R5=R3;                                   0851
         LR    R5,R3                                               0851
*                         VLPTR=R2;                                0852
         ST    R2,VLPTR                                            0852
*                         MVCL(R2,R4);                             0853
         MVCL  R2,R4                                               0853
*                         SVTABNXT->SVTABUSE=SVTABNXT->SVTABUSE+SVTORIG
*                             +LENGTH(SVTELEM);                    0854
         L     R1,SVTABPTR                                         0854
         L     R14,SVTABNXT(,R1)                                   0854
         L     R15,SNTVLPTR(,SNTELPTR)                             0854
         LH    R0,SVTORIG(,R15)                                    0854
         L     R1,SVTABUSE(,R14)                                   0854
         ALR   R1,R0                                               0854
         AL    R1,FW04                                             0854
         ST    R1,SVTABUSE(,R14)                                   0854
*                         SVTABNXT->SVTABFRE=SVTABNXT->SVTABFRE+(  0855
*                             SVTORIG-SVTLNG);                     0855
         SH    R0,SVTLNG(,R15)                                     0855
         AL    R0,SVTABFRE(,R14)                                   0855
         ST    R0,SVTABFRE(,R14)                                   0855
*                         SNTVLPTR=VLPTR;                          0856
         L     R15,VLPTR                                           0856
         ST    R15,SNTVLPTR(,SNTELPTR)                             0856
*                         RFY                                      0857
*                          (R3,                                    0857
*                           R4,                                    0857
*                           R5) UNRSTD;                            0857
*                       END;                                       0858
*                     ELSE          /* OTHERWISE IF NULL ASSIGN VALUE*/
*                       SNTVLPTR=SVTABNXT+LENGTH(SVTAB);/* TO FIRST
*                                      ENTRY IN NEW SVTAB            */
         B     @RC00846                                            0859
@RF00846 LA    R3,16                                               0859
         L     R1,SVTABPTR                                         0859
         AL    R3,SVTABNXT(,R1)                                    0859
         ST    R3,SNTVLPTR(,SNTELPTR)                              0859
*                   END;                                           0860
@RC00846 DS    0H                                                  0861
*                 IF SNTLAST=YES THEN/* IF AT LAST ELEMENT IN SNTAB  */
@RF00844 TM    SNTLAST(SNTELPTR),B'00000001'                       0861
         BNO   @RF00861                                            0861
*                   DO;             /* THEN UPDATE TO NEXT SNTAB     */
*                     SNTABPTR=SNTABNXT;/* AND ITS FIRST ELEMENT     */
         L     R3,SNTABPTR                                         0863
         L     R3,SNTABNXT(,R3)                                    0863
         ST    R3,SNTABPTR                                         0863
*                     SNTELPTR=SNTABPTR+LENGTH(SNTAB);             0864
         AL    R3,FW12                                             0864
         LR    SNTELPTR,R3                                         0864
*                   END;                                           0865
*                 ELSE              /* OTHERWISE UPDATE TO NEXT      */
*                   SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);/*    0866
*                                      ELEMENT IN THE CURRENT SNTAB
*                                      TABLE                         */
         B     @RC00861                                            0866
@RF00861 LR    R3,SNTELPTR                                         0866
         AH    R3,SNTLNG(,SNTELPTR)                                0866
         AL    R3,FW08                                             0866
         LR    SNTELPTR,R3                                         0866
*               END;                                               0867
@RC00861 DS    0H                                                  0867
@DE00843 CR    SNTELPTR,LASTELMT                                   0867
         BE    LBL0154E
         L     R3,SNTVLPTR(,SNTELPTR)
         LTR   R3,R3
         BNZ   @DL00843
*               RFY                                                0868
*                 R2 UNRSTD;                                       0868
*               FREEADR=SVTABPTR;   /* FREE THE OLD SVTAB WHEN ALL   */
LBL0154E L     R6,SVTABPTR                                         0869
         ST    R6,FREEADR                                          0869
*               FREEAMT=SVTABLNG;   /* VALUES HAVE BEEN COPIED       */
         L     R8,SVTABLNG(,R6)                                    0870
         ST    R8,FREEAMT                                          0870
*               SVTABFST=SVTABNXT;                                 0871
         L     R1,LSDPTR(,ECDAPTR)                                 0871
         L     R1,LSDEXEC-LSD(,R1)                                 0871
         L     R6,SVTABNXT(,R6)                                    0871
         ST    R6,SVTABFST(,R1)                                    0871
*               SVTABPTR=SVTABFST;                                 0872
         ST    R6,SVTABPTR                                         0872
*               DO;                 /* FREEMAIN (E) LV(FREEAMT)    0873
*                                      A(FREEADR) SP(78)             */
*                 RESPECIFY                                        0874
*                  (R1) RESTRICTED;                                0874
*                 I005=I005&&I005;  /* INIT LIST                     */
         XC    I005(10),I005                                       0875
*                 I00505='00'X;     /* SET TYPE                      */
         MVI   I00505,X'00'                                        0876
*                 I00502=FREEAMT;   /* LENGTH                        */
         STCM  R8,7,I00502                                         0877
*                 I00504=ADDR(FREEADR);/* ADDR OF ADDR LIST          */
         LA    R8,FREEADR                                          0878
         STCM  R8,7,I00504                                         0878
*                 I00506=78;        /* SUBPOOL VALUE                 */
         MVI   I00506,X'4E'                                        0879
*                 R1=ADDR(I005);/* REG1 POINTS TO LIST               */
         LA    R1,I005                                             0880
*                 SVC(5);           /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0881
*                 RESPECIFY                                        0882
*                  (R1) UNRESTRICTED;                              0882
*               END;                /* FREEMAIN (E) LV(FREEAMT)    0883
*                                      A(FREEADR) SP(78)             */
*             END;                                                 0884
*           SNTABPTR=SAVSNTAB;      /* RESTORE TO CURRENT SNTAB      */
         L     R6,SAVSNTAB                                         0885
         ST    R6,SNTABPTR                                         0885
*           SNTELPTR=TOBEADD;       /* RESTORE SNTAB ELEMENT BASE    */
         LR    SNTELPTR,TOBEADD                                    0886
*         END;                                                     0887
*       SVTELPTR=SVTABFST+SVTABUSE; /* PLACE NEW ELEMENT AT END OF   */
@RF00798 L     R6,LSDPTR(,ECDAPTR)                                 0888
         L     R6,LSDEXEC-LSD(,R6)                                 0888
         L     R14,SVTABPTR                                        0888
         L     R15,SVTABUSE(,R14)                                  0888
         L     SVTELPTR,SVTABFST(,R6)                              0888
         ALR   SVTELPTR,R15                                        0888
*       SNTVLPTR=SVTELPTR;          /* THE OLD (OR NEW) TABLE        */
         ST    SVTELPTR,SNTVLPTR(,SNTELPTR)                        0889
*       SVTORIG=VALLNG;             /* NEW ELEMENTS ARE EXACT IN     */
         L     R6,SNTVLPTR(,SNTELPTR)                              0890
         L     R9,VALLNG                                           0890
         STH   R9,SVTORIG(,R6)                                     0890
*       SVTLNG=SVTORIG;             /* SIZE                          */
         STH   R9,SVTLNG(,R6)                                      0891
*       SVTABUSE=SVTABUSE+SVTORIG+LENGTH(SVTELEM);                 0892
         ALR   R15,R9                                              0892
         AL    R15,FW04                                            0892
         ST    R15,SVTABUSE(,R14)                                  0892
*     END;                                                         0893
*                                                                  0893
*   /*****************************************************************/
*   /*                                                               */
*   /* PLACE THE NEW VALUE INTO THE SVTAB ELEMENT                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0894
*   SVTABFRE=SVTABFRE-(VALLNG-SVTLNG);/* ADJUST THE FREE AREA TO TAKE
*                                      INTO ACCOUNT ANY DIFFERENCE IN
*                                      THE ORIGIONAL LENGTH          */
@RF00794 L     R6,SVTABPTR                                         0894
         L     R9,VALLNG                                           0894
         L     R14,SNTVLPTR(,SNTELPTR)                             0894
         LR    R15,R9                                              0894
         SH    R15,SVTLNG(,R14)                                    0894
         LCR   R15,R15                                             0894
         AL    R15,SVTABFRE(,R6)                                   0894
         ST    R15,SVTABFRE(,R6)                                   0894
*   SVTLNG=VALLNG;                  /* SET NEW LENGTH                */
         STH   R9,SVTLNG(,R14)                                     0895
*   RFY                                                            0896
*    (R2,                                                          0896
*     R3,                                                          0896
*     R4,                                                          0896
*     R5) RSTD;                                                    0896
*   R2=ADDR(SVTDATA);               /* MOVE TO ADDRESS               */
         LA    R2,SVTDATA(,R14)                                    0897
*   R4=VALADR;                      /* MOVE FROM ADDRESS             */
         L     R4,VALADR                                           0898
*   R3=VALLNG;                      /* LENGTH OF MOVE                */
         LR    R3,R9                                               0899
*   R5=R3;                                                         0900
         LR    R5,R3                                               0900
*   MVCL(R2,R4);                    /* MOVE DATA                     */
         MVCL  R2,R4                                               0901
*   RFY                                                            0902
*    (R2,                                                          0902
*     R3,                                                          0902
*     R4,                                                          0902
*     R5) UNRSTD;                                                  0902
*   END SVTABUPT;                                                  0903
         B     @EL00007                                            0903
*                                                                  0904
*   /*****************************************************************/
*   /*                                                               */
*   /* VALUECHK - LOCATES THE START AND ENDING POSITIONS FOR THE     */
*   /* VALUE OF A KEYWORD AND VERIFIES THAT IT IS EITHER A QUOTED    */
*   /* STRING OR A CHARACTER STRING                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0904
*VALUECHK:                                                         0904
*   PROC;                                                          0904
VALUECHK STM   R14,R5,@SA00008                                     0904
         STM   R7,R12,@SA00008+32                                  0904
*   LFPARCTR=CON1;                                                 0905
         LA    R8,1                                                0905
         LR    LFPARCTR,R8                                         0905
*   VALSTR=CON0;                                                   0906
         SLR   R3,R3                                               0906
         ST    R3,VALSTR                                           0906
*   VALEND=CON0;                                                   0907
         ST    R3,VALEND                                           0907
*   ICTR=ICTR+CON1;                 /* INCREMENT PAST LEFT PAREN     */
         ALR   ICTR,R8                                             0908
*   CALL SKIPSEP;                                                  0909
         BAL   R14,SKIPSEP                                         0909
*   IF ICTR^>LINELNG THEN                                          0910
         C     ICTR,LINELNG                                        0910
         BH    @RF00910                                            0910
*     DO;                                                          0911
*       IF RECORD(ICTR)=QUOTE THEN  /* QUOTED STRING PROCESSING      */
         L     R3,ECDAIREC(,ECDAPTR)                               0912
         ALR   R3,ICTR                                             0912
         CLI   RECORD-1(R3),C''''                                  0912
         BNE   @RF00912                                            0912
*         DO;                                                      0913
*           ICTR=ICTR+CON1;         /* INCREMENT PAST FIRST QUOTE    */
         LA    R8,1                                                0914
         ALR   ICTR,R8                                             0914
*           VALSTR=ICTR;            /* SAVE START OF VALUE           */
         ST    ICTR,VALSTR                                         0915
*           CYCLE=CON1;             /* LOOP CONTROL SEARCH FOR VALUE
*                                      END                           */
         LR    CYCLE,R8                                            0916
*           DO ICTR=ICTR TO LINELNG WHILE CYCLE=CON1;              0917
         B     @DE00917                                            0917
@DL00917 LA    R8,1                                                0917
         CR    CYCLE,R8                                            0917
         BNE   @DC00917                                            0917
*             IF RECORD(ICTR)=QUOTE THEN/* CHECK FOR ENDING QUOTE    */
         L     R14,ECDAIREC(,ECDAPTR)                              0918
         LR    R15,R14                                             0918
         ALR   R15,ICTR                                            0918
         CLI   RECORD-1(R15),C''''                                 0918
         BNE   @RF00918                                            0918
*               DO;                 /* IF THIS IS A DOUBLE QUOTE THEN
*                                      REMOVE ONE FROM VALUE AND   0919
*                                      CONTINUE SEARCH FOR VALUE END */
*                 IF ICTR<LINELNG&RECORD(ICTR+CON1)=QUOTE THEN     0920
         L     R15,LINELNG                                         0920
         CR    ICTR,R15                                            0920
         BNL   @RF00920                                            0920
         LR    R1,R14                                              0920
         ALR   R1,ICTR                                             0920
         CLI   RECORD(R1),C''''                                    0920
         BNE   @RF00920                                            0920
*                   DO;                                            0921
*                     RFY                                          0922
*                      (R2,                                        0922
*                       R3,                                        0922
*                       R4,                                        0922
*                       R5) RSTD;                                  0922
*                     R2=ADDR(RECORD(ICTR));                       0923
         LA    R2,RECORD-1(ICTR,R14)                               0923
*                     R4=ADDR(RECORD(ICTR+CON1));                  0924
         LA    R4,RECORD(ICTR,R14)                                 0924
*                     R3=LINELNG-ICTR+CON1;                        0925
         SLR   R15,ICTR                                            0925
         ALR   R15,R8                                              0925
         LR    R3,R15                                              0925
*                     R5=R3;                                       0926
         LR    R5,R3                                               0926
*                     MVCL(R2,R4);                                 0927
         MVCL  R2,R4                                               0927
*                     RFY                                          0928
*                      (R2,                                        0928
*                       R3,                                        0928
*                       R4,                                        0928
*                       R5) UNRSTD;                                0928
*                     LINELNG=LINELNG-CON1;                        0929
         L     R8,LINELNG                                          0929
         BCTR  R8,0                                                0929
         ST    R8,LINELNG                                          0929
*                   END;                                           0930
*                 ELSE              /* IF NOT DOUBLE QUOTES THEN THIS*/
*                   DO;             /* IS THE VALUE END              */
         B     @RC00920                                            0931
@RF00920 DS    0H                                                  0932
*                     VALEND=ICTR-CON1;                            0932
         LR    R8,ICTR                                             0932
         BCTR  R8,0                                                0932
         ST    R8,VALEND                                           0932
*                     CYCLE=CON0;                                  0933
         SLR   CYCLE,CYCLE                                         0933
*                     ICTR=ICTR+CON1;                              0934
         AL    ICTR,FW01                                           0934
*                     CALL SKIPSEP; /* FIND END OF VALUE (END PAREN) */
         BAL   R14,SKIPSEP                                         0935
*                     IF ICTR<=LINELNG THEN/* IF CLOSING PAREN NOT   */
         C     ICTR,LINELNG                                        0936
         BH    @RF00936                                            0936
*                       DO;                                        0937
*                         IF RECORD(ICTR)^=RTPAREN THEN/* FOUND THEN
*                                      IT                            */
         L     R8,ECDAIREC(,ECDAPTR)                               0938
         LR    R1,R8                                               0938
         ALR   R1,ICTR                                             0938
         CLI   RECORD-1(R1),C')'                                   0938
         BE    @RF00938                                            0938
*                           DO;     /* IS AN ERROR                   */
*                             EXMSGID=M508;                        0940
         MVC   EXMSGID(4),$MSGM508                                 0940
*                             MVAR(1)=PARMADR;                     0941
         L     R2,PARMADR                                          0941
         ST    R2,MVAR                                             0941
*                             MVARLEN(1)=ADDR(RECORD(ICTR))-PARMADR+
*                                 CON1;                            0942
         LA    R8,RECORD-1(ICTR,R8)                                0942
         SLR   R8,R2                                               0942
         AL    R8,FW01                                             0942
         STC   R8,MVARLEN                                          0942
*                             NOTEXEC=YES;                         0943
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0943
*                             CALL MSGRTN;                         0944
         BAL   R14,MSGRTN                                          0944
*                           END;                                   0945
*                       END;                                       0946
@RF00938 DS    0H                                                  0947
*                   END;                                           0947
@RF00936 DS    0H                                                  0948
*               END;                                               0948
@RC00920 DS    0H                                                  0949
*           END;                    /* IF WE DID NOT FIND END OF THE */
@RF00918 AL    ICTR,FW01                                           0949
@DE00917 C     ICTR,LINELNG                                        0949
         BNH   @DL00917                                            0949
@DC00917 DS    0H                                                  0950
*           IF CYCLE=CON1 THEN      /* VALUE THEN ASSUME END AT      */
         C     CYCLE,FW01                                          0950
         BNE   @RF00950                                            0950
*             DO;                   /* RECORD END                    */
*               EXMSGID=M527;                                      0952
         MVC   EXMSGID(4),$MSGM527                                 0952
*               MVAR(1)=PARMADR;                                   0953
         L     R9,PARMADR                                          0953
         ST    R9,MVAR                                             0953
*               MVARLEN(1)=ADDR(RECORD(ICTR))-PARMADR;             0954
         L     R1,ECDAIREC(,ECDAPTR)                               0954
         LA    R8,RECORD-1(ICTR,R1)                                0954
         SLR   R8,R9                                               0954
         STC   R8,MVARLEN                                          0954
*               CALL MSGRTN;                                       0955
         BAL   R14,MSGRTN                                          0955
*               VALEND=ICTR-CON1;                                  0956
         LR    R9,ICTR                                             0956
         BCTR  R9,0                                                0956
         ST    R9,VALEND                                           0956
*             END;                  /* IF THE VALUE WAS A NULL QUOTED*/
*           IF VALEND<VALSTR THEN   /* STRING THEN MAKE IT LOOK LIKE */
@RF00950 L     R14,VALEND                                          0958
         C     R14,VALSTR                                          0958
         BNL   @RF00958                                            0958
*             DO;                   /* WE FOUND NOTHING              */
*               VALEND=CON0;                                       0960
         SLR   R15,R15                                             0960
         ST    R15,VALEND                                          0960
*               VALSTR=CON0;                                       0961
         ST    R15,VALSTR                                          0961
*             END;                                                 0962
*         END;                                                     0963
*                                                                  0963
*       /*************************************************************/
*       /*                                                           */
*       /* CHARACTER STRING VALUE PROCESSING                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0964
*       ELSE                                                       0964
*         DO;                                                      0964
         B     @RC00912                                            0964
@RF00912 DS    0H                                                  0965
*           VALSTR=ICTR;            /* SAVE VALUE START              */
         ST    ICTR,VALSTR                                         0965
*           CYCLE=CON1;                                            0966
         LA    CYCLE,1                                             0966
*           DO ICTR=ICTR TO LINELNG WHILE CYCLE=CON1;              0967
         B     @DE00967                                            0967
@DL00967 LA    R3,1                                                0967
         CR    CYCLE,R3                                            0967
         BNE   @DC00967                                            0967
*             IF RECORD(ICTR)=LFPAREN THEN/* IF LEFT PAREN FOUND UP  */
         L     R8,ECDAIREC(,ECDAPTR)                               0968
         ALR   R8,ICTR                                             0968
         CLI   RECORD-1(R8),C'('                                   0968
         BNE   @RF00968                                            0968
*               LFPARCTR=LFPARCTR+CON1;/* COUNT                      */
         ALR   LFPARCTR,R3                                         0969
*             ELSE                                                 0970
*               IF RECORD(ICTR)=RTPAREN THEN/* IF THIS IS A RIGHT    */
         B     @RC00968                                            0970
@RF00968 L     R3,ECDAIREC(,ECDAPTR)                               0970
         ALR   R3,ICTR                                             0970
         CLI   RECORD-1(R3),C')'                                   0970
         BNE   @RF00970                                            0970
*                 DO;               /* PAREN THEN DETERMINE IF WE ARE
*                                      AT END OF THE VALUE           */
*                   LFPARCTR=LFPARCTR-CON1;                        0972
         BCTR  LFPARCTR,0                                          0972
*                   IF LFPARCTR=CON0 THEN                          0973
         LTR   LFPARCTR,LFPARCTR                                   0973
         BNZ   @RF00973                                            0973
*                     DO;                                          0974
*                       VALEND=ICTR-CON1;                          0975
         LR    R8,ICTR                                             0975
         BCTR  R8,0                                                0975
         ST    R8,VALEND                                           0975
*                       CYCLE=CON0;                                0976
         SLR   CYCLE,CYCLE                                         0976
*                     END;                                         0977
*                 END;                                             0978
*               ELSE                /* IF THIS IS A DELIMITER THEN   */
*                 DO;               /* IT IS END OF THE VALUE        */
         B     @RC00970                                            0979
@RF00970 DS    0H                                                  0980
*                   IF RECORD(ICTR)=BLANK RECORD(ICTR)=COMMA RECORD(
*                       ICTR)=TAB (RECORD(ICTR)=SLASH&(ICTR<LINELNG&
*                       RECORD(ICTR:ICTR+CON1)=SLASHAST)) THEN     0980
         L     R3,ECDAIREC(,ECDAPTR)                               0980
         LR    R8,R3                                               0980
         ALR   R8,ICTR                                             0980
         CLI   RECORD-1(R8),C' '                                   0980
         BE    @RT00980                                            0980
         LR    R8,R3                                               0980
         ALR   R8,ICTR                                             0980
         CLI   RECORD-1(R8),C','                                   0980
         BE    @RT00980                                            0980
         LR    R8,R3                                               0980
         ALR   R8,ICTR                                             0980
         CLI   RECORD-1(R8),X'05'                                  0980
         BE    @RT00980                                            0980
         LR    R8,R3                                               0980
         ALR   R8,ICTR                                             0980
         CLI   RECORD-1(R8),C'/'                                   0980
         BNE   @RF00980                                            0980
         C     ICTR,LINELNG                                        0980
         BNL   @RF00980                                            0980
         ALR   R3,ICTR                                             0980
         CLC   RECORD-1(2,R3),SLSHASTR                             0980
         BNE   @RF00980                                            0980
@RT00980 DS    0H                                                  0981
*                     DO;                                          0981
*                       CYCLE=CON0;                                0982
         SLR   CYCLE,CYCLE                                         0982
*                       VALEND=ICTR-CON1;                          0983
         LR    R3,ICTR                                             0983
         BCTR  R3,0                                                0983
         ST    R3,VALEND                                           0983
*                       CALL SKIPSEP;                              0984
         BAL   R14,SKIPSEP                                         0984
*                       IF ICTR<=LINELNG THEN                      0985
         C     ICTR,LINELNG                                        0985
         BH    @RF00985                                            0985
*                         DO;       /* IF NO ENDING PAREN COULD BE   */
*                           IF RECORD(ICTR)^=RTPAREN THEN/* THEN   0987
*                                      NOTIFY                        */
         L     R8,ECDAIREC(,ECDAPTR)                               0987
         LR    R3,R8                                               0987
         ALR   R3,ICTR                                             0987
         CLI   RECORD-1(R3),C')'                                   0987
         BE    @RF00987                                            0987
*                             DO;   /* USER AND RETURN TO SYNTAX ANY */
*                               EXMSGID=M508;/* REMAINING PARMS      */
         MVC   EXMSGID(4),$MSGM508                                 0989
*                               MVAR(1)=PARMADR;                   0990
         L     R3,PARMADR                                          0990
         ST    R3,MVAR                                             0990
*                               MVARLEN(1)=ADDR(RECORD(ICTR))-PARMADR+
*                                   CON1;                          0991
         LA    R8,RECORD-1(ICTR,R8)                                0991
         SLR   R8,R3                                               0991
         AL    R8,FW01                                             0991
         STC   R8,MVARLEN                                          0991
*                               NOTEXEC=YES;                       0992
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0992
*                               CALL MSGRTN;                       0993
         BAL   R14,MSGRTN                                          0993
*                             END;                                 0994
*                         END;                                     0995
@RF00987 DS    0H                                                  0996
*                     END;                                         0996
@RF00985 DS    0H                                                  0997
*                 END;                                             0997
@RF00980 DS    0H                                                  0998
*           END;                    /* IF WE DID NOT FIND END OF     */
@RC00970 DS    0H                                                  0998
@RC00968 AL    ICTR,FW01                                           0998
@DE00967 C     ICTR,LINELNG                                        0998
         BNH   @DL00967                                            0998
@DC00967 DS    0H                                                  0999
*           IF CYCLE=CON1 THEN      /* VALUE THEN ASSUME END AT END  */
         C     CYCLE,FW01                                          0999
         BNE   @RF00999                                            0999
*             VALEND=ICTR-CON1;     /* OF RECORD                     */
         LR    R9,ICTR                                             1000
         BCTR  R9,0                                                1000
         ST    R9,VALEND                                           1000
*         END;                                                     1001
*     END;                                                         1002
*   END;                                                           1003
*                                                                  1003
@EL00008 DS    0H                                                  1003
@EF00008 DS    0H                                                  1003
@ER00008 LM    R14,R5,@SA00008                                     1003
         LM    R7,R12,@SA00008+32                                  1003
         BR    R14                                                 1003
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF VALUE CHECK PROCEDURE                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1004
*                                                                  1004
*   /*****************************************************************/
*   /*                                                               */
*   /* MSGRTN - THE MESSAGE ROUTINE BUILDS THE IKJEFF02 PARAMETER    */
*   /* LIST AND THEN INVOKES IKJEFF02 TO ISSUE A MESSAGE             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1004
*MSGRTN:                                                           1004
*   PROC OPTIONS(SAVEAREA);                                        1004
MSGRTN   STM   R14,R12,12(R13)                                     1004
         ST    R13,@SA00009+4                                      1004
         LA    R14,@SA00009                                        1004
         ST    R14,8(,R13)                                         1004
         LR    R13,R14                                             1004
*   MSGTABLE=MSGTABLE&&MSGTABLE;    /* INITIALIZE IKJEFF02 PARMLIST  */
         L     R6,ERRPTR                                           1005
         XC    MSGTABLE(52,R6),MSGTABLE(R6)                        1005
*   LISTPTR=ADDR(MSGCSECT);         /* START OF MESSAGE PARMS        */
         LA    R8,MSGCSECT(,R6)                                    1006
         ST    R8,LISTPTR(,R6)                                     1006
*   TMCTPTR=CPPLPTR;                /* ADDRESS OF THE CPPL           */
         L     R14,CPPLPTR(,ECDAPTR)                               1007
         ST    R14,TMCTPTR(,R6)                                    1007
*   ECBPTR=ADDR(ECB);               /* DUMMY ECB ADDRESS             */
         LA    R15,ECB                                             1008
         ST    R15,ECBPTR(,R6)                                     1008
*   MSGCSECT=ADDR(IKJCT435);        /* IKJCT435 IS MESSAGE CSECT     */
         L     R0,IKJCT435                                         1009
         ST    R0,MSGCSECT(,R6)                                    1009
*   MTPUTLSW=YES;                   /* PUTLINE MESSAGE REUESTED      */
*   MTHEXSW=YES;                    /* PRINT RETURN CODES IN HEX     */
         OI    MTPUTLSW(R6),B'01010000'                            1011
*   MSGID=EXMSGID;                  /* ID OF THE MESSAGE TO BE ISSUED*/
         MVC   MSGID(4,R6),EXMSGID                                 1012
*   DO MCTR=1 TO DIM(MVAR);         /* INITIALIZE INSERTION VARIABLES*/
         LA    MCTR,1                                              1013
@DL01013 DS    0H                                                  1014
*     MTINSRT(MCTR)=MVAR(MCTR);     /* MVAR HAS BEEN PREVIOUSLY SET  */
         LR    R3,MCTR                                             1014
         SLA   R3,2                                                1014
         L     R6,MVAR-4(R3)                                       1014
         L     R1,ERRPTR                                           1014
         ST    R6,MTINSRT-4(R3,R1)                                 1014
*   END;                                                           1015
         AL    MCTR,FW01                                           1015
         C     MCTR,FW02                                           1015
         BNH   @DL01013                                            1015
*   RFY                                                            1016
*     R1 RSTD;                                                     1016
*   R1=ERRPTR;                      /* ADDRESS OF MSGTABLE           */
         L     R1,ERRPTR                                           1017
*   RFY                                                            1018
*     R1 UNRSTD;                                                   1018
*   DO;                             /* LINK EP(IKJEFF02)             */
*     I00601='00'X;                 /* EP/DE FLAG                    */
         MVI   I00601,X'00'                                        1020
*     I00602=ADDR(IKJEFF02);        /* ADDR OF EP/DE                 */
         LA    R6,IKJEFF02                                         1021
         STCM  R6,7,I00602                                         1021
*     I00604=0;                     /* DCB PTR                       */
         SLR   R6,R6                                               1022
         STCM  R6,7,I00604                                         1022
*     I00603='00'X;                 /* ERRET FLAG                    */
         MVI   I00603,X'00'                                        1023
*     RESPECIFY                                                    1024
*      (R15) RESTRICTED;                                           1024
*     R15=ADDR(I006);               /* ADDR OF LINK LIST             */
         LA    R15,I006                                            1025
*     SVC(6);                       /* ISSUE LINK SVC                */
         SVC   6                                                   1026
*     RESPECIFY                                                    1027
*      (R15) UNRESTRICTED;                                         1027
*   END;                            /* LINK EP(IKJEFF02) USE IKJEFF02
*                                      TO ISSUE MESSAGE              */
*   END MSGRTN;                     /* END OF MSGRTN                 */
@EL00009 L     R13,4(,R13)                                         1029
@EF00009 DS    0H                                                  1029
@ER00009 LM    R14,R12,12(R13)                                     1029
         BR    R14                                                 1029
@EL00001 L     R13,4(,R13)                                         1039
@EF00001 L     R0,@SIZDATD                                         1039
         LR    R1,R10                                              1039
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                     1039
         BR    R14                                                 1039
@DATA    DS    0H
HW03     DC    H'3'
HW13     DC    H'13'
HW21     DC    H'21'
HW69     DC    H'69'
@SM01540 MVC   SNTDATA(0,SNTELPTR),NULLVDAT(R14)
@SM01544 MVC   SVTDATA(0,SVTELPTR),PSCBUSER-PSCB(R6)
@SM01546 MVC   SVTDATA(0,SVTELPTR),CSCBPROC(R1)
@SM01548 MVC   SVTDATA(0,SVTELPTR),PROCNAME(R1)
@SM01557 MVC   IDPRNME(0,PCLCUR),SNTDATA(SNTELPTR)
@SM01559 MVC   NADAT(0,PCLCUR),SNTDATA(SNTELPTR)
@SM01561 MVC   VIDNAME(0,SBFCUR),SNTDATA(SNTELPTR)
@SC01563 CLC   SNTDATA(0,UPTPTR1),PARMDAT(R6)
@SM01567 MVC   SNTDATA(0,SNTELPTR),PARMDAT(R1)
*   DCL                                                            1030
*     FEPATCH FIXED(31) STATIC;                                    1030
*   GEN DATA DEFS(FEPATCH);                                        1031
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     R15 FIXED(31) REG(15),                                       1032
*     R0 PTR(31) REG(0),                                           1032
*     R1 PTR(31) REG(1),                                           1032
*     R2 PTR(31) REG(2),                                           1032
*     R3 PTR(31) REG(3),                                           1032
*     R4 PTR(31) REG(4),                                           1032
*     R5 PTR(31) REG(5),                                           1032
*     R6 PTR(31) REG(6),                                           1032
*     R7 PTR(31) REG(7),                                           1032
*     R8 PTR(31) REG(8),                                           1032
*     R9 PTR(31) REG(9),                                           1032
*     R14 PTR(31) REG(14),                                         1032
*     R15 PTR(31) REG(15);                                         1032
*   DCL                                                            1033
*     1 I004 DEF(ILIST) BDY(WORD),  /* LIST FOR GETMAIN              */
*      2 I00401 PTR(31),            /* LENGTH                        */
*      2 I00402 CHAR(1),            /* HIARCHY                       */
*      2 I00403 PTR(24),            /* ADDR OF ADDR LIST             */
*      2 I00404 CHAR(1),            /* TYPE OF REQUEST               */
*      2 I00405 PTR(8);             /* SUBPOOL VALUE                 */
*   DCL                                                            1034
*     1 I005 DEF(ILIST) BDY(WORD),  /* LIST FOR FREEMAIN             */
*       3 I00501 PTR(8),            /* RESERVED                      */
*       3 I00502 PTR(24),           /* LENGTH                        */
*       3 I00503 PTR(8),            /* RESERVED                      */
*       3 I00504 PTR(24),           /* ADDR OF ADDR LIST             */
*       3 I00505 BIT(8),            /* TYPE OF FREEMAIN              */
*       3 I00506 PTR(8);            /* SUBPOOL VALUE                 */
*   DCL                                                            1035
*     1 I006 DEF(ILIST),            /* DEFINE LIST                   */
*      2 I00601 CHAR(1),            /* EP/DE FLAG                    */
*      2 I00602 PTR(24),            /* EP/DE PTR                     */
*      2 I00603 CHAR(1),            /* ERRET FLAG                    */
*      2 I00604 PTR(24),            /* DCB PTR                       */
*      2 I00605 PTR(31);            /* ERRET PTR                     */
*   DCL                                                            1036
*     1 I040 DEF(ILIST) BDY(WORD),  /* LIST FOR EXTRACT              */
*      2 I04001 PTR(31),            /* ADDRESS OF USERS ANSWER AREA  */
*      2 I04002 PTR(31),            /* ADDRESS OF TCB                */
*      2 I04003 BIT(16),            /* FLAGS INDICATING TCB FIELDS TO
*                                      EXTRACT                       */
*      2 I04004 CHAR(2);            /* RESERVED SPACE                */
*   DECLARE                                                        1037
*     ILIST CHAR(12) BDY(DWORD);    /* STANDARD LIST                 */
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       1038
*     I031F FIXED(31) BASED,                                       1038
*     I031P PTR(31) BASED,                                         1038
*     I015F FIXED(15) BASED,                                       1038
*     I015P PTR(15) BASED,                                         1038
*     I008P PTR(8) BASED,                                          1038
*     I001C CHAR(1) BASED;                                         1038
*   END                                                            1039
*                                                                  1039
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
         IKJCPPL
*/*%INCLUDE SYSLIB  (IKJEXEC )                                       */
*/*%INCLUDE SYSLIB  (IKJLSD  )                                       */
         IKJLSD
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFGF)                                       */
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
         IKJECT
*/*%INCLUDE SYSLIB  (IKJPSCB )                                       */
         IKJPSCB
*/*%INCLUDE SYSLIB  (IKJPPL  )                                       */
         IKJPPL
*/*%INCLUDE SYSLIB  (CVT     )                                       */
         CVT   DSECT=YES
         IHAPSA
         IHAASCB
         IEESMCA ,                                              ZP60014
         IKJTCB ,                                               ZP60014
         IEZJSCB ,                                              ZP60014
         IEFJSSIB ,                                             ZP60014
*                                                                  1039
*       ;                                                          1039
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00009 DS    18F
@SA00007 DS    14F
@SA00006 DS    14F
@SA00005 DS    14F
@SA00008 DS    14F
@TF00001 DS    F
IKJCT431 CSECT
         DS    0F
FW01     DC    F'1'
HW01     EQU   FW01+2
FW02     DC    F'2'
HW02     EQU   FW02+2
FW04     DC    F'4'
HW04     EQU   FW04+2
FW07     DC    F'7'
FW08     DC    F'8'
FW09     DC    F'9'
FW10     DC    F'10'
FW11     DC    F'11'
HW11     EQU   FW11+2
FW12     DC    F'12'
FW15     DC    F'15'
FW16     DC    F'16'
FW31     DC    F'31'
FW56     DC    F'56'
HW56     EQU   FW56+2
FW127    DC    F'127'
FW223    DC    F'223'
FW253    DC    F'253'
FW300    DC    F'300'
FW4096   DC    F'4096'
FW8192   DC    F'8192'                                          ZP60014
FW#GRP1  DC    A(GROUPONE)                                      ZP60014
FW#SYM   DC    A(SYMBOLCT)                                      ZP60014
FW#EVAL  DC    A(NEWIMMED)                                      ZP60014
@DATD    DSECT
         DS    0D
SNTABPTR DS    A
SVTABPTR DS    A
ERRPTR   DS    A
         DS    A
TIOTPTR  DS    A
         DS    A
POSNUM   DS    F
KEYNUM   DS    F
KEYWNUM  DS    F
SBFBASE  DS    A
PCLAMT   DS    F
ECB      DS    F
VLSTANS  DS    A
JCTR     DS    F
SAVSNTAB DS    A
CT431RET DS    F
VLPTR    DS    A
VALEND   DS    F
KEYAR    DS    F
USNTABST DS    A
LINELNG  DS    F
VALSTR   DS    F
FREEADR  DS    AL4
         ORG   FREEADR
GETADR   DS    AL4
         ORG   FREEADR+4
FREEAMT  DS    FL4
         ORG   FREEAMT
GETAMT   DS    FL4
         ORG   FREEAMT+4
ERRPARMS DS    CL52
SERVBLK  DS    CL28
EXMSGID  DS    CL4
PACKLOC  DS    CL8
         DS    CL4
CVERTLOC DS    CL8
FLGCT431 DS    BL1
         ORG   FLGCT431
STABERR  DS    BL1
POSPCERR EQU   FLGCT431+0
POSERR   EQU   FLGCT431+0
KEYERR   EQU   FLGCT431+0
KEYWORD  EQU   FLGCT431+0
VALIDERR EQU   FLGCT431+0
COPYVLST EQU   FLGCT431+0
         ORG   FLGCT431+1
         DS    CL3
NTUPTPRM DS    CL20
         ORG   NTUPTPRM
PARMADR  DS    AL4
PARMLNG  DS    FL4
PARMTYPE DS    FL2
PARMOP   DS    FL2
VALADR   DS    AL4
VALLNG   DS    FL4
         ORG   NTUPTPRM+20
ILIST    DS    CL12
MVAR     DS    AL4
         ORG   MVAR+0
MVARLEN  DS    AL1
         ORG   MVARLEN+0
MVARHEX  DS    BL1
         ORG   MVAR+8
IKJCT431 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
IKJCT435 DC    V(IKJCT435)
         DS    0D
@CC01285 DC    C'VALUE FOR KEYWORD    '
@CC01304 DC    C'POSITIONAL'
$OSLEVEL DC    C'OS/VS2 3.8 EBB1102'                            ZP60014
$OUTLINE DC    C'SYSOUTLINE'                                    ZP60014
$OUTTRAP DC    C'SYSOUTTRAP'                                    ZP60014
$SYSTERM DC    C'SYSTERMID'                                     ZP60014
$SYS4SDT DC    C'SYS4SDATE'            SORTABLE DATE (4D-YR)    ZP60014
$SYS4JDT DC    C'SYS4JDATE'            JULIAN DATE (4D-YR)      ZP60014
$SYS4IDT DC    C'SYS4IDATE'            ISO-FORMAT DATE (4D-YR)  ZP60014
IKJEFF02 DC    C'IKJEFF02'
IKJEFF19 DC    C'IKJEFF19'
$DATATYP DC    C'DATATYPE'
$SYSSMFI DC    C'SYSSMFID'                                      ZP60014
$SYSOPER DC    C'SYSOPSYS'                                      ZP60014
$SYSSTIM DC    C'SYSSTIME'             SHORTENED TIME           ZP60014
$SYSSDAT DC    C'SYSSDATE'             SORTABLE DATE            ZP60014
$SYSJDAT DC    C'SYSJDATE'             JULIAN DATE              ZP60014
$SYS4DAT DC    C'SYS4DATE'             (4D-YR)                  ZP60014
$SYSLTRM DC    C'SYSLTERM'                                      ZP60014
$SYSWTRM DC    C'SYSWTERM'                                      ZP60014
$SYSTIME DC    C'SYSTIME'
$SYSPROC DC    C'SYSPROC'
$KEYWORD DC    C'KEYWORD'
$SYSSCAN DC    C'SYSSCAN'
$SYSDATE DC    C'SYSDATE'
$SYSNEST DC    C'SYSNEST'
$SYSPREF DC    C'SYSPREF'
$SYSDVAL DC    C'SYSDVAL'
$SYSPCMD DC    C'SYSPCMD'
$SYSSCMD DC    C'SYSSCMD'
$SYSICMD DC    C'SYSICMD'
$STMT1   DC    C'STMT 1'
$LASTCC  DC    C'LASTCC'
$SYSUID  DC    C'SYSUID'
$SUBSTR  DC    C'SUBSTR'
$SYSDLM  DC    C'SYSDLM'
$LENGTH  DC    C'LENGTH'
$SYSENV  DC    C'SYSENV'                                        ZP60014
$SYSJES  DC    C'SYSJES'                                        ZP60014
$SYSCPU  DC    C'SYSCPU'                                        ZP60014
$SYSSRV  DC    C'SYSSRV'                                        ZP60014
$SYSDSN  DC    C'SYSDSN'                                        ZP60014
$MAXCC   DC    C'MAXCC'
$BACK    DC    C'BACK'                                          ZP60014
$FORE    DC    C'FORE'                                          ZP60014
$MSGM511 DC    C'M511'
$MSGM507 DC    C'M507'
$MSGM530 DC    C'M530'
$MSGM527 DC    C'M527'
$MSGA507 DC    C'A507'
$MSGA529 DC    C'A529'
$MSGB529 DC    C'B529'
$EVAL    DC    C'EVAL'
$PROC    DC    C'PROC'
$MSGM506 DC    C'M506'
$MSGM508 DC    C'M508'
$MSGM509 DC    C'M509'
$NRSTR   DC    C'NR'                   KEEP WITH STR 2009-08-23 ZP60014
$STR     DC    C'STR'
$YES     DC    C'YES'
$NO      DC    C'NO'
$CHAR16  DC    C'16'
SLSHASTR DC    C'/*'
ASTRSLSH DC    C'*/'
IDMOD    DS    CL56
         ORG   IDMOD
@NM00045 DC    X'9000'
@NM00046 DC    FL2'56'
@NM00047 DC    FL4'0'
@NM00048 DC    AL1(0)
@NM00049 DC    FL2'25'
@NM00050 DC    X'0012'
@NM00051 DC    CL21'POSITIONAL PARAMETER '
@NM00052 DC    AL1(20)
@NM00053 DC    CL21'POSITIONAL PARAMETER '
         ORG   IDMOD+56
KWMOD    DS    CL11
         ORG   KWMOD
@NM00055 DC    X'4000'
@NM00056 DC    FL2'6'
@NM00057 DS    FL2
@NM00058 DC    X'6000'
@NM00059 DS    CL3
         ORG   KWMOD+11
SUBMOD   DC    X'000000'
ENDMOD   DC    X'00'
NULLVARX DS    0A
NULLENX  DC    AL1(7)
NULLADRX DC    AL3($SYSTIME)           HH:MM:SS
         DC    AL1(7)
         DC    AL3($SYSPCMD)
         DC    AL1(7)
         DC    AL3($SYSSCMD)
         DC    AL1(7)
         DC    AL3($SYSDATE)           MM/DD/YY
         DC    AL1(7)
         DC    AL3($SYSPREF)
         DC    AL1(6)
         DC    AL3($LENGTH)
         DC    AL1(8)
         DC    AL3($DATATYP)
         DC    AL1(3)
         DC    AL3($STR)
         DC    AL1(6)
         DC    AL3($SUBSTR)
         DC    AL1(4)
         DC    AL3($EVAL)
         DC    AL1(7)
         DC    AL3($SYSICMD)
         DC    AL1(6)
         DC    AL3($SYSDLM)
         DC    AL1(6)
         DC    AL3($SYSUID)
         DC    AL1(7)
         DC    AL3($SYSPROC)
         DC    AL1(7)
         DC    AL3($SYSNEST)
         DC    AL1(7)
         DC    AL3($SYSDVAL)
         DC    AL1(6)
         DC    AL3($LASTCC)
         DC    AL1(5)
         DC    AL3($MAXCC)
         DC    AL1(7)
         DC    AL3($SYSSCAN)
         DC    AL1(10)                                          ZP60014
         DC    AL3($OUTLINE)                                    ZP60014
         DC    AL1(10)                                          ZP60014
         DC    AL3($OUTTRAP)                                    ZP60014
GROUPONE EQU   (*-NULLVARX)/4          NEW NOT-AUTH VARS FOLLOW ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSENV)                                     ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSSMFI)                                    ZP60014
         DC    AL1(9)                                           ZP60014
         DC    AL3($SYSTERM)                                    ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSOPER)                                    ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSJES)                                     ZP60014
NEWIMMED EQU   (*-NULLVARX)/4          NEW IMMED-EVALS FOLLOW   ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSSTIM)           HH:MM                    ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSSDAT)           YY/MM/DD                 ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSJDAT)           YY.DDD                   ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYS4DAT)           MM/DD/YYYY               ZP60014
         DC    AL1(9)                                           ZP60014
         DC    AL3($SYS4SDT)           YYYY/MM/DD               ZP60014
         DC    AL1(9)                                           ZP60014
         DC    AL3($SYS4JDT)           YYYY.DDD                 ZP60014
         DC    AL1(9)                                           ZP60014
         DC    AL3($SYS4IDT)           YYYY-MM-DD               ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSLTRM)                                    ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSWTRM)                                    ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSCPU)                                     ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSSRV)                                     ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSDSN)                                     ZP60014
         DC    AL1(5)                                2009-08-23 ZP60014
         DC    AL3($NRSTR)                           2009-08-23 ZP60014
SYMBOLCT EQU   (*-NULLVARX)/4          SYMBOL ENTRY COUNT       ZP60014
IKJCT431 CSECT
         DS    0H
FEPATCH  DC    ((@DATA-@PSTART)/20)X'00'
         DC    0D'0'                   ALIGN END OF CSECT       ZP60014
@DATD    DSECT
GTTRMLST DS    4A                      GTTERM PLIST             ZP60014
GTTRMPRM DS    H                       PRIMARY SIZE             ZP60014
GTTRMALT DS    H                       ALTERNATE SIZE           ZP60014
GTTRMATR DS    F                       TERMINAL ATTRIBUTES      ZP60014
GTTRMNAM DS    CL16                    TERMINAL NAME (+NETID?)  ZP60014
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD DS    0D
IKJCT431 CSECT
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
UPTPTR1  EQU   R2
TOBEADD  EQU   R9
SVTELPTR EQU   R9
KEYWAR   EQU   R2
POSAR    EQU   R8
NEWVELEM EQU   R6
LASTELMT EQU   R6
LFPARCTR EQU   R2
SCTR     EQU   R2
PCTR     EQU   R5
MCTR     EQU   R2
ICTR     EQU   R6
CYCLE    EQU   R9
KEYWCHAR EQU   R5
KEYCHAR  EQU   R3
PCLBASE  EQU   R9
POSCHAR  EQU   R4
PDLCUR   EQU   R3
SBFCUR   EQU   R4
PCLCUR   EQU   R2
PPLPTR   EQU   R8
SNTELPTR EQU   R8
ECDAPTR  EQU   R7
ECDA     EQU   0
ECDACPPL EQU   ECDA
ECDAGADD EQU   ECDA+4
ECDAEANS EQU   ECDA+8
ECDALSD  EQU   ECDA+12
ECDAIREC EQU   ECDA+16
ECDACBLK EQU   ECDA+20
ECDACPRE EQU   ECDA+24
ECDACNXT EQU   ECDA+28
ECDALNEL EQU   ECDA+40
ECDAFLAG EQU   ECDA+56
IMPLICIT EQU   ECDAFLAG
NOTEXEC  EQU   ECDAFLAG
SP78CORE EQU   ECDAFLAG
SP78BLK  EQU   ECDAFLAG
NESTED   EQU   ECDAFLAG
ECDAGDAT EQU   ECDA+64
ECDAINME EQU   ECDA+72
ECDAILNG EQU   ECDAINME
EXECDATA EQU   0
SNTABFST EQU   EXECDATA
SVTABFST EQU   EXECDATA+4
GEXECDAT EQU   EXECDATA+8
@NM00004 EQU   EXECDATA+16
EXDATFLG EQU   EXECDATA+32
@NM00005 EQU   EXDATFLG
COMPROC  EQU   0
COMPRPTR EQU   COMPROC
COMPRID  EQU   COMPRPTR
COMPRNXT EQU   COMPRPTR+1
COMPRLNG EQU   COMPROC+4
COMPRUSE EQU   COMPROC+8
SNTAB    EQU   0
SNTABNXT EQU   SNTAB
SNTABLNG EQU   SNTAB+4
SNTABUSE EQU   SNTAB+8
SNTELFST EQU   SNTAB+12
SNTELEM  EQU   0
SNTVLPTR EQU   SNTELEM
SNTFLAGS EQU   SNTELEM+4
SNTPOSIT EQU   SNTFLAGS
SNTKEY   EQU   SNTFLAGS
SNTKEYW  EQU   SNTFLAGS
SNTNAUTH EQU   SNTFLAGS
SNTEVAL  EQU   SNTFLAGS
SNTLAST  EQU   SNTFLAGS
SNTLNG   EQU   SNTELEM+6
SNTDATA  EQU   SNTELEM+8
SVTAB    EQU   0
SVTABNXT EQU   SVTAB
SVTABLNG EQU   SVTAB+4
SVTABUSE EQU   SVTAB+8
SVTABFRE EQU   SVTAB+12
SVTELFST EQU   SVTAB+16
SVTELEM  EQU   0
SVTLNG   EQU   SVTELEM
SVTORIG  EQU   SVTELEM+2
SVTDATA  EQU   SVTELEM+4
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
ECBPTR   EQU   MSGTABLE+8
@NM00008 EQU   MSGTABLE+12
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
MTHEXSW  EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
MTINSRT  EQU   MTINSRTS
MTLEN    EQU   MTINSRT
RET      EQU   0
GFPARMS  EQU   0
GFRCODE  EQU   GFPARMS+4
GF02PTR  EQU   GFPARMS+8
GFCALLID EQU   GFPARMS+12
GFBITS   EQU   GFPARMS+14
GFCPPLP  EQU   GFPARMS+16
IOSRL    EQU   0
IOSTELM  EQU   IOSRL
INSTACK  EQU   0
INSCODE  EQU   INSTACK
NULLVDAT EQU   0
CSCB     EQU   0
CSCBPROC EQU   CSCB+16
PROCNAME EQU   0
IREC     EQU   0
RECLNG   EQU   IREC
RECORD   EQU   IREC+4
PARMDAT  EQU   0
PCELMT   EQU   0
SBFELMT  EQU   0
IDENTPDE EQU   0
IDPDEPTR EQU   IDENTPDE
IDPDELNG EQU   IDENTPDE+4
IDPDEFLG EQU   IDENTPDE+6
KEYPDE   EQU   0
KEYPDEP  EQU   KEYPDE
PDLHEAD  EQU   0
VIDENPDE EQU   0
VIPDEPTR EQU   VIDENPDE
VIPDELNG EQU   VIDENPDE+4
VIPDEFLG EQU   VIDENPDE+6
IDENTMAP EQU   0
IDLNG    EQU   IDENTMAP+2
IDPDLOFF EQU   IDENTMAP+4
IDCHAR   EQU   IDENTMAP+6
IDMODTYP EQU   IDENTMAP+13
IDPRMLNG EQU   IDENTMAP+34
IDPRNME  EQU   IDENTMAP+56
KEYWDMAP EQU   0
KEYLNG   EQU   KEYWDMAP+2
KWPDLOFF EQU   KEYWDMAP+4
KWSUBFLD EQU   KEYWDMAP+6
SBFOFF   EQU   0
SUBFLD   EQU   0
SUBNXSUB EQU   SUBFLD+1
PCEHEAD  EQU   0
PCLLNG   EQU   PCEHEAD
PDLLNG   EQU   PCEHEAD+2
PCLKEYOF EQU   PCEHEAD+4
PCEEND   EQU   0
EXPAROUT EQU   0
DSNFLG   EQU   EXPAROUT+14
MEMFLG   EQU   EXPAROUT+22
PSWDFLG  EQU   EXPAROUT+30
VLSTPTR  EQU   EXPAROUT+32
VLSTLNG  EQU   EXPAROUT+36
VLSTFLG  EQU   EXPAROUT+38
VLST     EQU   VLSTFLG
CMDBUFF  EQU   0
CBUFLNG  EQU   CMDBUFF
CBUFOFF  EQU   CMDBUFF+2
CBUFTEXT EQU   CMDBUFF+4
NEWVLST  EQU   0
NVLSTLNG EQU   NEWVLST
NVLSTOFF EQU   NEWVLST+2
VIDMAP   EQU   0
VIDPRINF EQU   VIDMAP+35
VIDNAME  EQU   VIDMAP+53
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
VLSTBUF  EQU   0
APARM    EQU   0
CPPLPTR  EQU   ECDACPPL
CVARMAP  EQU   SNTELFST
CICMDVAL EQU   CVARMAP+142
CDLMVAL  EQU   CVARMAP+157
CUIDVAL  EQU   CVARMAP+171
CPROCVAL EQU   CVARMAP+185
CNESTVAL EQU   CVARMAP+200
CLCCVAL  EQU   CVARMAP+230
CMCCVAL  EQU   CVARMAP+244
CSCANVAL EQU   CVARMAP+257
COUTLINE EQU   CSCANVAL+15                                      ZP60014
COUTTRAP EQU   COUTLINE+18                                      ZP60014
CENVVAL  EQU   COUTTRAP+18                                      ZP60014
CSMFVAL  EQU   CENVVAL+14                                       ZP60014
CTERMVAL EQU   CSMFVAL+16                                       ZP60014
COPERVAL EQU   CTERMVAL+17                                      ZP60014
CJESVAL  EQU   COPERVAL+16                                      ZP60014
CSTIMVAL EQU   CJESVAL+14                                       ZP60014
CSDATVAL EQU   CSTIMVAL+16                                      ZP60014
CJDATVAL EQU   CSDATVAL+16                                      ZP60014
C4DATVAL EQU   CJDATVAL+16                                      ZP60014
C4SDTVAL EQU   C4DATVAL+16                                      ZP60014
C4JDTVAL EQU   C4SDTVAL+17                                      ZP60014
C4IDTVAL EQU   C4JDTVAL+17                                      ZP60014
CLTRMVAL EQU   C4IDTVAL+17                                      ZP60014
CWTRMVAL EQU   CLTRMVAL+16                                      ZP60014
CCPUVAL  EQU   CWTRMVAL+16                                      ZP60014
CSRVVAL  EQU   CCPUVAL+14                                       ZP60014
CDSNVAL  EQU   CSRVVAL+14                                       ZP60014
CNRSVAL  EQU   CDSNVAL+14                            2009-08-23 ZP60014
CLASTVAL EQU   CNRSVAL                 LAST NAME ADDED HERE     ZP60014
LSDPTR   EQU   ECDALSD
LSDBLKID EQU   LSDANEXT
LSDADAID EQU   LSDADATA
NAMPCE   EQU   KEYWDMAP+6
NALNG    EQU   NAMPCE+2
NADATLNG EQU   NAMPCE+4
NADAT    EQU   NAMPCE+5
CPBLKPTR EQU   ECDACBLK+1
SNTABBLK EQU   SNTABPTR+1
SVTABBLK EQU   SVTABPTR+1
NULLVAR  EQU   NULLVARX
NULLEN   EQU   NULLVAR
NULLADR  EQU   NULLVAR+1
I004     EQU   ILIST
I00401   EQU   I004
I00403   EQU   I004+5
I00404   EQU   I004+8
I00405   EQU   I004+9
I040     EQU   ILIST
I04001   EQU   I040
I04002   EQU   I040+4
I04003   EQU   I040+8
I006     EQU   ILIST
I00601   EQU   I006
I00602   EQU   I006+1
I00603   EQU   I006+4
I00604   EQU   I006+5
I005     EQU   ILIST
I00502   EQU   I005+1
I00504   EQU   I005+5
I00505   EQU   I005+8
I00506   EQU   I005+9
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
I00503   EQU   I005+4
I00501   EQU   I005
I00605   EQU   I006+8
I04004   EQU   I040+10
I00402   EQU   I004+4
NAMFLG   EQU   NAMPCE
SYSSCAN  EQU   CVARMAP+265
CSCANLNG EQU   CVARMAP+263
CSCANFLG EQU   CVARMAP+261
MAXCC    EQU   CVARMAP+252
CMCCLNG  EQU   CVARMAP+250
CMCCFLG  EQU   CVARMAP+248
LASTCC   EQU   CVARMAP+238
CLCCLNG  EQU   CVARMAP+236
CLCCFLG  EQU   CVARMAP+234
SYSDVAL  EQU   CVARMAP+223
CDVALLNG EQU   CVARMAP+221
CDVALFLG EQU   CVARMAP+219
CDVALVAL EQU   CVARMAP+215
SYSNEST  EQU   CVARMAP+208
CNESTLNG EQU   CVARMAP+206
CNESTFLG EQU   CVARMAP+204
SYSPROC  EQU   CVARMAP+193
CPROCLNG EQU   CVARMAP+191
CPROCFLG EQU   CVARMAP+189
SYSUID   EQU   CVARMAP+179
CUIDLNG  EQU   CVARMAP+177
CUIDFLG  EQU   CVARMAP+175
SYSDLM   EQU   CVARMAP+165
CDLMLNG  EQU   CVARMAP+163
CDLMFLG  EQU   CVARMAP+161
SYSICMD  EQU   CVARMAP+150
CICMDLNG EQU   CVARMAP+148
CICMDFLG EQU   CVARMAP+146
EVAL     EQU   CVARMAP+138
CEVALLNG EQU   CVARMAP+136
CEVALFLG EQU   CVARMAP+134
CEVALVAL EQU   CVARMAP+130
SUBSTR   EQU   CVARMAP+124
CSSTRLNG EQU   CVARMAP+122
CSSTRFLG EQU   CVARMAP+120
CSSTRVAL EQU   CVARMAP+116
STRING   EQU   CVARMAP+113
CSTRLNG  EQU   CVARMAP+111
CSTRFLG  EQU   CVARMAP+109
CSTRVAL  EQU   CVARMAP+105
DATATYPE EQU   CVARMAP+97
CTYPELNG EQU   CVARMAP+95
CTYPEFLG EQU   CVARMAP+93
CTYPEVAL EQU   CVARMAP+89
CLENGTH  EQU   CVARMAP+83
CLENLNG  EQU   CVARMAP+81
CLENFLG  EQU   CVARMAP+79
CLENVAL  EQU   CVARMAP+75
SYSPREF  EQU   CVARMAP+68
CPREFLNG EQU   CVARMAP+66
CPREFLG  EQU   CVARMAP+64
CPREFVAL EQU   CVARMAP+60
SYSDATE  EQU   CVARMAP+53
CDATELNG EQU   CVARMAP+51
CDATEFLG EQU   CVARMAP+49
CDATEVAL EQU   CVARMAP+45
SYSSCMD  EQU   CVARMAP+38
CSCMDLNG EQU   CVARMAP+36
CSCMDFLG EQU   CVARMAP+34
CSCMDVAL EQU   CVARMAP+30
SYSPCMD  EQU   CVARMAP+23
CPCMDLNG EQU   CVARMAP+21
CPCMDFLG EQU   CVARMAP+19
CPCMDVAL EQU   CVARMAP+15
SYSTIME  EQU   CVARMAP+8
CTIMELNG EQU   CVARMAP+6
CTIMEFLG EQU   CVARMAP+4
CTIMEVAL EQU   CVARMAP
VIDPRLNG EQU   VIDMAP+34
@NM00054 EQU   VIDMAP
NVLSTDAT EQU   NEWVLST+4
PRMPPDE  EQU   EXPAROUT+42
LISTPDE  EQU   EXPAROUT+40
@NM00044 EQU   EXPAROUT+39
@NM00043 EQU   EXPAROUT+31
PSWD     EQU   PSWDFLG
PSWDLNG  EQU   EXPAROUT+28
PSWDPTR  EQU   EXPAROUT+24
@NM00042 EQU   EXPAROUT+23
MEM      EQU   MEMFLG
MEMLNG   EQU   EXPAROUT+20
MEMPTR   EQU   EXPAROUT+16
@NM00041 EQU   EXPAROUT+15
DSNQTE   EQU   DSNFLG
DSN      EQU   DSNFLG
DSNLNG   EQU   EXPAROUT+12
DSNPTR   EQU   EXPAROUT+8
EPDLLNG  EQU   EXPAROUT+6
EPDLSPNO EQU   EXPAROUT+4
EPDLNXT  EQU   EXPAROUT
@NM00040 EQU   SUBFLD
KWNAMDAT EQU   KEYWDMAP+11
KWNAMLNG EQU   KEYWDMAP+10
KWLNG    EQU   KEYWDMAP+8
@NM00039 EQU   KEYWDMAP+6
@NM00038 EQU   KEYWDMAP+6
@NM00037 EQU   KEYWDMAP
IDPRINFO EQU   IDENTMAP+35
@NM00036 EQU   IDENTMAP+7
@NM00035 EQU   IDENTMAP+6
@NM00034 EQU   IDENTMAP+6
@NM00033 EQU   IDENTMAP
IDPROMPT EQU   IDENTMAP
@NM00032 EQU   IDENTMAP
VIPDEP   EQU   VIPDEFLG
PDLLEN   EQU   PDLHEAD+6
PDLSPNO  EQU   PDLHEAD+4
PDLNXT   EQU   PDLHEAD
IDPDEP   EQU   IDPDEFLG
RECOFF   EQU   IREC+2
TIOTSTP  EQU   TIOT+16
TIOTNJOB EQU   TIOT
INSADLSD EQU   INSTACK+1
INSLIST  EQU   INSCODE
INSPROC  EQU   INSCODE
INSPROM  EQU   INSCODE
INSEXEC  EQU   INSCODE
INSOTDD  EQU   INSCODE
INSINDD  EQU   INSCODE
INSSTOR  EQU   INSCODE
INSDATA  EQU   INSCODE
@NM00031 EQU   IOSRL+12
IOSNELM  EQU   IOSRL+10
IOSTLEN  EQU   IOSRL+8
IOSBELM  EQU   IOSRL+4
@NM00016 EQU   GFPARMS+40
@NM00015 EQU   GFPARMS+36
GFPGMNP  EQU   GFPARMS+32
GFDSNP   EQU   GFPARMS+28
GFPGMNL  EQU   GFPARMS+26
GFDSNLEN EQU   GFPARMS+24
GFECBP   EQU   GFPARMS+20
@NM00014 EQU   GFPARMS+15
@NM00013 EQU   GFBITS
GFWTPSW  EQU   GFBITS
GFSUBSYS EQU   GFBITS
GFKEYN08 EQU   GFBITS
GFCBPTR  EQU   GFPARMS
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
MTADDR   EQU   MTINSRT+1
MTHIGHL  EQU   MTLEN
@NM00012 EQU   MSGTABLE+36
@NM00011 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00010 EQU   MSGTABLE+25
@NM00009 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
MTHIGH   EQU   @NM00008
MTCPPL   EQU   TMCTPTR
@NM00007 EQU   SNTFLAGS+1
SNTGLOB  EQU   SNTFLAGS+1
SNTNOSCN EQU   SNTFLAGS
SNTLABEL EQU   SNTFLAGS
SNTGVAL  EQU   SNTVLPTR
COMRCDS  EQU   COMPROC+12
@NM00006 EQU   EXECDATA+60
FILEDCBS EQU   EXECDATA+56
RETPTR2  EQU   EXECDATA+52
ATACTEND EQU   EXECDATA+48
ATACTSTR EQU   EXECDATA+44
EXDLMPTR EQU   EXECDATA+40
GEXECCNT EQU   EXECDATA+36
NOLASTCC EQU   @NM00005+1
ATINCNTL EQU   @NM00005+1
ATTNCMD  EQU   @NM00005
NOMSG    EQU   @NM00005
CMAIN    EQU   @NM00005
ERINCNTL EQU   @NM00005
SYMLST   EQU   @NM00005
NOFLUSH  EQU   @NM00005
ERRCMD   EQU   @NM00005
CONLST   EQU   @NM00005
RETPTR   EQU   EXECDATA+28
ERACTEND EQU   EXECDATA+24
ERACTSTR EQU   EXECDATA+20
EXINSAVE EQU   @NM00004
LASTTSO  EQU   EXECDATA+12
ECDACPGM EQU   ECDA+68
ECDAGETL EQU   ECDA+60
@NM00003 EQU   ECDA+58
@NM00002 EQU   ECDAFLAG
@NM00001 EQU   ECDAFLAG
ECDAAEND EQU   ECDA+52
ECDAELNG EQU   ECDA+50
ECDANDO  EQU   ECDA+48
ECDAGCNT EQU   ECDA+44
ECDALCTR EQU   ECDA+36
ECDASPTR EQU   ECDA+32
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00270 EQU   @RC00254
@RC00287 EQU   @RC00279
@RC00365 EQU   @RC00359
@RF00397 EQU   @RC00395
@RF00399 EQU   @RC00395
@RC00587 EQU   @RC00585
@RC00658 EQU   @RC00654
@RC00687 EQU   @RC00686
@RC00693 EQU   @EL00005
@RC00711 EQU   @EL00006
@RF00771 EQU   @EL00006
@RF00973 EQU   @RC00970
@RF00910 EQU   @EL00008
@RC00912 EQU   @EL00008
@RF00999 EQU   @EL00008
@RF00958 EQU   @RC00912
@ENDDATA EQU   *
         END   IKJCT431,(C'PLS-III',0300,87344)
/*
//*
//STEP03  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKJCT431('ZP60014')
++MOD(IKJCT433) DISTLIB(AOST4).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP04  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'IKJCT433, EXEC CONTROL MODULE - PHASE II PART I'
*
*   MODIFIED BY GREG PRICE SEPTEMBER 2005 FOR USERMOD ZP60014
*
*   2009-08-23 - ADD &NRSTR "NO RESCAN STRING"
*
IKJCT433 CSECT ,                                                   0001
         USING PSA,0                                            ZP60014
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(33)                                             0001
         DC    C'IKJCT433  88.013'                                 0001
         DC    C' ZP60014 20090823'
         DROP  R15
IKJUPDT  DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP0UPDT-IKJUPDT)                            ZP60014
         ENTRY IKJUPDT
         DROP  R15
IKJINIT  DS    0H                                               ZP60014
         USING *,R15                                            ZP60014
         B     @PROLOG                                          ZP60014
         DC    AL2(@EP0INIT-IKJINIT)                            ZP60014
         ENTRY IKJINIT                                          ZP60014
         DROP  R15                                              ZP60014
IKJGET#  DS    0H                                               ZP60014
         USING *,R15                                            ZP60014
         B     @PROLOG                                          ZP60014
         DC    AL2(@EP0GET#-IKJGET#)                            ZP60014
         ENTRY IKJGET#                                          ZP60014
         DROP  R15                                              ZP60014
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  LA    R11,4095(,R12)                                      0001
         LA    R10,4095(,R11)                                      0001
         USING @PSTART,R12                                         0001
         USING @PSTART+4095,R11                                    0001
         USING @PSTART+8190,R10                                    0001
         L     R0,@SIZDATD                                         0001
         IKJEXEC  R,LV=(0)
         LR    R9,R1                                               0001
         USING @DATD,R9                                            0001
         ST    R13,@SA00001+4                                      0001
         LM    R15,R1,16(R13)                                      0001
         ST    R9,8(,R13)                                          0001
         LR    R13,R9                                              0001
         MVI   LCLFLAGS,0           RESET LOCAL FLAGS           ZP60014
         AH    R15,4(,R15)                                         0001
         BR    R15                                                 0001
@EP00001 MVC   @PC00001(20),0(R1)                                  0001
*                                                                  0035
*   /*****************************************************************/
*   /*                                                               */
*   /* START OF EXECUTABLE CODE                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0035
*   CALL INTSETUP;                  /* INIT MAIN SWITCHES - VARIABLES*/
         BAL   R14,INTSETUP                                        0035
*   OLDLINE=GTPBLINE;               /* POINT TO OLD RECORD           */
         L     R1,@PC00001+12                                      0036
         L     R1,GTPBLINE(,R1)                                    0036
         ST    R1,OLDLINE(,COMONPTR)                               0036
*   SCANLIM=F0;                     /* CLEAR SCAN LIMIT              */
         SLR   R2,R2                                               0037
         ST    R2,SCANLIM                                          0037
*   ERCOM=F0;                       /* INIT ERROR COUNTER (COMMON)   */
         ST    R2,ERCOM(,COMONPTR)                                 0038
*   CONTINU=YES;                    /* ALLOW CONTINUING              */
         OI    CONTINU(COMONPTR),B'01000000'                       0039
*   STM(R9,R12,REGAREA);            /* SAVE PHASE2 PART 1 REGS       */
         STM   R9,R12,REGAREA(COMONPTR)                            0040
*   DO WHILE CONTINU=YES;           /* PROCESS UNTIL DONE            */
         B     @DE00041                                            0041
@DL00041 DS    0H                                                  0042
*     EXECDPTR=LSDEXEC;             /* BASE EXEC DATA ON PTR IN LSD  */
         L     R1,LSDPTR(,COMONPTR)                                0042
         L     R2,LSDEXEC-LSD(,R1)                                 0042
         ST    R2,EXECDPTR(,COMONPTR)                              0042
*     ERROR=F0;                     /* INIT ERROR COUNTER TO ZERO    */
         SLR   R3,R3                                               0043
         ST    R3,ERROR                                            0043
*     SWS=''B;                      /* CLEAR INIT SWITCHES           */
         XC    SWS(5,COMONPTR),SWS(COMONPTR)                       0044
*     NEWBASE=MIN(BUFBASE,NEWBASE); /* POINTER TO OLD BUFFER IF ONE  */
         L     R3,BUFBASE(,COMONPTR)                               0045
         L     R4,NEWBASE(,COMONPTR)                               0045
         CR    R3,R4                                               0045
         BNH   *+6
         LR    R3,R4                                               0045
         ST    R3,NEWBASE(,COMONPTR)                               0045
*     BUFBASE=GTPBLINE;             /* SET BASE TO LINE PASSED       */
         L     R3,@PC00001+12                                      0046
         L     R1,GTPBLINE(,R3)                                    0046
         ST    R1,BUFBASE(,COMONPTR)                               0046
*     IF GTPBLINE>=ERACTSTR&GTPBLINE<ERACTEND&/* IF ERROR ACTIVE     */
*         ERINCNTL=YES THEN         /* AND WITHIN RANGE              */
         C     R1,ERACTSTR(,R2)                                    0047
         BL    @RF00047                                            0047
         C     R1,ERACTEND(,R2)                                    0047
         BNL   @RF00047                                            0047
         TM    ERINCNTL(R2),B'00001000'                            0047
         BNO   @RF00047                                            0047
*       ERRRANGE=YES;               /* SET ERROR RANGE INDICATOR     */
         OI    ERRRANGE(COMONPTR),B'00000100'                      0048
*     ELSE                          /* OTHERWISE                     */
*       IF ERINCNTL=YES THEN        /* IF DROPPING OUT OF ERROR      */
         B     @RC00047                                            0049
@RF00047 L     R2,EXECDPTR(,COMONPTR)                              0049
         TM    ERINCNTL(R2),B'00001000'                            0049
         BNO   @RF00049                                            0049
*         DO;                       /* SWAP RETURN POINTERS          */
*           RETPTR=RETPTR&&RETPTR2; /*                               */
         L     R3,RETPTR2(,R2)                                     0051
         L     R4,RETPTR(,R2)                                      0051
         XR    R4,R3                                               0051
         ST    R4,RETPTR(,R2)                                      0051
*           RETPTR2=RETPTR2&&RETPTR;/*                               */
         XR    R3,R4                                               0052
         ST    R3,RETPTR2(,R2)                                     0052
*           RETPTR=RETPTR&&RETPTR2; /*                               */
         XR    R4,R3                                               0053
         ST    R4,RETPTR(,R2)                                      0053
*           ERINCNTL=NO;            /* RESET SWITCH                  */
         NI    ERINCNTL(R2),B'11110111'                            0054
*         END;                      /*                               */
*     IF GTPBLINE>=ATACTSTR&GTPBLINE<ATACTEND&/* IF ERROR ACTIVE     */
*         ATINCNTL=YES THEN         /* AND WITHIN RANGE              */
@RF00049 DS    0H                                                  0056
@RC00047 L     R5,@PC00001+12                                      0056
         L     R1,GTPBLINE(,R5)                                    0056
         L     R2,EXECDPTR(,COMONPTR)                              0056
         C     R1,ATACTSTR(,R2)                                    0056
         BL    @RF00056                                            0056
         C     R1,ATACTEND(,R2)                                    0056
         BNL   @RF00056                                            0056
         TM    ATINCNTL(R2),B'10000000'                            0056
         BNO   @RF00056                                            0056
*       ATRANGE=YES;                /* SET ERROR RANGE INDICATOR     */
         OI    ATRANGE(COMONPTR),B'00000010'                       0057
*     ELSE                          /* OTHERWISE                     */
*       IF ATINCNTL=YES THEN        /* IF DROPPING OUT OF ERROR      */
         B     @RC00056                                            0058
@RF00056 L     R3,EXECDPTR(,COMONPTR)                              0058
         TM    ATINCNTL(R3),B'10000000'                            0058
         BNO   @RF00058                                            0058
*         DO;                       /* SWAP RETURN POINTERS          */
*           RETPTR=RETPTR&&RETPTR2; /*                               */
         L     R2,RETPTR2(,R3)                                     0060
         L     R4,RETPTR(,R3)                                      0060
         XR    R4,R2                                               0060
         ST    R4,RETPTR(,R3)                                      0060
*           RETPTR2=RETPTR2&&RETPTR;/*                               */
         XR    R2,R4                                               0061
         ST    R2,RETPTR2(,R3)                                     0061
*           RETPTR=RETPTR&&RETPTR2; /*                               */
         XR    R4,R2                                               0062
         ST    R4,RETPTR(,R3)                                      0062
*           ATINCNTL=NO;            /* RESET SWITCH                  */
         NI    ATINCNTL(R3),B'01111111'                            0063
*         END;                      /*                               */
*     IF ECTATTN=YES THEN           /* IF TMP ATTN ENTRY      @Z30969*/
@RF00058 DS    0H                                                  0065
@RC00056 L     R5,@PC00001+4                                       0065
         TM    ECTSWS-ECT(R5),ECTATTN                              0065
         BNO   @RF00065                                            0065
*       DO;                         /* PROCESS                       */
*         ECTATTN=NO;               /* RESET ENTRY                   */
         NI    ECTSWS-ECT(R5),255-ECTATTN                          0067
*         ATINCNTL=YES;             /* SET CNTL BIT                  */
         L     R1,EXECDPTR(,COMONPTR)                              0068
         OI    ATINCNTL(R1),B'10000000'                            0068
*         CALL RETUPDT(GTPBLINE);   /* SET RETURN POINTER            */
         L     R2,@PC00001+12                                      0069
         LA    R3,GTPBLINE(,R2)                                    0069
         ST    R3,@AL00001                                         0069
         LA    R1,@AL00001                                         0069
         BAL   R14,RETUPDT                                         0069
*         LSDANEXT=ATACTSTR;        /* BRANCH TO ACTION START        */
         L     R4,LSDPTR(,COMONPTR)                                0070
         L     R5,EXECDPTR(,COMONPTR)                              0070
         L     R5,ATACTSTR(,R5)                                    0070
         ST    R5,LSDANEXT-LSD(,R4)                                0070
*         ERROR=E4;                 /* GET ANOTHER COMMAND           */
         MVC   ERROR(4),FW4                                        0071
*         GTPBLINE=LSDANEXT;        /* SAVE LSDANEXT         @ZA08099*/
         L     R6,@PC00001+12                                      0072
         ST    R5,GTPBLINE(,R6)                                    0072
*         LSDANEXT=LSDANEXT+LSDANEXT->LL;/* UPDATE LSD POINTER     0073
*                                                            @ZA08099*/
         LH    R7,LL(,R5)                                          0073
         ALR   R7,R5                                               0073
         ST    R7,LSDANEXT-LSD(,R4)                                0073
*         GOTO FASTCYCL;            /* START MAIN LOOP AGAIN @ZA08099*/
         B     FASTCYCL                                            0074
*       END;                        /*                               */
*                                                                  0076
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS RETURN CODES                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0076
*     ERRSAV=ECTRTCD;               /* SAVE ECT RETURN CODE          */
@RF00065 L     R14,@PC00001+4                                      0076
         SLR   R15,R15                                             0076
         ICM   R15,7,ECTRTCD-ECT(R14)                              0076
         ST    R15,ERRSAV                                          0076
*     IF ECTRCDF=ABNDFLG THEN       /* IF CODE IS ABEND              */
         CLI   ECTRCDF-ECT(R14),X'80'                              0077
         BNE   @RF00077                                            0077
*       RCABEND=YES;                /* USE ABEND CONVERSION          */
         OI    RCABEND(COMONPTR),B'10000000'                       0078
*     IF ERRSAV^=F0 THEN            /* IF TSO CMD ENDED IN ERROR     */
@RF00077 L     R0,ERRSAV                                           0079
         LTR   R0,R0                                               0079
         BZ    @RF00079                                            0079
*       DO;                         /*                               */
*         IF ERRCMD=NO THEN         /* AN NO ERROR IN EFFECT         */
         L     R1,EXECDPTR(,COMONPTR)                              0081
         TM    ERRCMD(R1),B'01000000'                              0081
         BNZ   @RF00081                                            0081
*           CALL RCUPDT;            /* UPDATE LASTCC AND MAXCC       */
         BAL   R14,RCUPDT                                          0082
*         ELSE                      /* OTHERWISE                     */
*           DO;                     /* CHECK IF ERROR ALREADY IN CNTL*/
         B     @RC00081                                            0083
@RF00081 DS    0H                                                  0084
*             IF ERRRANGE=YES THEN  /* IF IT IS THEN SET ERROR CODE  */
         TM    ERRRANGE(COMONPTR),B'00000100'                      0084
         BNO   @RF00084                                            0084
*               IF GTPBLINE^=ERACTSTR THEN/* NOT FIRST ERROR CMD     */
         L     R2,@PC00001+12                                      0085
         L     R1,EXECDPTR(,COMONPTR)                              0085
         CLC   GTPBLINE(4,R2),ERACTSTR(R1)                         0085
         BE    @RF00085                                            0085
*                 DO;               /* MUST HAVE BEEN A TSO COMMAND  */
*                   BACKUP=YES;     /* BACK UP AND LIST LAST TSO     */
         OI    BACKUP(COMONPTR),B'00000001'                        0087
*                   ERROR=E908;     /*                               */
         MVC   ERROR(4),FW908                                      0088
*                 END;              /*                               */
*               ELSE                                               0090
*                 ;                 /* OTHERWISE NOTHING             */
@RF00085 DS    0H                                                  0091
*             ELSE                  /* OTHERWISE GIVE ERRACTION CNTL */
*               DO;                 /*                               */
         B     @RC00084                                            0091
@RF00084 DS    0H                                                  0092
*                 CALL RCUPDT;      /* PROCESS MAXCC AND LASTCC      */
         BAL   R14,RCUPDT                                          0092
*                 IF ERACTSTR^=F0 THEN/* IF A ERROR ACTION SPECIFIED */
         L     R2,EXECDPTR(,COMONPTR)                              0093
         L     R3,ERACTSTR(,R2)                                    0093
         LTR   R3,R3                                               0093
         BZ    @RF00093                                            0093
*                   DO;             /* GO TO ERRACTION               */
*                     ERINCNTL=YES; /* SET ERROR IN CONTROL          */
         OI    ERINCNTL(R2),B'00001000'                            0095
*                     CALL RETUPDT(GTPBLINE);/* UPDATE RETURN POINT  */
         L     R4,@PC00001+12                                      0096
         LA    R5,GTPBLINE(,R4)                                    0096
         ST    R5,@AL00001                                         0096
         LA    R1,@AL00001                                         0096
         BAL   R14,RETUPDT                                         0096
*                     LSDANEXT=ERACTSTR;/* UPDATE LSD NEXT CMD       */
         L     R1,LSDPTR(,COMONPTR)                                0097
         L     R2,EXECDPTR(,COMONPTR)                              0097
         L     R0,ERACTSTR(,R2)                                    0097
         ST    R0,LSDANEXT-LSD(,R1)                                0097
*                     ERROR=E4;     /* SET ERROR CODE                */
         MVC   ERROR(4),FW4                                        0098
*                     GOTO FASTEXIT;/* GET NEXT COMMAND              */
         L     R1,@PC00001+4
         SLR   R0,R0
         STCM  R0,7,ECTRTCD-ECT(R1)
         MVI   ECTRCDF-ECT(R1),X'00'
         B     FASTEXIT                                            0099
*                   END;            /*                               */
*                 ELSE              /* IF NO ERROR ACTION, SET UP    */
*                   IF INSLIST=NO THEN/* TSO NOT ALREADY LISTED      */
***00093 L     R15,@PC00001+4                                      0101
***      L     R1,ECTIOWA-ECT(,R15)                                0101
***      L     R1,IOSTELM(,R1)                                     0101
***      TM    INSLIST(R1),B'00000001'                             0101
***      BNZ   @RF00101                                            0101
*                     BACKUP=YES;   /* BACKUP TO LIST TSO            */
@RF00093 OI    BACKUP(COMONPTR),B'00000001'                        0102
*               END;                /*                               */
@RF00101 DS    0H                                                  0104
*             IF BACKUP=YES THEN    /* BACK UP AND LIST ?            */
@RC00084 TM    BACKUP(COMONPTR),B'00000001'                        0104
         BNO   @RF00104                                            0104
*               DO;                 /* YES -                         */
*                 LSDANEXT=GTPBLINE;/* BACK UP LSD COMMAND POINTER   */
         L     R1,LSDPTR(,COMONPTR)                                0106
         L     R2,@PC00001+12                                      0106
         L     R0,GTPBLINE(,R2)                                    0106
         ST    R0,LSDANEXT-LSD(,R1)                                0106
*                 GTPBLINE=LASTTSO; /* GET TSO COMMAND               */
         L     R1,EXECDPTR(,COMONPTR)                              0107
         L     R3,LASTTSO(,R1)                                     0107
         ST    R3,GTPBLINE(,R2)                                    0107
*                 BUFBASE=LASTTSO;  /* POINT BUFFER TO LAST TSO CMD  */
         ST    R3,BUFBASE(,COMONPTR)                               0108
*                 LISTONLY=YES;     /* LIST COMMAND ONLY             */
         OI    LISTONLY(COMONPTR),B'00100000'                      0109
*               END;                /*                               */
*           END;                    /*                               */
@RF00104 DS    0H                                                  0112
*         ECTRTCD=F0;               /* ZERO ECT RETURN CODE          */
@RC00081 L     R4,@PC00001+4                                       0112
         SLR   R5,R5                                               0112
         STCM  R5,7,ECTRTCD-ECT(R4)                                0112
*         ECTRCDF=''B;              /* ZERO ABEND FLAG IF ON         */
         MVI   ECTRCDF-ECT(R4),X'00'                               0113
*       END;                        /*                               */
*     ELSE                          /* IF RETURN CODE WAS ZERO       */
*       IF ERRRANGE=NO THEN         /* AND NOT IN ERROR RANGE        */
         B     @RC00079                                            0115
@RF00079 TM    ERRRANGE(COMONPTR),B'00000100'                      0115
         BNZ   @RF00115                                            0115
*         CALL RCUPDT;              /* UPDATE RETURN CODES           */
         BAL   R14,RCUPDT                                          0116
*     RCABEND=NO;                   /* INSURE ABEND CLEAR            */
@RF00115 DS    0H                                                  0117
@RC00079 NI    RCABEND(COMONPTR),B'01111111'                       0117
*                                                                  0118
*     /***************************************************************/
*     /*                                                             */
*     /* SYMBOLIC SUBSTITUTION INITIALIZATION                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0118
*     OLDLINE=GTPBLINE;             /* BASE FOR OLD LINE WITH PARMS  */
         L     R6,@PC00001+12                                      0118
         L     R14,GTPBLINE(,R6)                                   0118
         ST    R14,OLDLINE(,COMONPTR)                              0118
*     V2=F0;                        /* INIT TO ZERO                  */
         SLR   R15,R15                                             0119
         ST    R15,V2                                              0119
*     MYO2=O2-OO+F1;                /* SET OFFSET TO START OF SCAN   */
         L     R0,BUFBASE(,COMONPTR)                               0120
         LR    R1,R0                                               0120
         LH    R1,OO(,R1)                                          0120
         LR    R2,R0                                               0120
         LH    R0,O2(,R2)                                          0120
         SLR   R0,R1                                               0120
         AL    R0,FW1                                              0120
         ST    R0,MYO2(,COMONPTR)                                  0120
*     IF CORE=NO THEN               /* IF NO CORE HAS BEEN GOTTEN    */
         TM    CORE(COMONPTR),B'10000000'                          0121
         BNZ   @RF00121                                            0121
*       CALL GETMORE(EVAL(-OO));    /* GETMAIN FOR NEW BUFFER        */
         LCR   R1,R1                                               0122
         ST    R1,@AFTEMPS+8                                       0122
         LA    R1,@AFTEMPS+8                                       0122
         ST    R1,@AL00001                                         0122
         LA    R1,@AL00001                                         0122
         BAL   R14,GETMORE                                         0122
*     ELSE                          /* IF OTHER THAN FIRST LOOP      */
*       IF LL>NEWLL THEN            /* IF NEW LINE BIGGER THAN GOTTEN*/
         B     @RC00121                                            0123
@RF00121 L     R1,BUFBASE(,COMONPTR)                               0123
         L     R2,NEWBASE(,COMONPTR)                               0123
         LH    R3,NEWLL(,R2)                                       0123
         CH    R3,LL(,R1)                                          0123
         BNL   @RF00123                                            0123
*         DO;                       /* CORE, GET MORE CORE           */
*           DO;                     /* FREEMAIN LV(NEWLL*2)        0125
*                                      A(NEWBASE) SP(1) MF(E,FRELST) */
*             RESPECIFY                                            0126
*              (R1) RESTRICTED;                                    0126
*             FRELST02=NEWLL*2;     /* LENGTH                        */
         ALR   R3,R3                                               0127
         STCM  R3,7,FRELST02                                       0127
*             FRELST04=ADDR(NEWBASE);/* ADDR OF ADDR LIST            */
         LA    R0,NEWBASE(,COMONPTR)                               0128
         STCM  R0,7,FRELST04                                       0128
*             FRELST06=1;           /* SUBPOOL VALUE                 */
         MVI   FRELST06,X'01'                                      0129
*             R1=ADDR(FRELST);      /* REG1 POINTS TO LIST           */
         LA    R1,FRELST                                           0130
*             SVC(5);               /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0131
*             RESPECIFY                                            0132
*              (R1) UNRESTRICTED;                                  0132
*           END;                    /* FREEMAIN LV(NEWLL*2)        0133
*                                      A(NEWBASE) SP(1) MF(E,FRELST) */
*           CORE=NO;                /* YES WE HAVE NO CORE TODAY     */
         NI    CORE(COMONPTR),B'01111111'                          0134
*           CALL GETMORE(EVAL(-OO));/* MINIMUM CORE REQIRED          */
         L     R1,BUFBASE(,COMONPTR)                               0135
         LH    R2,OO(,R1)                                          0135
         LCR   R2,R2                                               0135
         ST    R2,@AFTEMPS+8                                       0135
         LA    R3,@AFTEMPS+8                                       0135
         ST    R3,@AL00001                                         0135
         LA    R1,@AL00001                                         0135
         BAL   R14,GETMORE                                         0135
*         END;                      /*                               */
*       ELSE                        /* OTHERWISE                     */
*         FREEAMT=NEWLL-(LL-OO);    /* SET FREEAMT                   */
         B     @RC00123                                            0137
@RF00123 L     R1,NEWBASE(,COMONPTR)                               0137
         L     R2,BUFBASE(,COMONPTR)                               0137
         LH    R3,LL(,R2)                                          0137
         SH    R3,OO(,R2)                                          0137
         LCR   R3,R3                                               0137
         AH    R3,NEWLL(,R1)                                       0137
         ST    R3,FREEAMT(,COMONPTR)                               0137
*                                                                  0138
*     /***************************************************************/
*     /*                                                             */
*     /* COPY INPUT BUFFER TO GOTTEN BUFFER                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0138
*     RFY                                                          0138
*      (R2,                                                        0138
*       R3,                                                        0138
*       R4,                                                        0138
*       R5) RSTD;                   /* RESTRICT REGS FOR MVCL        */
@RC00123 DS    0H                                                  0138
@RC00121 DS    0H                                                  0139
*     R2=(ADDR(NEWC(1)));           /* POINTER TO 'TO' BUFFER        */
         L     R6,NEWBASE(,COMONPTR)                               0139
         LA    R2,NEWC(,R6)                                        0139
*     R4=ADDR(C(OO+1));             /* POINTER TO 'FROM' BUFFER      */
         L     R7,BUFBASE(,COMONPTR)                               0140
         LH    R14,OO(,R7)                                         0140
         LA    R4,C(R14,R7)                                        0140
*     R3=NEWLL-F4;                  /* LENGTH OF 'TO' BUFFER         */
         LA    R15,4                                               0141
         LH    R3,NEWLL(,R6)                                       0141
         SLR   R3,R15                                              0141
*     R5=(LL-(F4+OO)) BLANKS;       /* LENGTH OF 'FROM' BUFFER AND 0142
*                                      PADDING CHARACTER FOR MVCL    */
         ALR   R14,R15                                             0142
         LCR   R14,R14                                             0142
         AH    R14,LL(,R7)                                        0142
         O     R14,HIBLANK                                         0142
         LR    R5,R14                                              0142
*     MVCL(R2,R4);                  /* MOVE TO NEW BUFFER            */
         MVCL  R2,R4                                               0143
*     RFY                                                          0144
*      (R2,                                                        0144
*       R3,                                                        0144
*       R4,                                                        0144
*       R5) UNRSTD;                 /* RELEASE REGISTERS             */
*     BUFBASE=NEWBASE;              /* POINT TO GOTTEN BUFFER        */
         L     R4,NEWBASE(,COMONPTR)                               0145
         ST    R4,BUFBASE(,COMONPTR)                               0145
*     OO=F0;                        /* ZERO OFFSET FIELD             */
         SLR   R5,R5                                               0146
         STH   R5,OO(,R4)                                          0146
*     NEWBASE=NEWBASE+LL;           /* POINT TO NEW BUFFER           */
         LH    R6,LL(,R4)                                          0147
         ALR   R4,R6                                               0147
         ST    R4,NEWBASE(,COMONPTR)                               0147
*     IF ERROR=E16 THEN             /* IF A GETMAIN ERROR OCCURRED   */
         L     R7,ERROR                                            0148
         C     R7,FW16                                             0148
         BE    @RT00148                                            0148
*       GO TO FASTEXIT;             /* PROCESS ERROR MSG AND QUIT    */
*     CORE=YES;                     /* CORE HAS BEEN GOTTEN          */
         OI    CORE(COMONPTR),B'10000000'                          0150
*     NEWLL=LL;                     /* INIT LENGTH                   */
         STH   R6,NEWLL(,R4)                                       0151
*     NEWOO=F0;                     /* INIT OFFSET                   */
         STH   R5,NEWOO(,R4)                                       0152
*     IF ERROR=F0 THEN              /* IF OK SO FAR                  */
         CR    R7,R5                                               0153
         BNE   @RF00153                                            0153
*       DO;                         /* LOCATE SYSDLM                 */
*         CALL LOCATE(SYSSCAN,LENGTH(SYSSCAN),F0);/* LOCATE SYSSCAN  */
         LA    R1,@AL00155                                         0155
         BAL   R14,LOCATE                                          0155
*         IF ERROR=F0 THEN          /* IF LOCATE SUCCESSFUL          */
         L     R14,ERROR                                           0156
         LTR   R14,R14                                             0156
         BNZ   @RF00156                                            0156
*           DO;                     /* PROCESS VALUE                 */
*             ANSPTR=ADDR(SVTDATA); /* POINT TO SCAN DATA            */
         L     R1,SNTELPTR(,COMONPTR)                              0158
         L     R2,SNTVLPTR(,R1)                                    0158
         LA    R3,SVTDATA(,R2)                                     0158
         ST    R3,ANSPTR(,COMONPTR)                                0158
*             CLEN=SVTLNG;          /* LENGTH OF SCAN NUMBER         */
         LH    R4,SVTLNG(,R2)                                      0159
         STH   R4,CLEN(,COMONPTR)                                  0159
*             CALL CONVERT;         /* CONVERT TO USABLE FORM        */
         BAL   R14,CONVERT                                         0160
*             SCANLIM=V2;           /* SET SCAN LIMIT                */
         L     R6,V2                                               0161
         ST    R6,SCANLIM                                          0161
*             IF ERROR^=F0 THEN     /* CONVERT OK                    */
         L     R7,ERROR                                            0162
         LTR   R7,R7                                               0162
         BZ    @RF00162                                            0162
*               ERROR=E960;         /* SET ERROR CODE                */
         MVC   ERROR(4),FW960                                      0163
*           END;                    /*                               */
*         ELSE                      /* OTHERWISE                     */
*           ERROR=E999;             /* SET ERROR CODE                */
         B     @RC00156                                            0165
@RF00156 MVC   ERROR(4),FW999                                      0165
*       END;                                                       0166
@RC00156 DS    0H                                                  0167
*     IF SYMLST=YES THEN            /* SYMBOL LIST SPECIFIED ?       */
@RF00153 L     R1,EXECDPTR(,COMONPTR)                              0167
         TM    SYMLST(R1),B'00010000'                              0167
         BNO   @RF00167                                            0167
*       CALL CMDLST;                /* LIST COMMAND                  */
         BAL   R14,CMDLST                                          0168
*     IF OPCODE=IFCODE THEN         /* ON IF CMD, REMOVE 'THEN'      */
@RF00167 L     R1,OLDLINE(,COMONPTR)                               0169
         CLI   OPCODE(R1),2                                        0169
         BNE   @RF00169                                            0169
*       FREEAMT=FREEAMT+F4;         /* LOGICALLY REMOVE THEN         */
         LA    R2,4                                                0170
         AL    R2,FREEAMT(,COMONPTR)                               0170
         ST    R2,FREEAMT(,COMONPTR)                               0170
*                                                                  0171
*     /***************************************************************/
*     /*                                                             */
*     /* SYMBOLIC SUBSTITUTION MAINLINE                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0171
*     DO Z=1 TO SCANLIM WHILE EXITA=NO&ERROR=F0;/* SUB TO SCANLIM OR
*                                      DONE                          */
@RF00169 LA    R3,1                                                0171
         B     @DE00171                                            0171
@DL00171 TM    EXITA(COMONPTR),B'10000000'                         0171
         BNZ   @DC00171                                            0171
         L     R4,ERROR                                            0171
         LTR   R4,R4                                               0171
         BNZ   @DC00171                                            0171
*       EXITA=YES;                  /* CAUSE END UNLESS INSERT HAS 0172
*                                      BEEN CALLED AT LEAST ONCE     */
         OI    EXITA(COMONPTR),B'10000000'                         0172
*       DO I=MYO2 TO LL-(F4+FREEAMT) WHILE ERROR=F0;/* SCAN RECORD   */
         L     R5,MYO2(,COMONPTR)                                  0173
         B     @DE00173                                            0173
@DL00173 L     R6,ERROR                                            0173
         LTR   R6,R6                                               0173
         BNZ   @DC00173                                            0173
*         IF C(I)=AMPSAND THEN      /* IF AN AMPERSAND               */
         L     R7,I(,COMONPTR)                                     0174
         L     R6,BUFBASE(,COMONPTR)                               0174
         ALR   R6,R7                                               0174
         CLI   C-1(R6),C'&&'                                       0174
         BNE   @RF00174                                            0174
*           DO;                     /*                               */
*             I=I+F1;               /* SKIP AMPERSAND                */
         AL    R7,FW1                                              0176
         ST    R7,I(,COMONPTR)                                     0176
*             V=I;                  /* SAVE START OF VARIABLE        */
         ST    R7,V                                                0177
*             CALL SCANWORD;        /* SCAN FOR VALID CHARS          */
         BAL   R14,SCANWORD                                        0178
*             IF C(I)=PERIOD THEN   /* IF A CONCAT '.', SQUASH IT OUT*/
         L     R1,I(,COMONPTR)                                     0179
         L     R2,BUFBASE(,COMONPTR)                               0179
         ALR   R2,R1                                               0179
         CLI   C-1(R2),C'.'                                        0179
         BNE   @RF00179                                            0179
*               CALL SQUASH;        /* GET RID OF PERIOD             */
         BAL   R14,SQUASH                                          0180
*             IF LEN=F0 THEN        /* IF ONLY AN AMPERSAND          */
@RF00179 L     R3,LEN(,COMONPTR)                                   0181
         LTR   R3,R3                                               0181
         BNZ   @RF00181                                            0181
*               IF C(I)^=AMPSAND THEN/* IF NOT DOUBLE AMPERSANDS     */
         L     R1,I(,COMONPTR)                                     0182
         L     R2,BUFBASE(,COMONPTR)                               0182
         ALR   R2,R1                                               0182
         CLI   C-1(R2),C'&&'                                       0182
         BE    @RF00182                                            0182
*                 ERROR=E900;       /* SET ERROR CODE                */
         MVC   ERROR(4),FW900                                      0183
*               ELSE                                               0184
*                 ;                 /* OTHERWISE NOTHING             */
@RF00182 DS    0H                                                  0185
*             ELSE                  /* OTHERWISE SUBSTITUTE VALUE    */
*               CALL INSERT;        /* CALL INSERT ROUTINE           */
         B     @RC00181                                            0185
@RF00181 BAL   R14,INSERT                                          0185
*           END;                                                   0186
*         ELSE                      /* IF NOT AN & CHECK FOR COMMENT */
*           IF I<LL-(FREEAMT+F4)&C(I:I+F1)=OPENCMT THEN/*            */
         B     @RC00174                                            0187
@RF00174 L     R3,I(,COMONPTR)                                     0187
         L     R2,BUFBASE(,COMONPTR)                               0187
         LA    R4,4                                                0187
         AL    R4,FREEAMT(,COMONPTR)                               0187
         LCR   R4,R4                                               0187
         AH    R4,LL(,R2)                                          0187
         CR    R3,R4                                               0187
         BNL   @RF00187                                            0187
         ALR   R2,R3                                               0187
         CLC   C-1(2,R2),SLSHASTR                                  0187
         BNE   @RF00187                                            0187
*             DO I=I+F3 TO LL-(F4+FREEAMT) WHILE C(I-F1:I)^=CLOSCMT;
         AL    R3,FW3                                              0188
         B     @DE00188                                            0188
@DL00188 L     R1,I(,COMONPTR)                                     0188
         L     R2,BUFBASE(,COMONPTR)                               0188
         ALR   R2,R1                                               0188
         CLC   C-2(2,R2),ASTRSLSH                                  0188
         BE    @DC00188                                            0188
*                                   /*                               */
*             END;                  /* FIND END OF COMMENT           */
         LA    R3,1                                                0189
         AL    R3,I(,COMONPTR)                                     0189
@DE00188 ST    R3,I(,COMONPTR)                                     0189
         L     R1,BUFBASE(,COMONPTR)                               0189
         LA    R2,4                                                0189
         AL    R2,FREEAMT(,COMONPTR)                               0189
         LCR   R2,R2                                               0189
         AH    R2,LL(,R1)                                          0189
         CR    R3,R2                                               0189
         BNH   @DL00188                                            0189
@DC00188 DS    0H                                                  0190
*       END;                                                       0190
@RF00187 DS    0H                                                  0190
@RC00174 LA    R5,1                                                0190
         AL    R5,I(,COMONPTR)                                     0190
@DE00173 ST    R5,I(,COMONPTR)                                     0190
         L     R1,BUFBASE(,COMONPTR)                               0190
         LA    R4,4                                                0190
         AL    R4,FREEAMT(,COMONPTR)                               0190
         LCR   R4,R4                                               0190
         AH    R4,LL(,R1)                                          0190
         CR    R5,R4                                               0190
         BNH   @DL00173                                            0190
@DC00173 DS    0H                                                  0191
*     END;                                                         0191
         LA    R3,1                                                0191
         AL    R3,Z                                                0191
@DE00171 ST    R3,Z                                                0191
         C     R3,SCANLIM                                          0191
         BNH   @DL00171                                            0191
@DC00171 DS    0H                                                  0192
*                                                                  0192
*     /***************************************************************/
*     /*                                                             */
*     /* ACCESS METHOD SERVICES COMPATABILITY CHECK - LASTCC AND     */
*     /* MAXCC ARE ALLOWED WITHOUT & ON THE LEFT OF THE OPERATOR     */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0192
*     IF OPCODE=IFCODE OPCODE=DOCODE THEN/* IF OR DO COMMANDS        */
         L     R4,OLDLINE(,COMONPTR)                               0192
         CLI   OPCODE(R4),2                                        0192
         BE    @RT00192                                            0192
         CLI   OPCODE(R4),7                                        0192
         BNE   @RF00192                                            0192
@RT00192 DS    0H                                                  0193
*       DO;                         /* MAKE CHECK                    */
*         I=MYO2;                   /* START OF SCAN                 */
         L     R6,MYO2(,COMONPTR)                                  0194
         ST    R6,I(,COMONPTR)                                     0194
*         CALL FINDWORD;            /* FIND A WORD                   */
         BAL   R14,FINDWORD                                        0195
*         IF SEPS=NO THEN           /* IF NOT ALL SEPARATORS         */
         TM    SEPS(COMONPTR),B'10000000'                          0196
         BNZ   @RF00196                                            0196
*           IF(LEN=LENGTH(LASTCC)&  /* LASTCC LENGTH                 */
*               C(BEGIN:BEGIN+LENGTH(LASTCC)-F1)=LASTCC) /* LASTCC   */
*               (LEN=LENGTH(MAXCC)& /* MAXCC LENGTH                  */
*               C(BEGIN:BEGIN+LENGTH(MAXCC)-F1)=MAXCC) THEN/* MAXCC  */
         CLC   LEN(4,COMONPTR),FW6                                 0197
         BNE   @GL00008                                            0197
         L     R1,BEGIN(,COMONPTR)                                 0197
         L     R2,BUFBASE(,COMONPTR)                               0197
         ALR   R2,R1                                               0197
         CLC   C-1(6,R2),$LASTCC                                   0197
         BE    @RT00197                                            0197
@GL00008 CLC   LEN(4,COMONPTR),FW5                                 0197
         BNE   @RF00197                                            0197
         L     R1,BEGIN(,COMONPTR)                                 0197
         L     R2,BUFBASE(,COMONPTR)                               0197
         ALR   R2,R1                                               0197
         CLC   C-1(5,R2),$MAXCC                                    0197
         BNE   @RF00197                                            0197
@RT00197 DS    0H                                                  0198
*             DO;                   /* PROCESS                       */
*               V=BEGIN;            /* BACK UP ONE FOR INSERT        */
         L     R4,BEGIN(,COMONPTR)                                 0199
         ST    R4,V                                                0199
*               NOAMPER=YES;        /* INDICATE NO AMPERSAND         */
         OI    NOAMPER(COMONPTR),B'00000010'                       0200
*               CALL INSERT;        /* INSERT VALUE HERE             */
         BAL   R14,INSERT                                          0201
*             END;                                                 0202
*         IF OPCODE=IFCODE THEN     /* ON OF STMT                    */
@RF00197 DS    0H                                                  0203
@RF00196 L     R1,OLDLINE(,COMONPTR)                               0203
         CLI   OPCODE(R1),2                                        0203
         BNE   @RF00203                                            0203
*           DO;                     /* RE-INSERT 'THEN'              */
*             V=LL-(F3+FREEAMT);    /* SET START OF AREA             */
         L     R1,BUFBASE(,COMONPTR)                               0205
         LA    R0,3                                                0205
         AL    R0,FREEAMT(,COMONPTR)                               0205
         LCR   R0,R0                                               0205
         AH    R0,LL(,R1)                                          0205
         ST    R0,V                                                0205
*             I=V;                  /* SET END AREA                  */
         ST    R0,I(,COMONPTR)                                     0206
*             LEN=F0;               /* SET ZERO LENGTH TO REMOVE     */
         SLR   R1,R1                                               0207
         ST    R1,LEN(,COMONPTR)                                   0207
*             NOAMPER=YES;          /* NO AMPERSAND ON VARIABLE      */
*             INSTHEN=YES;          /* INSERT THEN TO INSERT         */
         OI    NOAMPER(COMONPTR),B'00000011'                       0209
*             ERRSAV=ERROR;         /* SAVE ERROR CODE               */
         L     R0,ERROR                                            0210
         ST    R0,ERRSAV                                           0210
*             ERROR=F0;             /* CLEAR ERROR IF ANY            */
         ST    R1,ERROR                                            0211
*             CALL INSERT;          /* INSERT THEN                   */
         BAL   R14,INSERT                                          0212
*             ERROR=ERRSAV;         /* RESTORE ERROR CONDITION       */
         L     R2,ERRSAV                                           0213
         ST    R2,ERROR                                            0213
*           END;                    /*                               */
*       END;                        /*                               */
@RF00203 DS    0H                                                  0216
*                                                                  0216
*     /***************************************************************/
*     /*                                                             */
*     /* CONTROL COMMAND LIST                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0216
*     EXECDPTR=LSDEXEC;             /* RESET EXEC DATA POINTER       */
@RF00192 L     R1,LSDPTR(,COMONPTR)                                0216
         L     R1,LSDEXEC-LSD(,R1)                                 0216
         ST    R1,EXECDPTR(,COMONPTR)                              0216
*     IF ERROR=F0 THEN              /* IF OK SO FAR                  */
         L     R2,ERROR                                            0217
         LTR   R2,R2                                               0217
         BNZ   @RF00217                                            0217
*       DO I=1 TO LL-(F4+FREEAMT);  /* DO UNTIL END OF BUFFER        */
         LA    R3,1                                                0218
         B     @DE00218                                            0218
@DL00218 DS    0H                                                  0219
*         IF I<LL-(F4+FREEAMT)&     /* NOT BEFORE END OF BUFFER      */
*             (C(I:I+F1)=DAMPSAND   /* DOUBLE AMPERSAND              */
*             C(I:I+F1)=FDMPSAND) THEN/* FOLDED AMPERSANDS           */
         L     R4,I(,COMONPTR)                                     0219
         L     R5,BUFBASE(,COMONPTR)                               0219
         LA    R6,4                                                0219
         AL    R6,FREEAMT(,COMONPTR)                               0219
         LCR   R6,R6                                               0219
         AH    R6,LL(,R5)                                          0219
         CR    R4,R6                                               0219
         BNL   @RF00219                                            0219
         ALR   R4,R5                                               0219
         CLC   C-1(2,R4),$DBLAMPR                                  0219
         BE    @RT00219                                            0219
         L     R4,I(,COMONPTR)                                     0219
         ALR   R5,R4                                               0219
         CLC   C-1(2,R5),$HEX1010                                  0219
         BNE   @RF00219                                            0219
@RT00219 DS    0H                                                  0220
         TM    LCLFLAGS,$#NRSTR     PROCESSING &NRSTR?          ZP60014
         BO    @RF00219             YES, SUPPRESS SQUASH        ZP60014
*           CALL SQUASH;            /* SQUASH OUT THE EXTRA AMPERSAND*/
         BAL   R14,SQUASH                                          0220
*         IF OPCODE^=IFCODE&OPCODE^=DOCODE&/* NOT IF AND NOT DO      */
*             OPCODE^=SETCODE THEN  /* AND NOT SET                   */
@RF00219 L     R5,OLDLINE(,COMONPTR)                               0221
         CLI   OPCODE(R5),2                                        0221
         BE    @RF00221                                            0221
         CLI   OPCODE(R5),7                                        0221
         BE    @RF00221                                            0221
         CLI   OPCODE(R5),13                                       0221
         BE    @RF00221                                            0221
*           DO;                     /* FOLD TO UPPER CASE            */
*             FOLD=NO;              /* RESET FOLD INDICATOR          */
         NI    FOLD(COMONPTR),B'11101111'                          0223
*             TR(C(I),TRTABUP);     /* FOLD TO NORMAL CHARACTERS     */
         L     R1,I(,COMONPTR)                                     0224
         L     R2,BUFBASE(,COMONPTR)                               0224
         ALR   R2,R1                                               0224
         TR    C-1(1,R2),TRTABUP                                   0224
*           END;                    /*                               */
*       END;                                                       0226
@RF00221 LA    R3,1                                                0226
         AL    R3,I(,COMONPTR)                                     0226
@DE00218 ST    R3,I(,COMONPTR)                                     0226
         L     R1,BUFBASE(,COMONPTR)                               0226
         LA    R2,4                                                0226
         AL    R2,FREEAMT(,COMONPTR)                               0226
         LCR   R2,R2                                               0226
         AH    R2,LL(,R1)                                          0226
         CR    R3,R2                                               0226
         BNH   @DL00218                                            0226
         NI    LCLFLAGS,255-$#NRSTR RESET FUNCTION ACTIVE FLAG  ZP60014
*     IF LISTONLY=YES               /* BACKUP LIST OF TSO COMMAND    */
*         (ERROR>E16&(ERACTSTR=F0 ERRRANGE=YES)) /* A SEVERE ERROR   */
*         (CONLST=YES&(OPCODE^=F0 ERROR>E16)) THEN/* CONLIST         */
@RF00217 TM    LISTONLY(COMONPTR),B'00100000'                      0227
         BO    @RT00227                                            0227
         L     R3,ERROR                                            0227
         C     R3,FW16                                             0227
         BNH   @GL00015                                            0227
         L     R1,EXECDPTR(,COMONPTR)                              0227
         L     R2,ERACTSTR(,R1)                                    0227
         LTR   R2,R2                                               0227
         BZ    @RT00227                                            0227
         TM    ERRRANGE(COMONPTR),B'00000100'                      0227
         BO    @RT00227                                            0227
@GL00015 L     R1,EXECDPTR(,COMONPTR)                              0227
         TM    CONLST(R1),B'10000000'                              0227
         BNO   @RF00227                                            0227
         L     R1,OLDLINE(,COMONPTR)                               0227
         CLI   OPCODE(R1),0                                        0227
         BNE   @RT00227                                            0227
         L     R2,ERROR                                            0227
         C     R2,FW16                                             0227
         BNH   @RF00227                                            0227
@RT00227 DS    0H                                                  0228
*       DO;                                                        0228
*         LISTED=YES;               /* COMMAND ALREADY LISTED        */
         OI    LISTED(COMONPTR),B'00001000'                        0229
*         CALL CMDLST;              /* LIST COMMAND                  */
         BAL   R14,CMDLST                                          0230
*         IF LISTONLY=YES&ERROR=F0 THEN/* IF LISTED OK               */
         TM    LISTONLY(COMONPTR),B'00100000'                      0231
         BNO   @RF00231                                            0231
         L     R3,ERROR                                            0231
         LTR   R3,R3                                               0231
         BNZ   @RF00231                                            0231
*           ERROR=E4;               /* GET ANOTHER LINE              */
         MVC   ERROR(4),FW4                                        0232
*       END;                                                       0233
@RF00231 DS    0H                                                  0234
*                                                                  0234
*     /***************************************************************/
*     /*                                                             */
*     /* FUNCTION CALL AND NEXT COMMAND UPDATE                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0234
*     IF ERROR=F0 THEN              /* IF OK UP TO NOW               */
@RF00227 L     R4,ERROR                                            0234
         LTR   R4,R4                                               0234
         BNZ   @RF00234                                            0234
*       DO;                         /* CALL FUNCTION                 */
*         RFY                                                      0236
*          (R15) RSTD;              /* RESTRICT REG 15               */
*         CALL IKJCT436(UPTX,ECTX,ECB,GTPB,PARM433);/* CALL FUNCTION */
         L     R14,@PC00001                                        0237
         ST    R14,@AL00001                                        0237
         L     R14,@PC00001+4                                      0237
         ST    R14,@AL00001+4                                      0237
         L     R14,@PC00001+8                                      0237
         ST    R14,@AL00001+8                                      0237
         L     R14,@PC00001+12                                     0237
         ST    R14,@AL00001+12                                     0237
         L     R14,@PC00001+16                                     0237
         ST    R14,@AL00001+16                                     0237
         L     R15,IKJCT436                                        0237
         LA    R1,@AL00001                                         0237
         BALR  R14,R15                                             0237
*         ERROR=R15;                /* SET ERROR CODE                */
         ST    R15,ERROR                                           0238
*         RFY                                                      0239
*          (R15) UNRSTD;            /* RELEASE REG 15                */
*       END;                        /*                               */
*     ERCOM=F0;                     /* CLEAR COMMON ERROR FOR MSGOUT */
@RF00234 SLR   R0,R0                                               0241
         ST    R0,ERCOM(,COMONPTR)                                 0241
*     IF PARMDEFR=YES THEN          /* IF OK TO CHANGE STATUS        */
         L     R1,@PC00001+16                                      0242
         TM    PARMDEFR(R1),B'10000000'                            0242
         BNO   @RF00242                                            0242
*       GEN REFS(DEFERNO)(STAX MF=(E,DEFERNO));/* ALLOW ATTNS        */
         STAX MF=(E,DEFERNO)
*     IF ECBCBIT=YES THEN           /* IF ATTN POSTED                */
@RF00242 L     R2,@PC00001+8                                       0244
         TM    ECBCBIT(R2),B'01000000'                             0244
         BNO   @RF00244                                            0244
*       ERROR=E8;                   /* SET ATTN CODE                 */
         MVC   ERROR(4),FW8                                        0245
*     IF PARMDEFR=YES THEN          /* IF OK TO CHANGE STATUS        */
@RF00244 L     R3,@PC00001+16                                      0246
         TM    PARMDEFR(R3),B'10000000'                            0246
         BNO   @RF00246                                            0246
*       GEN REFS(DEFERYES)(STAX MF=(E,DEFERYES));/* NO ATTNS AGAIN   */
         STAX MF=(E,DEFERYES)
*     IF ERROR^=E4 THEN             /* IF NOT A CONTINU RETURN CODE  */
@RF00246 CLC   ERROR(4),FW4                                        0248
         BNE   LBL007EC
         TM    CONTINU(COMONPTR),B'00001110'
         BZ    @RF00248                                            0248
*       CONTINU=NO;                 /* DON''T CONTINUE               */
LBL007EC NI    CONTINU(COMONPTR),B'10111111'                       0249
*     IF CONTINU=YES THEN           /* IF OK TO CONTINUE             */
@RF00248 TM    CONTINU(COMONPTR),B'01000000'                       0250
         BNO   @RF00250                                            0250
*       DO;                         /* CHECK FOR END OF CLIST        */
*         ECDACBLK=LSDADATA;        /* POINT TO FIRST BLOCK          */
         L     R1,LSDPTR(,COMONPTR)                                0252
         L     R1,LSDADATA-LSD(,R1)                                0252
         ST    R1,ECDACBLK                                         0252
*         DO WHILE ECDACBK2^=F0&CONTINU=YES;/* FIND NEXT BLOCK       */
         B     @DE00253                                            0253
@DL00253 DS    0H                                                  0254
*           IF CURID=COMPRID&       /* IF IDS MATCH                  */
*               CURADDR>=ECDACBK2+COMPRLNG THEN/* AND AT END         */
         L     R2,LSDPTR(,COMONPTR)                                0254
         L     R3,ECDACBLK                                         0254
         CLC   CURID(1,R2),COMPRID(R3)                             0254
         BNE   @RF00254                                            0254
         SLR   R4,R4                                               0254
         ICM   R4,7,ECDACBK2                                       0254
         AL    R4,COMPRLNG(,R3)                                    0254
         SLR   R5,R5                                               0254
         ICM   R5,7,CURADDR(R2)                                    0254
         CR    R4,R5                                               0254
         BH    @RF00254                                            0254
*             IF COMPRNXT=F0 THEN   /* IF NO MORE BLOCKS     @ZA08099*/
         SLR   R2,R2                                               0255
         ICM   R2,7,COMPRNXT(R3)                                   0255
         LTR   R2,R2                                               0255
         BNZ   @RF00255                                            0255
*               DO;                 /*                       @ZA08099*/
*                 EOCLIST=YES;      /* END OF THIS CLIST     @ZA08099*/
         L     R3,@PC00001+16                                      0257
         OI    EOCLIST(R3),B'01000000'                             0257
*                 CONTINU=NO;       /* DISSALLOW CONTINUE            */
         NI    CONTINU(COMONPTR),B'10111111'                       0258
*               END;                /*                       @ZA08099*/
*             ELSE                  /* OTHERWISE                     */
*               DO;                 /* GO TO NEXT BLOCK              */
         B     @RC00255                                            0260
@RF00255 DS    0H                                                  0261
*                 CURADDR=COMPRNXT+LENGTH(COMPROC);/* UPDATE LSD     */
         L     R4,LSDPTR(,COMONPTR)                                0261
         L     R5,ECDACBLK                                         0261
         LA    R6,12                                               0261
         SLR   R7,R7                                               0261
         ICM   R7,7,COMPRNXT(R5)                                   0261
         ALR   R6,R7                                               0261
         STCM  R6,7,CURADDR(R4)                                    0261
*                 CURID=COMPRID+1;  /* INCREMENT BLOCK ID            */
         LA    R14,1                                               0262
         SLR   R15,R15                                             0262
         IC    R15,COMPRID(,R5)                                    0262
         ALR   R14,R15                                             0262
         STC   R14,CURID(,R4)                                      0262
*                 ECDACBLK=F0;      /* END SCAN                      */
         SLR   R0,R0                                               0263
         ST    R0,ECDACBLK                                         0263
*               END;                /*                               */
*           ELSE                    /* OTHERWISE                     */
*             ECDACBLK=COMPRPTR;    /* CHECK NEXT BLOCK              */
         B     @RC00254                                            0265
@RF00254 L     R1,ECDACBLK                                         0265
         L     R2,COMPRPTR(,R1)                                    0265
         ST    R2,ECDACBLK                                         0265
*         END;                      /*                               */
@RC00254 DS    0H                                                  0266
@DE00253 SLR   R3,R3                                               0266
         ICM   R3,7,ECDACBK2                                       0266
         LTR   R3,R3                                               0266
         BZ    @DC00253                                            0266
         TM    CONTINU(COMONPTR),B'01000000'                       0266
         BO    @DL00253                                            0266
@DC00253 DS    0H                                                  0267
*         IF CONTINU=YES THEN       /* IF CONTINUING                 */
         TM    CONTINU(COMONPTR),B'01000000'                       0267
         BNO   @RF00267                                            0267
*           DO;                     /* UPDATE POINTERS               */
*             GTPBLINE=LSDANEXT;    /* SAVE LSDANEXT                 */
         L     R4,@PC00001+12                                      0269
         L     R5,LSDPTR(,COMONPTR)                                0269
         L     R6,LSDANEXT-LSD(,R5)                                0269
         ST    R6,GTPBLINE(,R4)                                    0269
*             LSDANEXT=LSDANEXT+LSDANEXT->LL;/* UPDATE LSD POINTER   */
         LH    R7,LL(,R6)                                          0270
         ALR   R7,R6                                               0270
         ST    R7,LSDANEXT-LSD(,R5)                                0270
*           END;                    /*                               */
*       END;                        /*                               */
@RF00267 DS    0H                                                  0273
*FASTCYCL:                                                         0273
*   END;                            /*                       @ZA08099*/
@RF00250 DS    0H                                                  0273
FASTCYCL DS    0H                                                  0273
@DE00041 TM    CONTINU(COMONPTR),B'01000000'                       0273
         BO    @DL00041                                            0273
*                                                                  0274
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN CODE UPDATE IF ERROR AND STACK FLUSH IF NEEDED         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0274
*FASTEXIT:                                                         0274
*   IF ERROR>E8 THEN                /* IF AN ERROR OCCURRED          */
FASTEXIT L     R14,ERROR                                           0274
         C     R14,FW8                                             0274
         BNH   @RF00274                                            0274
*     DO;                           /* PROCESS ERROR CONDITION       */
*       IF ERROR=E16 THEN           /* IF A GETMAIN FAIL             */
         C     R14,FW16                                            0276
         BE    LBL008F2
*       IF ERROR=E999
         C     R14,FW999                                           0276
         BE    LBL008F2
         L     R1,EXECDPTR(,COMONPTR)
         CLC   STAECNT(2,R1),HW1
         BNH   @RF00276                                            0276
*         QUIT=YES;                 /* FLUSH STACK                   */
LBL008F2 OI    QUIT(COMONPTR),B'00100000'                          0277
*       ELSE                        /* OTHERWISE                     */
*         QUIT=NO;                  /* DONT FLUSH -- YET             */
         B     @RC00276                                            0278
@RF00276 NI    QUIT(COMONPTR),B'11011111'                          0278
*       ERRSAV=ERROR;               /* SAVE ERROR CODE               */
@RC00276 L     R3,ERROR                                            0279
         ST    R3,ERRSAV                                           0279
*       ERROR=F0;                   /* SET ERROR TO ZERO TO          */
         SLR   R4,R4                                               0280
         ST    R4,ERROR                                            0280
*       CALL RCUPDT;                /* SET RETURN CODE INDICATORS    */
         BAL   R14,RCUPDT                                          0281
*       IF ERRCMD=YES THEN          /* ID ERROR COMMAND IN EFFECT    */
         L     R5,EXECDPTR(,COMONPTR)                              0282
         TM    ERRCMD(R5),B'01000000'                              0282
         BNO   @RF00282                                            0282
         CLC   STAECNT(2,R5),HW1
         BH    @RF00282
*         IF ERRRANGE=YES THEN      /* IF IN AN ERROR RANGE          */
         TM    ERRRANGE(COMONPTR),B'00000100'                      0283
         BNO   @RF00283                                            0283
*           DO;                     /*                               */
*             IF ERRSAV^=E908 THEN  /* NOT ALREADY A RECURSE MSG     */
         CLC   ERRSAV(4),FW908                                     0285
         BE    @RF00285                                            0285
*               RECURSE=YES;        /* SET RECURSIVE ERROR BIT       */
         OI    RECURSE(COMONPTR),B'00100000'                       0286
*             QUIT=YES;             /* FLUSH STACK                   */
@RF00285 OI    QUIT(COMONPTR),B'00100000'                          0287
*           END;                    /*                               */
*         ELSE                      /* IF NOT IN ERRANGE             */
*           IF ERACTSTR^=F0 THEN    /* IF NO ERACTSTR                */
         B     @RC00283                                            0289
@RF00283 L     R6,EXECDPTR(,COMONPTR)                              0289
         L     R7,ERACTSTR(,R6)                                    0289
         LTR   R7,R7                                               0289
         BZ    @RF00289                                            0289
*             DO;                   /*                               */
*               ERINCNTL=YES;       /* SET ERROR IN CONTROL          */
         OI    ERINCNTL(R6),B'00001000'                            0291
*               CALL RETUPDT(LSDANEXT);/* UPDATE RETURN POINT        */
         L     R1,LSDPTR(,COMONPTR)                                0292
         LA    R2,LSDANEXT-LSD(,R1)                                0292
         ST    R2,@AL00001                                         0292
         LA    R1,@AL00001                                         0292
         BAL   R14,RETUPDT                                         0292
*               LSDANEXT=ERACTSTR;  /* SET GOTO ADDR                 */
         L     R1,LSDPTR(,COMONPTR)                                0293
         L     R2,EXECDPTR(,COMONPTR)                              0293
         L     R0,ERACTSTR(,R2)                                    0293
         ST    R0,LSDANEXT-LSD(,R1)                                0293
*             END;                  /*                               */
*           ELSE                    /* OTHERWISE                     */
*             IF LISTED=NO THEN     /* IF COMMAND NOT LISTED         */
         B     @RC00289                                            0295
@RF00289 TM    LISTED(COMONPTR),B'00001000'                        0295
         BNZ   @RF00295                                            0295
*               DO;                 /* LIST COMMAND IN ERROR         */
*                 LISTED=YES;       /* SAY WE HAVE LISTED COMMAND    */
         OI    LISTED(COMONPTR),B'00001000'                        0297
*                 CALL CMDLST;      /* LIST COMMAND                  */
         BAL   R14,CMDLST                                          0298
*               END;                /*                               */
*             ELSE                                                 0300
*               ;                   /* NOTHING                       */
@RF00295 DS    0H                                                  0301
*       ELSE                        /* IF NO ERRCMD                  */
*         QUIT=YES;                 /* FLUSH STACK                   */
         B     @RC00282                                            0301
@RF00282 OI    QUIT(COMONPTR),B'00100000'                          0301
*       IF QUIT=YES LISTED=YES THEN /* FLUSH STACK ?                 */
@RC00282 TM    QUIT(COMONPTR),B'00100000'                          0302
         BO    @RT00302                                            0302
         TM    LISTED(COMONPTR),B'00001000'                        0302
         BNO   @RF00302                                            0302
@RT00302 DS    0H                                                  0303
*         DO;                       /* IF SO PRINT ERROR MSG         */
*           IF LISTED=NO THEN       /* IF NOT ALREADY LISTED         */
         TM    LISTED(COMONPTR),B'00001000'                        0304
         BNZ   @RF00304                                            0304
*             CALL CMDLST;          /* LIST COMMAND                  */
         BAL   R14,CMDLST                                          0305
*           IF QUIT=YES THEN        /* GOING TO FLUSH ?              */
@RF00304 TM    QUIT(COMONPTR),B'00100000'                          0306
         BNO   @RF00306                                            0306
*             NOMSG=NO;             /* ALLOW MESSAGE TO GO OUT       */
         L     R1,EXECDPTR(,COMONPTR)                              0307
         NI    NOMSG(R1),B'11111101'                               0307
*           CALL MSGOUT;            /* PUT OUT SELECTED MESSAGE      */
@RF00306 BAL   R14,MSGOUT                                          0308
*           IF RECURSE=YES THEN     /* A RECURSIVE ERROR ?           */
         TM    RECURSE(COMONPTR),B'00100000'                       0309
         BNO   @RF00309                                            0309
*             DO;                   /* BUILD CORRECT MESSAGE         */
*               ERRSAV=E908;        /* SET RECURSIVE ERROR           */
         MVC   ERRSAV(4),FW908                                     0311
*               CALL MSGOUT;        /* PUT OUT RECURSIVE MESSAGE     */
         BAL   R14,MSGOUT                                          0312
*             END;                  /*                               */
*           IF QUIT=YES THEN        /* FLUSH THE STACK               */
@RF00309 TM    QUIT(COMONPTR),B'00100000'                          0314
         BNO   @RF00314                                            0314
*             DO;                   /* FLUSH IT                      */
*               ECTRTCD=ERRSAV;     /* SET ECT RETURN CODE FIELD     */
         L     R2,@PC00001+4                                       0316
         MVC   ECTRTCD-ECT(3,R2),ERRSAV+1                          0316
*               ECTRCDF=''B;        /* CLEAR ABEND FLAG              */
         MVI   ECTRCDF-ECT(R2),X'00'                               0317
*               NOFLUSH=NO;         /* TURN OFF NOFLUSH OPTION       */
*               CMAIN=NO;           /* TURN OFF MAIN OPTION          */
         L     R1,EXECDPTR(,COMONPTR)                              0319
         NI    NOFLUSH(R1),B'11011011'                             0319
*               IOPL(4)=ADDR(STFLUSH);/* PUTLINE PARM BLOCK          */
         LA    R2,STFLUSH                                          0320
         ST    R2,IOPL+12(,COMONPTR)                               0320
*               RFY                                                0321
*                (R1) RSTD;         /* RESTRICT REG ONE              */
*               R1=ADDR(IOPL);      /* LOAD PARM ADDRESS             */
         LR    R1,COMONPTR                                         0322
*               CALL IKJEFT30;      /* FLUSH STACK                   */
         L     R15,IKJEFT30                                        0323
         BALR  R14,R15                                             0323
*               RFY                                                0324
*                (R1) UNRSTD;       /* RELEASE REG ONE               */
*             END;                  /*                               */
*         END;                      /*                               */
@RF00314 DS    0H                                                  0327
*       ERROR=E4;                   /* SET OK TO GET ANOTHER COMMAND */
@RF00302 MVC   ERROR(4),FW4                                        0327
*     END;                          /*                               */
*                                                                  0329
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE BUFFERS AS REQUIRED                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0329
*   IF CORE=YES THEN                /* NO GETMAIN ERROR YET          */
@RF00274 TM    CORE(COMONPTR),B'10000000'                          0329
         BNO   @RF00329                                            0329
*     DO;                           /* FREE PARTS OF OR ALL BUFFERS  */
*       IF ERROR=F0 THEN            /* IF ALL OK                     */
         L     R0,ERROR                                            0331
         LTR   R0,R0                                               0331
         BNZ   @RF00331                                            0331
*         DO;                       /* FREEMAIN EXCESS PART OF BUFFER*/
*           FREEADDR(1)=(BUFBASE+LL-FREEAMT+7)/8*8;/* CALC FREE ADDR */
         L     R1,BUFBASE(,COMONPTR)                               0333
         LH    R2,LL(,R1)                                          0333
         LR    R4,R1                                               0333
         ALR   R4,R2                                               0333
         L     R3,FREEAMT(,COMONPTR)                               0333
         SLR   R4,R3                                               0333
         AL    R4,FW7                                              0333
         SRDA  R4,32                                               0333
         D     R4,FW8                                              0333
         SLA   R5,3                                                0333
         ST    R5,FREEADDR                                         0333
*           FREELEN(1)=LL-(FREEADDR(1)-BUFBASE);/* CALC FREE LENGTH  */
         SLR   R5,R1                                               0334
         LCR   R5,R5                                               0334
         ALR   R5,R2                                               0334
         ST    R5,FREELEN                                          0334
*           LL=LL-FREEAMT;          /* ADJUST BUFFER LL              */
         SLR   R2,R3                                               0335
         STH   R2,LL(,R1)                                          0335
*           GTPBLINE=BUFBASE;       /* PUT LINE ADDR IN CALLERS AREA */
         L     R4,@PC00001+12                                      0336
         ST    R1,GTPBLINE(,R4)                                    0336
*         END;                      /*                               */
*       ELSE                        /* OTHERWISE FREE OBTAINED BUFFER*/
*         DO;                       /*                               */
         B     @RC00331                                            0338
@RF00331 DS    0H                                                  0339
*           FREEADDR(1)=BUFBASE;    /* BUFFER ADDRESS                */
         L     R5,BUFBASE(,COMONPTR)                               0339
         ST    R5,FREEADDR                                         0339
*           FREELEN(1)=LL;          /* BUFFER LENGTH                 */
         LH    R6,LL(,R5)                                          0340
         ST    R6,FREELEN                                          0340
*         END;                      /*                               */
*       FREEADDR(2)=NEWBASE;        /* ALTERNATE BUFFER ALWAYS FREED */
@RC00331 L     R7,NEWBASE(,COMONPTR)                               0342
         ST    R7,FREEADDR+4                                       0342
*       FREELEN(2)=NEWLL FREELAST;  /* LENGTH OF ALTERNATE BUFFER    */
         LH    R14,NEWLL(,R7)                                      0343
         O     R14,HIGHBIT                                         0343
         ST    R14,FREELEN+4                                       0343
*       DO;                         /* FREEMAIN (L) LA(FREELEN(1)) 0344
*                                      A(FREEADDR(1)) SP(F1)       0344
*                                      MF(E,FRELST)                  */
*         RESPECIFY                                                0345
*          (R1) RESTRICTED;                                        0345
*         FRELST05='80'X;           /* SET TYPE                      */
         MVI   FRELST05,X'80'                                      0346
*         FRELST02=ADDR(FREELEN(1));/* ADDR OF LENGTH LIST           */
         LA    R0,FREELEN                                          0347
         STCM  R0,7,FRELST02                                       0347
*         FRELST04=ADDR(FREEADDR(1));/* ADDR OF ADDR LIST            */
         LA    R0,FREEADDR                                         0348
         STCM  R0,7,FRELST04                                       0348
*         FRELST06=F1;              /* SUBPOOL VALUE                 */
         MVI   FRELST06,X'01'                                      0349
*         R1=ADDR(FRELST);          /* REG1 POINTS TO LIST           */
         LA    R1,FRELST                                           0350
*         SVC(5);                   /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0351
*         RESPECIFY                                                0352
*          (R1) UNRESTRICTED;                                      0352
*       END;                        /* FREEMAIN (L) LA(FREELEN(1)) 0353
*                                      A(FREEADDR(1)) SP(F1)       0353
*                                      MF(E,FRELST)                  */
*     END;                                                         0354
*   RETURN CODE(ERROR);             /* RETURN TO GETLINE             */
@RF00329 L     R2,ERROR                                            0355
         L     R13,4(,R13)                                         0355
         L     R0,@SIZDATD                                         0355
         LR    R1,R9                                               0355
         IKJEXEC  R,LV=(0),A=(1)
         LR    R15,R2                                              0355
         L     R14,12(,R13)                                        0355
         LM    R0,R12,20(R13)                                      0355
         BR    R14                                                 0355
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* RETURN NUMERIC VALUE                                 ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*                                                               ZP60014
@EP0GET# LA    R3,FW12              SET NUMERIC FUNCTION CODE   ZP60014
         B     @EP00356             BRANCH TO COMMON LOGIC      ZP60014
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* UPDATE WITH IMPLICIT CREATE ENTRY                    ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*                                                               ZP60014
@EP0INIT LA    R3,FW8               SET LOCATE FUNCTION CODE    ZP60014
         B     @EP00356             BRANCH TO COMMON LOGIC      ZP60014
*                                                                  0356
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE ONLY ENTRY                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0356
*IKJUPDT:                                                          0356
*   ENTRY(UPTX,ECTX,ECB,UPLIST);    /*                               */
@EP0UPDT LA    R3,FW0               SET LOCATE FUNCTION CODE    ZP60014
@EP00356 MVC   @PC00001(12),0(R1)                                  0356
         MVC   @PC00001+20(4),12(R1)                               0356
*   SWS=''B;                        /* CLEAR MOST SWITCHES           */
         XC    SWS(5,COMONPTR),SWS(COMONPTR)                       0357
*   CALL INTSETUP;                  /* INIT VARIABLES                */
         BAL   R14,INTSETUP                                        0358
*   SYSUPDTE=YES;                   /* INDICATE SYSTEM UPDATE        */
         OI    SYSUPDTE(COMONPTR),B'00000100'                      0359
*   CALL LOCATE(LCVAL,LCVALLEN,F0); /* LOCATE VARIABLE               */
         L     R2,@PC00001+20       (PRESERVE R3 - ZP60014)        0360
         L     R1,LCVALPTR(,R2)     (PRESERVE R3 - ZP60014)        0360
         ST    R1,@AL00001                                         0360
         LA    R2,LCVALLEN(,R2)     (PRESERVE R3 - ZP60014)        0360
         ST    R2,@AL00001+4                                       0360
         ST    R3,@AL00001+8        SET LOCATE FUNCTION CODE       0360
         LA    R1,@AL00001                                         0360
         BAL   R14,LOCATE                                          0360
*   IF ERROR=F0 THEN                /* IF FOUND                      */
         L     R4,ERROR                                            0361
         LTR   R4,R4                                               0361
         BNZ   @RF00361                                            0361
         L     R3,@AL00001+8        POINT TO FUNCTION CODE      ZP60014
         CLC   FUNC(4,R3),FW12      GETTING NUMERIC VALUE?      ZP60014
         BNE   NOT#VALU             NO                          ZP60014
         L     R3,SNTELPTR(,COMONPTR)                           ZP60014
         L     R1,SNTVLPTR(,R3)     POINT TO VALUE ELEMENT      ZP60014
         LH    R0,SVTLNG(,R1)       GET VALUE LENGTH            ZP60014
         LA    R1,SVTDATA(,R1)      GET VALUE ADDRESS           ZP60014
         STH   R0,CLEN(,COMONPTR)   SET VALUE LENGTH            ZP60014
         ST    R1,ANSPTR(,COMONPTR) SET VALUE ADDRESS           ZP60014
         BAL   R14,CONVERT          CONVERT TO BINARY           ZP60014
         L     R15,ERROR            GET ERROR CODE              ZP60014
         XC    ERROR,ERROR          RESET ERROR CODE            ZP60014
         LTR   R15,R15              VALID NUMERIC?              ZP60014
         BNZ   @RF00361             NO, RETURN ZERO             ZP60014
         MVC   ERROR,V2             YES, SET NUMERIC VALUE      ZP60014
         B     @RF00361             RETURN BINARY VALUE         ZP60014
NOT#VALU DS    0H                                               ZP60014
*     CALL UPDATE(UPVAL,UPVALLEN);  /* UPDATE THE VARIABLE           */
         L     R5,@PC00001+20                                      0362
         L     R1,UPVALPTR(,R5)                                    0362
         ST    R1,@AL00001                                         0362
         LA    R2,UPVALLEN(,R5)                                    0362
         ST    R2,@AL00001+4                                       0362
         LA    R1,@AL00001                                         0362
         BAL   R14,UPDATE                                          0362
*   RETURN CODE(ERROR);             /* RETURN TO GETLINE             */
@RF00361 L     R3,ERROR                                            0363
         L     R13,4(,R13)                                         0363
         L     R0,@SIZDATD                                         0363
         LR    R1,R9                                               0363
         IKJEXEC  R,LV=(0),A=(1)
         LR    R15,R3                                              0363
         L     R14,12(,R13)                                        0363
         LM    R0,R12,20(R13)                                      0363
         BR    R14                                                 0363
*                                                                  0364
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZATION ROUTINE                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0364
*INTSETUP:                                                         0364
*   PROC;                                                          0364
*EL00001 L     R13,4(,R13)                                         0364
*EF00001 L     R0,@SIZDATD                                         0364
*        LR    R1,R9                                               0364
*        IKJEXEC  R,LV=(0),A=(1)
*ER00001 LM    R14,R12,12(R13)                                     0364
*        BR    R14                                                 0364
INTSETUP STM   R14,R12,12(R13)                                     0364
*   STFLUSH(1:MACLEN)=STACKL(1:MACLEN);/* COPY LIST MACROS           */
**       L     R4,MACLEN                                  ZP60014  0365
**       BCTR  R4,0                                       ZP60014  0365
**       EX    R4,@SM01094                                ZP60014  0365
         MVC   STFLUSH(MACLEN),STACKL                     ZP60014  0365
*   IOPL(1)=ADDR(UPT);              /* ADDR OF UPT                   */
         L     R5,@PC00001                                         0366
         ST    R5,IOPL(,COMONPTR)                                  0366
*   IOPL(2)=ADDR(ECT);              /* ADDR OF ECT                   */
         L     R6,@PC00001+4                                       0367
         ST    R6,IOPL+4(,COMONPTR)                                0367
*   IOPL(3)=ADDR(ECB);              /* ADDR OF ECB                   */
         L     R7,@PC00001+8                                       0368
         ST    R7,IOPL+8(,COMONPTR)                                0368
*   ERROR=F0;                       /* ZERO ERROR INDICATOR          */
         SLR   R7,R7                                               0369
         ST    R7,ERROR                                            0369
*   ERCOM=F0;                       /* ZERO ERROR INDICATOR (COMMON) */
         ST    R7,ERCOM(,COMONPTR)                                 0370
*   FREEAMT=F0;                     /* ZERO AMOUNT THAT IS FREE      */
         ST    R7,FREEAMT(,COMONPTR)                               0371
*   FREEADDR(1)=F0;                 /* INIT FREEMAIN ADDR TO 0       */
         ST    R7,FREEADDR                                         0372
*   FREELEN(1)=F0;                  /* INIT FREEMAIN LENGTH TO 0     */
         ST    R7,FREELEN                                          0373
*   SW2=''B;                        /* TURN OFF LOOP SWITCHES        */
         MVI   SW2(COMONPTR),X'00'                                 0374
*   FRELST=''B;                     /* CLEAR FREEMAIN LIST AREA      */
         XC    FRELST(10),FRELST                                   0375
*   GETLST=''B;                     /* CLEAR GETMAIN LIST AREA       */
         XC    GETLST(10),GETLST                                   0376
*   LSDPTR=INSADLSD;                /* POINT TO LSD                  */
         L     R1,ECTIOWA-ECT(,R6)                                 0377
         L     R1,IOSTELM(,R1)                                     0377
         SLR   R0,R0                                               0377
         ICM   R0,7,INSADLSD(R1)                                   0377
         ST    R0,LSDPTR(,COMONPTR)                                0377
*   DO;                             /* GETMAIN (EC) MF(M,GETLST)     */
*     GETLST04='20'X;               /* TYPE                          */
         MVI   GETLST04,X'20'                                      0379
*   END;                            /* GETMAIN (EC) MF(M,GETLST) SET
*                                      TYPE OF GETMAIN               */
*   DO;                             /* FREEMAIN (E) MF(M,FRELST)     */
*     FRELST05='00'X;               /* SET TYPE                      */
         MVI   FRELST05,X'00'                                      0382
*   END;                            /* FREEMAIN (E) MF(M,FRELST) SET
*                                      TYPE OF FREEMAIN              */
*   END INTSETUP;                                                  0384
@EL00002 DS    0H                                                  0384
@EF00002 DS    0H                                                  0384
@ER00002 LM    R14,R12,12(R13)                                     0384
         BR    R14                                                 0384
*                                                                  0385
*   /*****************************************************************/
*   /*                                                               */
*   /* MESSAGE OUTPUT ROUTINE                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0385
*MSGOUT:                                                           0385
*   PROC OPTIONS(SAVEAREA);                                        0385
MSGOUT   STM   R14,R12,12(R13)                                     0385
         ST    R13,@SA00003+4                                      0385
         LA    R14,@SA00003                                        0385
         ST    R14,8(,R13)                                         0385
         LR    R13,R14                                             0385
*   MATCH=NO;                       /* RESET MATCH SWITCH            */
         NI    MATCH(COMONPTR),B'11101111'                         0386
*   IF RCABEND=YES THEN             /* FOR AN ABEND ERROR            */
         TM    RCABEND(COMONPTR),B'10000000'                       0387
         BNO   @RF00387                                            0387
*     I=MSGDIM;                     /* GET INTERNAL ERROR MSG        */
         L     R1,@MSGTABL                                         0388
         LH    R2,MSGDIM-MSGTABL(,R1)                              0388
         ST    R2,I(,COMONPTR)                                     0388
*   ELSE                            /* OTHERWISE START FROM BEGINNING*/
*     I=F1;                         /*                               */
         B     @RC00387                                            0389
@RF00387 MVC   I(4,COMONPTR),FW1                                   0389
*   DO I=I TO MSGDIM WHILE MATCH=NO;/* NOT FOUND?-TRY HERE           */
@RC00387 L     R3,I(,COMONPTR)                                     0390
         B     @DE00390                                            0390
@DL00390 TM    MATCH(COMONPTR),B'00010000'                         0390
         BNZ   @DC00390                                            0390
*     IF(ERRSAV>=IDA(I)&ERRSAV<=IDC(I)) I=MSGDIM THEN/* A MATCH      */
         L     R4,ERRSAV                                           0391
         L     R5,I(,COMONPTR)                                     0391
         MH    R5,HW12                                             0391
         L     R6,@MSGTABL                                         0391
         LA    R1,0(R5,R6)                                         0391
         AL    R1,FWNEG10                                          0391
         CH    R4,IDA-MSGTABL-2(,R1)                               0391
         BL    @GL00025                                            0391
         AL    R6,FWNEG8                                           0391
         CH    R4,IDC-MSGTABL-4(R5,R6)                             0391
         BNH   @RT00391                                            0391
@GL00025 L     R2,@MSGTABL                                         0391
         L     R3,I(,COMONPTR)                                     0391
         CH    R3,MSGDIM-MSGTABL(,R2)                              0391
         BNE   @RF00391                                            0391
@RT00391 DS    0H                                                  0392
*       DO;                         /* FILL IN OLD                   */
*         MATCH=YES;                /* TERMINATE SCAN FOR MESSAGE    */
         OI    MATCH(COMONPTR),B'00010000'                         0393
*         N=SEGNUM(I);              /* GET CURRENT NUMBER OF SEGMENTS*/
         L     R4,I(,COMONPTR)                                     0394
         MH    R4,HW12                                             0394
         L     R5,@MSGTABL                                         0394
         LA    R1,0(R4,R5)                                         0394
         BCTR  R1,0                                                0394
         BCTR  R1,0                                                0394
         SLR   R0,R0                                               0394
         IC    R0,SEGNUM-MSGTABL-10(,R1)                           0394
         ST    R0,N                                                0394
*         OLD(3)=MSGSEG1(I);        /* FIRST SEGMENT                 */
         ST    R4,@AFTEMPS
         ALR   R4,R5
         AL    R4,FWNEG5                                           0395
         SLR   R1,R1                                               0395
         ICM   R1,7,MSGSEG1-MSGTABL-7(R4)                          0395
         ST    R1,OLD+8                                            0395
*         OLD(4)=MSGSEG2(I);        /* SECOND SEGMENT IF ONE         */
         AL    R5,@AFTEMPS
         BCTR  R5,0                                                0396
         SLR   R4,R4                                               0396
         ICM   R4,7,MSGSEG2-MSGTABL-11(R5)                         0396
         ST    R4,OLD+12                                           0396
*         IF RECURSE=YES&ERRSAV=E908 THEN/* IF ALSO TYPE ERROR       */
         TM    RECURSE(COMONPTR),B'00100000'                       0397
         BNO   @RF00397                                            0397
         CLC   ERRSAV(4),FW908                                     0397
         BNE   @RF00397                                            0397
*           DO;                     /* FILL IN OLD                   */
*             OLD(2)=N+F1;          /* SET COUNT                     */
         AL    R0,FW1                                              0399
         ST    R0,OLD+4                                            0399
*             OLD(5)=OLD(4);        /* GET ROOM FOR ALSO             */
         L     R6,OLD+12                                           0400
         ST    R6,OLD+16                                           0400
*             OLD(4)=ADDR(ALSO);    /* GET ADDR OF ALSO              */
         L     R7,@ALSO                                            0401
         ST    R7,OLD+12                                           0401
*           END;                    /*                               */
*         ELSE                      /* OTHERWISE                     */
*           OLD(2)=N;               /* NUMBER OF SEGMENTS            */
         B     @RC00397                                            0403
@RF00397 L     R15,N                                               0403
         ST    R15,OLD+4                                           0403
*         IF SECLEVEL(I)=YES THEN   /* IF PROCESSING REQ SECOND LVL  */
@RC00397 L     R0,I(,COMONPTR)                                     0404
         MH    R0,HW12                                             0404
         L     R1,@MSGTABL                                         0404
         ALR   R1,R0                                               0404
         AL    R1,FWNEG6                                           0404
         TM    SECLEVEL-MSGTABL-6(R1),B'10000000'                  0404
         BNO   @RF00404                                            0404
*           DO;                     /* BUILD SECOND LEVEL MSG        */
*             OLD(1)=ADDR(OLD2);    /* POINT TO SECOND LEVEL         */
         LA    R2,OLD2                                             0406
         ST    R2,OLD                                              0406
*             OLD2(1)=F0;           /* NO THIRD LEVEL MESSAGE        */
         SLR   R3,R3                                               0407
         ST    R3,OLD2                                             0407
*             OLD2(2)=F1;           /* ONE SEGMENT                   */
         MVC   OLD2+4(4),FW1                                       0408
*             OLD2(3)=ADDR(MYSEG);  /* MESSAGE                       */
         LA    R2,MYSEG                                            0409
         ST    R2,OLD2+8                                           0409
*             MYSEG=MSTRLV2(1:LENGTH(MYSEG));/* COPY MSG TO GOTTEN   */
         L     R2,@MSTRLV2                                         0410
         MVC   MYSEG(35),MSTRLV2-MSTRLV2(R2)                       0410
         L     R2,EXECDPTR(,COMONPTR)
         CLC   STAECNT(2,R2),HW1
         BNH   LBL00D28
         STH   R3,STAECNT(,R2)
         MVC   OLD2+4(4),FW2
         LA    R3,1484(,R9)
         ST    R3,1556(,R9)
         L     R4,@MSTRLV3
         MVC   1484(32,R9),MSTRLV3-MSTRLV3(R4)
*             CALL LOCATE(LASTCC,LENGTH(LASTCC),F0);/* LOCATE LASTCC */
LBL00D28 LA    R1,@AL00411                                         0411
         BAL   R14,LOCATE                                          0411
*             IF ERROR=F0&SVTLNG>F0 THEN/* IF LOCATE OK              */
         SLR   R5,R5                                               0412
         C     R5,ERROR                                            0412
         BNE   @RF00412                                            0412
         L     R1,SNTELPTR(,COMONPTR)                              0412
         L     R4,SNTVLPTR(,R1)                                    0412
         LH    R6,SVTLNG(,R4)                                      0412
         CR    R6,R5                                               0412
         BNH   @RF00412                                            0412
*               DO;                 /* FILL IN CODE                  */
*                 N=MIN(SVTLNG,F5); /* SAVE LENGTH (MAX OF 5)        */
         LA    R7,5                                                0414
         CR    R6,R7                                               0414
         BNH   *+6
         LR    R6,R7                                               0414
         ST    R6,N                                                0414
*                 IF SVTDATA(1)=CCS SVTDATA(1)=CCU THEN/* ABEND CD   */
         CLI   SVTDATA(R4),C'S'                                    0415
         BE    @RT00415                                            0415
         CLI   SVTDATA(R4),C'U'                                    0415
         BNE   @RF00415                                            0415
@RT00415 DS    0H                                                  0416
*                   DO;             /* ABEND CODE ?                  */
*                     N=MIN(SVTLNG,F5);/* SAVE LENGTH (MAX OF 5)     */
         L     R1,SNTELPTR(,COMONPTR)                              0417
         L     R2,SNTVLPTR(,R1)                                    0417
         LH    R3,SVTLNG(,R2)                                      0417
         LA    R4,5                                                0417
         CR    R3,R4                                               0417
         BNH   *+6
         LR    R3,R4                                               0417
         ST    R3,N                                                0417
*                     OUTCD=SVTDATA(1:N);/* OK ALL CHARS             */
         MVI   OUTCD+1,C' '                                        0418
         MVC   OUTCD+2(3),OUTCD+1                                  0418
         BCTR  R3,0                                                0418
         EX    R3,@SM01100                                         0418
*                   END;            /*                               */
*                 ELSE              /* OTHERWISE                     */
*                   DO;             /* DONT OVERLAY THE 'E'          */
         B     @RC00415                                            0420
@RF00415 DS    0H                                                  0421
*                     N=MIN(SVTLNG,F3);/* MAX NUMBER LENGTH          */
         L     R1,SNTELPTR(,COMONPTR)                              0421
         L     R2,SNTVLPTR(,R1)                                    0421
         LH    R3,SVTLNG(,R2)                                      0421
         LA    R4,3                                                0421
         CR    R3,R4                                               0421
         BNH   *+6
         LR    R3,R4                                               0421
         ST    R3,N                                                0421
*                     OUTCD(5-N:4)=SVTDATA(1:N);/* ON NUMBERS        */
         LCR   R3,R3                                               0422
         AL    R3,FW5                                              0422
         LA    R1,OUTCD-1(R3)                                      0422
         LCR   R3,R3                                               0422
         AL    R3,FW4                                              0422
         EX    R3,@SM01102                                         0422
*                   END;            /*                               */
*               END;                /*                               */
*           END;                    /*                               */
*         ELSE                      /* OTHERWISE                     */
*           OLD(1)=F0;              /* NO SECOUND LEVEL MESSAGE      */
         B     @RC00404                                            0426
@RF00404 SLR   R2,R2                                               0426
         ST    R2,OLD                                              0426
*       END;                        /*                               */
@RC00404 DS    0H                                                  0428
*   END;                            /*                               */
@RF00391 LA    R3,1                                                0428
         AL    R3,I(,COMONPTR)                                     0428
         ST    R3,I(,COMONPTR)                                     0428
@DE00390 L     R2,@MSGTABL                                         0428
         CH    R3,MSGDIM-MSGTABL(,R2)                              0428
         BNH   @DL00390                                            0428
@DC00390 DS    0H                                                  0429
*   IOPL(4)=ADDR(PUTMLVL);          /* PUTLINE LIST FORM             */
         LA    R3,PUTMLVL                                          0429
         ST    R3,IOPL+12(,COMONPTR)                               0429
*   RFY                                                            0430
*    (R1,                                                          0430
*     R2,                                                          0430
*     R15) RSTD;                    /* RESTRICT ENTRY REG            */
*   R1=ADDR(IOPL);                  /* GET ADDR OF IOPL              */
         LR    R1,COMONPTR                                         0431
*   R2=ADDR(OLD);                   /* GET ADDR OF OLD               */
         LA    R2,OLD                                              0432
*   R15=ADDR(IKJEFT40);             /* ENTRY TO PUTLINE              */
         L     R15,IKJEFT40                                        0433
*   GEN REFS(R1,R2,R15)                                            0434
*       (PUTLINE OUTPUT=((2),MULTLVL),MF=(E,(1)),ENTRY=(15));      0434
         PUTLINE OUTPUT=((2),MULTLVL),MF=(E,(1)),ENTRY=(15)
*   RFY                                                            0435
*    (R1,                                                          0435
*     R2,                                                          0435
*     R15) UNRSTD;                  /* RELEASE REG 15                */
*   END MSGOUT;                                                    0436
@EL00003 L     R13,4(,R13)                                         0436
@EF00003 DS    0H                                                  0436
@ER00003 LM    R14,R12,12(R13)                                     0436
         BR    R14                                                 0436
*                                                                  0437
*   /*****************************************************************/
*   /*                                                               */
*   /* INSERT MAINLINE                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0437
*INSERT:                                                           0437
*   PROC;                                                          0437
INSERT   STM   R14,R12,@SA00004                                    0437
*   IF INSTHEN=NO THEN              /* AS LONG AS NOT INSERT THEN    */
         TM    INSTHEN(COMONPTR),B'00000001'                       0438
         BNZ   @RF00438                                            0438
*     CALL LOCATE(C(V),LEN,F0);     /* LOCATE SYMBOLIC VARIABLE      */
         L     R1,BUFBASE(,COMONPTR)                               0439
         L     R2,V                                                0439
         LA    R3,C-1(R2,R1)                                       0439
         ST    R3,@AL00001                                         0439
         LA    R4,LEN(,COMONPTR)                                   0439
         ST    R4,@AL00001+4                                       0439
         LA    R5,FW0                                              0439
         ST    R5,@AL00001+8                                       0439
         LA    R1,@AL00001                                         0439
         BAL   R14,LOCATE                                          0439
*   IF ERROR=F0 THEN                /* IF VARIABLE FOUND             */
@RF00438 L     R6,ERROR                                            0440
         LTR   R6,R6                                               0440
         BNZ   @RF00440                                            0440
*     DO;                           /*                               */
*       IF NOAMPER=NO THEN          /* IF AMPERSAND PRESENT          */
         TM    NOAMPER(COMONPTR),B'00000010'                       0442
         BNZ   @RF00442                                            0442
*         DO;                       /* RESET V TO AMPERSAND AND      */
*           V=V-F1;                 /* ADD THE LENGTH OF AN          */
         L     R7,V                                                0444
         BCTR  R7,0                                                0444
         ST    R7,V                                                0444
*           LEN=LEN+F1;             /* AMPERSAND TO LEN              */
         LA    R14,1                                               0445
         AL    R14,LEN(,COMONPTR)                                  0445
         ST    R14,LEN(,COMONPTR)                                  0445
*         END;                      /*                               */
*       IF INSTHEN=YES THEN         /* IF IN INSERT THEN MODE        */
@RF00442 TM    INSTHEN(COMONPTR),B'00000001'                       0447
         BNO   @RF00447                                            0447
*         DO;                       /* POINT TO THEN                 */
*           INSRTDA=ADDR(CTHEN);    /* ADDR OF THEN                  */
         LA    R15,$THEN                                           0449
         ST    R15,INSRTDA                                         0449
*           INSRTLN=LENGTH(CTHEN);  /* LENGTH OF THEN                */
         MVC   INSRTLN(4),FW4                                      0450
*         END;                      /*                               */
*       ELSE                        /* OTHERWISE                     */
*         DO;                       /* GET VARIABLES INSERT DATA     */
         B     @RC00447                                            0452
@RF00447 DS    0H                                                  0453
*           INSRTLN=SVTLNG;         /* GET INSERT LENGTH             */
         L     R0,SNTELPTR(,COMONPTR)                              0453
         LR    R1,R0
         L     R1,SNTVLPTR(,R1)                                    0453
         LH    R2,SVTLNG(,R1)                                      0453
         ST    R2,INSRTLN                                          0453
*           INSRTDA=ADDR(SVTDATA);  /* GET POINTER TO INSERT DATA    */
         LA    R1,SVTDATA(,R1)                                     0454
         ST    R1,INSRTDA                                          0454
*           IF SNTEVAL=YES THEN     /* IF EVALUATION REQUIRED        */
         LR    R1,R0
         TM    SNTEVAL(R1),B'00000010'                             0455
         BNO   @RF00455                                            0455
*             CALL IMVALRTN;        /* CALL ROUTINE TO PROCESS EVAL  */
         BAL   R14,IMVALRTN                                        0456
*         END;                                                     0457
@RF00455 DS    0H                                                  0458
*       EXITA=NO;                   /* SAY WE HAVE INSERTED DATA     */
@RC00447 NI    EXITA(COMONPTR),B'01111111'                         0458
*       IF ERROR=F0&WAIT=NO THEN    /* IF NO ERROR FROM BUILT IN FUNC*/
         L     R2,ERROR                                            0459
         LTR   R2,R2                                               0459
         BNZ   @RF00459                                            0459
         TM    WAIT(COMONPTR),B'00010000'                          0459
         BNZ   @RF00459                                            0459
*         DO;                       /* PERFORM INSERT                */
*           IF INSRTLN-LEN>FREEAMT THEN/* IF INSERT DATA IS GREATER  */
         L     R3,INSRTLN                                          0461
         SL    R3,LEN(,COMONPTR)                                   0461
         L     R2,FREEAMT(,COMONPTR)                               0461
         CR    R3,R2                                               0461
         BNH   @RF00461                                            0461
*             CALL GETMORE(INSRTLN-LEN-FREEAMT);/* GET BIGGER BUFFER */
         SLR   R3,R2                                               0462
         ST    R3,@AFTEMPS+4                                       0462
         LA    R3,@AFTEMPS+4                                       0462
         ST    R3,@AL00001                                         0462
         LA    R1,@AL00001                                         0462
         BAL   R14,GETMORE                                         0462
*           ELSE                    /* OTHERWISE UPDATE FREE AMOUNT  */
*             FREEAMT=FREEAMT-(INSRTLN-LEN);/* UPDATE FREEAMT        */
         B     @RC00461                                            0463
@RF00461 L     R4,INSRTLN                                          0463
         SL    R4,LEN(,COMONPTR)                                   0463
         LCR   R4,R4                                               0463
         AL    R4,FREEAMT(,COMONPTR)                               0463
         ST    R4,FREEAMT(,COMONPTR)                               0463
*           IF ERROR=F0 THEN        /* NO ERROR FROM GETMORE         */
@RC00461 L     R5,ERROR                                            0464
         LTR   R5,R5                                               0464
         BNZ   @RF00464                                            0464
*             DO;                   /*                               */
*               RFY                                                0466
*                (R2,                                              0466
*                 R3,                                              0466
*                 R4,                                              0466
*                 R5) RSTD;         /* RESTRICT REGISTERS            */
*               R2=ADDR(NEWC);      /* POINT TO NEW BUFFER           */
         L     R2,NEWBASE(,COMONPTR)                               0467
         LA    R2,NEWC(,R2)                                        0467
*               R3=V-F1;            /* LENGTH OF FIRST PART          */
         L     R3,V                                                0468
         BCTR  R3,0                                                0468
*               R4=ADDR(C);         /* POINT TO OLD BUFFER           */
         L     R4,BUFBASE(,COMONPTR)                               0469
         LA    R4,C(,R4)                                           0469
*               R5=R3;              /* SAME LENGTH                   */
         LR    R5,R3                                               0470
*               MVCL(R2,R4);        /* MOVE FIRST PART OF BUFFER     */
         MVCL  R2,R4                                               0471
*               KPTR=R2;            /* SAVE LOC IN BUFFER WHERE DATA
*                                      IS GOING                      */
         ST    R2,KPTR                                             0472
*               R3=INSRTLN;         /* LENGTH OF SYMBOLIC VARIABLE   */
         L     R3,INSRTLN                                          0473
*               R4=INSRTDA;         /* POINT TO SUBSTITUTE DATA      */
         L     R4,INSRTDA                                          0474
*               R5=R3;              /* EQUAL LENGTH                  */
         LR    R5,R3                                               0475
*               MVCL(R2,R4);        /* MOVE IN DATA (R2 UPDATED BY 0476
*                                      MVCL)                         */
         MVCL  R2,R4                                               0476
*               R3=NEWLL-(INSRTLN+V+F3);/* TO LENGTH - ALREADY MOVED */
         L     R6,NEWBASE(,COMONPTR)                               0477
         LA    R7,3                                                0477
         L     R3,INSRTLN                                          0477
         AL    R3,V                                                0477
         ALR   R3,R7                                               0477
         LCR   R3,R3                                               0477
         AH    R3,NEWLL(,R6)                                       0477
*               R4=ADDR(C(I));      /* POINT TO RESUME BUFFER        */
         L     R14,I(,COMONPTR)                                    0478
         L     R15,BUFBASE(,COMONPTR)                              0478
         LA    R4,C-1(R14,R15)                                     0478
*               R5=(LL-(I+F3)) BLANKS;/* THE REMAINING SEGMENT AND 0479
*                                      PAD                           */
         ALR   R14,R7                                              0479
         LCR   R14,R14                                             0479
         AH    R14,LL(,R15)                                        0479
         O     R14,HIBLANK                                         0479
         LR    R5,R14                                              0479
*               I=R2-(ADDR(NEWC));  /* POINT I TO RESUME SEGMENT     */
         LA    R6,NEWC(,R6)                                        0480
         LCR   R6,R6                                               0480
         ALR   R6,R2                                               0480
         ST    R6,I(,COMONPTR)                                     0480
*               MVCL(R2,R4);        /* MOVE RESUME PART OF BUFFER    */
         MVCL  R2,R4                                               0481
*               RFY                                                0482
*                (R2,                                              0482
*                 R3,                                              0482
*                 R4,                                              0482
*                 R5) UNRSTD;       /* RELEASE REGISTERS             */
*               IF SNTNOSCN=YES THEN/* IF NO RESCAN ALLOWED          */
         L     R1,SNTELPTR(,COMONPTR)                              0483
         TM    SNTNOSCN(R1),B'00001000'                            0483
         BNO   @RF00483                                            0483
*                 DO K=INSRTLN TO F1 BY-F1;                        0484
         L     R2,INSRTLN                                          0484
         ST    R2,K                                                0484
         B     @DE00484                                            0484
@DL00484 DS    0H                                                  0485
*                   FOLD=YES;       /* FOLD TO SPECIAL CHARS         */
         OI    FOLD(COMONPTR),B'00010000'                          0485
*                   IF KPTR->INSRTCHR(K)=AMPSAND THEN/* NO RESCAN    */
         L     R3,KPTR                                             0486
         ALR   R2,R3                                               0486
         BCTR  R2,0                                                0486
         CLI   INSRTCHR(R2),C'&&'                                  0486
         BNE   @RF00486                                            0486
*                     KPTR->INSRTCHR(K)=NOSCNAMP;/* REQUIRES SPECIAL
*                                      FOLDED NO-RESCAN AMPERSAND    */
         L     R2,K                                                0487
         ALR   R3,R2                                               0487
         BCTR  R3,0                                                0487
         MVI   INSRTCHR(R3),X'03'                                  0487
*                   ELSE                                           0488
*                     TR(KPTR->INSRTCHR(K),TRTABDN);               0488
         B     @RC00486                                            0488
@RF00486 L     R1,KPTR                                             0488
         AL    R1,K                                                0488
         BCTR  R1,0                                                0488
         TR    INSRTCHR(1,R1),TRTABDN                              0488
*                 END;                                             0489
*                                                                  0489
@RC00486 SLR   R2,R2                                               0489
         BCTR  R2,0                                                0489
         AL    R2,K                                                0489
         ST    R2,K                                                0489
@DE00484 LTR   R2,R2                                               0489
         BP    @DL00484                                            0489
*               /*****************************************************/
*               /*                                                   */
*               /* FREE OLD BUFFER IF A NEW ONE WAS GOTTEN           */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0490
*               IF FREESW=YES THEN  /* IF FREEMAIN NECESSARY         */
@RF00483 TM    FREESW(COMONPTR),B'00100000'                        0490
         BNO   @RF00490                                            0490
*                 DO;               /*                               */
*                   DO;             /* FREEMAIN LV(FREELEN(1))     0492
*                                      A(FREEADDR) SP(1) MF(E,FRELST)*/
*                     RESPECIFY                                    0493
*                      (R1) RESTRICTED;                            0493
*                     FRELST02=FREELEN(1);/* LENGTH                  */
         MVC   FRELST02(3),FREELEN+1                               0494
*                     FRELST04=ADDR(FREEADDR);/* ADDR OF ADDR LIST   */
         LA    R0,FREEADDR                                         0495
         STCM  R0,7,FRELST04                                       0495
*                     FRELST06=1;   /* SUBPOOL VALUE                 */
         MVI   FRELST06,X'01'                                      0496
*                     R1=ADDR(FRELST);/* REG1 POINTS TO LIST         */
         LA    R1,FRELST                                           0497
*                     SVC(5);       /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0498
*                     RESPECIFY                                    0499
*                      (R1) UNRESTRICTED;                          0499
*                   END;            /* FREEMAIN LV(FREELEN(1))     0500
*                                      A(FREEADDR) SP(1) MF(E,FRELST)*/
*                   BUFBASE=NEWBASE;/* RESET POINTER TO BUFFER       */
         L     R2,NEWBASE(,COMONPTR)                               0501
         ST    R2,BUFBASE(,COMONPTR)                               0501
*                   NEWBASE=NEWBASE+LL;/* POINT TO NEW FREE BUFFER   */
         LH    R3,LL(,R2)                                          0502
         ALR   R2,R3                                               0502
         ST    R2,NEWBASE(,COMONPTR)                               0502
*                   NEWLL=LL;       /* INIT LENGTH                   */
         STH   R3,NEWLL(,R2)                                       0503
*                   NEWOO=F0;       /* INIT OFFSET                   */
         SLR   R3,R3                                               0504
         STH   R3,NEWOO(,R2)                                       0504
*                   FREESW=NO;      /* RESET FREESWITCH              */
         NI    FREESW(COMONPTR),B'11011111'                        0505
*                 END;                                             0506
*               ELSE                /* OTHERWISE                     */
*                 DO;                                              0507
         B     @RC00490                                            0507
@RF00490 DS    0H                                                  0508
*                   BUFBASE=BUFBASE&&NEWBASE;/* SWAP BUFFER POINTERS */
         L     R4,NEWBASE(,COMONPTR)                               0508
         L     R5,BUFBASE(,COMONPTR)                               0508
         XR    R5,R4                                               0508
         ST    R5,BUFBASE(,COMONPTR)                               0508
*                   NEWBASE=NEWBASE&&BUFBASE;/*                      */
         XR    R4,R5                                               0509
         ST    R4,NEWBASE(,COMONPTR)                               0509
*                   BUFBASE=BUFBASE&&NEWBASE;/*                      */
         XR    R5,R4                                               0510
         ST    R5,BUFBASE(,COMONPTR)                               0510
*                 END;                                             0511
*             END;                                                 0512
*         END;                                                     0513
*       ELSE                        /* OTHERWISE                     */
*         WAIT=NO;                  /* TURN OFFF WAIT                */
         B     @RC00459                                            0514
@RF00459 NI    WAIT(COMONPTR),B'11101111'                          0514
*     END;                                                         0515
*   END INSERT;                                                    0516
@EL00004 DS    0H                                                  0516
@EF00004 DS    0H                                                  0516
@ER00004 LM    R14,R12,@SA00004                                    0516
         BR    R14                                                 0516
*                                                                  0517
*   /*****************************************************************/
*   /*                                                               */
*   /* GET BIGGER BUFFER                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0517
*GETMORE:                                                          0517
*   PROC(MINIMUM);                                                 0517
GETMORE  STM   R14,R12,12(R13)                                     0517
         MVC   @PC00005(4),0(R1)                                   0517
*   DCL                                                            0518
*     MINIMUM FIXED(31);                                           0518
*   HOWMUCH=F16*((GAS+MINIMUM+LL)/F8);/* CALCULATE HOWMUCH TO GET    */
         L     R6,@PC00005                                         0519
         LA    R14,200                                             0519
         AL    R14,MINIMUM(,R6)                                    0519
         L     R7,BUFBASE(,COMONPTR)                               0519
         LH    R6,LL(,R7)                                          0519
         ALR   R14,R6                                              0519
         SRDA  R14,32                                              0519
         D     R14,FW8                                             0519
         SLA   R15,4                                               0519
         ST    R15,HOWMUCH                                         0519
*   IF CORE=YES THEN                /* IF ALREADY CORE               */
         TM    CORE(COMONPTR),B'10000000'                          0520
         BNO   @RF00520                                            0520
*     DO;                           /* FIND ADDR OF OLD CORE         */
*       FREESW=YES;                 /* ALLOW FREEMAIN                */
         OI    FREESW(COMONPTR),B'00100000'                        0522
*       FREEADDR(1)=MIN(BUFBASE,NEWBASE);/* GET LOW ADDR FOR FREE    */
         L     R14,NEWBASE(,COMONPTR)                              0523
         CR    R7,R14                                              0523
         BNH   *+6
         LR    R7,R14                                              0523
         ST    R7,FREEADDR                                         0523
*       FREELEN(1)=LL*F2;           /* AMOUNT TO FREE                */
         ALR   R6,R6                                               0524
         ST    R6,FREELEN                                          0524
*     END;                          /*                               */
*   DO;                             /* GETMAIN LV(HOWMUCH) A(NEWBASE)
*                                      SP(1) MF(E,GETLST)          0526
*                                      RTCD(RETURNCD)                */
@RF00520 DS    0H                                                  0527
*     RESPECIFY                                                    0527
*      (R1,                                                        0527
*       R15) RESTRICTED;                                           0527
*     GETLST01=HOWMUCH;             /* LENGTH                        */
         L     R14,HOWMUCH                                         0528
         ST    R14,GETLST01                                        0528
*     GETLST03=ADDR(NEWBASE);       /* ADDR OF ADDR LIST             */
         LA    R0,NEWBASE(,COMONPTR)                               0529
         STCM  R0,7,GETLST03                                       0529
*     GETLST05=1;                   /* SUBPOOL VALUE                 */
         MVI   GETLST05,X'01'                                      0530
*     R1=ADDR(GETLST);              /* REG1 POINTS TO LIST           */
         LA    R1,GETLST                                           0531
*     SVC(4);                       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0532
*     RETURNCD=R15;                 /* SET RETURN CODE               */
         ST    R15,RETURNCD                                        0533
*     RESPECIFY                                                    0534
*      (R1,                                                        0534
*       R15) UNRESTRICTED;                                         0534
*   END;                            /* GETMAIN LV(HOWMUCH) A(NEWBASE)
*                                      SP(1) MF(E,GETLST)          0535
*                                      RTCD(RETURNCD)                */
*   IF ERROR=F0&RETURNCD^=F0 THEN   /* GETMAIN FAIL                  */
         SLR   R2,R2                                               0536
         C     R2,ERROR                                            0536
         BNE   @RF00536                                            0536
         L     R3,RETURNCD                                         0536
         CR    R3,R2                                               0536
         BE    @RF00536                                            0536
*     DO;                           /* AND PROCESS ORIG BUFFER       */
*       IF CORE=NO THEN             /* POINT TO ORIG BUFFER          */
         TM    CORE(COMONPTR),B'10000000'                          0538
         BNZ   @RF00538                                            0538
*         NEWBASE=BUFBASE;          /* FOR SQUASH                    */
         L     R5,BUFBASE(,COMONPTR)                               0539
         ST    R5,NEWBASE(,COMONPTR)                               0539
*       ERROR=E16;                  /* SET ERROR CODE                */
@RF00538 MVC   ERROR(4),FW16                                       0540
*     END;                                                         0541
*   ELSE                                                           0542
*     DO;                           /*                               */
         B     @RC00536                                            0542
@RF00536 DS    0H                                                  0543
*       NEWLL=HOWMUCH/F2;           /* SET NEW LL                    */
         L     R6,NEWBASE(,COMONPTR)                               0543
         L     R0,HOWMUCH                                          0543
         SRDA  R0,32                                               0543
         D     R0,FW2                                              0543
         STH   R1,NEWLL(,R6)                                       0543
*       FREEAMT=NEWLL-(LL+MINIMUM); /* RESET FREEAMT                 */
         L     R7,BUFBASE(,COMONPTR)                               0544
         L     R14,@PC00005                                        0544
         LH    R15,LL(,R7)                                         0544
         AL    R15,MINIMUM(,R14)                                   0544
         SLR   R1,R15                                              0544
         ST    R1,FREEAMT(,COMONPTR)                               0544
*       NEWOO=F0;                   /* INIT OFFSET TO ZERO           */
         SLR   R7,R7                                               0545
         STH   R7,NEWOO(,R6)                                       0545
*     END;                          /*                               */
*   END GETMORE;                                                   0547
@EL00005 DS    0H                                                  0547
@EF00005 DS    0H                                                  0547
@ER00005 LM    R14,R12,12(R13)                                     0547
         BR    R14                                                 0547
*                                                                  0548
*   /*****************************************************************/
*   /*                                                               */
*   /* REMOVE ONE CHARACTER FROM BUFFER                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0548
*SQUASH:                                                           0548
*   PROC;                                                          0548
SQUASH   STM   R14,R12,12(R13)                                     0548
*   RFY                                                            0549
*    (R2,                                                          0549
*     R3,                                                          0549
*     R4,                                                          0549
*     R5) RSTD;                     /* RESTRICT REGISTERS            */
*   R2=ADDR(C(I));                  /* ADDRESS OF 'TO'               */
         L     R14,I(,COMONPTR)                                    0550
         L     R15,BUFBASE(,COMONPTR)                              0550
         LA    R2,C-1(R14,R15)                                     0550
*   R4=ADDR(C(I+F1));               /* ADDRESS OF 'FROM'             */
         LA    R4,C(R14,R15)                                       0551
*   R3=LL-(I+F3);                   /* LENGTH OF 'TO'                */
         AL    R14,FW3                                             0552
         LCR   R14,R14                                             0552
         AH    R14,LL(,R15)                                        0552
         LR    R3,R14                                              0552
*   R5=(R3-F1) BLANKS;              /* LENGTH OF 'FROM' AND PADDING
*                                      CHARACTER FOR LONGER 'TO' AREA*/
         LR    R5,R3                                               0553
         BCTR  R5,0                                                0553
         O     R5,HIBLANK                                          0553
*   MVCL(R2,R4);                    /* SQUASH BUFFER                 */
         MVCL  R2,R4                                               0554
*   RFY                                                            0555
*    (R2,                                                          0555
*     R3,                                                          0555
*     R4,                                                          0555
*     R5) UNRSTD;                   /* RELEASE REGISTERS             */
*   FREEAMT=FREEAMT+F1;             /* ADD REMOVED BYTE TO FREEAMT   */
         LA    R6,1                                                0556
         AL    R6,FREEAMT(,COMONPTR)                               0556
         ST    R6,FREEAMT(,COMONPTR)                               0556
*   END SQUASH;                                                    0557
@EL00006 DS    0H                                                  0557
@EF00006 DS    0H                                                  0557
@ER00006 LM    R14,R12,12(R13)                                     0557
         BR    R14                                                 0557
*                                                                  0558
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN POINTER UPDATE ROUTINE                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0558
*RETUPDT:                                                          0558
*   PROC(NEXTCMD);                                                 0558
RETUPDT  STM   R14,R12,12(R13)                                     0558
         MVC   @PC00007(4),0(R1)                                   0558
*   DCL                                                            0559
*     NEXTCMD FIXED(31);            /* THE NEXT COMMAND AFTER THE ONE
*                                      INTERRUPTED FROM              */
*   RETPTR2=RETPTR;                 /* SWAP AND SAVE RETURN          */
         L     R7,EXECDPTR(,COMONPTR)                              0560
         L     R6,RETPTR(,R7)                                      0560
         ST    R6,RETPTR2(,R7)                                     0560
*   RETPTR=NEXTCMD;                 /* SAVE ANSWER                   */
         L     R6,@PC00007                                         0561
         L     R6,NEXTCMD(,R6)                                     0561
         ST    R6,RETPTR(,R7)                                      0561
*   END RETUPDT;                    /*                               */
@EL00007 DS    0H                                                  0562
@EF00007 DS    0H                                                  0562
@ER00007 LM    R14,R12,12(R13)                                     0562
         BR    R14                                                 0562
*                                                                  0563
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBSTRING FUNCTION                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0563
*SUBSTRTN:                                                         0563
*   PROC OPTIONS(SAVEAREA);                                        0563
SUBSTRTN STM   R14,R12,12(R13)                                     0563
         ST    R13,@SA00008+4                                      0563
         LA    R14,@SA00008                                        0563
         ST    R14,8(,R13)                                         0563
         LR    R13,R14                                             0563
*   CALL WAITRTN;                   /* CHECK IF '&' VARIABLE IN RNGE */
         BAL   R14,WAITRTN                                         0564
*   IF WAIT=NO&ERROR=F0 THEN        /* IF OK TO PROCEED THEN         */
         TM    WAIT(COMONPTR),B'00010000'                          0565
         BNZ   @RF00565                                            0565
         L     R7,ERROR                                            0565
         LTR   R7,R7                                               0565
         BNZ   @RF00565                                            0565
*     DO;                           /* GET RANGE TO PROCESS          */
*       CSAVE=C(I-F1:I);            /* SAVE ORIGINAL BUFFER          */
         L     R14,I(,COMONPTR)                                    0567
         L     R15,BUFBASE(,COMONPTR)                              0567
         ALR   R14,R15                                             0567
         MVC   CSAVE(2),C-2(R14)                                   0567
*       C(I-F1:I)=XEQUAL;           /* MAKE RANGE LOOK LINE SET STMT */
         L     R14,I(,COMONPTR)                                    0568
         ALR   R14,R15                                             0568
         MVC   C-2(2,R14),$XEQUALS                                 0568
*       BUFPTR=ADDR(C(I-F1));       /* POINT TO DUMMY SET STATEMENT  */
         L     R14,I(,COMONPTR)                                    0569
         LA    R15,C-2(R14,R15)                                    0569
         ST    R15,BUFPTR(,COMONPTR)                               0569
*       DO CLEN=F3 TO M-I+F1 WHILE BUF(CLEN)^=COLON&BUF(CLEN)^=COMMA;
         LA    R0,3                                                0570
         B     @DE00570                                            0570
@DL00570 LH    R1,CLEN(,COMONPTR)                                  0570
         L     R2,BUFPTR(,COMONPTR)                                0570
         ALR   R1,R2                                               0570
         BCTR  R1,0                                                0570
         CLI   BUF(R1),C':'                                        0570
         BE    @DC00570                                            0570
         LH    R3,CLEN(,COMONPTR)                                  0570
         ALR   R2,R3                                               0570
         BCTR  R2,0                                                0570
         CLI   BUF(R2),C','                                        0570
         BE    @DC00570                                            0570
*                                   /*                               */
*       END;                        /* AND LENGTH OF DUMMY STMT      */
         LA    R0,1                                                0571
         AH    R0,CLEN(,COMONPTR)                                  0571
@DE00570 STH   R0,CLEN(,COMONPTR)                                  0571
         L     R1,M                                                0571
         SL    R1,I(,COMONPTR)                                     0571
         AL    R1,FW1                                              0571
         CR    R0,R1                                               0571
         BNH   @DL00570                                            0571
@DC00570 DS    0H                                                  0572
*       IF BUF(CLEN)=':' THEN       /* IF COLON FOUND, THE SET RANGE */
         LH    R1,CLEN(,COMONPTR)                                  0572
         L     R2,BUFPTR(,COMONPTR)                                0572
         ALR   R2,R1                                               0572
         BCTR  R2,0                                                0572
         CLI   BUF(R2),C':'                                        0572
         BNE   @RF00572                                            0572
*         RANGE=YES;                /* SWITCH                        */
         OI    RANGE(COMONPTR),B'00001000'                         0573
*       ELSE                        /* CHECK FOR STRING DELIM        */
*         IF BUF(CLEN)=COMMA THEN   /* IF IT IS                      */
         B     @RC00572                                            0574
@RF00572 LH    R3,CLEN(,COMONPTR)                                  0574
         L     R2,BUFPTR(,COMONPTR)                                0574
         ALR   R3,R2                                               0574
         BCTR  R3,0                                                0574
         CLI   BUF(R3),C','                                        0574
         BNE   @RF00574                                            0574
*           DO;                     /* INIT INSERT START AND LENGTH  */
*             INSRTDA=ADDR(BUF(CLEN+F1));/* BEGIN OF STRING          */
         LH    R3,CLEN(,COMONPTR)                                  0576
         LA    R4,BUF(R3,R2)                                       0576
         ST    R4,INSRTDA                                          0576
*             INSRTLN=ADDR(C(M))-INSRTDA;/* LENGTH OF STRING         */
         L     R1,BUFBASE(,COMONPTR)                               0577
         L     R5,M                                                0577
         LA    R5,C-1(R5,R1)                                       0577
         SLR   R5,R4                                               0577
         ST    R5,INSRTLN                                          0577
*             RANGE=NO;             /* RE-INIT RANGE SWITCH  @ZA24504*/
         NI    RANGE(COMONPTR),B'11110111'                         0578
*           END;                    /*                               */
*       IF ERROR=F0 THEN            /* IF OK UNTIL NOW               */
@RF00574 DS    0H                                                  0580
@RC00572 SLR   R6,R6                                               0580
         C     R6,ERROR                                            0580
         BNE   @RF00580                                            0580
*         DO;                       /* THEN CONTINUE                 */
*           CLEN=CLEN-F1;           /* DECREMENT CLEN FROM DO INCR   */
         LH    R7,CLEN(,COMONPTR)                                  0582
         BCTR  R7,0                                                0582
         STH   R7,CLEN(,COMONPTR)                                  0582
*           TYPE=F0;                /* ALLOW ONLY NUMERIC STMT       */
         ST    R6,TYPE(,COMONPTR)                                  0583
*           LEN1=CLEN;              /* SAVE LENGTH OF FIRST STMT     */
         ST    R7,LEN1                                             0584
*           RFY                                                    0585
*            (R15) RSTD;            /* RESTRICT R15 FOR RETURNCD     */
*           CALL IKJCT434(BUF,CLEN,TYPE,OUTA1);/* PROCESS EXPRESSOIN */
         L     R14,BUFPTR(,COMONPTR)                               0586
         ST    R14,@AL00001                                        0586
         LA    R14,CLEN(,COMONPTR)                                 0586
         ST    R14,@AL00001+4                                      0586
         LA    R14,TYPE(,COMONPTR)                                 0586
         ST    R14,@AL00001+8                                      0586
         LA    R14,OUTA1                                           0586
         ST    R14,@AL00001+12                                     0586
         L     R15,IKJCT434                                        0586
         LA    R1,@AL00001                                         0586
         BALR  R14,R15                                             0586
*           ERROR=R15;              /* SAVE ERROR CODE               */
         ST    R15,ERROR                                           0587
*           C(I-F1:I)=CSAVE;        /* RESTORE ORIGINAL BUFFER       */
         L     R14,I(,COMONPTR)                                    0588
         L     R1,BUFBASE(,COMONPTR)                               0588
         ALR   R1,R14                                              0588
         MVC   C-2(2,R1),CSAVE                                     0588
*           RFY                                                    0589
*            (R15) UNRSTD;          /* RELEASE R15                   */
*                                                                  0590
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS SUBSTRING                                     */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0590
*           IF ERROR=F0 THEN        /* IF OK                         */
         L     R2,ERROR                                            0590
         LTR   R2,R2                                               0590
         BNZ   @RF00590                                            0590
*             DO;                   /* CONVERT ANSWER TO USEABLE     */
*               CALL CONVERT;       /* FORM                          */
         BAL   R14,CONVERT                                         0592
*               V1=V2;              /* SET START OF RANGE            */
         L     R4,V2                                               0593
         ST    R4,V1                                               0593
*               IF ERROR=F0&RANGE=YES THEN/* IF RANGE, THEN FIND   0594
*                                      VALUE 2                       */
         L     R5,ERROR                                            0594
         LTR   R5,R5                                               0594
         BNZ   @RF00594                                            0594
         TM    RANGE(COMONPTR),B'00001000'                         0594
         BNO   @RF00594                                            0594
*                 DO;               /*                               */
*                   BUFPTR=ADDR(BUF(LEN1));/* POINT TO DUMMY STMT  0596
*                                      NUMBER 2                      */
         L     R1,BUFPTR(,COMONPTR)                                0596
         L     R2,LEN1                                             0596
         BCTR  R1,0                                                0596
         LA    R3,BUF(R2,R1)                                       0596
         ST    R3,BUFPTR(,COMONPTR)                                0596
*                   CSAVE=BUF(F1:F2);/* SAVE ORIGINAL BUFFER         */
         MVC   CSAVE(2),BUF(R3)                                    0597
*                   BUF(F1:F2)=XEQUAL;/* CREATE DUMMY STMT           */
         MVC   BUF(2,R3),$XEQUALS                                  0598
*                   DO CLEN=F3 TO M-(I+LEN1)+F2 WHILE BUF(CLEN)^=COMMA;
         LA    R4,3                                                0599
         B     @DE00599                                            0599
@DL00599 LH    R1,CLEN(,COMONPTR)                                  0599
         L     R2,BUFPTR(,COMONPTR)                                0599
         ALR   R2,R1                                               0599
         BCTR  R2,0                                                0599
         CLI   BUF(R2),C','                                        0599
         BE    @DC00599                                            0599
*                   END;                                           0600
         LA    R4,1                                                0600
         AH    R4,CLEN(,COMONPTR)                                  0600
@DE00599 STH   R4,CLEN(,COMONPTR)                                  0600
         L     R5,I(,COMONPTR)                                     0600
         AL    R5,LEN1                                             0600
         LCR   R5,R5                                               0600
         AL    R5,M                                                0600
         AL    R5,FW2                                              0600
         CR    R4,R5                                               0600
         BNH   @DL00599                                            0600
@DC00599 DS    0H                                                  0601
*                   INSRTDA=ADDR(BUF(CLEN+1));/* POINT TO INSERT DATA*/
         LH    R6,CLEN(,COMONPTR)                                  0601
         L     R7,BUFPTR(,COMONPTR)                                0601
         LA    R14,BUF(R6,R7)                                      0601
         ST    R14,INSRTDA                                         0601
*                   INSRTLN=ADDR(C(M))-INSRTDA;/* GET LENGTH OF DATA */
         L     R1,BUFBASE(,COMONPTR)                               0602
         L     R15,M                                               0602
         LA    R15,C-1(R15,R1)                                     0602
         SLR   R15,R14                                             0602
         ST    R15,INSRTLN                                         0602
*                   CLEN=CLEN-F1;   /* BACK PAST COMMA               */
         BCTR  R6,0                                                0603
         STH   R6,CLEN(,COMONPTR)                                  0603
*                   TYPE=F0;        /* ALLOW ONLY NUMERIC            */
         SLR   R6,R6                                               0604
         ST    R6,TYPE(,COMONPTR)                                  0604
*                   RFY                                            0605
*                    (R15) RSTD;    /* RESTRICT R15 FOR RETURN CODE  */
*                   CALL IKJCT434(BUF,CLEN,TYPE,OUTA1);/* PROCESS  0606
*                                      NUMBER 2                      */
         ST    R7,@AL00001                                         0606
         LA    R14,CLEN(,COMONPTR)                                 0606
         ST    R14,@AL00001+4                                      0606
         LA    R14,TYPE(,COMONPTR)                                 0606
         ST    R14,@AL00001+8                                      0606
         LA    R14,OUTA1                                           0606
         ST    R14,@AL00001+12                                     0606
         L     R15,IKJCT434                                        0606
         LA    R1,@AL00001                                         0606
         BALR  R14,R15                                             0606
*                   ERROR=R15;      /* SAVE ERROR CODE               */
         ST    R15,ERROR                                           0607
*                   BUF(F1:F2)=CSAVE;/* RESTORE OLD BUFFER           */
         L     R14,BUFPTR(,COMONPTR)                               0608
         MVC   BUF(2,R14),CSAVE                                    0608
*                   RFY                                            0609
*                    (R15) UNRSTD;  /* RELEASE R15                   */
*                   IF ERROR=F0 THEN/* IF OKAY                       */
         L     R15,ERROR                                           0610
         LTR   R15,R15                                             0610
         BNZ   @RF00610                                            0610
*                     DO;           /* CHECK FOR VALID RANGE         */
*                       CALL CONVERT;/* CONVERT NUMBER 2 TO USABLE   */
         BAL   R14,CONVERT                                         0612
*                       IF ERROR=F0&V1>V2 THEN/* FORM AND CHECK RANGE*/
         L     R0,ERROR                                            0613
         LTR   R0,R0                                               0613
         BNZ   @RF00613                                            0613
         L     R1,V1                                               0613
         C     R1,V2                                               0613
         BNH   @RF00613                                            0613
*                         ERROR=E912;/* SET ERROR CODE               */
         MVC   ERROR(4),FW912                                      0614
*                     END;          /*                               */
@RF00613 DS    0H                                                  0616
*                 END;                                             0616
@RF00610 DS    0H                                                  0617
*               IF ERROR=F0 THEN    /* IF EVERYTHING STILL OK        */
@RF00594 SLR   R2,R2                                               0617
         C     R2,ERROR                                            0617
         BNE   @RF00617                                            0617
*                 IF V2>INSRTLN V1=F0 THEN/* IF OUTSIDE RANGE, SET 0618
*                                      ERROR                         */
         L     R3,V2                                               0618
         C     R3,INSRTLN                                          0618
         BH    @RT00618                                            0618
         C     R2,V1                                               0618
         BNE   @RF00618                                            0618
@RT00618 DS    0H                                                  0619
*                   ERROR=E932;     /* INDICATOR                     */
         MVC   ERROR(4),FW932                                      0619
*                 ELSE              /*                               */
*                   DO;             /* SET UP INSERT INFO            */
         B     @RC00618                                            0620
@RF00618 DS    0H                                                  0621
*                     INSRTLN=V2-V1+F1;/* LENGTH OF INSERT DATA      */
         LA    R4,1                                                0621
         L     R5,V1                                               0621
         L     R6,V2                                               0621
         SLR   R6,R5                                               0621
         ALR   R6,R4                                               0621
         ST    R6,INSRTLN                                          0621
*                     INSRTDA=INSRTDA+V1-F1;/* POINTER TO INSERT DATA*/
         AL    R5,INSRTDA                                          0622
         BCTR  R5,0                                                0622
         ST    R5,INSRTDA                                          0622
*                     DO I=1 TO INSRTLN;/* NUMBER OF CHARS           */
         B     @DE00623                                            0623
@DL00623 DS    0H                                                  0624
*                       TR(INSRTCHR(I),TRTABDN);/* FOLD TO SPCL CHRS */
         L     R1,I(,COMONPTR)                                     0624
         L     R2,INSRTDA                                          0624
         ALR   R2,R1                                               0624
         BCTR  R2,0                                                0624
         TR    INSRTCHR(1,R2),TRTABDN                              0624
*                     END;          /*                               */
         LA    R4,1                                                0625
         AL    R4,I(,COMONPTR)                                     0625
@DE00623 ST    R4,I(,COMONPTR)                                     0625
         C     R4,INSRTLN                                          0625
         BNH   @DL00623                                            0625
*                     I=M+F1;       /* POINT I TO RESUME DATA        */
         LA    R5,1                                                0626
         AL    R5,M                                                0626
         ST    R5,I(,COMONPTR)                                     0626
*                   END;            /*                               */
*             END;                  /*                               */
*         END;                      /*                               */
*     END;                          /*                               */
*   END SUBSTRTN;                   /*                               */
@EL00008 L     R13,4(,R13)                                         0631
@EF00008 DS    0H                                                  0631
@ER00008 LM    R14,R12,12(R13)                                     0631
         BR    R14                                                 0631
*                                                                  0632
*   /*****************************************************************/
*   /*                                                               */
*   /* WAIT ROUTINE                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0632
*WAITRTN:                                                          0632
*   PROC;                                                          0632
WAITRTN  STM   R14,R12,12(R13)                                     0632
*   PCTR=F1;                        /* INIT PAREN COUNTER            */
         MVC   PCTR(4),FW1                                         0633
*   SENTINAL=NO;                    /* CLEAR SWITCH                  */
*   FOLD=YES;                       /* INDICATE POSSIBLE FOLD        */
         OI    FOLD(COMONPTR),B'00010000'                          0635
         NI    SENTINAL(COMONPTR),B'01111111'                      0635
*   M=I;                            /* START OF PSTRING SCAN         */
         L     R6,I(,COMONPTR)                                     0636
         ST    R6,M                                                0636
*   IF M>LL-(FREEAMT+F4) (C(M)^=LPAREN&/* PAST BFR OR NO '('         */
*       C(M)^=SENTNLL) THEN         /* OR LEFT SENTINAL              */
         L     R7,BUFBASE(,COMONPTR)                               0637
         LA    R14,4                                               0637
         AL    R14,FREEAMT(,COMONPTR)                              0637
         LCR   R14,R14                                             0637
         AH    R14,LL(,R7)                                         0637
         CR    R6,R14                                              0637
         BH    @RT00637                                            0637
         ALR   R6,R7                                               0637
         CLI   C-1(R6),C'('                                        0637
         BE    @RF00637                                            0637
         L     R6,M                                                0637
         ALR   R7,R6                                               0637
         CLI   C-1(R7),X'01'                                       0637
         BE    @RF00637                                            0637
@RT00637 DS    0H                                                  0638
*     ERROR=E936;                   /* SET ERROR CODE                */
         MVC   ERROR(4),FW936                                      0638
*   ELSE                            /* OTHERWISE                     */
*     DO;                           /* FIND END OF BIF               */
         B     @RC00637                                            0639
@RF00637 DS    0H                                                  0640
*       IF C(M)=SENTNLL THEN        /* IF SENTINAL PROCESSING        */
         L     R1,BUFBASE(,COMONPTR)                               0640
         AL    R1,M                                                0640
         CLI   C-1(R1),X'01'                                       0640
         BNE   @RF00640                                            0640
*         SENTINAL=YES;             /* SETIN SWITCH                  */
         OI    SENTINAL(COMONPTR),B'10000000'                      0641
*       ELSE                        /* OTHERWISE                     */
*         C(M)=SENTNLL;             /* FLAG AS SENTINAL PROCESS      */
         B     @RC00640                                            0642
@RF00640 L     R1,BUFBASE(,COMONPTR)                               0642
         AL    R1,M                                                0642
         MVI   C-1(R1),X'01'                                       0642
*       DO M=M+F1 TO LL-(F4+FREEAMT) WHILE PCTR>F0;/* FIND END OF BF */
@RC00640 LA    R2,1                                                0643
         AL    R2,M                                                0643
         B     @DE00643                                            0643
@DL00643 L     R3,PCTR                                             0643
         LTR   R3,R3                                               0643
         BNP   @DC00643                                            0643
*         IF M<LL-(F4+FREEAMT)&C(M:M+F1)=DAMPSAND THEN/* NOT D AMP   */
         L     R3,BUFBASE(,COMONPTR)                               0644
         LA    R4,4                                                0644
         AL    R4,FREEAMT(,COMONPTR)                               0644
         LCR   R4,R4                                               0644
         AH    R4,LL(,R3)                                          0644
         CR    R2,R4                                               0644
         BNL   @RF00644                                            0644
         ALR   R3,R2                                               0644
         CLC   C-1(2,R3),$DBLAMPR                                  0644
         BNE   @RF00644                                            0644
*           M=M+F1;                 /* SKIP OVER                     */
         AL    R2,FW1                                              0645
         ST    R2,M                                                0645
*         ELSE                      /* CHECK IF A SINGLE AMPERSAND   */
*           IF C(M)=AMPSAND THEN    /* IF IT IS THEN                 */
         B     @RC00644                                            0646
@RF00644 L     R1,BUFBASE(,COMONPTR)                               0646
         AL    R1,M                                                0646
         CLI   C-1(R1),C'&&'                                       0646
         BNE   @RF00646                                            0646
         TM    LCLFLAGS,$#NRSTR     PROCESSING &NRSTR?          ZP60014
         BNO   NORMWAIT             NO, SCAN AS NORMAL          ZP60014
         CLC   Z,FW1                ON FIRST SCAN?              ZP60014
         BNH   NORMWAIT             YES, SCAN AS NORMAL         ZP60014
         CLC   C(5,R1),$NRSTR       REMOVING &NRSTR?            ZP60014
         BNE   @RF00646             NO, SKIP SUBSTITUTION       ZP60014
NORMWAIT EQU   *                    DO NORMAL SUBSTITUTION      ZP60014
*             WAIT=YES;             /* SET WAIT SWITCH               */
         OI    WAIT(COMONPTR),B'00010000'                          0647
*           ELSE                    /* OTHERWISE                     */
*             IF C(M)=SENTNLR THEN  /* IF A SENTINAL                 */
         B     @RC00646                                            0648
@RF00646 L     R2,M                                                0648
         L     R1,BUFBASE(,COMONPTR)                               0648
         ALR   R1,R2                                               0648
         CLI   C-1(R1),X'02'                                       0648
         BNE   @RF00648                                            0648
*               DO;                 /* CHECK IF SENTINAL MODE        */
*                 PCTR=F0;          /* TERMINATE SCAN                */
         SLR   R3,R3                                               0650
         ST    R3,PCTR                                             0650
*                 IF SENTINAL=NO THEN/* IF IN SENTINAL MODE          */
         TM    SENTINAL(COMONPTR),B'10000000'                      0651
         BNZ   @RF00651                                            0651
*                   M=M-F1;         /* DONT COUNT SENTINAL           */
         BCTR  R2,0                                                0652
         ST    R2,M                                                0652
*               END;                /* IF A CLOSE PAREN              */
*             ELSE                  /* IF NOT SENTINAL               */
*               IF SENTINAL=NO THEN /* IF IN SENTINAL MODE           */
         B     @RC00648                                            0654
@RF00648 TM    SENTINAL(COMONPTR),B'10000000'                      0654
         BNZ   @RF00654                                            0654
*                 DO;               /* SKIP PAREN CHECK              */
*                   IF C(M)=RPAREN THEN/* IF A CLOSE PAREN           */
         L     R4,M                                                0656
         L     R5,BUFBASE(,COMONPTR)                               0656
         ALR   R4,R5                                               0656
         CLI   C-1(R4),C')'                                        0656
         BNE   @RF00656                                            0656
*                     DO;           /* DECREMENT COUNT               */
*                       PCTR=PCTR-F1;/*                              */
         L     R4,PCTR                                             0658
         BCTR  R4,0                                                0658
         ST    R4,PCTR                                             0658
*                       IF PCTR=F0 THEN/* IF PAREN COUNT IS ZERO     */
         LTR   R4,R4                                               0659
         BNZ   @RF00659                                            0659
*                         C(M)=SENTNLR;/* PAREN TO SENTINAL          */
         L     R4,M                                                0660
         ALR   R5,R4                                               0660
         MVI   C-1(R5),X'02'                                       0660
*                     END;          /*                               */
*                   ELSE            /* OTHERWISE                     */
*                     IF C(M)=LPAREN THEN/* IF AN OPEN PAREN         */
         B     @RC00656                                            0662
@RF00656 L     R1,BUFBASE(,COMONPTR)                               0662
         AL    R1,M                                                0662
         CLI   C-1(R1),C'('                                        0662
         BNE   @RF00662                                            0662
*                       PCTR=PCTR+F1;/* INCREMENT THE PAREN COUNT    */
         LA    R2,1                                                0663
         AL    R2,PCTR                                             0663
         ST    R2,PCTR                                             0663
*                 END;              /*                               */
@RF00662 DS    0H                                                  0664
@RC00656 DS    0H                                                  0665
*       END;                        /*                               */
@RF00654 DS    0H                                                  0665
@RC00648 DS    0H                                                  0665
@RC00646 DS    0H                                                  0665
@RC00644 LA    R2,1                                                0665
         AL    R2,M                                                0665
@DE00643 ST    R2,M                                                0665
         L     R3,BUFBASE(,COMONPTR)                               0665
         LA    R4,4                                                0665
         AL    R4,FREEAMT(,COMONPTR)                               0665
         LCR   R4,R4                                               0665
         AH    R4,LL(,R3)                                          0665
         CR    R2,R4                                               0665
         BNH   @DL00643                                            0665
@DC00643 DS    0H                                                  0666
*     END;                          /*                               */
*   LEN=M-V;                        /* ADJUST LEN FOR WHOLE BIF      */
@RC00637 L     R5,M                                                0667
         LR    R4,R5                                               0667
         SL    R4,V                                                0667
         ST    R4,LEN(,COMONPTR)                                   0667
*   IF PCTR=F0 THEN                 /* IF CLOSE PAREN FOUND          */
         L     R4,PCTR                                             0668
         LTR   R4,R4                                               0668
         BNZ   @RF00668                                            0668
*     M=M-F1;                       /* DECREMENT M                   */
         BCTR  R5,0                                                0669
         ST    R5,M                                                0669
*   END WAITRTN;                                                   0670
@EL00009 DS    0H                                                  0670
@EF00009 DS    0H                                                  0670
@ER00009 LM    R14,R12,12(R13)                                     0670
         BR    R14                                                 0670
*                                                                  0671
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT ROUTINE                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0671
*CONVERT:                                                          0671
*   PROC;                                                          0671
CONVERT  STM   R14,R12,12(R13)                                     0671
*   DCL                                                            0672
*     NDX FIXED(31);                /* INDEX TO ANSWER               */
*   AREA=ZEROS;                     /* PLACE ZEROS IN AREA           */
         MVC   AREA(16),$16ZEROS                                   0673
*   IF ANSWER(F1)=MINUS THEN        /* IF ANSWER IS NEGATIVE         */
         L     R1,ANSPTR(,COMONPTR)                                0674
         CLI   ANSWER(R1),C'-'                                     0674
         BNE   @RF00674                                            0674
*     ERCOM=E920;                   /* SET ERROR CODE                */
         MVC   ERCOM(4,COMONPTR),FW920                             0675
*   ELSE                            /* OTHERWISE OK                  */
*     DO;                           /* BUILD PACKAREA                */
         B     @RC00674                                            0676
@RF00674 DS    0H                                                  0677
*       IF CLEN<F1 CLEN>F16 THEN    /* IF ANS NOT NUMERIC OR NULL    */
         LH    R2,CLEN(,COMONPTR)                                  0677
         LTR   R2,R2                                               0677
         BNP   @RT00677                                            0677
         C     R2,FW16                                             0677
         BNH   @RF00677                                            0677
@RT00677 DS    0H                                                  0678
*         ERCOM=E924;               /* SET ERROR CODE                */
         MVC   ERCOM(4,COMONPTR),FW924                             0678
*       ELSE                        /* IF OK THEN MOVE INTO AREA     */
*         AREA(F17-CLEN:F16)=ANSWER(F1:CLEN);/* MOVE IN VARIABLE   0679
*                                      ANSWER                        */
         B     @RC00677                                            0679
@RF00677 LA    R3,17                                               0679
         SH    R3,CLEN(,COMONPTR)                                  0679
         LA    R2,AREA-1(R3)                                       0679
         LCR   R3,R3                                               0679
         AL    R3,FW16                                             0679
         L     R1,ANSPTR(,COMONPTR)                                0679
         EX    R3,@SM01104                                         0679
*       DO NDX=F16 TO F1 BY-F1 WHILE ERCOM=F0;/* CHECK FOR ALPHA   0680
*                                      ANSWER                        */
@RC00677 LA    R2,16                                               0680
         ST    R2,NDX                                              0680
@DL00680 L     R3,ERCOM(,COMONPTR)                                 0680
         LTR   R3,R3                                               0680
         BNZ   @DC00680                                            0680
*         IF AREA(NDX)<CC0 AREA(NDX)>CC9 THEN/*                      */
         LA    R3,AREA-1(R2)                                       0681
         CLI   0(R3),C'0'                                          0681
         BL    @RT00681                                            0681
         LA    R3,AREA-1(R2)                                       0681
         CLI   0(R3),C'9'                                          0681
         BNH   @RF00681                                            0681
@RT00681 DS    0H                                                  0682
*           ERCOM=E916;             /* SET ERROR CODE                */
         MVC   ERCOM(4,COMONPTR),FW916                             0682
*       END;                                                       0683
@RF00681 SLR   R2,R2                                               0683
         BCTR  R2,0                                                0683
         AL    R2,NDX                                              0683
         ST    R2,NDX                                              0683
         LTR   R2,R2                                               0683
         BP    @DL00680                                            0683
@DC00680 DS    0H                                                  0684
*       IF ERCOM=F0 THEN            /* IF NO ERROR SO FAR            */
         L     R3,ERCOM(,COMONPTR)                                 0684
         LTR   R3,R3                                               0684
         BNZ   @RF00684                                            0684
*         DO;                       /* PACK INTO USABLE FORM         */
*           PACK(WORKAREA,AREA);    /* ISSUE PACK                    */
         PACK  WORKAREA(8),AREA(16)                                0686
*           CVB(V2,WORKAREA);       /* ISSUE CONVERT TO BINARY       */
         CVB   R4,WORKAREA                                         0687
         ST    R4,V2                                               0687
*           CNVTANS=V2;             /* PLACE IN COMMON AREA          */
         ST    R4,CNVTANS(,COMONPTR)                               0688
*         END;                      /*                               */
*     END;                                                         0690
@RF00684 DS    0H                                                  0691
*   ERROR=ERCOM;                    /* SAVE ERROR FOR INT USE        */
@RC00674 L     R6,ERCOM(,COMONPTR)                                 0691
         ST    R6,ERROR                                            0691
*   END CONVERT;                                                   0692
@EL00010 DS    0H                                                  0692
@EF00010 DS    0H                                                  0692
@ER00010 LM    R14,R12,12(R13)                                     0692
         BR    R14                                                 0692
*                                                                  0693
*   /*****************************************************************/
*   /*                                                               */
*   /* IMMEDIATE VALUE NEEDED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0693
*IMVALRTN:                                                         0693
*   PROC;                                                          0693
IMVALRTN STM   R14,R12,@SA00011                                    0693
*   INDEX=F0;                       /* INIT INDEX                    */
         SLR   R7,R7                                               0694
         ST    R7,INDEX                                            0694
*   DO N=1 TO DIM(IMMDATA) WHILE INDEX=F0;/* FIND BUILT IN FUNCTION  */
         LA    R14,1                                               0695
         ST    R14,N                                               0695
@DL00695 L     R15,INDEX                                           0695
         LTR   R15,R15                                             0695
         BNZ   @DC00695                                            0695
*     IF IMMLEN(N)=SNTLNG&          /* SAME LENGTH                   */
*         IMMDATA(N,1:SNTLNG)=C(V+F1:V+SNTLNG) THEN/* SAME TEXT      */
         LR    R15,R14                                             0696
         SLA   R15,4                                               0696
         L     R1,SNTELPTR(,COMONPTR)                              0696
         LH    R2,SNTLNG(,R1)                                      0696
         CH    R2,IMMLEN-16(R15)                                   0696
         BNE   @RF00696                                            0696
         L     R1,BUFBASE(,COMONPTR)                               0696
         BCTR  R2,0                                                0696
         LA    R3,IMMDATA-16(R15)                                  0696
         AL    R1,V                                                0696
         EX    R2,@SC01106                                         0696
         BNE   @RF00696                                            0696
*       INDEX=N;                    /* SET INDEX TO ROUTINE          */
         ST    R14,INDEX                                           0697
*   END;                                                           0698
@RF00696 LA    R14,1                                               0698
         AL    R14,N                                               0698
         ST    R14,N                                               0698
         C     R14,INDX#MAX                               ZP60014  0698
         BNH   @DL00695                                            0698
@DC00695 DS    0H                                                  0699
*   IF INDEX=F0 THEN                /* IF NO MATCH                   */
         L     R15,INDEX                                           0699
         LTR   R15,R15                                             0699
         BNZ   @RF00699                                            0699
*     ERROR=E999;                   /* SET ERROR CODE                */
         MVC   ERROR(4),FW999                                      0700
*   ELSE                            /* CHECK FOR &STR                */
*     CALL ROUTINE;                 /* PROCESS IMVAL                 */
         B     @RC00699                                            0701
@RF00699 L     R0,INDEX                                            0701
         SLA   R0,4                                                0701
         LR    R1,R0
         L     R15,VECTOR-16(R1)                                   0701
         BALR  R14,R15                                             0701
*   END;                                                           0702
@EL00011 DS    0H                                                  0702
@EF00011 DS    0H                                                  0702
@ER00011 LM    R14,R12,@SA00011                                    0702
         BR    R14                                                 0702
*                                                                  0703
*   /*****************************************************************/
*   /*                                                               */
*   /* TIME BUILT IN FUNCTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0703
*TIMERTN:                                                          0703
*   PROC;                                                          0703
TIMERTN  STM   R14,R12,@SA00012                                    0703
         LA    R2,IMMDATA-16(R1)    POINT TO FUNCTION NAME      ZP60014
*   RFY                                                            0704
*    (R0) RSTD;                     /* RESTRICT TIME REGISTER        */
*   GEN SETS(R0)(TIME DEC);         /* ISSUE TIME MACRO              */
         TIME  DEC
*   TEMPA=R0;                       /* SAVE TIME OF DAY              */
         ST    R0,TEMPA                                            0706
*   RFY                                                            0707
*    (R0) UNRSTD;                   /* RELEASE REGISTER              */
*   UNPK(TIMEOUT,TEMPA);            /* UNPACK TIME                   */
         UNPK  TIMEOUT(7),TEMPA(4)                                 0708
*   OUT1=HRS;                       /* HOURS                         */
         MVC   OUT1(2),HRS                                         0709
*   OUT2=MINUTES;                   /* MINUTES                       */
         MVC   OUT2(2),MINUTES                                     0710
*   OUT3=SEC;                       /* SECONDS                       */
         MVC   OUT3(2),SEC                                         0711
*   DELIM1=COLON;                   /* SEPARATE TIME ELEMENTS WITH   */
         MVI   DELIM1,C':'                                         0712
*   DELIM2=COLON;                   /* A COLON                       */
         MVI   DELIM2,C':'                                         0713
*   INSRTDA=ADDR(TIMEDATE);         /* POINT TO INSERT DATA          */
         LA    R0,TIMEDATE                                         0714
         ST    R0,INSRTDA                                          0714
*   INSRTLN=LENGTH(TIMEDATE);       /* SET LENGTH OF INSERT DATA     */
         MVC   INSRTLN(4),FW8                                      0715
         CLI   3(R2),C'S'           SYSSTIME?                   ZP60014
         BNE   @EL00012             NO, REALLY IS SYSTIME       ZP60014
         MVC   INSRTLN(4),FW5       YES, SET CORRECT LENGTH     ZP60014
*   END TIMERTN;                                                   0716
@EL00012 DS    0H                                                  0716
@EF00012 DS    0H                                                  0716
@ER00012 LM    R14,R12,@SA00012                                    0716
         BR    R14                                                 0716
*                                                                  0717
*   /*****************************************************************/
*   /*                                                               */
*   /* DATE BUILT IN FUNCTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0717
*DATERTN:                                                          0717
*   PROC;                                                          0717
DATERTN  STM   R14,R12,@SA00013                                    0717
         LA    R2,IMMDATA-16(R1)    POINT TO FUNCTION NAME      ZP60014
*   RFY                                                            0718
*    (R1) RSTD;                     /* RESTRICT DATE REG             */
*   GEN SETS(R1)(TIME DEC);         /* ISSUE TIME MACRO              */
         TIME  DEC
         LR    R14,R2               POINT TO FUNCTION NAME      ZP60014
*   TEMPA=R1;                       /* SAVE DATE                     */
         ST    R1,TEMPA                                            0720
         AP    TEMPA(4),YRS1900     CONVERT TO 4-DIGIT YEAR     ZP60014
         OI    TEMPA+3,X'0F'        RESTORE SIGN                ZP60014
         CLI   4(R14),C'J'          SYS4JDATE?                  ZP60014
         BE    ISJULIAN             YES                         ZP60014
         CLI   3(R14),C'J'          SYSJDATE?                   ZP60014
         BNE   NTJULIAN             NO                          ZP60014
ISJULIAN UNPK  TIMEDATE+1(7),TEMPA(4)                           ZP60014
         MVC   TIMEDATE(4),TIMEDATE+1                           ZP60014
         MVI   TIMEDATE+4,C'.'      GET YYYY.DDD                ZP60014
         LA    R1,TIMEDATE          POINT TO DATE DATA          ZP60014
         LA    R0,8                 GET DATE DATA LENGTH        ZP60014
         CLI   3(R14),C'4'          4-DIGIT YEAR REQUIRED?      ZP60014
         BE    HAVEDATE             YES                         ZP60014
         LA    R1,TIMEDATE+2        POINT TO DATE DATA          ZP60014
         LA    R0,6                 GET DATE DATA LENGTH        ZP60014
HAVEDATE ST    R1,INSRTDA           SET DATA ADDRESS            ZP60014
         ST    R0,INSRTLN           SET DATA LENGTH             ZP60014
         B     @EL00013                                         ZP60014
*                                                               ZP60014
NTJULIAN EQU   *                    NON-JULIAN DATE PROCESSING  ZP60014
*   RFY                                                            0721
*    (R1) UNRSTD;                   /* RELEASE DATE REGISTER         */
*   UNPK(DATEOUT,TEMPA);            /* UNPACK DATE                   */
         UNPK  DATEOUT(7),TEMPA(4)                        ZP60014  0722
*   PACK(WORKAREA,YR);              /* CONVERT YEAR TO USEABLE FORM  */
         PACK  WORKAREA(8),YR(4)                          ZP60014  0723
*   CVB(YEAR,WORKAREA);             /*                               */
         CVB   R1,WORKAREA                                         0724
         ST    R1,YEAR                                             0724
*   PACK(WORKAREA,DYS);             /* CONVERT DAYS TO USEABLE FORM  */
         PACK  WORKAREA(8),DYS(3)                                  0725
*   CVB(DAYS,WORKAREA);             /*                               */
         CVB   R0,WORKAREA                                         0726
         ST    R0,DAYS                                             0726
*   IF YEAR//F4=F0 THEN             /* IF A LEAP YEAR, SET LEAP      */
         LR    R2,R1                                               0727
         SRDA  R2,32                                               0727
         D     R2,FW4                                              0727
         LTR   R2,R2                                               0727
         BNZ   @RF00727                                            0727
*     LEAP=YES;                     /* YEAR SWITCH                   */
         OI    LEAP(COMONPTR),B'00000100'                          0728
*   ELSE                            /* IF NOT, TURN IT OFF           */
*     LEAP=NO;                      /*                               */
         B     @RC00727                                            0729
@RF00727 NI    LEAP(COMONPTR),B'11111011'                          0729
*   DO MONTH=1 TO DIM(DAYIN) WHILE DAYS>F0;/* SUBTRACT DAYS OF EACH
*                                      MONTH                         */
@RC00727 LA    R1,1                                                0730
         ST    R1,MONTH                                            0730
@DL00730 L     R2,DAYS                                             0730
         LTR   R2,R2                                               0730
         BNP   @DC00730                                            0730
*     DAYS=DAYS-DAYIN(MONTH);       /* UNTIL DAYS GOES NEGATIVE      */
         LR    R3,R1                                               0731
         ALR   R3,R3                                               0731
         SH    R2,DAYIN-2(R3)                                      0731
         ST    R2,DAYS                                             0731
*     IF MONTH=2&LEAP=YES THEN      /* IF LEAP YEAR, ADJUST FOR      */
         C     R1,FW2                                              0732
         BNE   @RF00732                                            0732
         TM    LEAP(COMONPTR),B'00000100'                          0732
         BNO   @RF00732                                            0732
*       DAYS=DAYS-F1;               /* EXTRA DAY IN FEBRUARY         */
         BCTR  R2,0                                                0733
         ST    R2,DAYS                                             0733
*   END;                            /*                               */
@RF00732 LA    R1,1                                                0734
         AL    R1,MONTH                                            0734
         ST    R1,MONTH                                            0734
         C     R1,FW12                                             0734
         BNH   @DL00730                                            0734
@DC00730 DS    0H                                                  0735
*   MONTH=MONTH-F1;                 /* ADJUST MONTH                  */
         L     R2,MONTH                                            0735
         BCTR  R2,0                                                0735
         ST    R2,MONTH                                            0735
*   DAYS=DAYS+DAYIN(MONTH);         /* ADD BACK DAYS                 */
         LR    R3,R2                                               0736
         ALR   R3,R3                                               0736
         LH    R3,DAYIN-2(R3)                                      0736
         AL    R3,DAYS                                             0736
         ST    R3,DAYS                                             0736
*   IF LEAP=YES&MONTH=FEBRUARY THEN /* IF LEAP YEAR, READJUST DAYS   */
         TM    LEAP(COMONPTR),B'00000100'                          0737
         BNO   @RF00737                                            0737
         C     R2,FW2                                              0737
         BNE   @RF00737                                            0737
*     DAYS=DAYS+F1;                 /*                               */
         AL    R3,FW1                                              0738
         ST    R3,DAYS                                             0738
*   CVD(MONTH,WORKAREA);            /* CONVERT MONTH AND DAY TO      */
@RF00737 L     R4,MONTH                                            0739
         CVD   R4,WORKAREA                                         0739
*   UNPK(OUT1,WORKAREA);            /* PRINTABLE FORM                */
         UNPK  OUT1(2),WORKAREA(8)                                 0740
*   OUT1(2)=OUT1(2) CC0;            /* INSURE PRINTABLE CHAR         */
         OI    OUT1+1,C'0'                                         0741
*   CVD(DAYS,WORKAREA);             /* DITTO FOR DAYS                */
         L     R5,DAYS                                             0742
         CVD   R5,WORKAREA                                         0742
*   UNPK(OUT2,WORKAREA);            /*                               */
         UNPK  OUT2(2),WORKAREA(8)                                 0743
*   OUT2(2)=OUT2(2) CC0;            /*                               */
         OI    OUT2+1,C'0'                                         0744
*   OUT3=YR;                        /* GET YEAR                      */
         MVC   OUT3(4),YR                                          0745
*   DELIM1=SLASH;                   /* SET DATE DELIMITERS TO SLASH  */
         MVI   DELIM1,C'/'                                         0746
*   DELIM2=SLASH;                   /*                               */
         MVI   DELIM2,C'/'                                         0747
*   INSRTDA=ADDR(TIMEDATE);         /* POINT TO INSERT DATA          */
         LA    R6,TIMEDATE                                         0748
         ST    R6,INSRTDA                                          0748
         MVC   INSRTLN(4),FW10      PREPARE FOR 4-DIGIT YEAR    ZP60014
         CLI   3(R14),C'4'          4-DIGIT YEAR REQUESTED?     ZP60014
         BNE   YEAR2DIG             NO                          ZP60014
         CLI   4(R14),C'D'          SYS4DATE?                   ZP60014
         BE    @EL00013             YES, ALL DONE               ZP60014
         MVC   TIMEDATE+5(5),TIMEDATE    MOVE MM/DD             ZP60014
         MVC   TIMEDATE(4),YR       SUPPLY 4-DIGIT YEAR         ZP60014
         MVI   TIMEDATE+4,C'/'      SUPPLY DELIMITER            ZP60014
         CLI   4(R14),C'S'          SYS4SDATE?                  ZP60014
         BE    @EL00013             YES, ALL DONE               ZP60014
         MVI   TIMEDATE+4,C'-'      NO, SUPPLY DELIMITERS       ZP60014
         MVI   TIMEDATE+7,C'-'          FOR SYS4IDATE           ZP60014
         B     @EL00013             ALL DONE                    ZP60014
YEAR2DIG EQU   *                                                ZP60014
         MVC   OUT3(2),OUT3+2       REMOVE CENTURY              ZP60014
*   INSRTLN=LENGTH(TIMEDATE);       /* SET INSERT DATA LENGTH        */
         MVC   INSRTLN(4),FW8                                      0749
         CLI   3(R14),C'D'          SYSDATE?                    ZP60014
         BE    @EL00013             YES, ALL DONE               ZP60014
         MVC   OUT3,OUT2            SHUFFLE DD RIGHT            ZP60014
         MVC   OUT2,OUT1            SHUFFLE MM RIGHT            ZP60014
         MVC   OUT1,YR+2            RELOAD YY - SYSSDATE DONE   ZP60014
*   END DATERTN;                                                   0750
@EL00013 DS    0H                                                  0750
@EF00013 DS    0H                                                  0750
@ER00013 LM    R14,R12,@SA00013                                    0750
         BR    R14                                                 0750
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* TERMID BUILT IN FUNCTION                             ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
TERMRTN  STM   R14,R12,12(R13)                                  ZP60014
         LA    R2,IMMDATA-16(R1)    POINT TO FUNCTION NAME           "
         GTSIZE
         CLI   3(R2),C'L'           SYSLTERM?                        "
         BE    HAVETERM             YES                              "
         LR    R0,R1                NO, MUST BE SYSWTERM             "
HAVETERM CVD   R0,WORKAREA          GET DIMENSION IN DECIMAL         "
         OI    WORKAREA+7,X'0F'     PREPARE FOR UNPACK               "
         UNPK  TIMEDATE(3),WORKAREA GET DIMENSION IN NUMERIC CHARS   "
         LA    R1,TIMEDATE          POINT TO DATA                    "
         LA    R2,3                 GET LENGTH OF DATA               "
         LA    R0,2                 GET MAXIMUM LEADING ZERO COUNT   "
TERMZERO CLI   0(R1),C'0'           LEADING ZERO?                    "
         BNE   TERMOKAY             NO, ALL READY                    "
         LA    R1,1(,R1)            YES, POINT PAST IT               "
         BCTR  R2,0                 DECREMENT LENGTH                 "
         BCT   R0,TERMZERO          CHECK FOR ANOTHER                "
TERMOKAY ST    R1,INSRTDA           POINT TO INSERT DATA             "
         ST    R2,INSRTLN           SET LENGTH OF INSERT DATA        "
         LM    R14,R12,12(R13)                                       "
         BR    R14                                              ZP60014
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* CPU BUILT IN FUNCTION                                ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
CPURTN   STM   R14,R12,12(R13)                                  ZP60014
         L     R2,PSAAOLD           POINT TO CURRENT ASCB            "
         LM    R0,R1,ASCBEJST-ASCB(R2)                               "
         SRDL  R0,12                GET TCB TIME IN MICROSECONDS     "
         D     R0,FW10K             CONVERT TO CENTISECONDS          "
         CVD   R1,WORKAREA          CONVERT TO DECIMAL               "
         OI    WORKAREA+7,X'0F'     PREPARE FOR UNPACK               "
         UNPK  AREA,WORKAREA        CONVERT TO NUMERIC CHARACTERS    "
         MVC   AREA(13),AREA+1      PROMOTE SECONDS                  "
         MVI   AREA+13,C'.'         INSERT DECIMAL POINT             "
         LA    R1,AREA              POINT TO START OF NUMBER         "
         LA    R2,12                GET MAX LEADING ZEROS TO CHOP    "
CPU0LOOP CLI   0(R1),C'0'           LEADING ZERO?                    "
         BNE   CPUTIMOK             NO, ALL READY                    "
         LA    R1,1(,R1)            YES, POINT PAST IT               "
         BCT   R2,CPU0LOOP          CHECK FOR ANOTHER                "
CPUTIMOK LA    R2,4(,R2)            GET DATA LENGTH                  "
         ST    R1,INSRTDA           POINT TO INSERT DATA             "
         ST    R2,INSRTLN           SET LENGTH OF INSERT DATA        "
         LM    R14,R12,12(R13)                                       "
         BR    R14                                              ZP60014
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* SRV BUILT IN FUNCTION                                ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
SRVRTN   STM   R14,R12,12(R13)                                  ZP60014
         LA    R1,AREA              POINT TO THREE WORDS             "
         SYSEVENT REQSERVC          GET ACCUMULATED SERVICE          "
         L     R1,AREA              LOAD JOB/SESSION SERVICE UNITS   "
         CVD   R1,WORKAREA          CONVERT TO DECIMAL               "
         MVC   AREA,ED15            LOAD EDIT MASK                   "
         LA    R1,AREA+15           PREPARE FOR ZERO (UNLIKELY)      "
         EDMK  AREA,WORKAREA        CONVERT TO NUMERIC CHARACTERS    "
         LA    R2,AREA+16           POINT PAST NUMBER                "
         SR    R2,R1                GET LENGTH OF NUMBER             "
         ST    R1,INSRTDA           POINT TO INSERT DATA             "
         ST    R2,INSRTLN           SET LENGTH OF INSERT DATA        "
         LM    R14,R12,12(R13)                                       "
         BR    R14                                              ZP60014
*                                                                  0751
*   /*****************************************************************/
*   /*                                                               */
*   /* LENGTH BUILT IN FUNCTION                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0751
*LENGRTN:                                                          0751
*   PROC;                                                          0751
LENGRTN  STM   R14,R12,@SA00014                                    0751
*   CALL SETUP;                     /* CHECK IF TO WAIT AND CALL     */
         BAL   R14,SETUP                                           0752
*   IF ERROR=F0&WAIT=NO THEN        /* EVALUATE P-STRING             */
         L     R7,ERROR                                            0753
         LTR   R7,R7                                               0753
         BNZ   @RF00753                                            0753
         TM    WAIT(COMONPTR),B'00010000'                          0753
         BNZ   @RF00753                                            0753
*     DO;                           /*                               */
*       CVD(CLEN,WORKAREA);         /* GET LENGTH IN PRINTABLE       */
         LH    R14,CLEN(,COMONPTR)                                 0755
         CVD   R14,WORKAREA                                        0755
*       UNPK(AREA,WORKAREA);        /* FORM FOR TABLE                */
         UNPK  AREA(16),WORKAREA(8)                                0756
*       AREA(16)=AREA(16) CC0;      /* INSURE NO SIGN                */
         OI    AREA+15,C'0'                                        0757
*       DO I=F16 TO F2 BY-F1 WHILE AREA(1)=CC0;/* LEFT JUSTIFY       */
         LA    R15,16                                              0758
         ST    R15,I(,COMONPTR)                                    0758
@DL00758 CLI   AREA,C'0'                                           0758
         BNE   @DC00758                                            0758
*         AREA(1:F15)=AREA(2:F16);  /* SHIFT BUFFER TO LEFT          */
         MVC   @TS00001(15),AREA+1                                 0759
         MVC   AREA(15),@TS00001                                   0759
*       END;                        /*                               */
         SLR   R15,R15                                             0760
         BCTR  R15,0                                               0760
         AL    R15,I(,COMONPTR)                                    0760
         ST    R15,I(,COMONPTR)                                    0760
         C     R15,FW2                                             0760
         BNL   @DL00758                                            0760
@DC00758 DS    0H                                                  0761
*       INSRTDA=ADDR(AREA);         /* POINT TO INSERT LENGTH        */
         LA    R0,AREA                                             0761
         ST    R0,INSRTDA                                          0761
*       INSRTLN=I;                  /* GET LENGTH OF LENGTH          */
         L     R2,I(,COMONPTR)                                     0762
         ST    R2,INSRTLN                                          0762
*       I=M+F1;                     /* POINT TO RESUME DATA          */
         LA    R3,1                                                0763
         AL    R3,M                                                0763
         ST    R3,I(,COMONPTR)                                     0763
*     END;                          /*                               */
*   END LENGRTN;                                                   0765
@EL00014 DS    0H                                                  0765
@EF00014 DS    0H                                                  0765
@ER00014 LM    R14,R12,@SA00014                                    0765
         BR    R14                                                 0765
*                                                                  0766
*   /*****************************************************************/
*   /*                                                               */
*   /* EVAL BUILT IN FUNCTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0766
*EVALRTN:                                                          0766
*   PROC;                                                          0766
EVALRTN  STM   R14,R12,@SA00015                                    0766
*   CALL SETUP;                     /* CHECK IF TO WAIT AND PSTR     */
         BAL   R14,SETUP                                           0767
*   IF ERROR=F0&WAIT=NO THEN        /* OK TO PROCESS                 */
         L     R4,ERROR                                            0768
         LTR   R4,R4                                               0768
         BNZ   @RF00768                                            0768
         TM    WAIT(COMONPTR),B'00010000'                          0768
         BNZ   @RF00768                                            0768
*     DO;                           /*                               */
*       INSRTDA=ADDR(ANSWER);       /* ANSWER OF EVALUATION          */
         L     R6,ANSPTR(,COMONPTR)                                0770
         ST    R6,INSRTDA                                          0770
*       INSRTLN=CLEN;               /* LENGTH OF ANSWER              */
         LH    R7,CLEN(,COMONPTR)                                  0771
         ST    R7,INSRTLN                                          0771
*       I=M+F1;                     /* POINT TO RESUME DATA          */
         LA    R14,1                                               0772
         AL    R14,M                                               0772
         ST    R14,I(,COMONPTR)                                    0772
*     END;                          /*                               */
*   END EVALRTN;                    /* END OF EVAL BIF               */
@EL00015 DS    0H                                                  0774
@EF00015 DS    0H                                                  0774
@ER00015 LM    R14,R12,@SA00015                                    0774
         BR    R14                                                 0774
*                                                                  0775
*   /*****************************************************************/
*   /*                                                               */
*   /* DATATYPE ROUTINE                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0775
*DATYRTN:                                                          0775
*   PROC;                                                          0775
DATYRTN  STM   R14,R12,@SA00016                                    0775
*   ALPHA=NO;                       /* RESET ALPHA SWITCH            */
         NI    ALPHA(COMONPTR),B'11111101'                         0776
*   CALL SETUP;                     /* CHECK TO SEE IF TO WAIT AND   */
         BAL   R14,SETUP                                           0777
*   IF ERROR=F0&WAIT=NO THEN        /* EVALUATE STRING               */
         L     R15,ERROR                                           0778
         LTR   R15,R15                                             0778
         BNZ   @RF00778                                            0778
         TM    WAIT(COMONPTR),B'00010000'                          0778
         BNZ   @RF00778                                            0778
*     DO;                           /*                               */
*       DO I=CLEN TO F1 BY-F1 WHILE ALPHA=NO;/* CHECK IF ANY ALPHA   */
         LH    R0,CLEN(,COMONPTR)                                  0780
         ST    R0,I(,COMONPTR)                                     0780
         B     @DE00780                                            0780
@DL00780 TM    ALPHA(COMONPTR),B'00000010'                         0780
         BNZ   @DC00780                                            0780
*         IF ANSWER(I)<CC0 ANSWER(I)>CC9 THEN/* IF AN ALPHA CHAR     */
         L     R1,I(,COMONPTR)                                     0781
         L     R2,ANSPTR(,COMONPTR)                                0781
         ALR   R1,R2                                               0781
         BCTR  R1,0                                                0781
         CLI   ANSWER(R1),C'0'                                     0781
         BL    @RT00781                                            0781
         L     R3,I(,COMONPTR)                                     0781
         ALR   R2,R3                                               0781
         BCTR  R2,0                                                0781
         CLI   ANSWER(R2),C'9'                                     0781
         BNH   @RF00781                                            0781
@RT00781 DS    0H                                                  0782
*           IF I^=F1 ANSWER(I)^=MINUS THEN/* IF NOT NEGATIVE         */
LBL019A8 LA    R4,1
         CH    R4,CLEN(,COMONPTR)
         BE    @RT00782
         L     R5,I(,COMONPTR)                                     0782
         CR    R5,R4                                               0782
         BNE   @RT00782                                            0782
         L     R1,ANSPTR(,COMONPTR)                                0782
         ALR   R1,R5                                               0782
         BCTR  R1,0                                                0782
         CLI   ANSWER(R1),C'-'                                     0782
         BE    @RF00782                                            0782
@RT00782 DS    0H                                                  0783
*             ALPHA=YES;            /* SET ALPHA SWITCH              */
         OI    ALPHA(COMONPTR),B'00000010'                         0783
*       END;                        /*                               */
@RF00782 DS    0H                                                  0784
@RF00781 SLR   R0,R0                                               0784
         BCTR  R0,0                                                0784
         AL    R0,I(,COMONPTR)                                     0784
         ST    R0,I(,COMONPTR)                                     0784
@DE00780 LTR   R0,R0                                               0784
         BP    @DL00780                                            0784
@DC00780 DS    0H                                                  0785
*       IF ALPHA=YES CLEN=F0 THEN   /* IF DATATYPE IS ALPHA THEN     */
         TM    ALPHA(COMONPTR),B'00000010'                         0785
         BO    @RT00785                                            0785
         LH    R1,CLEN(,COMONPTR)                                  0785
         LTR   R1,R1                                               0785
         BNZ   @RF00785                                            0785
@RT00785 DS    0H                                                  0786
*         DO;                       /* POINT TO 'CHAR' AND ITS LENGTH*/
*           INSRTDA=ADDR(CHR);      /*                               */
         LA    R2,CHR                                              0787
         ST    R2,INSRTDA                                          0787
*           INSRTLN=LENGTH(CHR);    /*                               */
         MVC   INSRTLN(4),FW4                                      0788
*         END;                      /*                               */
*       ELSE                        /* IF NOT ALPHA, POINT INSERT    */
*         DO;                       /* TO 'NUM' AND ITS LENGTH       */
         B     @RC00785                                            0790
@RF00785 DS    0H                                                  0791
*           INSRTDA=ADDR(NUM);      /*                               */
         LA    R3,NUM                                              0791
         ST    R3,INSRTDA                                          0791
*           INSRTLN=LENGTH(NUM);    /*                               */
         MVC   INSRTLN(4),FW3                                      0792
*         END;                      /*                               */
*       I=M+F1;                     /* POINT TO RESUME DATA          */
@RC00785 LA    R4,1                                                0794
         AL    R4,M                                                0794
         ST    R4,I(,COMONPTR)                                     0794
*     END;                          /*                               */
*   END DATYRTN;                                                   0796
@EL00016 DS    0H                                                  0796
@EF00016 DS    0H                                                  0796
@ER00016 LM    R14,R12,@SA00016                                    0796
         BR    R14                                                 0796
*                                                                  0797
*   /*****************************************************************/
*   /*                                                               */
*   /* USERID PREFIX ROUTINE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0797
*PREFRTN:                                                          0797
*   PROC;                                                          0797
PREFRTN  STM   R14,R12,12(R13)                                     0797
*   INSRTDA=ADDR(UPTPREFX);         /* POINT TO PREFIX               */
         L     R5,@PC00001                                         0798
         LA    R4,UPTPREFX-UPT(,R5)                                0798
         ST    R4,INSRTDA                                          0798
*   INSRTLN=UPTPREFL;               /* GET PREFIX LENGTH             */
         SLR   R4,R4                                               0799
         IC    R4,UPTPREFL-UPT(,R5)                                0799
         ST    R4,INSRTLN                                          0799
*   END PREFRTN;                                                   0800
@EL00017 DS    0H                                                  0800
@EF00017 DS    0H                                                  0800
@ER00017 LM    R14,R12,12(R13)                                     0800
         BR    R14                                                 0800
*                                                                  0801
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSPCMD ROUTINE GET SYSTEM PRIMARY COMMAND NAME               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0801
*SYSPRTN:                                                          0801
*   PROC;                                                          0801
SYSPRTN  STM   R14,R12,12(R13)                                     0801
*   INSRTDA=ADDR(ECTPCMD);          /* POINT TO PRIMARY NAME         */
         L     R5,@PC00001+4                                       0802
         LA    R6,ECTPCMD-ECT(,R5)                                 0802
         ST    R6,INSRTDA                                          0802
*   DO INSRTLN=F8 TO F2 BY-F1 WHILE INSRTCHR(INSRTLN)=BLANK;       0803
         LA    R7,8                                                0803
         ST    R7,INSRTLN                                          0803
@DL00803 L     R1,INSRTDA                                          0803
         ALR   R1,R7                                               0803
         BCTR  R1,0                                                0803
         CLI   INSRTCHR(R1),C' '                                   0803
         BNE   @DC00803                                            0803
*   END;                            /* SCAN FOR LAST NON BLANK       */
         BCTR  R7,0                                                0804
         ST    R7,INSRTLN                                          0804
         C     R7,FW2                                              0804
         BNL   @DL00803                                            0804
@DC00803 DS    0H                                                  0805
*   END SYSPRTN;                                                   0805
@EL00018 DS    0H                                                  0805
@EF00018 DS    0H                                                  0805
@ER00018 LM    R14,R12,12(R13)                                     0805
         BR    R14                                                 0805
*                                                                  0806
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSSCMD ROUTINE GET SYSTEM SECONDARY COMMAND NAME             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0806
*SYSSRTN:                                                          0806
*   PROC;                                                          0806
SYSSRTN  STM   R14,R12,12(R13)                                     0806
*   INSRTDA=ADDR(ECTSCMD);          /* POINT TO SECONDARY NAME       */
         L     R2,@PC00001+4                                       0807
         LA    R3,ECTSCMD-ECT(,R2)                                 0807
         ST    R3,INSRTDA                                          0807
*   DO INSRTLN=F8 TO F2 BY-F1 WHILE INSRTCHR(INSRTLN)=BLANK;       0808
         LA    R4,8                                                0808
         ST    R4,INSRTLN                                          0808
@DL00808 L     R1,INSRTDA                                          0808
         ALR   R1,R4                                               0808
         BCTR  R1,0                                                0808
         CLI   INSRTCHR(R1),C' '                                   0808
         BNE   @DC00808                                            0808
*   END;                            /* SCAN FOR LAST NON BLANK       */
         BCTR  R4,0                                                0809
         ST    R4,INSRTLN                                          0809
         C     R4,FW2                                              0809
         BNL   @DL00808                                            0809
@DC00808 DS    0H                                                  0810
*   END SYSSRTN;                                                   0810
@EL00019 DS    0H                                                  0810
@EF00019 DS    0H                                                  0810
@ER00019 LM    R14,R12,12(R13)                                     0810
         BR    R14                                                 0810
*                                                                  0811
*   /*****************************************************************/
*   /*                                                               */
*   /* EVALUATION SETUP                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0811
*SETUP:                                                            0811
*   PROC OPTIONS(SAVEAREA);                                        0811
SETUP    STM   R14,R12,12(R13)                                     0811
         ST    R13,@SA00020+4                                      0811
         LA    R14,@SA00020                                        0811
         ST    R14,8(,R13)                                         0811
         LR    R13,R14                                             0811
*   CALL WAITRTN;                   /* CHECK FOR & IN P-STRING       */
         BAL   R14,WAITRTN                                         0812
*   IF WAIT=NO&ERROR=F0 THEN        /* IF OK TO PROCESS              */
         TM    WAIT(COMONPTR),B'00010000'                          0813
         BNZ   @RF00813                                            0813
         SLR   R2,R2                                               0813
         C     R2,ERROR                                            0813
         BNE   @RF00813                                            0813
*     DO;                           /*                               */
*       BUFPTR=ADDR(C(I-F1));       /* POINT TO DUMMY BUFFER         */
         L     R3,I(,COMONPTR)                                     0815
         L     R1,BUFBASE(,COMONPTR)                               0815
         LA    R4,C-2(R3,R1)                                       0815
         ST    R4,BUFPTR(,COMONPTR)                                0815
*       CSAVE=BUF(F1:F2);           /* SAVE ORIGINAL BUFFER          */
         MVC   CSAVE(2),BUF(R4)                                    0816
*       BUF(F1:F2)=XEQUAL;          /* MAKE DUMMY STATEMENT          */
         MVC   BUF(2,R4),$XEQUALS                                  0817
*       CLEN=M-I+F1;                /* SET LENGTH OF DUMMY STMT      */
         LCR   R3,R3                                               0818
         AL    R3,M                                                0818
         AL    R3,FW1                                              0818
         STH   R3,CLEN(,COMONPTR)                                  0818
*       TYPE=F0;                    /* NUMERIC ASSIGNMENT            */
         ST    R2,TYPE(,COMONPTR)                                  0819
*       RFY                                                        0820
*        (R15) RSTD;                /* RESTRICT RETURN CODE REG      */
*       CALL IKJCT434(BUF,CLEN,TYPE,OUTA1);/* PROCESS EXPRESSION     */
         ST    R4,@AL00001                                         0821
         LA    R14,CLEN(,COMONPTR)                                 0821
         ST    R14,@AL00001+4                                      0821
         LA    R14,TYPE(,COMONPTR)                                 0821
         ST    R14,@AL00001+8                                      0821
         LA    R14,OUTA1                                           0821
         ST    R14,@AL00001+12                                     0821
         L     R15,IKJCT434                                        0821
         LA    R1,@AL00001                                         0821
         BALR  R14,R15                                             0821
*       ERROR=R15;                  /* SAVE ERROR CODE               */
         ST    R15,ERROR                                           0822
*       BUF(F1:F2)=CSAVE;           /* RESTORE BUFFER                */
         L     R14,BUFPTR(,COMONPTR)                               0823
         MVC   BUF(2,R14),CSAVE                                    0823
*       RFY                                                        0824
*        (R15) UNRSTD;              /* RELEASE RETURN CODE REG       */
*     END;                                                         0825
*   END SETUP;                                                     0826
@EL00020 L     R13,4(,R13)                                         0826
@EF00020 DS    0H                                                  0826
@ER00020 LM    R14,R12,12(R13)                                     0826
         BR    R14                                                 0826
*                                                                  0827
*   /*****************************************************************/
*   /*                                                               */
*   /* SYMBOLIC VARIABLE LOCATE                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0827
*LOCATE:                                                           0827
*   PROC(NAME,NAML,FUNC);                                          0827
LOCATE   STM   R14,R12,@SA00021                                    0827
         MVC   @PC00021(12),0(R1)                                  0827
*   DCL                                                            0828
*     NAME CHAR(*),                                                0828
*     NAML FIXED(31),                                              0828
*     FUNC FIXED(31);                                              0828
*   EXECDPTR=LSDEXEC;               /* RESET EXEC DATA POINTER       */
         L     R1,LSDPTR(,COMONPTR)                                0829
         L     R2,LSDEXEC-LSD(,R1)                                 0829
         ST    R2,EXECDPTR(,COMONPTR)                              0829
*   SNTABPTR=SNTABFST;              /* POINT TO FIRST SNTAB          */
         L     R3,SNTABFST(,R2)                                    0830
         ST    R3,SNTABPTR                                         0830
*   SNTELPTR=ADDR(SNTELFST);        /* POINT TO FIRST NAME ENTRY     */
         LA    R4,SNTELFST(,R3)                                    0831
         ST    R4,SNTELPTR(,COMONPTR)                              0831
*   EXITB=NO;                       /* CLEAR EXITB                   */
         NI    EXITB(COMONPTR),B'10111111'                         0832
*   IF NAML>F252 THEN               /* IF NAME IS TOO LONG           */
         L     R5,@PC00021+4                                       0833
         L     R6,NAML(,R5)                                        0833
         C     R6,FW252                                            0833
         BNH   @RF00833                                            0833
*     ERCOM=E940;                   /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW940                             0834
*   DO WHILE EXITB=NO&ERCOM=F0;     /* SEARCH TABLE UNTIL FOUND OR 0835
*                                      UNTIL AN ERCOM OCCURS         */
@RF00833 B     @DE00835                                            0835
@DL00835 DS    0H                                                  0836
*     IF NAML=SNTLNG&NAME(1:NAML)=SNTDATA(1:SNTLNG) THEN/* IF FOUND  */
         L     R7,@PC00021+4                                       0836
         L     R6,SNTELPTR(,COMONPTR)                              0836
         LH    R14,SNTLNG(,R6)                                     0836
         C     R14,NAML(,R7)                                       0836
         BNE   @RF00836                                            0836
         L     R15,@PC00021                                        0836
         BCTR  R14,0                                               0836
         EX    R14,@SC01109                                        0836
         BNE   @RF00836                                            0836
*       EXITB=YES;                  /* SET FOUND SWITCH              */
         OI    EXITB(COMONPTR),B'01000000'                         0837
*     ELSE                          /* OTHERWISE UPDATE POINTER      */
*       IF SNTLAST=YES THEN         /* IF END OF TABLE               */
         B     @RC00836                                            0838
@RF00836 L     R1,SNTELPTR(,COMONPTR)                              0838
         TM    SNTLAST(R1),B'00000001'                             0838
         BNO   @RF00838                                            0838
*         IF SNTABNXT=F0 THEN       /* AND NO MORE TABLES            */
         L     R1,SNTABPTR                                         0839
         L     R2,SNTABNXT(,R1)                                    0839
         LTR   R2,R2                                               0839
         BNZ   @RF00839                                            0839
*           IF FUNC=F8 THEN         /* IF VARIABLE TO BE ADDED       */
         L     R3,@PC00021+8                                       0840
         CLC   FUNC(4,R3),FW8                                      0840
         BNE   @RF00840                                            0840
*             DO;                   /* ADD NAME TO TABLE             */
*               CALL NAMEADD;       /* ADD NAME TO TABLE             */
         BAL   R14,NAMEADD                                         0842
*               EXITB=YES;          /* CAUSE TERMINATION             */
         OI    EXITB(COMONPTR),B'01000000'                         0843
*             END;                  /*                               */
*           ELSE                    /* OTHERWISE                     */
*             ERCOM=E904;           /* SET NOT FOUND RETURN CODE     */
         B     @RC00840                                            0845
@RF00840 MVC   ERCOM(4,COMONPTR),FW904                             0845
*         ELSE                      /*                               */
*           DO;                     /* IF NOT THE END, UPDATE TO NEXT*/
         B     @RC00839                                            0846
@RF00839 DS    0H                                                  0847
*             SNTABPTR=SNTABNXT;    /* TABLE                         */
         L     R1,SNTABPTR                                         0847
         L     R2,SNTABNXT(,R1)                                    0847
         ST    R2,SNTABPTR                                         0847
*             SNTELPTR=ADDR(SNTELFST);/* POINT TO FIRST NAME ENTRY IN*/
         LA    R3,SNTELFST(,R2)                                    0848
         ST    R3,SNTELPTR(,COMONPTR)                              0848
*           END;                    /* NEXT TABLE                    */
*       ELSE                        /* NO MORE TABLES AND NOT FOUND  */
*         SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);/* UPDATE POINTER */
         B     @RC00838                                            0850
@RF00838 L     R4,SNTELPTR(,COMONPTR)                              0850
         LH    R5,SNTLNG(,R4)                                      0850
         ALR   R5,R4                                               0850
         AL    R5,FW8                                              0850
         ST    R5,SNTELPTR(,COMONPTR)                              0850
*   END;                                                           0851
@RC00838 DS    0H                                                  0851
@RC00836 DS    0H                                                  0851
@DE00835 TM    EXITB(COMONPTR),B'01000000'                         0851
         BNZ   @DC00835                                            0851
         L     R6,ERCOM(,COMONPTR)                                 0851
         LTR   R6,R6                                               0851
         BZ    @DL00835                                            0851
@DC00835 DS    0H                                                  0852
*   IF ERCOM=F0&((FUNC^=F4&SNTLABEL=YES) /* IF A LABEL WAS FOUND WHEN*/
*       (FUNC=F4&SNTLABEL=NO)) THEN /* IT SHOULDNT, THEN SET         */
         L     R7,ERCOM(,COMONPTR)                                 0852
         LTR   R7,R7                                               0852
         BNZ   @RF00852                                            0852
         L     R14,@PC00021+8                                      0852
         CLC   FUNC(4,R14),FW4                                     0852
         BE    @GL00055                                            0852
         L     R1,SNTELPTR(,COMONPTR)                              0852
         TM    SNTLABEL(R1),B'00010000'                            0852
         BO    @RT00852                                            0852
@GL00055 L     R2,@PC00021+8                                       0852
         CLC   FUNC(4,R2),FW4                                      0852
         BNE   @RF00852                                            0852
         L     R1,SNTELPTR(,COMONPTR)                              0852
         TM    SNTLABEL(R1),B'00010000'                            0852
         BNZ   @RF00852                                            0852
@RT00852 DS    0H                                                  0853
*     ERCOM=E944;                   /* ERCOM INDICATOR               */
         MVC   ERCOM(4,COMONPTR),FW944                             0853
*   IF ERCOM=F0&SNTGLOB=YES THEN    /* IF A GLOBAL VARIABLE          */
@RF00852 L     R2,ERCOM(,COMONPTR)                                 0854
         LTR   R2,R2                                               0854
         BNZ   @RF00854                                            0854
         L     R1,SNTELPTR(,COMONPTR)                              0854
         TM    SNTGLOB(R1),B'10000000'                             0854
         BNO   @RF00854                                            0854
*     CALL GLOCATE;                 /* DO A GLOBAL SEARCH            */
         BAL   R14,GLOCATE                                         0855
*   ERROR=ERCOM;                    /*                               */
@RF00854 L     R3,ERCOM(,COMONPTR)                                 0856
         ST    R3,ERROR                                            0856
*                                                                  0857
*   /*****************************************************************/
*   /*                                                               */
*   /* NAME TABLE UPDATE - ADD A NAME ENTRY                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0857
*NAMEADD:                                                          0857
*   PROC;                                                          0857
         B     @PB00022                                            0857
NAMEADD  STM   R14,R12,12(R13)                                     0857
*   IF NAML>F31 THEN                /* IF NAME TOO LONG              */
         L     R4,@PC00021+4                                       0858
         L     R5,NAML(,R4)                                        0858
         C     R5,FW31                                             0858
         BNH   @RF00858                                            0858
*     ERCOM=E940;                   /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW940                             0859
*   ELSE                            /* OTHERWISE                     */
*     IF NAML+LENGTH(SNTELEM)>SNTABLNG-SNTABUSE THEN/* IF NO ROOM  0860
*                                      LEFT                          */
         B     @RC00858                                            0860
@RF00858 L     R6,@PC00021+4                                       0860
         L     R1,NAML(,R6)                                        0860
         LA    R0,8                                                0860
         ALR   R0,R1                                               0860
         L     R2,SNTABPTR                                         0860
         L     R3,SNTABLNG(,R2)                                    0860
         LR    R4,R3                                               0860
         SL    R4,SNTABUSE(,R2)                                    0860
         CR    R0,R4                                               0860
         BNH   @RF00860                                            0860
*       DO;                         /* GET ANOTHER TABLE             */
*         NEWLNG=MAX(SNTABLNG,NAML+LENGTH(SNTELEM)+LENGTH(SNTAB)+GAS);
         AL    R1,FW220                                            0862
         CR    R3,R1                                               0862
         BNL   *+6
         LR    R3,R1                                               0862
         ST    R3,NEWLNG                                           0862
*         DO;                       /* GETMAIN LV(NEWLNG) A(SNTSAVE)
*                                      SP(78) MF(E,GETLST)         0863
*                                      RTCD(ERCOM)                   */
*           RESPECIFY                                              0864
*            (R1,                                                  0864
*             R15) RESTRICTED;                                     0864
*           GETLST01=NEWLNG;        /* LENGTH                        */
         ST    R3,GETLST01                                         0865
*           GETLST03=ADDR(SNTSAVE); /* ADDR OF ADDR LIST             */
         LA    R14,SNTSAVE                                         0866
         STCM  R14,7,GETLST03                                      0866
*           GETLST05=78;            /* SUBPOOL VALUE                 */
         MVI   GETLST05,X'4E'                                      0867
*           R1=ADDR(GETLST);        /* REG1 POINTS TO LIST           */
         LA    R1,GETLST                                           0868
*           SVC(4);                 /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0869
*           ERCOM=R15;              /* SET RETURN CODE               */
         ST    R15,ERCOM(,COMONPTR)                                0870
*           RESPECIFY                                              0871
*            (R1,                                                  0871
*             R15) UNRESTRICTED;                                   0871
*         END;                      /* GETMAIN LV(NEWLNG) A(SNTSAVE)
*                                      SP(78) MF(E,GETLST)         0872
*                                      RTCD(ERCOM)                   */
*         IF ERCOM^=F0 THEN         /* IF GETMAIN ERCOM              */
         L     R2,ERCOM(,COMONPTR)                                 0873
         LTR   R2,R2                                               0873
         BZ    @RF00873                                            0873
*           ERCOM=E16;              /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW16                              0874
*         ELSE                      /* OTHERWISE                     */
*           DO;                     /* CHAIN NEW TABLE               */
         B     @RC00873                                            0875
@RF00873 DS    0H                                                  0876
*             RFY                                                  0876
*               SNTAB BASED(SNTSAVE);/* RESET BASE FOR NEW TABLE     */
*             SNTABNXT=F0;          /* NO NEXT TABLE                 */
         L     R3,SNTSAVE                                          0877
         SLR   R2,R2                                               0877
         ST    R2,SNTABNXT(,R3)                                    0877
*             SNTABLNG=NEWLNG;      /* LENGTH OF THIS TABLE          */
         L     R2,NEWLNG                                           0878
         ST    R2,SNTABLNG(,R3)                                    0878
*             SNTABUSE=LENGTH(SNTAB);/* LENGTH OF HEADER             */
         MVC   SNTABUSE(4,R3),FW12                                 0879
*             RFY                                                  0880
*               SNTAB BASED(SNTABPTR);/* RESTORE BASE                */
*             SNTABNXT=SNTSAVE;     /* CHAIN NEW TABLE               */
         L     R2,SNTABPTR                                         0881
         ST    R3,SNTABNXT(,R2)                                    0881
*             SNTABPTR=SNTSAVE;     /* SET BASE TO NEW TABLE         */
         ST    R3,SNTABPTR                                         0882
*           END;                    /*                               */
*       END;                        /*                               */
*     ELSE                          /* NOT A NEW TABLE               */
*       SNTLAST=NO;                 /* CLEAR OLD LAST SWITCH         */
         B     @RC00860                                            0885
@RF00860 L     R1,SNTELPTR(,COMONPTR)                              0885
         NI    SNTLAST(R1),B'11111110'                             0885
*   IF ERCOM=F0 THEN                /* IF NO GETMAIN ERCOM           */
@RC00860 DS    0H                                                  0886
@RC00858 L     R2,ERCOM(,COMONPTR)                                 0886
         LTR   R2,R2                                               0886
         BNZ   @RF00886                                            0886
*     DO;                           /* ADD ENTRY                     */
*       SNTELPTR=SNTABPTR+SNTABUSE; /* POINT TO NEW SLOT             */
         L     R3,SNTABPTR                                         0888
         L     R2,SNTABUSE(,R3)                                    0888
         LR    R4,R3                                               0888
         ALR   R4,R2                                               0888
         ST    R4,SNTELPTR(,COMONPTR)                              0888
*       SNTFLAGS=''B;               /* CLEAR FLAGS                   */
         XC    SNTFLAGS(2,R4),SNTFLAGS(R4)                         0889
*       SNTKEYW=YES;                /* KEYWORD WITH VALUE            */
*       SNTLAST=YES;                /* NOW LAST ELEMENT              */
         OI    SNTKEYW(R4),B'00100001'                             0891
*       SNTVLPTR=SVTABFST+LENGTH(SVTAB);/* POINT TO NULL ELEMENT     */
         L     R1,EXECDPTR(,COMONPTR)                              0892
         LA    R5,16                                               0892
         AL    R5,SVTABFST(,R1)                                    0892
         ST    R5,SNTVLPTR(,R4)                                    0892
*       SNTLNG=NAML;                /* LENGTH OF NAME                */
         L     R5,@PC00021+4                                       0893
         L     R1,NAML(,R5)                                        0893
         STH   R1,SNTLNG(,R4)                                      0893
*       SNTDATA(1:NAML)=NAME(1:NAML);/* NAME                         */
         LR    R5,R1                                               0894
         BCTR  R5,0                                                0894
         L     R6,@PC00021                                         0894
         EX    R5,@SM01111                                         0894
*       SNTABUSE=SNTABUSE+NAML+LENGTH(SNTELEM);/* AMOUNT IN USE      */
         ALR   R2,R1                                               0895
         AL    R2,FW8                                              0895
         ST    R2,SNTABUSE(,R3)                                    0895
*     END;                          /*                               */
*   END NAMEADD;                                                   0897
@EL00022 DS    0H                                                  0897
@EF00022 DS    0H                                                  0897
@ER00022 LM    R14,R12,12(R13)                                     0897
         BR    R14                                                 0897
*   END LOCATE;                                                    0898
@EL00021 DS    0H                                                  0898
@EF00021 DS    0H                                                  0898
@ER00021 LM    R14,R12,@SA00021                                    0898
         BR    R14                                                 0898
*                                                                  0899
*   /*****************************************************************/
*   /*                                                               */
*   /* GLOBAL LOCATE FUNCTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0899
*GLOCATE:                                                          0899
*   PROC;                                                          0899
GLOCATE  STM   R14,R12,12(R13)                                     0899
*   SNTSAVE=SNTELPTR;               /* SAVE NAME POINTER             */
         L     R14,SNTELPTR(,COMONPTR)                             0900
         ST    R14,SNTSAVE                                         0900
*   EXECDPTR=GEXECDAT;              /* POINT TO GLOBAL EXEC          */
         L     R1,EXECDPTR(,COMONPTR)                              0901
         L     R2,GEXECDAT(,R1)                                    0901
         ST    R2,EXECDPTR(,COMONPTR)                              0901
*   SNTABPTR=SNTABFST;              /* POINT TO FIRST NAME TABLE     */
         L     R3,SNTABFST(,R2)                                    0902
         ST    R3,SNTABPTR                                         0902
*   SNTELPTR=ADDR(SNTELFST);        /* BEGIN OF GLOBAL NAMES         */
         LA    R4,SNTELFST(,R3)                                    0903
         ST    R4,SNTELPTR(,COMONPTR)                              0903
*   EXITB=NO;                       /* TURN OFF EXIT SWITCH          */
         NI    EXITB(COMONPTR),B'10111111'                         0904
*   DO WHILE EXITB=NO&ERCOM=F0;     /* FIND GLOBAL VARIABLE          */
         B     @DE00905                                            0905
@DL00905 DS    0H                                                  0906
*     IF SNTLNG=F4&                 /* IF LENGTH IS FOUR             */
*         SNTSAVE->SNTGVAL=SNTDATA(1:F4) THEN/* MATCH                */
         L     R5,SNTELPTR(,COMONPTR)                              0906
         CLC   SNTLNG(2,R5),HW4                                    0906
         BNE   @RF00906                                            0906
         L     R1,SNTSAVE                                          0906
         CLC   SNTGVAL(4,R1),SNTDATA(R5)                           0906
         BNE   @RF00906                                            0906
*       EXITB=YES;                  /* EXIT LOCATE                   */
         OI    EXITB(COMONPTR),B'01000000'                         0907
*     ELSE                          /* OTHERWISE                     */
*       IF SNTLAST=YES THEN         /* LAST NAME ?                   */
         B     @RC00906                                            0908
@RF00906 L     R1,SNTELPTR(,COMONPTR)                              0908
         TM    SNTLAST(R1),B'00000001'                             0908
         BNO   @RF00908                                            0908
*         IF SNTABNXT=F0 THEN       /* NO MORE TABLES ?              */
         L     R1,SNTABPTR                                         0909
         L     R2,SNTABNXT(,R1)                                    0909
         LTR   R2,R2                                               0909
         BNZ   @RF00909                                            0909
*           ERCOM=E312;             /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW312                             0910
*         ELSE                      /* OTHERWISE                     */
*           DO;                     /* SCAN NEXT TABLE               */
         B     @RC00909                                            0911
@RF00909 DS    0H                                                  0912
*             SNTABPTR=SNTABNXT;    /* BASE NEXT TABLE               */
         L     R1,SNTABPTR                                         0912
         L     R2,SNTABNXT(,R1)                                    0912
         ST    R2,SNTABPTR                                         0912
*             SNTELPTR=ADDR(SNTELFST);/* POINT TO FIRST NAME         */
         LA    R3,SNTELFST(,R2)                                    0913
         ST    R3,SNTELPTR(,COMONPTR)                              0913
*           END;                    /*                               */
*       ELSE                        /* OTHERWISE                     */
*         SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);/* GET NEXT       */
         B     @RC00908                                            0915
@RF00908 L     R4,SNTELPTR(,COMONPTR)                              0915
         LH    R5,SNTLNG(,R4)                                      0915
         ALR   R5,R4                                               0915
         AL    R5,FW8                                              0915
         ST    R5,SNTELPTR(,COMONPTR)                              0915
*   END;                            /*                               */
@RC00908 DS    0H                                                  0916
@RC00906 DS    0H                                                  0916
@DE00905 TM    EXITB(COMONPTR),B'01000000'                         0916
         BNZ   @DC00905                                            0916
         L     R6,ERCOM(,COMONPTR)                                 0916
         LTR   R6,R6                                               0916
         BZ    @DL00905                                            0916
@DC00905 DS    0H                                                  0917
*   ERROR=ERCOM;                                                   0917
         L     R14,ERCOM(,COMONPTR)                                0917
         ST    R14,ERROR                                           0917
*   END GLOCATE;                    /*                               */
@EL00023 DS    0H                                                  0918
@EF00023 DS    0H                                                  0918
@ER00023 LM    R14,R12,12(R13)                                     0918
         BR    R14                                                 0918
*                                                                  0919
*   /*****************************************************************/
*   /*                                                               */
*   /* SYMBOLIC VARIABLE UPDATE                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0919
*UPDATE:                                                           0919
*   PROC(VALUE,VALLEN);             /* UPDATE A VTAB ELEMENT         */
UPDATE   STM   R14,R12,12(R13)                                     0919
         MVC   @PC00024(8),0(R1)                                   0919
*   DCL                                                            0920
*     VALUE CHAR(*),                                               0920
*     VALLEN FIXED(31);                                            0920
*   SVTABPTR=SVTABFST;              /* POINT TO CURRENT VTAB         */
         L     R1,EXECDPTR(,COMONPTR)                              0921
         L     R1,SVTABFST(,R1)                                    0921
         ST    R1,SVTABPTR                                         0921
*   IF SNTNAUTH=YES&SYSUPDTE=NO THEN/* IF AN UNAUTHORIZED VARIABLE   */
         L     R1,SNTELPTR(,COMONPTR)                              0922
         TM    SNTNAUTH(R1),B'00000100'                            0922
         BNO   @RF00922                                            0922
         TM    SYSUPDTE(COMONPTR),B'00000100'                      0922
         BNZ   @RF00922                                            0922
*     ERCOM=E300;                   /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW300                             0923
*   ELSE                            /* OTHERWISE                     */
*     DO;                           /* UPDATE VARIABLE               */
         B     @RC00922                                            0924
@RF00922 DS    0H                                                  0925
*       IF VALLEN>SVTORIG THEN      /* IF A NEW SLOT IS NEEDED       */
         L     R2,@PC00024+4                                       0925
         L     R1,VALLEN(,R2)                                      0925
         L     R2,SNTELPTR(,COMONPTR)                              0925
         L     R3,SNTVLPTR(,R2)                                    0925
         CH    R1,SVTORIG(,R3)                                     0925
         BNH   @RF00925                                            0925
*         DO;                                                      0926
*           IF VALLEN+LENGTH(SVTELEM)>SVTABLNG-SVTABUSE THEN/* IF NEW
*                                      TABLE                         */
         AL    R1,FW4                                              0927
         L     R3,SVTABPTR                                         0927
         L     R0,SVTABLNG(,R3)                                    0927
         SL    R0,SVTABUSE(,R3)                                    0927
         CR    R1,R0                                               0927
         BNH   @RF00927                                            0927
*             DO;                   /* IS NEEDED, GET ONE            */
*               SNTSAVE=SNTELPTR;   /* SAVE NAME POINTER             */
         ST    R2,SNTSAVE                                          0929
*               EXITC=NO;           /* TURN OFF SWITCH               */
LBL01EDE NI    EXITC(COMONPTR),B'11111110'                         0930
*               NEWLNG=MAX(SVTABLNG+VALLEN+GAS,/* OLD SIZE + GAS     */
*                   (SVTABUSE-SVTABFRE)*F3/F2);/* 1.5 TIMES USED     */
         L     R1,SVTABPTR
         L     R2,@PC00024+4
         L     R3,SVTABLNG(,R1)
         AL    R3,VALLEN(,R2)
         AL    R3,FW200                                            0931
         L     R0,SVTABUSE(,R1)                                    0931
         SL    R0,SVTABFRE(,R1)                                    0931
         ALR   R0,R0                                               0931
         CR    R3,R0                                               0931
         BNL   *+6
         LR    R3,R0                                               0931
         ST    R3,NEWLNG                                           0931
*               DO;                 /* GETMAIN LV(NEWLNG) A(SVTABPTR)
*                                      SP(78) MF(E,GETLST)         0932
*                                      RTCD(ERCOM)                   */
*                 RESPECIFY                                        0933
*                  (R1,                                            0933
*                   R15) RESTRICTED;                               0933
*                 GETLST01=NEWLNG;  /* LENGTH                        */
         ST    R3,GETLST01                                         0934
*                 GETLST03=ADDR(SVTABPTR);/* ADDR OF ADDR LIST       */
         LA    R14,SVTABPTR                                        0935
         STCM  R14,7,GETLST03                                      0935
*                 GETLST05=78;      /* SUBPOOL VALUE                 */
         MVI   GETLST05,X'4E'                                      0936
*                 R1=ADDR(GETLST);/* REG1 POINTS TO LIST             */
         LA    R1,GETLST                                           0937
*                 SVC(4);           /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0938
*                 ERCOM=R15;        /* SET RETURN CODE               */
         ST    R15,ERCOM(,COMONPTR)                                0939
*                 RESPECIFY                                        0940
*                  (R1,                                            0940
*                   R15) UNRESTRICTED;                             0940
*               END;                /* GETMAIN LV(NEWLNG) A(SVTABPTR)
*                                      SP(78) MF(E,GETLST)         0941
*                                      RTCD(ERCOM)                   */
*               IF ERCOM^=F0 THEN   /* IF GETMAIN FAILS              */
         L     R2,ERCOM(,COMONPTR)                                 0942
         LTR   R2,R2                                               0942
         BZ    @RF00942                                            0942
*                 DO;               /* TERMINATE UPDATE              */
*                   ERCOM=E16;      /* SET ERCOM CODE                */
         LA    R3,16                                               0944
         ST    R3,ERCOM(,COMONPTR)                                 0944
*                   ERROR=ERCOM;    /* SET INT ERROR                 */
         ST    R3,ERROR                                            0945
*                   RETURN;         /* RETURN                        */
@EL00024 DS    0H                                                  0946
@EF00024 DS    0H                                                  0946
@ER00024 LM    R14,R12,12(R13)                                     0946
         BR    R14                                                 0946
*                 END;              /*                               */
*               ELSE                /* OTHERWISE                     */
*                 DO;               /* SET UP AND COPY TABLE         */
@RF00942 DS    0H                                                  0949
*                   SVTABNXT=SVTABFST;/* POINT TO OLD TABLE          */
         L     R4,SVTABPTR                                         0949
         L     R5,EXECDPTR(,COMONPTR)                              0949
         L     R7,SVTABFST(,R5)                                    0949
         ST    R7,SVTABNXT(,R4)                                    0949
*                   SVTABFRE=F0;    /* NO FREE SPACE IN TABLE        */
         SLR   R14,R14                                             0950
         ST    R14,SVTABFRE(,R4)                                   0950
*                   SVTABLNG=NEWLNG;/* LENGTH OF THIS TABLE          */
         L     R15,NEWLNG                                          0951
         ST    R15,SVTABLNG(,R4)                                   0951
*                   SVTABUSE=LENGTH(SVTAB)+LENGTH(NULELEM);/* INIT 0952
*                                      USED                          */
         MVC   SVTABUSE(4,R4),FW20                                 0952
*                   SVTABFST=SVTABPTR;/* INIT EXEC DATA POINTER      */
         ST    R4,SVTABFST(,R5)                                    0953
*                   SNTABPTR=SNTABFST;/* POINT TO FIRST NAME TAB     */
         L     R5,SNTABFST(,R5)                                    0954
         ST    R5,SNTABPTR                                         0954
*                   SNTELPTR=ADDR(SNTELFST);/* GET ADDR OF FIRST NAME*/
         LA    R15,SNTELFST(,R5)                                   0955
         ST    R15,SNTELPTR(,COMONPTR)                             0955
*                   RFY                                            0956
*                    (R2,                                          0956
*                     R3,                                          0956
*                     R4,                                          0956
*                     R5) RSTD;     /* RESTRICT REGS                 */
*                   EXITC=NO;       /* RESET EXIT SWITCH             */
         NI    EXITC(COMONPTR),B'11111110'                         0957
*                   R2=ADDR(SVTELFST)+LENGTH(NULELEM);/* GET FIRST 0958
*                                      ALAIL SLOT                    */
         L     R2,SVTABPTR               ( WAS SVTELFST(,R4) )     0958
         LA    R15,NULELEM(,R2)
         AL    R15,FW4                                             0958
         LR    R2,R15
         L     R15,SVTABPTR
*                   NULELEM=NULVAL; /* INIT NULL ELEMENT             */
         ST    R14,NULELEM(,R15)                                   0959
*                   DO WHILE EXITC=NO;/* MOVE UNTIL END OF TABLE     */
         B     @DE00960                                            0960
@DL00960 DS    0H                                                  0961
*                     IF SNTELPTR^=SNTSAVE&SNTLABEL=NO&/* OK TO COPY */
*                         SNTGLOB=NO THEN/* ELEMENT ?                */
         L     R0,SNTELPTR(,COMONPTR)                              0961
         C     R0,SNTSAVE                                          0961
         BE    @RF00961                                            0961
         LR    R1,R0
         TM    SNTLABEL(R1),B'00010000'                            0961
         BNZ   @RF00961                                            0961
         LR    R1,R0
         TM    SNTGLOB(R1),B'10000000'                             0961
         BNZ   @RF00961                                            0961
*                       DO;         /* YES-MOVE INTO NEW TABLE       */
*                         IF SVTORIG=F0 THEN/* IF ORIGINALLY NULL    */
         LR    R1,R0
         L     R1,SNTVLPTR(,R1)                                    0963
         LH    R1,SVTORIG(,R1)                                     0963
         LTR   R1,R1                                               0963
         BNZ   @RF00963                                            0963
*                           SNTVLPTR=ADDR(NULELEM);/* POINT TO NULL
*                                      ELEM                          */
         L     R1,SVTABPTR                                         0964
         LA    R1,NULELEM(,R1)                                     0964
         LR    R6,R0
         ST    R1,SNTVLPTR(,R6)                                    0964
*                         ELSE      /* OTHERWISE ASSIGN A SLOT       */
*                           DO;     /* IN NEW TABLE                  */
         B     @RC00963                                            0965
@RF00963 DS    0H                                                  0966
*                             R3=SVTORIG+LENGTH(SVTELEM);/* LENGTH OF
*                                      MOVE                          */
         LA    R7,4                                                0966
         L     R6,SNTELPTR(,COMONPTR)                              0966
         L     R14,SNTVLPTR(,R6)                                   0966
         LH    R15,SVTORIG(,R14)                                   0966
         LR    R3,R15                                              0966
         ALR   R3,R7                                               0966
*                             R4=SNTVLPTR;/* POINT TO OLD DATA       */
         LR    R4,R14                                              0967
*                             R5=R3;/* GET FROM LENGTH               */
         LR    R5,R3                                               0968
*                             SVTABFRE=SVTABFRE+SVTORIG-SVTLNG;/*  0969
*                                      UPDATE FREE                   */
         L     R0,SVTABPTR                                         0969
         LR    R1,R0
         L     R1,SVTABFRE(,R1)                                    0969
         ALR   R1,R15                                              0969
         SH    R1,SVTLNG(,R14)                                     0969
         LR    R14,R0
         ST    R1,SVTABFRE(,R14)                                   0969
*                             SVTABUSE=SVTABUSE+SVTORIG+LENGTH(SVTELEM)
*                                 ;                                0970
         LR    R14,R0
         AL    R15,SVTABUSE(,R14)                                  0970
         ALR   R15,R7                                              0970
         LR    R14,R0
         ST    R15,SVTABUSE(,R14)                                  0970
         LR    R1,R0
         C     R15,SVTABLNG(,R1)
         BH    LBL01EDE
*                             SNTVLPTR=R2;/* RESET VALUE POINTER     */
         ST    R2,SNTVLPTR(,R6)                                    0971
*                             MVCL(R2,R4);/* COPY INT NEW TABLE      */
         MVCL  R2,R4                                               0972
*                           END;                                   0973
*                       END;        /*                               */
@RC00963 DS    0H                                                  0975
*                     IF SNTLAST=YES THEN/* IF LAST IN TABLE         */
@RF00961 L     R1,SNTELPTR(,COMONPTR)                              0975
         TM    SNTLAST(R1),B'00000001'                             0975
         BNO   @RF00975                                            0975
*                       IF SNTABNXT=F0 THEN/* AND NO MORE TABLES     */
         L     R1,SNTABPTR                                         0976
         L     R6,SNTABNXT(,R1)                                    0976
         LTR   R6,R6                                               0976
         BNZ   @RF00976                                            0976
*                         EXITC=YES;/* END COPY                      */
         OI    EXITC(COMONPTR),B'00000001'                         0977
*                       ELSE        /* RESET TO NEW TABLE            */
*                         DO;       /*                               */
         B     @RC00976                                            0978
@RF00976 DS    0H                                                  0979
*                           SNTABPTR=SNTABNXT;/* RESET BASE          */
         L     R1,SNTABPTR                                         0979
         L     R6,SNTABNXT(,R1)                                    0979
         ST    R6,SNTABPTR                                         0979
*                           SNTELPTR=ADDR(SNTELFST);/* RESET EL PTR  */
         LA    R7,SNTELFST(,R6)                                    0980
         ST    R7,SNTELPTR(,COMONPTR)                              0980
*                         END;      /*                               */
*                     ELSE          /* OTHERWISE                     */
*                       SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);  0982
         B     @RC00975                                            0982
@RF00975 L     R14,SNTELPTR(,COMONPTR)                             0982
         LH    R15,SNTLNG(,R14)                                    0982
         ALR   R15,R14                                             0982
         AL    R15,FW8                                             0982
         ST    R15,SNTELPTR(,COMONPTR)                             0982
*                   END;            /*                               */
@RC00975 DS    0H                                                  0983
@DE00960 TM    EXITC(COMONPTR),B'00000001'                         0983
         BZ    @DL00960                                            0983
*                   RFY                                            0984
*                    (R2,                                          0984
*                     R3,                                          0984
*                     R4,                                          0984
*                     R5) UNRSTD;   /* RELEASE REGS                  */
*                   SNTELPTR=SNTSAVE;/* RESTORE SNTELPTR             */
         L     R1,SNTSAVE                                          0985
         ST    R1,SNTELPTR(,COMONPTR)                              0985
*                   SNTABPTR=SNTABFST;/* RESTORE TABLE POINTER       */
         L     R1,EXECDPTR(,COMONPTR)                              0986
         L     R1,SNTABFST(,R1)                                    0986
         ST    R1,SNTABPTR                                         0986
*
*           SNTVLPTR=SVTABPTR+SVTABUSE;/* ASSIGN NEW SLOT            */
@RF00927 EQU   *
         L     R2,SVTABPTR                                         0999
         L     R3,SVTABUSE(,R2)                                    0999
         L     R4,@PC00024+4
         L     R1,VALLEN(,R4)
         LR    R0,R3                                               0999
         ALR   R0,R1                                               0999
*        ST    R0,SNTVLPTR(,R1)                                    0999
         AL    R0,FW4
         C     R0,SVTABLNG(,R2)
         BH    LBL01EDE
         L     R4,SNTELPTR(,COMONPTR)
         ALR   R3,R2
         ST    R3,SNTVLPTR(,R4)
         STH   R1,SVTORIG(,R3)
         STH   R1,SVTLNG(,R3)
         ST    R0,SVTABUSE(,R2)
*           SVTORIG=VALLEN;         /* SET LENGTH OF VALUE           */
*        L     R1,@PC00024+4                                       1000
*        L     R1,VALLEN(,R1)                                      1000
*        LR    R7,R0                                               1000
*        STH   R1,SVTORIG(,R7)                                     1000
*           SVTLNG=VALLEN;          /*                               */
*        LR    R7,R0                                               1001
*        STH   R1,SVTLNG(,R7)                                      1001
*           SVTABUSE=SVTABUSE+VALLEN+LENGTH(SVTELEM);/*              */
*        ALR   R14,R1                                              1002
*        AL    R14,FW4                                             1002
*        ST    R14,SVTABUSE(,R15)                                  1002
*         END;                      /*                               */
*       SVTABFRE=SVTABFRE+SVTLNG-VALLEN;/* ADJUST FREE AREA          */
@RF00925 L     R5,SVTABPTR                                         1004
         L     R1,SNTELPTR(,COMONPTR)                              1004
         L     R4,SNTVLPTR(,R1)                                    1004
         LH    R6,SVTLNG(,R4)                                      1004
         AL    R6,SVTABFRE(,R5)                                    1004
         L     R7,@PC00024+4                                       1004
         SL    R6,VALLEN(,R7)                                      1004
         ST    R6,SVTABFRE(,R5)                                    1004
*       IF NODATA=YES THEN          /* IF NODATA SPECIFIED           */
         TM    NODATA(COMONPTR),B'01000000'                        1005
         BNO   @RF01005                                            1005
*         SVTLNG=F0;                /* CURRENT LENGTH IS ZERO        */
         SLR   R5,R5                                               1006
         STH   R5,SVTLNG(,R4)                                      1006
*       ELSE                        /* OTHERWISE                     */
*         SVTLNG=VALLEN;            /* SET NEW LENGTH                */
         B     @RC01005                                            1007
@RF01005 L     R1,SNTELPTR(,COMONPTR)                              1007
         L     R1,SNTVLPTR(,R1)                                    1007
         L     R2,@PC00024+4                                       1007
         L     R0,VALLEN(,R2)                                      1007
         STH   R0,SVTLNG(,R1)                                      1007
*       RFY                                                        1008
*        (R2,                                                      1008
*         R3,                                                      1008
*         R4,                                                      1008
*         R5) RSTD;                 /* RESTRICT REGS                 */
@RC01005 DS    0H                                                  1009
*       R2=ADDR(SVTDATA);           /*                               */
         L     R1,SNTELPTR(,COMONPTR)                              1009
         L     R6,SNTVLPTR(,R1)                                    1009
         LA    R2,SVTDATA(,R6)                                     1009
*       R3=SVTORIG;                 /* ALWAYS CLEAR OR MOVE TO ALL   */
         LH    R3,SVTORIG(,R6)                                     1010
*       R4=ADDR(VALUE);             /* POINT TO NEW DATA             */
         L     R4,@PC00024                                         1011
*       R5=SVTLNG BLANKS;           /* ONLY MOVE WHAT SVTLNG SAYS    */
         LH    R5,SVTLNG(,R6)                                      1012
         O     R5,HIBLANK                                          1012
*       MVCL(R2,R4);                /* MOVE NEW DATA                 */
         MVCL  R2,R4                                               1013
@RC00922 L      R1,SVTABPTR
         L      R2,SVTABNXT(,R1)
         ST     R2,SVTWOPTR
         B      LBL02164
*                   DO;             /* FREEMAIN                    0987
*                                      LV(SVTABNXT->SVTABLNG)      0987
*                                      A(SVTABNXT) SP(78)          0987
*                                      MF(E,FRELST)                  */
*                     RESPECIFY                                    0988
*                      (R1) RESTRICTED;                            0988
*                     FRELST02=SVTABNXT->SVTABLNG;/* LENGTH          */
LBL02138 L     R3,SVTWOPTR
         L     R2,SVTABNXT(,R3)
         ST    R2,SVONEPTR
         MVC   FRELST02(3),SVTABLNG+1(R3)                          0989
         LA    R0,SVTWOPTR
*                     FRELST04=ADDR(SVTABNXT);/* ADDR OF ADDR LIST   */
         STCM  R0,7,FRELST04                                       0990
*                     FRELST06=78;  /* SUBPOOL VALUE                 */
         MVI   FRELST06,X'4E'                                      0991
*                     R1=ADDR(FRELST);/* REG1 POINTS TO LIST         */
         LA    R1,FRELST                                           0992
*                     SVC(5);       /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0993
*                     RESPECIFY                                    0994
*                      (R1) UNRESTRICTED;                          0994
*                   END;            /* FREEMAIN                    0995
*                                      LV(SVTABNXT->SVTABLNG)      0995
*                                      A(SVTABNXT) SP(78)          0995
*                                      MF(E,FRELST)                  */
*                   SVTABNXT=F0;    /* BREAK CHAIN                   */
*        L     R1,SVTABPTR                                         0996
         L     R3,SVONEPTR
         ST    R3,SVTWOPTR
LBL02164 SLR   R4,R4                                               0996
         C     R4,SVTWOPTR
         BNE   LBL02138
         L     R5,SVTABPTR
         ST    R4,SVTABNXT(,R5)                                    0996
*       RFY                                                        1014
*        (R2,                                                      1014
*         R3,                                                      1014
*         R4,                                                      1014
*         R5) UNRSTD;               /* RELEASE REGS                  */
*     END;                          /*                               */
*   EXECDPTR=LSDEXEC;               /* RESET EXEC DATA POINTER       */
         L     R1,LSDPTR(,COMONPTR)                                1016
         L     R1,LSDEXEC-LSD(,R1)                                 1016
         ST    R1,EXECDPTR(,COMONPTR)                              1016
*   ERROR=ERCOM;                                                   1017
         L     R3,ERCOM(,COMONPTR)                                 1017
         ST    R3,ERROR                                            1017
*   END UPDATE;                     /* END OF UPDATE                 */
         B     @EL00024                                            1018
*
*                 END;              /*                               */
*             END;                  /*                               */
*           SNTVLPTR=SVTABPTR+SVTABUSE;/* ASSIGN NEW SLOT            */
*RF00927 L     R1,SNTELPTR(,COMONPTR)                              0999
*        L     R15,SVTABPTR                                        0999
*        L     R14,SVTABUSE(,R15)                                  0999
*        LR    R0,R15                                              0999
*        ALR   R0,R14                                              0999
*        ST    R0,SNTVLPTR(,R1)                                    0999
*           SVTORIG=VALLEN;         /* SET LENGTH OF VALUE           */
*        L     R1,@PC00024+4                                       1000
*        L     R1,VALLEN(,R1)                                      1000
*        LR    R7,R0                                               1000
*        STH   R1,SVTORIG(,R7)                                     1000
*           SVTLNG=VALLEN;          /*                               */
*        LR    R7,R0                                               1001
*        STH   R1,SVTLNG(,R7)                                      1001
*           SVTABUSE=SVTABUSE+VALLEN+LENGTH(SVTELEM);/*              */
*        ALR   R14,R1                                              1002
*        AL    R14,FW4                                             1002
*        ST    R14,SVTABUSE(,R15)                                  1002
*         END;                      /*                               */
*                                                                  1019
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN CODE UPDATE                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1019
*RCUPDT:                                                           1019
*   PROC;                                                          1019
RCUPDT   STM   R14,R12,@SA00025                                    1019
*   IF NOLASTCC=YES THEN            /* IF SKIP LASTCC UPDATE @ZA03879*/
         L     R4,EXECDPTR(,COMONPTR)                              1020
         TM    NOLASTCC(R4),B'01000000'                            1020
         BNO   @RF01020                                            1020
*     NOLASTCC=NO;                  /* TURN OFF FLAG         @ZA03879*/
         NI    NOLASTCC(R4),B'10111111'                            1021
*   ELSE                            /*                       @ZA03879*/
*     DO;                           /* NORMAL UPDATE         @ZA03879*/
         B     @RC01020                                            1022
@RF01020 DS    0H                                                  1023
*       IF RCABEND=YES&ERRSAV//F4096=F0 THEN/* IF SYSTEM ABEND CODE  */
         TM    RCABEND(COMONPTR),B'10000000'                       1023
         BNO   @RF01023                                            1023
         L     R5,ERRSAV                                           1023
         LR    R6,R5                                               1023
         SRDA  R6,32                                               1023
         D     R6,FW4096                                           1023
         LTR   R6,R6                                               1023
         BNZ   @RF01023                                            1023
*         DO;                       /* DETRIMINE TYPE                */
*           AREA(1:4)=ERRSAV;       /* PREPARE FOR UNPAK             */
         STCM  R5,15,AREA                                          1025
*           UNPK(OUTA1(2:8),AREA(1:5));/* UNPACK ABEND CODE          */
         UNPK  OUTA1+1(7),AREA(5)                                  1026
*           DO I=F7 TO F2 BY-F1;    /* TRANSLATE FA-FF TO C1-C5      */
         LA    R6,7                                                1027
         ST    R6,I(,COMONPTR)                                     1027
@DL01027 DS    0H                                                  1028
*             IF OUTFX(I)>F249 THEN /* DECIMAL OF F9 (FA-FF IS >)    */
         L     R7,I(,COMONPTR)                                     1028
         SLR   R6,R6                                               1028
         IC    R6,OUTFX-1(R7)                                      1028
         C     R6,FW249                                            1028
         BNH   @RF01028                                            1028
*               OUTFX(I)=OUTFX(I)-F57;/* SUBTRACT 39 (FA-39=C1)      */
         SL    R6,FW57                                             1029
         STC   R6,OUTFX-1(R7)                                      1029
*           END;                    /* DONE TRANSLATE                */
@RF01028 SLR   R6,R6                                               1030
         BCTR  R6,0                                                1030
         AL    R6,I(,COMONPTR)                                     1030
         ST    R6,I(,COMONPTR)                                     1030
         C     R6,FW2                                              1030
         BNL   @DL01027                                            1030
*           OUTA1(1)=CCS;           /* INSERT S FOR SYSTEM           */
         MVI   OUTA1,C'S'                                          1031
*           LEN=F4;                 /* LENGTH OF ANSWER              */
         MVC   LEN(4,COMONPTR),FW4                                 1032
*         END;                      /*                               */
*       ELSE                        /* NORMAL PROCESSING             */
*         DO;                       /*                               */
         B     @RC01023                                            1034
@RF01023 DS    0H                                                  1035
*           CVD(ERRSAV,WORKAREA);   /* CONVERT CODE TO PRINTABLE     */
         L     R7,ERRSAV                                           1035
         CVD   R7,WORKAREA                                         1035
*           UNPK(OUTA1(1:16),WORKAREA);/*                            */
         UNPK  OUTA1(16),WORKAREA(8)                               1036
*           OUTA1(16)=OUTA1(16) CC0;/* INSURE PRINTABLE CHARS        */
         OI    OUTA1+15,C'0'                                       1037
*           IF RCABEND=YES THEN     /* IF USER ABEND CODE            */
         TM    RCABEND(COMONPTR),B'10000000'                       1038
         BNO   @RF01038                                            1038
*             DO;                   /*                               */
*               LEN=F5;             /* LENGTH IS FIVE                */
         MVC   LEN(4,COMONPTR),FW5                                 1040
*               OUTA1(1)=CCU;       /* SET U TYPE                    */
         MVI   OUTA1,C'U'                                          1041
*               OUTA1(2:5)=OUTA1(13:16);/* MOVE OVER CHARS           */
         MVC   OUTA1+1(4),OUTA1+12                                 1042
*             END;                  /*                               */
*           ELSE                    /* OTHERWISE GET CODE            */
*             DO LEN=F16 TO F2 BY-F1 WHILE OUTA1(1)=CC0;/* LZ      1044
*                                      SUPPRESS                      */
         B     @RC01038                                            1044
@RF01038 LA    R14,16                                              1044
         ST    R14,LEN(,COMONPTR)                                  1044
@DL01044 CLI   OUTA1,C'0'                                          1044
         BNE   @DC01044                                            1044
*               OUTA1(1:15)=OUTA1(2:16);/* SHIFT DOWN BUFFER         */
         MVC   @TS00001(15),OUTA1+1                                1045
         MVC   OUTA1(15),@TS00001                                  1045
*             END;                  /*                               */
         SLR   R14,R14                                             1046
         BCTR  R14,0                                               1046
         AL    R14,LEN(,COMONPTR)                                  1046
         ST    R14,LEN(,COMONPTR)                                  1046
         C     R14,FW2                                             1046
         BNL   @DL01044                                            1046
@DC01044 DS    0H                                                  1047
*         END;                      /*                               */
@RC01038 DS    0H                                                  1048
*       CALL LOCATE(LASTCC,LENGTH(LASTCC),F0);/* LOCATE LASTCC       */
@RC01023 LA    R1,@AL01048                                         1048
         BAL   R14,LOCATE                                          1048
*       IF ERROR=F0 THEN            /* IF LOCATE OK                  */
         L     R15,ERROR                                           1049
         LTR   R15,R15                                             1049
         BNZ   @RF01049                                            1049
*         DO;                       /* PROCESS UPDATE                */
*           CALL UPDATE(OUTA1,LEN); /* UPDATE LASTCC                 */
         LA    R0,OUTA1                                            1051
         ST    R0,@AL00001                                         1051
         LA    R1,LEN(,COMONPTR)                                   1051
         ST    R1,@AL00001+4                                       1051
         LA    R1,@AL00001                                         1051
         BAL   R14,UPDATE                                          1051
*           CALL LOCATE(MAXCC,LENGTH(MAXCC),F0);/* LOCATE MAXCC      */
         LA    R1,@AL01052                                         1052
         BAL   R14,LOCATE                                          1052
*           IF ERROR=F0&SVTLNG<LEN (SVTLNG=/* MX SMALLER ?           */
*               LEN&SVTDATA(1:LEN)<OUTA1(1:LEN)) THEN/* UPDATE       */
         L     R2,ERROR                                            1053
         LTR   R2,R2                                               1053
         BNZ   @GL00065                                            1053
         L     R1,SNTELPTR(,COMONPTR)                              1053
         L     R1,SNTVLPTR(,R1)                                    1053
         LH    R2,SVTLNG(,R1)                                      1053
         C     R2,LEN(,COMONPTR)                                   1053
         BL    @RT01053                                            1053
@GL00065 L     R1,SNTELPTR(,COMONPTR)                              1053
         L     R2,SNTVLPTR(,R1)                                    1053
         L     R3,LEN(,COMONPTR)                                   1053
         CH    R3,SVTLNG(,R2)                                      1053
         BNE   @RF01053                                            1053
         BCTR  R3,0                                                1053
         EX    R3,@SC01113                                         1053
         BNL   @RF01053                                            1053
@RT01053 DS    0H                                                  1054
*             CALL UPDATE(OUTA1,LEN);/* UPDATE MAXCC                 */
         LA    R4,OUTA1                                            1054
         ST    R4,@AL00001                                         1054
         LA    R5,LEN(,COMONPTR)                                   1054
         ST    R5,@AL00001+4                                       1054
         LA    R1,@AL00001                                         1054
         BAL   R14,UPDATE                                          1054
*         END;                      /*                               */
@RF01053 DS    0H                                                  1056
*       IF ERROR^=F0&ERROR^=E16 THEN/* ERROR FINDIN OR UPDATIN CC S  */
@RF01049 L     R6,ERROR                                            1056
         LTR   R6,R6                                               1056
         BZ    @RF01056                                            1056
         C     R6,FW16                                             1056
         BE    @RF01056                                            1056
*         ERROR=E999;               /* SET INTERNAL CLIST ERROR      */
         MVC   ERROR(4),FW999                                      1057
*     END;                          /* END NORMAL UPDATE     @ZA03879*/
*   END RCUPDT;                                                    1059
@EL00025 DS    0H                                                  1059
@EF00025 DS    0H                                                  1059
@ER00025 LM    R14,R12,@SA00025                                    1059
         BR    R14                                                 1059
*                                                                  1060
*   /*****************************************************************/
*   /*                                                               */
*   /* PRINT SUB FUNCTION                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1060
*PRINT:                                                            1060
*   PROC(LINEADDR,TERMPUT) OPTIONS(SAVEAREA);                      1060
PRINT    STM   R14,R12,12(R13)                                     1060
         ST    R13,@SA00026+4                                      1060
         LA    R14,@SA00026                                        1060
         ST    R14,8(,R13)                                         1060
         LR    R13,R14                                             1060
         MVC   @PC00026(8),0(R1)                                   1060
*   DCL                                                            1061
*     TERMPUT FIXED(31),                                           1061
*     LINEADDR PTR(31),                                            1061
*     ASIS FIXED(31) CONSTANT(2);                                  1061
*   IOPL(4)=ADDR(PLBLK);            /* ADDR OF PARM BLOCK            */
         LA    R7,PLBLK                                            1062
         ST    R7,IOPL+12(,COMONPTR)                               1062
*   CLEN=LINEADDR->LL;              /* SAVE ORIGINAL LENGTH          */
         L     R14,@PC00026                                        1063
         L     R1,LINEADDR(,R14)                                   1063
         LH    R2,LL(,R1)                                          1063
         STH   R2,CLEN(,COMONPTR)                                  1063
*   LINEADDR->LL=LINEADDR->LL-FREEAMT;/* REDUCE TOTAL LENGTH         */
         SL    R2,FREEAMT(,COMONPTR)                               1064
         STH   R2,LL(,R1)                                          1064
*   IF LINEADDR->LL=F4 THEN         /* IF LL=4 THEN SET LL=5         */
         C     R2,FW4                                              1065
         BNE   @RF01065                                            1065
*     LINEADDR->LL=F5;              /* TO FOOL TCAM (FOR C/R)        */
         MVC   LL(2,R1),HW5                                        1066
*   RFY                                                            1067
*    (R1,                                                          1067
*     R4,                                                          1067
*     R15) RSTD;                    /* RESTRICT REGS                 */
@RF01065 DS    0H                                                  1068
*   R15=ADDR(IKJEFT40);             /* ADDR OF T40                   */
         L     R15,IKJEFT40                                        1068
*   R1=ADDR(IOPL);                  /* LOAD REG 1                    */
         LR    R1,COMONPTR                                         1069
*   R4=LINEADDR;                    /* POINTER TO LINE TO PRINT      */
         L     R0,@PC00026                                         1070
         LR    R14,R0                                              1070
         L     R4,LINEADDR(,R14)                                   1070
*   IF TERMPUT=ASIS THEN            /* PUTLINE ASIS                  */
         L     R5,@PC00026+4                                       1071
         CLC   TERMPUT(4,R5),FW2                                   1071
         BNE   @RF01071                                            1071
*     GEN                                                          1072
*(PUTLINE OUTPUT=((R4),DATA),TERMPUT=ASIS,MF=(E,(1)),ENTRY=(15));  1072
         PUTLINE OUTPUT=((R4),DATA),TERMPUT=ASIS,MF=(E,(1)),ENTRY=(15)
*   ELSE                            /* OTHERWISE PRINT EDIT          */
*     GEN                                                          1073
*(PUTLINE OUTPUT=((R4),DATA),TERMPUT=EDIT,MF=(E,(1)),ENTRY=(15));  1073
         B     @RC01071                                            1073
@RF01071 DS    0H                                                  1073
         PUTLINE OUTPUT=((R4),DATA),TERMPUT=EDIT,MF=(E,(1)),ENTRY=(15)
*   RFY                                                            1074
*    (R1,                                                          1074
*     R4,                                                          1074
*     R15) UNRSTD;                  /* FREE REGS                     */
@RC01071 DS    0H                                                  1075
*   LINEADDR->LL=CLEN;              /* RESTORE LENGTH                */
         L     R6,@PC00026                                         1075
         L     R1,LINEADDR(,R6)                                    1075
         LH    R0,CLEN(,COMONPTR)                                  1075
         STH   R0,LL(,R1)                                          1075
*   END PRINT;                                                     1076
@EL00026 L     R13,4(,R13)                                         1076
@EF00026 DS    0H                                                  1076
@ER00026 LM    R14,R12,12(R13)                                     1076
         BR    R14                                                 1076
*                                                                  1077
*   /*****************************************************************/
*   /*                                                               */
*   /* COMMAND LIST ROUTINE                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1077
*CMDLST:                                                           1077
*   PROC;                                                          1077
CMDLST   STM   R14,R12,@SA00027                                    1077
*   IF OPCODE^=IGOTO THEN           /* AS LONG AS NOT INTERNAL GOTO  */
         L     R1,OLDLINE(,COMONPTR)                               1078
         CLI   OPCODE(R1),15                                       1078
         BE    @RF01078                                            1078
*     DO;                           /* LIST COMMAND                  */
*       IF FOLD=NO THEN             /* FOLD INTO UPPER CASE ?        */
         TM    FOLD(COMONPTR),B'00010000'                          1080
         BNZ   @RF01080                                            1080
*         CALL PRINT(BUFBASE,F0);   /* NO- PRINT OK                  */
         LA    R2,BUFBASE(,COMONPTR)                               1081
         ST    R2,@AL00001                                         1081
         LA    R3,FW0                                              1081
         ST    R3,@AL00001+4                                       1081
         LA    R1,@AL00001                                         1081
         BAL   R14,PRINT                                           1081
*       ELSE                        /* YES- FOLD TO UPPER CASE       */
*         DO;                       /* BEFORE PRINTING               */
         B     @RC01080                                            1082
@RF01080 DS    0H                                                  1083
*           DO I=1 TO LL-(F4+FREEAMT);/* FOLD TO UPPER CASE          */
         LA    R4,1                                                1083
         B     @DE01083                                            1083
@DL01083 DS    0H                                                  1084
*             NEWC(I)=C(I);         /* COPY TO NEW BUFFER            */
         L     R5,I(,COMONPTR)                                     1084
         L     R4,NEWBASE(,COMONPTR)                               1084
         ALR   R5,R4                                               1084
         L     R6,I(,COMONPTR)                                     1084
         L     R7,BUFBASE(,COMONPTR)                               1084
         ALR   R7,R6                                               1084
         MVC   NEWC-1(1,R5),C-1(R7)                                1084
*             TR(NEWC(I),TRTABUP);  /* TRANSLATE TO UPPER CASE       */
         ALR   R4,R6                                               1085
         TR    NEWC-1(1,R4),TRTABUP                                1085
*           END;                    /*                               */
         LA    R4,1                                                1086
         AL    R4,I(,COMONPTR)                                     1086
@DE01083 ST    R4,I(,COMONPTR)                                     1086
         L     R5,BUFBASE(,COMONPTR)                               1086
         LA    R6,4                                                1086
         AL    R6,FREEAMT(,COMONPTR)                               1086
         LCR   R6,R6                                               1086
         AH    R6,LL(,R5)                                          1086
         CR    R4,R6                                               1086
         BNH   @DL01083                                            1086
*           CALL PRINT(NEWBASE,F0); /* PRINT FOLDED LINE             */
         LA    R7,NEWBASE(,COMONPTR)                               1087
         ST    R7,@AL00001                                         1087
         LA    R14,FW0                                             1087
         ST    R14,@AL00001+4                                      1087
         LA    R1,@AL00001                                         1087
         BAL   R14,PRINT                                           1087
*         END;                      /*                               */
*     END;                                                         1089
*   END CMDLST;                                                    1090
@EL00027 DS    0H                                                  1090
@EF00027 DS    0H                                                  1090
@ER00027 LM    R14,R12,@SA00027                                    1090
         BR    R14                                                 1090
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* &NRSTR BUILT IN FUNCTION                             ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
NRSTRRTN OI    LCLFLAGS,$#NRSTR     SET FUNCTION ACTIVE FLAG    ZP60014
*                                   DROP THROUGH TO STRING FUNCTION
*                                                                  1091
*   /*****************************************************************/
*   /*                                                               */
*   /* STRING BUILT IN FUNCTION                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1091
*STRRTN:                                                           1091
*   PROC;                                                          1091
STRRTN   STM   R14,R12,@SA00028                                    1091
*   CALL WAITRTN;                   /* CHECK FOR WAIT                */
         BAL   R14,WAITRTN                                         1092
*   IF WAIT=NO&ERROR=F0 THEN        /* IF OK                         */
         TM    WAIT(COMONPTR),B'00010000'                          1093
         BNZ   @RF01093                                            1093
         L     R15,ERROR                                           1093
         LTR   R15,R15                                             1093
         BNZ   @RF01093                                            1093
*     DO;                           /* PROCESS                       */
*       PCTR=F1;                    /* INIT PCTR                     */
         LA    R0,1                                                1095
         ST    R0,PCTR                                             1095
*       INSRTDA=ADDR(C(I+1));       /* POINT TO VALUE                */
         L     R1,I(,COMONPTR)                                     1096
         L     R2,BUFBASE(,COMONPTR)                               1096
         LA    R3,C(R1,R2)                                         1096
         ST    R3,INSRTDA                                          1096
*       INSRTLN=ADDR(C(M))-INSRTDA; /* FIND LENGTH OF STRING         */
         L     R1,M                                                1097
         LA    R2,C-1(R1,R2)                                       1097
         SLR   R2,R3                                               1097
         ST    R2,INSRTLN                                          1097
*       DO I=1 TO INSRTLN;          /*                               */
         B     @DE01098                                            1098
@DL01098 DS    0H                                                  1099
*         TR(INSRTCHR(I),TRTABDN);  /* FOLD TO SPCL CHR              */
         L     R1,I(,COMONPTR)                                     1099
         L     R2,INSRTDA                                          1099
         ALR   R2,R1                                               1099
         BCTR  R2,0                                                1099
         TR    INSRTCHR(1,R2),TRTABDN                              1099
*       END;                                                       1100
         LA    R0,1                                                1100
         AL    R0,I(,COMONPTR)                                     1100
@DE01098 ST    R0,I(,COMONPTR)                                     1100
         C     R0,INSRTLN                                          1100
         BNH   @DL01098                                            1100
*       I=M+F1;                     /* POINT TO RESUME DATA          */
         LA    R1,1                                                1101
         AL    R1,M                                                1101
         ST    R1,I(,COMONPTR)                                     1101
*     END;                                                         1102
*   END STRRTN;                                                    1103
@EL00028 DS    0H                                                  1103
@EF00028 DS    0H                                                  1103
@ER00028 LM    R14,R12,@SA00028                                    1103
         BR    R14                                                 1103
*                                                                  1104
*   /*****************************************************************/
*   /*                                                               */
*   /* SEPARATOR FLUSH ROUTINE                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1104
*SKIPSEPS:                                                         1104
*   PROC;                                                          1104
SKIPSEPS STM   R14,R12,12(R13)                                     1104
*   SEPS=YES;                       /* SKIP ALL DELIMETERS           */
         OI    SEPS(COMONPTR),B'10000000'                          1105
*   WORDPTR=BUFBASE;                /* POINT TO BUFFER               */
         L     R3,BUFBASE(,COMONPTR)                               1106
         ST    R3,WORDPTR                                          1106
*   WI=I;                           /* GET I                         */
         L     R5,I(,COMONPTR)                                     1107
         ST    R5,WI                                               1107
*   DO WHILE SEPS=YES&WI<=WLL-(F4+FREEAMT);/*                        */
         B     @DE01108                                            1108
@DL01108 DS    0H                                                  1109
*     IF W(WI)^=BLANK&W(WI)^=COMMA&W(WI)^=TAB THEN/* NOT DELIM       */
         L     R6,WORDPTR                                          1109
         L     R7,WI                                               1109
         ALR   R7,R6                                               1109
         CLI   W-1(R7),C' '                                        1109
         BE    @RF01109                                            1109
         L     R7,WI                                               1109
         ALR   R7,R6                                               1109
         CLI   W-1(R7),C','                                        1109
         BE    @RF01109                                            1109
         L     R7,WI                                               1109
         ALR   R7,R6                                               1109
         CLI   W-1(R7),X'05'                                       1109
         BE    @RF01109                                            1109
*       IF WI<WLL-(F4+FREEAMT)&W(WI:WI+F1)=OPENCMT THEN/* CMT        */
         L     R7,WI                                               1110
         LA    R14,4                                               1110
         L     R15,FREEAMT(,COMONPTR)                              1110
         ALR   R15,R14                                             1110
         LCR   R15,R15                                             1110
         AH    R15,WLL(,R6)                                        1110
         CR    R7,R15                                              1110
         BNL   @RF01110                                            1110
         ALR   R6,R7                                               1110
         CLC   W-1(2,R6),SLSHASTR                                  1110
         BNE   @RF01110                                            1110
*         DO;                       /*                               */
*           DO WI=WI+F4 TO WLL-(F4+FREEAMT) WHILE/*                  */
*                 W(WI-F2:WI-F1)^=CLOSCMT;/*                         */
         ALR   R7,R14                                              1112
         B     @DE01112                                            1112
@DL01112 L     R1,WORDPTR                                          1112
         ALR   R1,R7                                               1112
         CLC   W-3(2,R1),ASTRSLSH                                  1112
         BE    @DC01112                                            1112
*           END;                    /* FIND CLOSE COMMENT            */
         AL    R7,FW1                                              1113
@DE01112 ST    R7,WI                                               1113
         LA    R6,4                                                1113
         AL    R6,FREEAMT(,COMONPTR)                               1113
         LCR   R6,R6                                               1113
         L     R1,WORDPTR                                          1113
         AH    R6,WLL(,R1)                                         1113
         CR    R7,R6                                               1113
         BNH   @DL01112                                            1113
@DC01112 DS    0H                                                  1114
*         END;                                                     1114
*       ELSE                        /* IF NOT A DELIMETER, END SKIP  */
*         SEPS=NO;                  /*                               */
         B     @RC01110                                            1115
@RF01110 NI    SEPS(COMONPTR),B'01111111'                          1115
*     ELSE                          /* IF A SEPARATOR, INCREMENT     */
*       WI=WI+F1;                   /* INDEX                         */
         B     @RC01109                                            1116
@RF01109 LA    R2,1                                                1116
         AL    R2,WI                                               1116
         ST    R2,WI                                               1116
*   END;                                                           1117
@RC01109 DS    0H                                                  1117
@DE01108 TM    SEPS(COMONPTR),B'10000000'                          1117
         BNO   @DC01108                                            1117
         LA    R3,4                                                1117
         AL    R3,FREEAMT(,COMONPTR)                               1117
         LCR   R3,R3                                               1117
         L     R2,WORDPTR                                          1117
         AH    R3,WLL(,R2)                                         1117
         C     R3,WI                                               1117
         BNL   @DL01108                                            1117
@DC01108 DS    0H                                                  1118
*   I=WI;                           /* SET I                         */
         L     R4,WI                                               1118
         ST    R4,I(,COMONPTR)                                     1118
*   END SKIPSEPS;                                                  1119
@EL00029 DS    0H                                                  1119
@EF00029 DS    0H                                                  1119
@ER00029 LM    R14,R12,12(R13)                                     1119
         BR    R14                                                 1119
*                                                                  1120
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND A WORD ROUTINE                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1120
*FINDWORD:                                                         1120
*   PROC;                                                          1120
FINDWORD STM   R14,R12,@SA00030                                    1120
*   CALL SKIPSEPS;                  /* SKIP SEPARATORS               */
         BAL   R14,SKIPSEPS                                        1121
*SCANWORD:                                                         1122
*   ENTRY;                          /* SCANWORD ENTRY                */
         B     @EC01122                                            1122
SCANWORD STM   R14,R12,@SA00030                                    1122
@EC01122 DS    0H                                                  1123
*   BEGIN=I;                        /* BEGIN OF KYWWORD              */
         L     R5,I(,COMONPTR)                                     1123
         ST    R5,BEGIN(,COMONPTR)                                 1123
*   WI=I;                           /* GET I                         */
         ST    R5,WI                                               1124
*   ENDDLM=YES;                     /* INIT ENDDLM TO YES            */
         OI    ENDDLM(COMONPTR),B'01000000'                        1125
*   WORDPTR=BUFBASE;                /* SET BASE                      */
         L     R4,BUFBASE(,COMONPTR)                               1126
         ST    R4,WORDPTR                                          1126
*   IF SEPS=NO THEN                 /* IF ALL SEPARATORS             */
         TM    SEPS(COMONPTR),B'10000000'                          1127
         BNZ   @RF01127                                            1127
*     DO;                                                          1128
*       DO WI=WI TO LL-(F4+FREEAMT) WHILE/* CHECK FOR VALID CHARS    */
*             (W(WI)>=CCA&W(WI)<=CCI) /* A TO I                      */
*             (W(WI)>=CCJ&W(WI)<=CCR) /* J TO R                      */
*             (W(WI)>=CCS&W(WI)<=CCZ) /* S TO Z                      */
*             (WI^=BEGIN&W(WI)>=CC0&W(WI)<=CC9);/* 0 TO 9            */
         B     @DE01129                                            1129
@DL01129 L     R4,WORDPTR                                          1129
         ALR   R5,R4                                               1129
         CLI   W-1(R5),C'A'                                        1129
         BL    @GL00076                                            1129
         L     R5,WI                                               1129
         ALR   R4,R5                                               1129
         CLI   W-1(R4),C'I'                                        1129
         BNH   @DB01129                                            1129
@GL00076 L     R6,WORDPTR                                          1129
         L     R7,WI                                               1129
         ALR   R7,R6                                               1129
         CLI   W-1(R7),C'J'                                        1129
         BL    @GL00075                                            1129
         L     R7,WI                                               1129
         ALR   R6,R7                                               1129
         CLI   W-1(R6),C'R'                                        1129
         BNH   @DB01129                                            1129
@GL00075 L     R14,WORDPTR                                         1129
         L     R15,WI                                              1129
         ALR   R15,R14                                             1129
         CLI   W-1(R15),C'S'                                       1129
         BL    @GL00074                                            1129
         L     R15,WI                                              1129
         ALR   R14,R15                                             1129
         CLI   W-1(R14),C'Z'                                       1129
         BNH   @DB01129                                            1129
@GL00074 L     R0,WI                                               1129
         C     R0,BEGIN(,COMONPTR)                                 1129
         BE    @DC01129                                            1129
         L     R1,WORDPTR                                          1129
         LR    R2,R0                                               1129
         ALR   R2,R1                                               1129
         CLI   W-1(R2),C'0'                                        1129
         BL    @DC01129                                            1129
         ALR   R1,R0                                               1129
         CLI   W-1(R1),C'9'                                        1129
         BH    @DC01129                                            1129
@DB01129 DS    0H                                                  1130
*       END;                        /*                               */
         LA    R5,1                                                1130
         AL    R5,WI                                               1130
         ST    R5,WI                                               1130
@DE01129 L     R1,BUFBASE(,COMONPTR)                               1130
         LA    R4,4                                                1130
         AL    R4,FREEAMT(,COMONPTR)                               1130
         LCR   R4,R4                                               1130
         AH    R4,LL(,R1)                                          1130
         CR    R5,R4                                               1130
         BNH   @DL01129                                            1130
@DC01129 DS    0H                                                  1131
*       IF WI<=WLL-(F4+FREEAMT)&W(WI)^=BLANK&/* NOT END OF BFR AND NT*/
*           W(WI)^=COMMA&W(WI)^=TAB&(OPCODE^=SETCODE W(WI)^=EQUAL)&/**/
*           (WI=WLL-(F4+FREEAMT) W(WI:WI+F1)^=OPENCMT) THEN/* NOT CMT*/
         L     R5,WI                                               1131
         L     R4,WORDPTR                                          1131
         LA    R6,4                                                1131
         AL    R6,FREEAMT(,COMONPTR)                               1131
         LCR   R6,R6                                               1131
         AH    R6,WLL(,R4)                                         1131
         CR    R5,R6                                               1131
         BH    @RF01131                                            1131
         ALR   R5,R4                                               1131
         CLI   W-1(R5),C' '                                        1131
         BE    @RF01131                                            1131
         L     R5,WI                                               1131
         ALR   R5,R4                                               1131
         CLI   W-1(R5),C','                                        1131
         BE    @RF01131                                            1131
         L     R5,WI                                               1131
         ALR   R5,R4                                               1131
         CLI   W-1(R5),X'05'                                       1131
         BE    @RF01131                                            1131
         L     R1,OLDLINE(,COMONPTR)                               1131
         CLI   OPCODE(R1),13                                       1131
         BNE   @GL00082                                            1131
         L     R5,WI                                               1131
         ALR   R4,R5                                               1131
         CLI   W-1(R4),C'='                                        1131
         BE    @RF01131                                            1131
@GL00082 L     R6,WI                                               1131
         L     R7,WORDPTR                                          1131
         LA    R14,4                                               1131
         AL    R14,FREEAMT(,COMONPTR)                              1131
         LCR   R14,R14                                             1131
         AH    R14,WLL(,R7)                                        1131
         CR    R6,R14                                              1131
         BE    @RT01131                                            1131
         ALR   R7,R6                                               1131
         CLC   W-1(2,R7),SLSHASTR                                  1131
         BE    @RF01131                                            1131
@RT01131 DS    0H                                                  1132
*         ENDDLM=NO;                /* SET NOT VALID DELIMETER       */
         NI    ENDDLM(COMONPTR),B'10111111'                        1132
*     END;                          /*                               */
@RF01131 DS    0H                                                  1134
*   I=WI;                           /* RESTORE I                     */
@RF01127 L     R15,WI                                              1134
         ST    R15,I(,COMONPTR)                                    1134
*   LEN=I-BEGIN;                    /* GET LENGTH OF KYWWORD         */
         SL    R15,BEGIN(,COMONPTR)                                1135
         ST    R15,LEN(,COMONPTR)                                  1135
*   END FINDWORD;                                                  1136
@EL00030 DS    0H                                                  1136
@EF00030 DS    0H                                                  1136
@ER00030 LM    R14,R12,@SA00030                                    1136
         BR    R14                                                 1136
*                                                                  1137
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND A FILE ROUTINE                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1137
*FINDFILE:                                                         1137
*   PROC;                           /*                       @ZA17843*/
FINDFILE STM   R14,R12,@SA00031                                    1137
*   CALL SKIPSEPS;                  /* SKIP SEPARATORS       @ZA17843*/
         BAL   R14,SKIPSEPS                                        1138
*   BEGIN=I;                        /* BEGIN OF KYWWORD      @ZA17843*/
         L     R0,I(,COMONPTR)                                     1139
         ST    R0,BEGIN(,COMONPTR)                                 1139
*   WI=I;                           /* GET I                 @ZA17843*/
         ST    R0,WI                                               1140
*   ENDDLM=YES;                     /* INIT ENDDLM TO YES    @ZA17843*/
         OI    ENDDLM(COMONPTR),B'01000000'                        1141
*   WORDPTR=BUFBASE;                /* SET BASE              @ZA17843*/
         L     R1,BUFBASE(,COMONPTR)                               1142
         ST    R1,WORDPTR                                          1142
*   IF SEPS=NO THEN                 /* IF ALL SEPARATORS     @ZA17843*/
         TM    SEPS(COMONPTR),B'10000000'                          1143
         BNZ   @RF01143                                            1143
*     DO;                           /*                       @ZA17843*/
*       DO WI=WI TO LL-(F4+FREEAMT) WHILE/* CHAR CHECK       @ZA17843*/
*             (W(WI)>=CCA&W(WI)<=CCI) /* A TO I              @ZA17843*/
*             (W(WI)>=CCJ&W(WI)<=CCR) /* J TO R              @ZA17843*/
*             (W(WI)>=CCS&W(WI)<=CCZ) /* S TO Z              @ZA17843*/
*             (W(WI)=CC$ W(WI)=CC@ W(WI)=CC#) /* NATIONALS   @ZA17843*/
*             (WI^=BEGIN&W(WI)>=CC0&W(WI)<=CC9);/* 0 TO 9    @ZA17843*/
         B     @DE01145                                            1145
@DL01145 L     R1,WORDPTR                                          1145
         LR    R2,R0                                               1145
         ALR   R2,R1                                               1145
         CLI   W-1(R2),C'A'                                        1145
         BL    @GL00092                                            1145
         ALR   R1,R0                                               1145
         CLI   W-1(R1),C'I'                                        1145
         BNH   @DB01145                                            1145
@GL00092 L     R3,WORDPTR                                          1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'J'                                        1145
         BL    @GL00091                                            1145
         L     R2,WI                                               1145
         ALR   R3,R2                                               1145
         CLI   W-1(R3),C'R'                                        1145
         BNH   @DB01145                                            1145
@GL00091 L     R3,WORDPTR                                          1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'S'                                        1145
         BL    @GL00090                                            1145
         L     R2,WI                                               1145
         ALR   R3,R2                                               1145
         CLI   W-1(R3),C'Z'                                        1145
         BNH   @DB01145                                            1145
@GL00090 L     R3,WORDPTR                                          1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'$'                                        1145
         BE    @DB01145                                            1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'@'                                        1145
         BE    @DB01145                                            1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'#'                                        1145
         BE    @DB01145                                            1145
         L     R2,WI                                               1145
         C     R2,BEGIN(,COMONPTR)                                 1145
         BE    @DC01145                                            1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'0'                                        1145
         BL    @DC01145                                            1145
         L     R2,WI                                               1145
         ALR   R3,R2                                               1145
         CLI   W-1(R3),C'9'                                        1145
         BH    @DC01145                                            1145
@DB01145 DS    0H                                                  1146
*       END;                        /*                       @ZA17843*/
         LA    R0,1                                                1146
         AL    R0,WI                                               1146
         ST    R0,WI                                               1146
@DE01145 L     R1,BUFBASE(,COMONPTR)                               1146
         LA    R2,4                                                1146
         AL    R2,FREEAMT(,COMONPTR)                               1146
         LCR   R2,R2                                               1146
         AH    R2,LL(,R1)                                          1146
         CR    R0,R2                                               1146
         BNH   @DL01145                                            1146
@DC01145 DS    0H                                                  1147
*       IF WI<=WLL-(F4+FREEAMT)&W(WI)^=BLANK&/* BUFFER END?  @ZA17843*/
*           W(WI)^=COMMA&W(WI)^=TAB&(OPCODE^=SETCODE W(WI)^=EQUAL)&/**/
*           (WI=WLL-(F4+FREEAMT) W(WI:WI+F1)^=OPENCMT) THEN/*      1147
*                                                            @ZA17843*/
         L     R3,WI                                               1147
         L     R2,WORDPTR                                          1147
         LA    R4,4                                                1147
         AL    R4,FREEAMT(,COMONPTR)                               1147
         LCR   R4,R4                                               1147
         AH    R4,WLL(,R2)                                         1147
         CR    R3,R4                                               1147
         BH    @RF01147                                            1147
         ALR   R3,R2                                               1147
         CLI   W-1(R3),C' '                                        1147
         BE    @RF01147                                            1147
         L     R3,WI                                               1147
         ALR   R3,R2                                               1147
         CLI   W-1(R3),C','                                        1147
         BE    @RF01147                                            1147
         L     R3,WI                                               1147
         ALR   R3,R2                                               1147
         CLI   W-1(R3),X'05'                                       1147
         BE    @RF01147                                            1147
         L     R1,OLDLINE(,COMONPTR)                               1147
         CLI   OPCODE(R1),13                                       1147
         BNE   @GL00100                                            1147
         L     R3,WI                                               1147
         ALR   R2,R3                                               1147
         CLI   W-1(R2),C'='                                        1147
         BE    @RF01147                                            1147
@GL00100 L     R4,WI                                               1147
         L     R5,WORDPTR                                          1147
         LA    R6,4                                                1147
         AL    R6,FREEAMT(,COMONPTR)                               1147
         LCR   R6,R6                                               1147
         AH    R6,WLL(,R5)                                         1147
         CR    R4,R6                                               1147
         BE    @RT01147                                            1147
         ALR   R5,R4                                               1147
         CLC   W-1(2,R5),SLSHASTR                                  1147
         BE    @RF01147                                            1147
@RT01147 DS    0H                                                  1148
*         ENDDLM=NO;                /* SET NOT VALID DELIMET @ZA17843*/
         NI    ENDDLM(COMONPTR),B'10111111'                        1148
*     END;                          /*                       @ZA17843*/
@RF01147 DS    0H                                                  1150
*   I=WI;                           /* RESTORE I             @ZA17843*/
@RF01143 L     R7,WI                                               1150
         ST    R7,I(,COMONPTR)                                     1150
*   LEN=I-BEGIN;                    /* GET LENGTH OF KYWWORD @ZA17843*/
         SL    R7,BEGIN(,COMONPTR)                                 1151
         ST    R7,LEN(,COMONPTR)                                   1151
*   END FINDFILE;                   /*                       @ZA17843*/
@EL00031 DS    0H                                                  1152
@EF00031 DS    0H                                                  1152
@ER00031 LM    R14,R12,@SA00031                                    1152
         BR    R14                                                 1152
@DATA    DS    0H
*SM01094 MVC   STFLUSH(0),STACKL                                ZP60014
@SM01100 MVC   OUTCD(0),SVTDATA(R2)
@SM01102 MVC   0(0,R1),SVTDATA(R2)
@SM01104 MVC   0(0,R2),ANSWER(R1)
@SC01106 CLC   0(0,R3),C(R1)
@SC01109 CLC   NAME(0,R15),SNTDATA(R6)
@SM01111 MVC   SNTDATA(0,R4),NAME(R6)
@SC01113 CLC   SVTDATA(0,R2),OUTA1
         DS    0F
@AL00155 DC    A($SYSSCAN)             LIST WITH   3 ARGUMENT(S)
         DC    A(FW7)
         DC    A(FW0)
@AL00411 EQU   *                       LIST WITH   3 ARGUMENT(S)
@AL01048 DC    A($LASTCC)              LIST WITH   3 ARGUMENT(S)
         DC    A(FW6)
         DC    A(FW0)
@AL01052 DC    A($MAXCC)               LIST WITH   3 ARGUMENT(S)
         DC    A(FW5)
         DC    A(FW0)
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     R15 FIXED(31) REG(15),                                       1153
*     R1 PTR(31) REG(1);                                           1153
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       1154
*     I031F FIXED(31) BASED,                                       1154
*     I031P PTR(31) BASED,                                         1154
*     I015F FIXED(15) BASED,                                       1154
*     I015P PTR(15) BASED,                                         1154
*     I008P PTR(8) BASED,                                          1154
*     I001C CHAR(1) BASED;                                         1154
*   END IKJCT433                                                   1155
*                                                                  1155
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJUPT  )                                       */
         IKJUPT
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
         IKJECT
*/*%INCLUDE SYSLIB  (IKJLSD  )                                       */
         IKJLSD
*/*%INCLUDE SYSLIB  (IKJEXEC )                                       */
*                                                                  1155
*       ;                                                          1155
         IHAPSA
         IHAASCB
         IEFZB4D0
         IEFZB4D2
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    6F
@SA00028 DS    15F
@SA00015 DS    15F
@SA00008 DS    18F
@SA00012 DS    15F
@SA00013 DS    15F
@SA00014 DS    15F
@SA00016 DS    15F
@SA00030 DS    15F
@SA00026 DS    18F
@PC00026 DS    2F
@SA00021 DS    15F
@PC00021 DS    3F
@PC00024 DS    2F
@SA00031 DS    15F
@PC00007 DS    1F
@SA00025 DS    15F
@PC00005 DS    1F
@SA00027 DS    15F
@SA00004 DS    15F
@SA00003 DS    18F
@SA00011 DS    15F
@SA00020 DS    18F
@AL00001 DS    5A
@AFTEMPS DS    3F
IKJCT433 CSECT
         DS    0F
FW0      DC    F'0'
FW1      DC    F'1'
HW1      EQU   FW1+2
FW2      DC    F'2'
FW3      DC    F'3'
FW4      DC    F'4'
HW4      EQU   FW4+2
FW5      DC    F'5'
HW5      EQU   FW5+2
FW6      DC    F'6'
FW7      DC    F'7'
FW8      DC    F'8'
HW8      EQU   FW8+2
FW10     DC    F'10'
INDX#MAX DC    A(BILTINCT)             ORIGINALLY 10            ZP60014
FW12     DC    F'12'
HW12     EQU   FW12+2
FW16     DC    F'16'
FW20     DC    F'20'
FW31     DC    F'31'
FW57     DC    F'57'
FW200    DC    F'200'
FW220    DC    F'220'
FW249    DC    F'249'
FW252    DC    F'252'
FW300    DC    F'300'
FW312    DC    F'312'
FW900    DC    F'900'
FW904    DC    F'904'
FW908    DC    F'908'
FW912    DC    F'912'
FW916    DC    F'916'
FW920    DC    F'920'
FW924    DC    F'924'
FW932    DC    F'932'
FW936    DC    F'936'
FW940    DC    F'940'
FW944    DC    F'944'
FW960    DC    F'960'
FW999    DC    F'999'
FW4096   DC    F'4096'
FW10K    DC    F'10000'                                         ZP60014
FWNEG10  DC    F'-10'
FWNEG8   DC    F'-8'
FWNEG6   DC    F'-6'
FWNEG5   DC    F'-5'
HIGHBIT  DC    XL4'80000000'
HIBLANK  DC    XL4'40000000'
YRS1900  DC    PL4'1900000'
@DATD    DSECT
         DS    0D
ECTPTR   DS    A
WORDPTR  DS    A
SNTSAVE  DS    A
KPTR     DS    A
K        DS    A
UPTPTR   DS    A
INSRTDA  DS    A
RETURNCD DS    F
ERROR    DS    F
INDEX    DS    F
NEWLNG   DS    F
LEN1     DS    F
WI       DS    F
M        DS    F
N        DS    F
Z        DS    F
ERRSAV   DS    F
INSRTLN  DS    F
V1       DS    F
V2       DS    F
YEAR     DS    F
MONTH    DS    F
DAYS     DS    F
PCTR     DS    F
V        DS    F
SCANLIM  DS    F
HOWMUCH  DS    F
SVONEPTR DS    F
SVTWOPTR DS    F
ECDACBLK DS    AL4
         ORG   ECDACBLK
@NM00003 DS    AL1
ECDACBK2 DS    AL3
         ORG   ECDACBLK+4
SNTABPTR DS    A
SVTABPTR DS    A
NDX      DS    F
@TS00001 DS    CL15
OUTA1    DS    CL17
AREA     DS    CL16
TEMPA    EQU   AREA
TIMEOUT  EQU   AREA+4
HRS      EQU   TIMEOUT
MINUTES  EQU   TIMEOUT+2
SEC      EQU   TIMEOUT+4
DATEOUT  EQU   TIMEOUT
YR       EQU   DATEOUT
DYS      EQU   DATEOUT+4               YR IS 4 BYTES (WAS 2)    ZP60014
CSAVE    DS    CL2
         DS    CL2
WORKAREA DS    D
FRELST   DS    CL10
         ORG   FRELST
FRELST01 DS    AL1
FRELST02 DS    AL3
FRELST03 DS    AL1
FRELST04 DS    AL3
FRELST05 DS    BL1
FRELST06 DS    AL1
         ORG   FRELST+10
LCLFLAGS DS    CL2                     FLAGS IN SPARE BYTE      ZP60014
$#NRSTR  EQU   X'80'                   &NRSTR SPECIFIED         ZP60014
GETLST   DS    CL10
         ORG   GETLST
GETLST01 DS    AL4
GETLST02 DS    CL1
GETLST03 DS    AL3
GETLST04 DS    CL1
GETLST05 DS    AL1
         ORG   GETLST+10
         DS    CL2
MYSEG    DS    CL35
         ORG   MYSEG
@NM00001 DS    FL4
@NM00002 DS    CL26
OUTCD    DS    CL5
         ORG   MYSEG+35+33
TIMEDATE DS    CL8
         ORG   TIMEDATE
OUT1     DS    CL2
DELIM1   DS    CL1
OUT2     DS    CL2
DELIM2   DS    CL1
OUT3     DS    CL2
         ORG   TIMEDATE+8
OLD      DS    5A
OLD2     DS    4A
FREEADDR DS    2F
FREELEN  DS    2F
IKJCT433 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
IKJCT434 DC    V(IKJCT434)
IKJCT436 DC    V(IKJCT436)
IKJEFT30 DC    V(IKJEFT30)
IKJEFT40 DC    V(IKJEFT40)
@ALSO    DC    A(ALSO)
@MSTRLV2 DC    A(MSTRLV2)
@MSTRLV3 DC    A(MSTRLV3)
@MSGTABL DC    A(MSGTABL)
         DS    0D
ED15     DC    X'40202020202020202020202020202120'              ZP60014
$16ZEROS DC    C'0000000000000000'
$SYSSCAN DC    C'SYSSCAN'
$LASTCC  DC    C'LASTCC'
$MAXCC   DC    C'MAXCC'
$THEN    DC    C'THEN'
SLSHASTR DC    C'/*'
ASTRSLSH DC    C'*/'
$XEQUALS DC    C'X='
$DBLAMPR DC    C'&&&&'
$HEX1010 DC    X'1010'
CHR      DC    CL4'CHAR'
NUM      DC    CL3'NUM'
TRTABUP  DC    X'40,4D,5D,50,04,05,06,07,08,09,0A,0B,4C,4D,4E,4F'
         DC    X'50,11,12,13,14,15,16,17,18,19,1A,1B,5C,5D,1E,5F'
         DC    X'60,61,22,23,24,25,26,27,28,29,2A,6B,2C,2D,6E,2F'
         DC    X'30,31,32,33,34,35,36,37,38,39,3A,3B,3C,3D,7E,3F'
         DC    X'40,41,42,43,44,45,46,47,48,49,4A,4B,4C,4D,4E,4F'
         DC    X'50,51,52,53,54,55,56,57,58,59,5A,5B,5C,5D,5E,5F'
         DC    X'60,61,62,63,64,65,66,67,68,69,6A,6B,6C,6D,6E,6F'
         DC    X'70,71,72,73,74,75,76,77,78,79,7A,7B,7C,7D,7E,7F'
         DC    X'80,C1,C2,C3,C4,C5,C6,C7,C8,C9,8A,8B,8C,8D,8E,8F'
         DC    X'90,D1,D2,D3,D4,D5,D6,D7,D8,D9,9A,9B,9C,9D,9E,9F'
         DC    X'A0,A1,E2,E3,E4,E5,E6,E7,E8,E9,AA,AB,AC,AD,AE,AF'
         DC    X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,BA,BB,BC,BD,BE,BF'
         DC    X'C0,C1,C2,C3,C4,C5,C6,C7,C8,C9,CA,CB,CC,CD,CE,CF'
         DC    X'D0,D1,D2,D3,D4,D5,D6,D7,D8,D9,DA,DB,DC,DD,DE,DF'
         DC    X'E0,E1,E2,E3,E4,E5,E6,E7,E8,E9,EA,EB,EC,ED,EE,EF'
         DC    X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,FA,FB,FC,FD,FE,FF'
TRTABDN  DC    X'00,01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F'
         DC    X'10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F'
         DC    X'20,21,22,23,24,25,26,27,28,29,2A,2B,2C,2D,2E,2F'
         DC    X'30,31,32,33,34,35,36,37,38,39,3A,3B,3C,3D,3E,3F'
         DC    X'00,41,42,43,44,45,46,47,48,49,4A,4B,0C,0D,0E,0F'
         DC    X'10,51,52,53,54,55,56,57,58,59,5A,5B,1C,1D,5E,1F'
         DC    X'20,21,62,63,64,65,66,67,68,69,6A,2B,6C,6D,2E,6F'
         DC    X'70,71,72,73,74,75,76,77,78,79,7A,7B,7C,7D,3E,7F'
         DC    X'80,81,82,83,84,85,86,87,88,89,8A,8B,8C,8D,8E,8F'
         DC    X'90,91,92,93,94,95,96,97,98,99,9A,9B,9C,9D,9E,9F'
         DC    X'A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,AA,AB,AC,AD,AE,AF'
         DC    X'B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,BA,BB,BC,BD,BE,BF'
         DC    X'C0,81,82,83,84,85,86,87,88,89,CA,CB,CC,CD,CE,CF'
         DC    X'D0,91,92,93,94,95,96,97,98,99,DA,DB,DC,DD,DE,DF'
         DC    X'E0,E1,A2,A3,A4,A5,A6,A7,A8,A9,EA,EB,EC,ED,EE,EF'
         DC    X'B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,FA,FB,FC,FD,FE,FF'
         DC    CL1' '
         DS    0F
IMMLEN   DC    AL2(3)
IMMDATA  DC    CL10'STR'
VECTOR   DC    AL4(STRRTN)
         DC    AL2(4)
         DC    CL10'EVAL'
         DC    AL4(EVALRTN)
         DC    AL2(6)
         DC    CL10'SUBSTR'
         DC    AL4(SUBSTRTN)
         DC    AL2(7)
         DC    CL10'SYSTIME'
         DC    AL4(TIMERTN)
         DC    AL2(7)
         DC    CL10'SYSDATE'
         DC    AL4(DATERTN)
         DC    AL2(6)
         DC    CL10'LENGTH'
         DC    AL4(LENGRTN)
         DC    AL2(8)
         DC    CL10'DATATYPE'
         DC    AL4(DATYRTN)
         DC    AL2(7)
         DC    CL10'SYSPREF'
         DC    AL4(PREFRTN)
         DC    AL2(7)
         DC    CL10'SYSPCMD'
         DC    AL4(SYSPRTN)
         DC    AL2(7)
         DC    CL10'SYSSCMD'
         DC    AL4(SYSSRTN)
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSSTIME'                                   ZP60014
         DC    AL4(TIMERTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSSDATE'                                   ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSJDATE'                                   ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYS4DATE'                                   ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(9)                                           ZP60014
         DC    CL10'SYS4SDATE'                                  ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(9)                                           ZP60014
         DC    CL10'SYS4JDATE'                                  ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(9)                                           ZP60014
         DC    CL10'SYS4IDATE'                                  ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSLTERM'                                   ZP60014
         DC    AL4(TERMRTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSWTERM'                                   ZP60014
         DC    AL4(TERMRTN)                                     ZP60014
         DC    AL2(6)                                           ZP60014
         DC    CL10'SYSCPU'                                     ZP60014
         DC    AL4(CPURTN)                                      ZP60014
         DC    AL2(6)                                           ZP60014
         DC    CL10'SYSSRV'                                     ZP60014
         DC    AL4(SRVRTN)                                      ZP60014
         DC    AL2(6)                                           ZP60014
         DC    CL10'SYSDSN'                                     ZP60014
         DC    AL4(DSNRTN)                                      ZP60014
         DC    AL2(5)                                           ZP60014
$NRSTR   DC    CL10'NRSTR'                                      ZP60014
         DC    AL4(NRSTRRTN)                                    ZP60014
BILTINCT EQU   (*-IMMLEN)/16           ORIGINALLY 10            ZP60014
DAYIN    DC    H'31'         JAN
         DC    H'28'         FEB
         DC    H'31'         MAR
         DC    H'30'         APR
         DC    H'31'         MAY
         DC    H'30'         JUN
         DC    H'31'         JUL
         DC    H'31'         AUG
         DC    H'30'         SEP
         DC    H'31'         OCT
         DC    H'30'         NOV
         DC    H'31'         DEC
ROUTINES DC    A(FINDWORD)
         DC    A(SCANWORD)
         DC    A(SKIPSEPS)
         DC    A(PRINT)
         DC    A(LOCATE)
         DC    A(GLOCATE)
         DC    A(CONVERT)
         DC    A(UPDATE)
         DC    A(FINDFILE)
IKJCT433 CSECT
STACKL   STACK   DELETE=ALL,MF=L
         PUTLINE MF=L
         PUTLINE MF=L
         STAX    DEFER=NO,MF=L
         STAX    DEFER=YES,MF=L
*MACLEN  DC      A(MACLEN-STACKL)                               ZP60014
MACLEN   EQU     *-STACKL                                       ZP60014
@DATD    DSECT
STFLUSH  STACK   DELETE=ALL,MF=L
PLBLK    PUTLINE MF=L
PUTMLVL  PUTLINE MF=L
DEFERNO  STAX    DEFER=NO,MF=L
DEFERYES STAX    DEFER=YES,MF=L
         DS      0F                                             ZP60014
DSNBUFER DS      CL80                                           ZP60014
IKJCT433 CSECT
         DS    0H
PATCH    DC    ((@DATA-@PSTART)/20)X'00'
*
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* SYSDSN BUILT IN FUNCTION                             ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
         USING DSNRTN,R7
DSNRTN   STM   R14,R12,12(R13)
         LR    R7,R15
         LA    R0,DSNWKLEN
         GETMAIN RC,LV=(0),SP=1
         LTR   R15,R15
         BNZ   DSNERR16
         LR    R14,R1
         LA    R15,DSNWKLEN
         SR    R5,R5
         MVCL  R14,R4                  CLEAR NEW WORKING STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DSNWK,R13
         BAL   R14,WAITRTN
         TM    WAIT(COMONPTR),B'00010000'
         BNZ   DSNEXIT
         L     R15,ERROR
         LTR   R15,R15
         BNZ   DSNEXIT
         L     R1,I(,COMONPTR)
         L     R3,BUFBASE(,COMONPTR)
         LA    R2,C(R1,R3)             POINT TO VALUE
         L     R1,M
         LA    R3,C-1(R1,R3)
         SR    R3,R2                   GET LENGTH OF VALUE
         STM   R2,R3,DSNDTLS           SAVE VALUE DETAILS
         LA    R0,1
         ALR   R1,R0                   GET M + 1
         ST    R1,I(,COMONPTR)         POINT TO RESUME DATA
         LTR   R3,R3                   ANY VALUE TO PROCESS?
         BNP   DSNMISS                 NO, IT IS MISSING
         LA    R4,DSNAME               POINT TO DSNAME AREA
         LA    R5,DSNAME+44            POINT PAST DSNAME FIELD
         CLI   0(R2),X'7D'             LEADING QUOTE?
         BE    FULLDSN                 YES
         L     R14,@PC00001            NO, POINT TO THE UPT
         USING UPT,R14
         SLR   R0,R0
         ICM   R0,1,UPTPREFL           GET PREFIX LENGTH
         BZ    LOADDSN                 NO PERIOD IF PROFILE NOPREFIX
         MVC   0(7,R4),UPTPREFX        COPY THE PREFIX
         AR    R4,R0                   POINT PAST COPIED PREFIX
         MVI   0(R4),C'.'              SUPPLY A PERIOD
         LA    R4,1(,R4)               POINT PAST PERIOD
         B     LOADDSN
         DROP  R14                     UPT
FULLDSN  LA    R2,1(,R2)               POINT PAST LEADING QUOTE
         BCTR  R3,0                    DECREMENT LENGTH
         BCTR  R3,0                    DROP OFF TRAILING QUOTE
         LTR   R3,R3
         BNP   DSNBAD                  NO DATA TO PROCESS
LOADDSN  CLI   0(R2),C'('              MEMBER NAME COMING UP?
         BE    DOMEMBER                YES
         CR    R4,R5                   RUN OUT OF ROOM?
         BNL   DSNBAD                  YES, NAME TOO LONG
         MVC   0(1,R4),0(R2)           NO, COPY NAME CHARACTER
         LA    R4,1(,R4)               POINT TO NEXT TARGET BYTE
         LA    R2,1(,R2)               POINT TO NEXT SOURCE BYTE
         BCT   R3,LOADDSN
         B     FOLDNAME                REACHED END OF SUPPLIED NAME
DOMEMBER LA    R4,DSMEMBER             POINT TO MEMBER AREA
         LA    R5,DSMEMBER+8           POINT PAST MEMBER AREA
         LA    R2,1(,R2)               POINT PAST '('
         BCT   R3,LOADMEM              DECREMENT LENGTH FOR '('
         B     DSNBAD                  '(' WAS LAST CHARACTER
LOADMEM  CLI   0(R2),C')'              END OF NAME REACHED?
         BE    CHECKEND                YES
         CR    R4,R5                   RUN OUT OF ROOM?
         BNL   DSNBAD                  YES, NAME TOO LONG
         MVC   0(1,R4),0(R2)           NO, COPY NAME CHARACTER
         LA    R4,1(,R4)               POINT TO NEXT TARGET BYTE
         LA    R2,1(,R2)               POINT TO NEXT SOURCE BYTE
         BCT   R3,LOADMEM
         B     DSNBAD                  NO ')' FOUND
CHECKEND BCTR  R3,0                    DECREMENT LENGTH FOR ')'
         LTR   R3,R3                   LAST CHARACTER?
         BNZ   DSNBAD                  NO
FOLDNAME TR    DSMEMBER(8+44),TRTABUP  FOLD OUT NULLS AND LOWER CASE
         LA    R6,$S99RB
         ST    R6,$S99RBP              SET PARAMETER ADDRESS
         OI    $S99RBP,S99RBPND        MARK AS LAST
         USING S99RB,R6
         MVI   S99RBLN,S99RBEND-S99RB  SET LENGTH
         MVI   S99VERB,S99VRBAL        REQUEST ALLOCATION
         MVI   S99FLG11,S99ONCNV+S99NOCNV+S99NOMNT
         LA    R0,$TUPTR1
         ST    R0,S99TXTPP             POINT TO T.U. POINTERS
         LA    R2,TXTUNITS
         MVC   0(2,R2),KEYRTDDN        KEY
         MVC   2(2,R2),HW1             COUNT
         MVC   4(2,R2),HW8             LENGTH
         TR    6(8,R2),TRTABUP         BLANK OUT DDNAME SLOT
         ST    R2,$TUPTR1
         LA    R2,14(,R2)              POINT PAST DDNAME SLOT
         MVC   0(2,R2),KEYDSNAM        KEY
         MVC   2(2,R2),HW1             COUNT
         MVC   4(2,R2),HW44            LENGTH
         MVC   6(44,R2),DSNAME         VALUE
         ST    R2,$TUPTR2
         LA    R2,50(,R2)              POINT PAST DSNAME SPEC
         MVC   0(2,R2),KEYSTATS        KEY
         MVC   2(2,R2),HW1             COUNT
         MVC   4(2,R2),HW1             LENGTH
         MVI   6(R2),X'08'             VALUE (SHR)
         ST    R2,$TUPTR3
         OI    $TUPTR3,S99TUPLN        FLAG AS LAST
         LA    R1,$S99RBP              POINT TO PLIST
         DYNALLOC
         LTR   R15,R15                 SUCCESS?
         BNZ   DSNNTALC                NO, NOT ALLOCATED
         L     R14,PSATOLD             POINT TO TCB
         L     R14,12(,R14)            POINT TO TIOT
         LA    R14,24(,R14)            POINT TO FIRST DD ENTRY
DSNDDLP  CLI   0(R14),0                END OF TIOT?
         BE    DSNERROR                YES, SHOULD NOT HAPPEN
         CLC   4(8,R14),TXTUNITS+6     FOUND THE NEW DD ENTRY?
         BE    DSNGOTDD                YES
         IC    R15,0(,R14)             NO, GET LENGTH OF THIS ENTRY
         AR    R14,R15                 POINT TO NEXT ENTRY
         B     DSNDDLP                 KEEP LOOKING
DSNGOTDD L     R15,16(,R14)            POINT TO THE (FIRST) UCB
         LA    R0,X'C1'                GET FLAGS FOR OBTAIN SEARCH
         SLL   R0,24                   PROMOTE TO FIRST BYTE
         LA    R1,DSNAME               POINT TO DATA SET NAME
         LA    R2,28(,R15)             POINT TO UCBVOLI
         LA    R3,DSDSCB1              POINT TO OUTPUT AREA
         STM   R0,R3,DSNBUFER          CREATE OBTAIN PLIST
         OBTAIN DSNBUFER               FETCH THE VTOC ENTRY
         STC   R15,DSNFLAGS            SAVE OBTAIN RETURN CODE
         LTR   R15,R15                 SUCCESS?
         BNZ   DSNDEALC                NO, NO DSCB SO WIND IT UP
         CLI   DSMEMBER,C' '           ANY MEMBER SPECIFIED?
         BE    DSNDEALC                NO, ALL DONE
         MVI   DSNFLAGS+1,X'FF'        PREPARE FOR NOT DSORG=PO
         TM    DS1DSORG,DS1DSGPO       PARTITIONED ORG?
         BNO   DSNDEALC                NO
         MVI   DSNFLAGS+1,0            YES, NO OPEN PROBLEM YET
         MVC   DSDYNDCB,DSPDSDCB       LOAD DCB AND DDNAME
         MVC   DSDYNDCB+40(8),TXTUNITS+6
         MVI   DSOPENWK,X'80'          PREPARE TO OPEN ONE DCB
         OPEN  (DSDYNDCB,INPUT),MF=(E,DSOPENWK)
         CLI   DSNFLAGS+1,C'A'         OPEN ABEND?
         BE    DSNDEALC                YES
         STC   R15,DSNFLAGS+1          NO, SAVE OPEN RETURN CODE
         LTR   R15,R15                 DID THE OPEN WORK?
         BNZ   DSNDEALC                NO
         XC    DSNBUFER,DSNBUFER       YES
         MVI   DSNBUFER+1,1
         MVI   DSNBUFER+3,76
         MVC   DSNBUFER+4(8),DSMEMBER  PREPARE FOR BLDL
         BLDL  DSDYNDCB,DSNBUFER
         STC   R15,DSNFLAGS+2          SAVE BLDL RETURN CODE
         MVI   DSOPENWK,X'80'          PREPARE TO CLOSE ONE DCB
         CLOSE DSDYNDCB,MF=(E,DSOPENWK)
DSNDEALC MVI   S99VERB,S99VRBUN        REQUEST UNALLOCATION
         OI    $TUPTR1,S99TUPLN        FLAG FIRST TEXT UNIT AS LAST
         MVC   TXTUNITS(2),KEYDDNAM    SET CORRECT KEY
         LA    R1,$S99RBP              POINT TO PLIST
         DYNALLOC
         CLI   DSNFLAGS,0              CHECK OBTAIN RESULT
         BE    DSNOBTOK                VTOC ENTRY FOUND
         CLI   DSNFLAGS,8              CHECK OBTAIN RESULT
         BE    DSNNTFND                NOT ON VOLUME
         B     DSNERROR                I/O OR OTHER ERROR
DSNOBTOK CLI   DSNFLAGS+1,X'FF'        MEMBER FOR NON-PDS?
         BE    DSNNTPDS                YES
         CLI   DSNFLAGS+1,0            OPEN PROBLEM?
         BNE   DSNERROR                YES
         CLI   DSNFLAGS+2,4            CHECK BLDL RESULT
         BE    DSNNOMEM                MEMBER NOT IN PDS
         BH    DSNERROR                I/O ERROR
         LA    R3,$OK
         LA    R2,L'$OK
         B     DSNEXIT$                RETURN RESULT STRING
DSNNTALC CLC   DSNX35C(4),S99ERROR     INVALID DSNAME?
         BE    DSNBAD                  YES (S99INFO HAS T.U.)
         TM    S99ERROR,X'07'          CATALOGED?
         BO    DSNNTFND                NO
         CLI   S99ERROR,X'02'          SYSTEM ERROR?
         BNE   DSNERROR                YES
         CLI   S99ERROR+1,X'10'        DATA SET IN USE?
         BE    DSNINUSE                YES
         BH    DSNOFFLN                NO, NOT ON SYSTEM
DSNERROR LA    R3,$ERRPROC
         LA    R2,L'$ERRPROC
         B     DSNEXIT$                RETURN RESULT STRING
DSNINUSE LA    R3,$UNAVAIL
         LA    R2,L'$UNAVAIL
         B     DSNEXIT$                RETURN RESULT STRING
DSNNTFND LA    R3,$NTFOUND
         LA    R2,L'$NTFOUND
         B     DSNEXIT$                RETURN RESULT STRING
DSNOFFLN LA    R3,$NOTVOL
         LA    R2,L'$NOTVOL
         B     DSNEXIT$                RETURN RESULT STRING
DSNNTPDS LA    R3,$MEMSPEC
         LA    R2,L'$MEMSPEC
         B     DSNEXIT$                RETURN RESULT STRING
DSNNOMEM LA    R3,$NOMEM
         LA    R2,L'$NOMEM
         B     DSNEXIT$                RETURN RESULT STRING
DSNBAD   MVC   DSNBUFER(L'$BADNAME),$BADNAME
         LA    R14,DSNBUFER+L'$BADNAME
         LA    R15,L'DSNBUFER-L'$BADNAME
         LM    R0,R1,DSNDTLS
         ICM   R1,8,TRTABUP            SET PAD AS BLANK
         MVCL  R14,R0                  CONSTRUCT FINAL STRING
         LA    R3,DSNBUFER
         LA    R2,L'DSNBUFER
         B     DSNEXIT$                RETURN RESULT STRING
DSNMISS  LA    R3,$MISSDSN
         LA    R2,L'$MISSDSN
DSNEXIT$ ST    R3,INSRTDA
         ST    R2,INSRTLN
DSNEXIT  LA    R0,DSNWKLEN
         ICM   R0,8,HW1+1              SP=1
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN R,LV=(0),A=(1)
         LM    R14,R12,12(R13)
         BR    R14
DSNERR16 MVC   ERROR(4),FW16           GETMAIN FAILED
         LM    R14,R12,12(R13)
         BR    R14
*                                      DCB ABEND EXIT
DSNABEND TM    3(R1),B'00001110'       ANY PROCESSING ALLOWED?
         BZR   R14                     NO
         MVI   DSNBUFER+1,C'A'         INDICATE OPEN ABENDED
         MVI   3(R1),4                 IGNORE THE ABEND
         BR    R14
         DROP  R7,R13                  DSNRTN, DSNWK
HW44     DC    H'44'
DSNX35C  DC    X'035C'                 THESE 2
KEYDSNAM DC    Y(DALDSNAM)             TOGETHER
KEYRTDDN DC    Y(DALRTDDN)
KEYSTATS DC    Y(DALSTATS)
KEYDDNAM DC    Y(DALDDNAM)
$OK      DC    C'OK'
$UNAVAIL DC    C'UNAVAILABLE DATASET'
$NTFOUND DC    C'DATASET NOT FOUND'
$NOMEM   DC    C'MEMBER NOT FOUND'
$MEMSPEC DC    C'MEMBER SPECIFIED, BUT DATASET IS NOT PARTITIONED'
$NOTVOL  DC    C'VOLUME NOT ON SYSTEM'
$MISSDSN DC    C'MISSING DATASET NAME'
$ERRPROC DC    C'ERROR PROCESSING REQUESTED DATASET'
$BADNAME DC    C'INVALID DATASET NAME, '
         DC    0F'0'
DSNEXLST DC    AL1(128+X'11'),AL3(DSNABEND)
DSPDSDCB DCB   DSORG=PO,MACRF=(R),EXLST=DSNEXLST
$DSDCBL  EQU   *-DSPDSDCB
         DC    0D'0'                   ALIGN END OF CSECT       ZP60014
DSNWK    DSECT
         DS    18F                     REGISTER SAVE AREA
DSOPENWK DS    F                       OPEN/CLOSE PLIST
DSNFLAGS DS    XL4                     FLAG BYTES
DSDYNDCB DS    XL($DSDCBL)             DCB AREA
DSNDTLS  DS    2F                      ADDRESS AND LENGTH OF NAME
DSMEMBER DS    CL8                     MEMBER NAME AREA
DSNAME   DS    CL44                    DATA SET NAME AREA
DSDSCB1  DS    CL140                   FORMAT-1 DSCB AREA
$S99RBP  DS    F                       PARAMETER LIST
$S99RB   DS    XL(S99RBEND-S99RB)      REQUEST BLOCK
$TUPTR1  DS    A                       POINTERS TO TEXT UNITS
$TUPTR2  DS    A
$TUPTR3  DS    A
$TUPTR4  DS    A
$TUPTR5  DS    A
TXTUNITS DS    0D,XL256                TEXT UNITS
         DS    0D                      ALIGN END OF DSECT
DSNWKLEN EQU   *-DSNWK
         ORG   DSNAME
         IECSDSL1 (1)
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
         DS    0D
@ENDDATD EQU   *
IKJCT433 CSECT
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
@00      EQU   R0                      EQUATES FOR REGISTERS 0-15
@01      EQU   R1
@02      EQU   R2
@03      EQU   R3
@04      EQU   R4
@05      EQU   R5
@06      EQU   R6
@07      EQU   R7
@08      EQU   R8
@09      EQU   R9
@10      EQU   R10
@11      EQU   R11
@12      EQU   R12
@13      EQU   R13
@14      EQU   R14
@15      EQU   R15
COMONPTR EQU   R8
         ENTRY ROUTINES
         ENTRY TRTABUP
         EXTRN ALSO
         EXTRN MSTRLV2
         EXTRN MSTRLV3
         EXTRN MSGTABL
INSRTCHR EQU   0
ANSWER   EQU   0
BUF      EQU   0
ROUTINE  EQU   0
WLL      EQU   0
W        EQU   WLL+4
UPVAL    EQU   0
LCVAL    EQU   0
EXECDATA EQU   0
SNTABFST EQU   EXECDATA
SVTABFST EQU   EXECDATA+4
GEXECDAT EQU   EXECDATA+8
LASTTSO  EQU   EXECDATA+12
ERACTSTR EQU   EXECDATA+20
ERACTEND EQU   EXECDATA+24
RETPTR   EQU   EXECDATA+28
EXDATFLG EQU   EXECDATA+32
STAECNT  EQU   EXECDATA+34
CONLST   EQU   EXDATFLG                B'10000000'
ERRCMD   EQU   EXDATFLG                B'01000000'
NOFLUSH  EQU   EXDATFLG                B'00100000'
SYMLST   EQU   EXDATFLG                B'00010000'
ERINCNTL EQU   EXDATFLG                B'00001000'
CMAIN    EQU   EXDATFLG                B'00000100'
NOMSG    EQU   EXDATFLG                B'00000010'
ATTNCMD  EQU   EXDATFLG                B'00000001'  UNREFD
ATINCNTL EQU   EXDATFLG+1              B'10000000'
NOLASTCC EQU   EXDATFLG+1              B'01000000'
ATACTSTR EQU   EXECDATA+44
ATACTEND EQU   EXECDATA+48
RETPTR2  EQU   EXECDATA+52
COMPROC  EQU   0
COMPRPTR EQU   COMPROC
COMPRID  EQU   COMPRPTR
COMPRNXT EQU   COMPRPTR+1
COMPRLNG EQU   COMPROC+4
SNTAB    EQU   0
SNTABNXT EQU   SNTAB
SNTABLNG EQU   SNTAB+4
SNTABUSE EQU   SNTAB+8
SNTELFST EQU   SNTAB+12
SNTELEM  EQU   0
SNTVLPTR EQU   SNTELEM
SNTGVAL  EQU   SNTVLPTR
SNTFLAGS EQU   SNTELEM+4
SNTPOSIT EQU   SNTFLAGS                B'10000000'  UNREFD
SNTKEY   EQU   SNTFLAGS                B'01000000'  UNREFD
SNTKEYW  EQU   SNTFLAGS                B'00100000'
SNTLABEL EQU   SNTFLAGS                B'00010000'
SNTNOSCN EQU   SNTFLAGS                B'00001000'
SNTNAUTH EQU   SNTFLAGS                B'00000100'
SNTEVAL  EQU   SNTFLAGS                B'00000010'
SNTLAST  EQU   SNTFLAGS                B'00000001'
SNTGLOB  EQU   SNTFLAGS+1              B'10000000'
SNTLNG   EQU   SNTELEM+6
SNTDATA  EQU   SNTELEM+8
SVTAB    EQU   0
SVTABNXT EQU   SVTAB
SVTABLNG EQU   SVTAB+4
SVTABUSE EQU   SVTAB+8
SVTABFRE EQU   SVTAB+12
SVTELFST EQU   SVTAB+16
SVTELEM  EQU   0
SVTLNG   EQU   SVTELEM
SVTORIG  EQU   SVTELEM+2
SVTDATA  EQU   SVTELEM+4
@NM00026 EQU   0
LL       EQU   @NM00026
OO       EQU   @NM00026+2
O2       EQU   @NM00026+4
C        EQU   O2
@NM00027 EQU   0
NEWLL    EQU   @NM00027
NEWOO    EQU   @NM00027+2
NEWC     EQU   @NM00027+4
@NM00029 EQU   0
INSCODE  EQU   @NM00029
INSLIST  EQU   INSCODE
INSADLSD EQU   @NM00029+1
@NM00032 EQU   0
IOSTELM  EQU   @NM00032
@NM00034 EQU   0
OPCODE   EQU   @NM00034+6
COMAREA  EQU   0
IOPL     EQU   COMAREA
BUFPTR   EQU   COMAREA+16
SNTELPTR EQU   COMAREA+20
EXECDPTR EQU   COMAREA+24
OLDLINE  EQU   COMAREA+28
BUFBASE  EQU   COMAREA+32
NEWBASE  EQU   COMAREA+36
LSDPTR   EQU   COMAREA+40
TYPE     EQU   COMAREA+44
CNVTANS  EQU   COMAREA+48
CLEN     EQU   COMAREA+52
MYO2     EQU   COMAREA+56
BEGIN    EQU   COMAREA+60
I        EQU   COMAREA+64
LEN      EQU   COMAREA+68
FREEAMT  EQU   COMAREA+72
ERCOM    EQU   COMAREA+76
REGAREA  EQU   COMAREA+80
SWSAREA  EQU   COMAREA+112
SW2AREA  EQU   COMAREA+117
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MSGDIM   EQU   MSGTABL
@NM00009 EQU   MSGTABL+2
IDA      EQU   @NM00009
IDC      EQU   @NM00009+2
@NM00010 EQU   @NM00009+4
SECLEVEL EQU   @NM00010
MSGSEG1  EQU   @NM00009+5
SEGNUM   EQU   @NM00009+8
MSGSEG2  EQU   @NM00009+9
ECB      EQU   0
ECBCBIT  EQU   ECB
GTPB     EQU   0
GTPBLINE EQU   GTPB+4
PARM433  EQU   0
PARMDEFR EQU   PARM433
EOCLIST  EQU   PARM433
UPLIST   EQU   0
LCVALPTR EQU   UPLIST
LCVALLEN EQU   UPLIST+4
UPVALPTR EQU   UPLIST+8
UPVALLEN EQU   UPLIST+12
MINIMUM  EQU   0
NEXTCMD  EQU   0
NAME     EQU   0
NAML     EQU   0
FUNC     EQU   0
VALUE    EQU   0
VALLEN   EQU   0
LINEADDR EQU   0
TERMPUT  EQU   0
OUTFX    EQU   OUTA1
NULELEM  EQU   SVTELFST
ANSPTR   EQU   TYPE
CURID    EQU   LSDANEXT-LSD
CURADDR  EQU   LSDANEXT-LSD+1
SWS      EQU   SWSAREA
EXITA    EQU   SWS                     B'10000000'
EXITB    EQU   SWS                     B'01000000'
FREESW   EQU   SWS                     B'00100000'
WAIT     EQU   SWS                     B'00010000'
RANGE    EQU   SWS                     B'00001000'
LEAP     EQU   SWS                     B'00000100'
ALPHA    EQU   SWS                     B'00000010'
EXITC    EQU   SWS                     B'00000001'
SEPS     EQU   SWS+1                   B'10000000'
ENDDLM   EQU   SWS+1                   B'01000000'
QUIT     EQU   SWS+1                   B'00100000'
MATCH    EQU   SWS+1                   B'00010000'
SKPCOMMA EQU   SWS+1                   B'00001000'  UNREFD
SYSUPDTE EQU   SWS+1                   B'00000100'
NOAMPER  EQU   SWS+1                   B'00000010'
INSTHEN  EQU   SWS+1                   B'00000001'
SENTINAL EQU   SWS+2                   B'10000000'
SKIP1    EQU   SWS+2                   B'01000000'  UNREFD
LISTONLY EQU   SWS+2                   B'00100000'
FOLD     EQU   SWS+2                   B'00010000'
LISTED   EQU   SWS+2                   B'00001000'
ERRRANGE EQU   SWS+2                   B'00000100'
ATRANGE  EQU   SWS+2                   B'00000010'
BACKUP   EQU   SWS+2                   B'00000001'
RCABEND  EQU   SWS+3                   B'10000000'
NODATA   EQU   SWS+3                   B'01000000'
STAECNTL EQU   SWS+3                   B'00100000'  UNREFD
STABND   EQU   SWS+3                   B'00010000'  UNREFD
SW2      EQU   SW2AREA
CORE     EQU   SW2                     B'10000000'
CONTINU  EQU   SW2                     B'01000000'
RECURSE  EQU   SW2                     B'00100000'
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SUSPENDI EQU   PARM433+4
EXITSTMT EQU   PARM433
DYNAREA  EQU   COMAREA+300
SYNREGS  EQU   COMAREA+182
STAEREGS EQU   COMAREA+118
REGAREA2 EQU   COMAREA+96
FLSEPATH EQU   @NM00034+7
INSPROM  EQU   INSCODE
INSEXEC  EQU   INSCODE
INSTERM  EQU   INSCODE
COMRCDS  EQU   COMPROC+12
COMPRUSE EQU   COMPROC+8
FILEDCBS EQU   EXECDATA+56
EXDLMPTR EQU   EXECDATA+40
GEXECCNT EQU   EXECDATA+36
EXINSAVE EQU   EXECDATA+16
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00148 EQU   FASTEXIT
@RF00162 EQU   @RC00156
@RC00181 EQU   @RC00174
@RC00255 EQU   @RC00254
@RC00289 EQU   @RC00282
@RC00283 EQU   @RC00282
@RF00412 EQU   @RC00404
@RC00415 EQU   @RC00404
@RF00440 EQU   @EL00004
@RC00459 EQU   @EL00004
@RC00536 EQU   @EL00005
@RF00565 EQU   @EL00008
@RF00580 EQU   @EL00008
@RF00590 EQU   @EL00008
@RC00618 EQU   @EL00008
@RF00617 EQU   @EL00008
@RF00651 EQU   @RC00648
@RF00659 EQU   @RC00656
@RF00668 EQU   @EL00009
@RC00699 EQU   @EL00011
@RF00753 EQU   @EL00014
@RF00768 EQU   @EL00015
@RF00778 EQU   @EL00016
@RF00813 EQU   @EL00020
@RC00839 EQU   @RC00838
@RC00873 EQU   @RC00860
@RF00886 EQU   @EL00022
@PB00022 EQU   @EL00021
@RC00909 EQU   @RC00908
@RC00976 EQU   @RC00975
@RC01020 EQU   @EL00025
@RF01056 EQU   @EL00025
@RF01078 EQU   @EL00027
@RC01080 EQU   @EL00027
@RF01093 EQU   @EL00028
@RC01110 EQU   @RC01109
@RF00464 EQU   @RC00459
@RC00490 EQU   @RC00459
@RC00840 EQU   @RC00839
@ENDDATA EQU   *
         END   IKJCT433,(C'PLS-III',0300,88013)
/*
//*
//STEP05  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKJCT433('ZP60014')
++MOD(IKJEFT56) DISTLIB(AOST4).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP06  EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'IKJEFT56, TERMINAL OUTPUT ROUTINE                    '
*
*   MODIFIED BY GREG PRICE SEPTEMBER 2005 FOR USERMOD ZP60014
*
IKJEFT56 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(24)                                             0001
         DC    C'IKJEFT56  73.151'                                 0001
         DC    C' ZP60014 '
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
         MVC   @PC00001(16),0(R1)                                  0001
*                                                                  0017
*   /*****************************************************************/
*   /*                                                               */
*   /* START EXECUTABLE CODE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0017
*   SAVEREG1=R1;                    /* SAVE REGISTER ONE             */
         LR    SAVEREG1,R1                                         0017
*   PTPBPTR=PTPBPTRX;               /* ESTABLISH REG POINTER         */
         L     PTPBPTR,PTPBPTRX(,R1)                               0018
*   IF TPUTTGET='1'B THEN           /* IF TGET IS INDICATED          */
         TM    TPUTTGET(PTPBPTR),B'10000000'                       0019
         BO    INVALID                                             0019
*     GOTO INVALID;                                                0020
*   TPUTOPTN=PARMOPTN;              /* FILL IN TPUT OPTON BYTE       */
         MVC   TPUTOPTN(1),PARMOPTN(PTPBPTR)                       0021
*   APOINTR=0;                      /* ZERO OUT TEMP POINTER         */
         SR    R14,R14                                             0022
         ST    R14,APOINTR                                         0022
*   IF PARMMLIN='1'B THEN           /* IS MULTILINE BIT ON ?         */
         TM    PARMMLIN(PTPBPTR),B'00001000'                       0023
         BNO   @RF00023                                            0023
*     DO;                                                          0024
*MULTLINE:                                                         0025
*       APOINTR=CHAINPTR;           /* POINT TO NEXT LINE            */
MULTLINE L     R14,PARMAOUT(,PTPBPTR)                              0025
         MVC   APOINTR(4),CHAINPTR(R14)                            0025
*       IF PARMDTMS='1'B THEN       /* IF THIS IS A DATA             */
         TM    PARMDTMS(PTPBPTR),B'00100000'                       0026
         BO    MDATA                                               0026
*         GOTO MDATA;                                              0027
*       MSGLEN=PARMAOUT->CHAINLL-4; /* CALCULATE TEXT LENGTH         */
         LH    MSGLEN,CHAINLL(,R14)                                0028
         SH    MSGLEN,HW4                                          0028
*       DO MSGIDLEN=1 TO MSGLEN;    /* SEARCH FOR FIRST BLANK        */
         LA    MSGIDLEN,1                                          0029
         B     @DE00029                                            0029
@DL00029 DS    0H                                                  0030
*         IF PARMAOUT->CHAINTXT(MSGIDLEN)=' ' THEN                 0030
         L     R14,PARMAOUT(,PTPBPTR)                              0030
         ALR   R14,MSGIDLEN                                        0030
         CLI   CHAINTXT-1(R14),C' '                                0030
         BE    CONTINUE                                            0030
*           GOTO CONTINUE;          /* IF BLANK IS FOUND EXIT        */
*       END;                        /* END MSG-ID LENGTH LOOP        */
         AH    MSGIDLEN,HW1                                        0032
@DE00029 CR    MSGIDLEN,MSGLEN                                     0032
         BNH   @DL00029                                            0032
*       GOTO INVALID;               /* IF NO BLANK FOUND             */
         B     INVALID                                             0033
*CONTINUE:                                                         0034
*       IF MSGIDLEN=1 THEN          /* IF NO MSG ID INDICATION       */
CONTINUE CH    MSGIDLEN,HW1                                        0034
         BE    STRIPID1                                            0034
*         GOTO STRIPID1;                                           0035
*       IF UPTMID='1'B THEN         /* IF NO MESSAGE I.D.            */
         L     R14,UPTPTR(,R1)                                     0036
         TM    UPTSWS-UPT(R14),UPTMID                              0036
         BNO   @RF00036                                            0036
*         DO;                       /* STRIPPING IS REQUESTED.       */
*MDATA:                                                            0038
*           LENGTH=CHAINLL-4;       /* USE LENGTH IN HEADER-4        */
MDATA    L     R14,PARMAOUT(,PTPBPTR)                              0038
         LH    R10,CHAINLL(,R14)                                   0038
         SH    R10,HW4                                             0038
         ST    R10,LENGTH                                          0038
*           TBUFADR=PARMAOUT+(4+4); /* TEXT BEGINS 8 BYTES BEGINNING
*                                      OF CHAINELEM                  */
         AH    R14,HW8                                             0039
         STCM  R14,7,TBUFADR                                       0039
*           GOTO SETUPPUT;                                         0040
         B     SETUPPUT                                            0040
*         END;                      /* END NO-STRIP PROCESSING       */
*STRIPID1:                                                         0042
*       LENGTH=CHAINLL-(4+MSGIDLEN);/* LENGTH OF OUTPUT LINE = THE 0042
*                                      LENGTH OF ENTIRE RECORD - THE
*                                      THE LENGTH OF THE MSG-ID + 4  */
@RF00036 DS    0H                                                  0042
STRIPID1 L     R14,PARMAOUT(,PTPBPTR)                              0042
         LA    R10,4                                               0042
         AR    R10,MSGIDLEN                                        0042
         LCR   R10,R10                                             0042
         AH    R10,CHAINLL(,R14)                                   0042
         ST    R10,LENGTH                                          0042
*       TBUFADR=PARMAOUT+(4+4+MSGIDLEN);/* THE ADDRESS OF THE OUT PUT
*                                      LINE = THE ADDRESS OF THE   0043
*                                      CHAIN ELEMENT + THE LENGTH OF
*                                      THE CHAIN FORWARD POINTER + 0043
*                                      THE LENGTH OF THE MSG-ID + 4
*                                      (HEADR OF VRIABLE RCRD        */
         LA    R10,8                                               0043
         AR    R10,MSGIDLEN                                        0043
         AR    R14,R10                                             0043
         STCM  R14,7,TBUFADR                                       0043
*       GOTO SETUPPUT;                                             0044
*                                                                  0044
         B     SETUPPUT                                            0044
*       /*************************************************************/
*       /*                                                           */
*       /* END STRIP ID PROCESSING                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0045
*     END;                          /* END MULT-LINE PROCESING       */
*   IF PARMDTMS='1'B THEN           /* IF THIS IS A DATA LINE        */
@RF00023 TM    PARMDTMS(PTPBPTR),B'00100000'                       0046
         BO    DATALINE                                            0046
*     GOTO DATALINE;                                               0047
*                                                                  0047
*   /*****************************************************************/
*   /*                                                               */
*   /* SINGLE LEVEL MESSAGE PROCESSING                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0048
*   MSGLEN=PARMAOUT->MSGLL-4;                                      0048
         L     R14,PARMAOUT(,PTPBPTR)                              0048
         LH    MSGLEN,MSGLL(,R14)                                  0048
         SH    MSGLEN,HW4                                          0048
*   DO MSGIDLEN=1 TO MSGLEN;        /* FIND FIRST BLANK              */
         LA    MSGIDLEN,1                                          0049
         B     @DE00049                                            0049
@DL00049 DS    0H                                                  0050
*     IF PARMAOUT->MSGTEXT(MSGIDLEN)=' ' THEN/* BLANK FOUND BRANCH   */
         L     R14,PARMAOUT(,PTPBPTR)                              0050
         ALR   R14,MSGIDLEN                                        0050
         CLI   MSGTEXT-1(R14),C' '                                 0050
         BE    CONTINU2                                            0050
*       GOTO CONTINU2;                                             0051
*   END;                            /* END DETERMINE LENGTH LOOP     */
         AH    MSGIDLEN,HW1                                        0052
@DE00049 CR    MSGIDLEN,MSGLEN                                     0052
         BNH   @DL00049                                            0052
*   GOTO INVALID;                   /* IF NO BLANK IS FOUND          */
         B     INVALID                                             0053
*CONTINU2:                                                         0054
*   IF MSGIDLEN=1 THEN                                             0054
CONTINU2 CH    MSGIDLEN,HW1                                        0054
         BE    STRIPID                                             0054
*     GOTO STRIPID;                                                0055
*   IF UPTMID='0'B THEN             /* DISPLAY ID BIT OFF            */
         L     R14,UPTPTR(,R1)                                     0056
         TM    UPTSWS-UPT(R14),UPTMID                              0056
         BNZ   @RF00056                                            0056
*     DO;                                                          0057
*STRIPID:                                                          0058
*       LENGTH=MSGLL-(4+MSGIDLEN);  /* LENGTH OF OUTPUT LINE = LENGHT
*                                      OF MESSAGE BUFFER - THE LENGTH
*                                      OF THE MSG ID + 4             */
STRIPID  L     R14,PARMAOUT(,PTPBPTR)                              0058
         LA    R10,4                                               0058
         AR    R10,MSGIDLEN                                        0058
         LH    R4,MSGLL(,R14)                                      0058
         SR    R4,R10                                              0058
         ST    R4,LENGTH                                           0058
*       TBUFADR=PARMAOUT+(4+MSGIDLEN);/* ADDRESS OF THE OUTPUT LINE =
*                                      ADDRESS OF MSG BUFFER + THE 0059
*                                      LENGTH OF THE MSGID + 4       */
         AR    R14,R10                                             0059
         STCM  R14,7,TBUFADR                                       0059
*       GOTO SETUPPUT;                                             0060
         B     SETUPPUT                                            0060
*     END;                                                         0061
*                                                                  0061
*   /*****************************************************************/
*   /*                                                               */
*   /* NO MESSAGE I.D. STRIPPING REQUIRED                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0062
*   ELSE                                                           0062
*     DO;                                                          0062
@RF00056 DS    0H                                                  0063
*DATALINE:                                                         0063
*       LENGTH=MSGLL-4;             /* LENGTH OF OUTPUT LINE = LENGTH
*                                      OF OUTPUT RECORD - 4          */
DATALINE LA    R14,4                                               0063
         L     R10,PARMAOUT(,PTPBPTR)                              0063
         LH    R4,MSGLL(,R10)                                      0063
         SR    R4,R14                                              0063
         ST    R4,LENGTH                                           0063
*       TBUFADR=PARMAOUT+4;         /* ADDRESS OF OUTPUT LINE =    0064
*                                      ADDRESS OF OUTPUT RECORD + 4  */
         AR    R10,R14                                             0064
         STCM  R10,7,TBUFADR                                       0064
*     END;                                                         0065
*SETUPPUT:                                                         0066
*   IF ECBCBIT='1'B THEN            /* FLUSH BIT ON                  */
SETUPPUT L     R14,@PC00001+8                                      0066
         TM    ECBCBIT(R14),B'01000000'                            0066
         BNO   @RF00066                                            0066
*     DO;                                                          0067
*       RETURNCD=4;                 /* SET RETURN CODE               */
         LA    RETURNCD,4                                          0068
*       GOTO EXIT;                                                 0069
         B     EXIT                                                0069
*     END;                                                         0070
@RF00066 EQU   *                                                ZP60014
         L     R14,ECTPTR(,R1)         --> ECT                  ZP60014
         L     R14,ECTIOWA-ECT(,R14)   --> STPB                 ZP60014
         L     R14,IOSTELM(,R14)       --> STACK ELEMENT        ZP60014
         ICM   R0,7,1(R14)             --> LSD                  ZP60014
         BZ    CHEKGRND                NOT IN CLIST             ZP60014
         TM    IOSTELM(R14),X'08'      INSEXEC SET?             ZP60014
         BZ    CHEKGRND                NO, NOT IN CLIST         ZP60014
         LA    R0,SOUTTRAP             POINT TO NAME            ZP60014
         ST    R0,LCVALPTR             SET NAME ADDRESS         ZP60014
         LA    R0,10                   GET NAME LENGTH          ZP60014
         ST    R0,LCVALLEN             SET NAME LENGTH          ZP60014
         MVC   @AL00001(12),@PC00001   UPT,ECT,ECB ADDRESSES    ZP60014
         LA    R0,UPLIST                                        ZP60014
         ST    R0,@AL00001+12          COMPLETE PLIST           ZP60014
         LA    R1,@AL00001             POINT TO PLIST           ZP60014
         L     R15,IKJGET#                                      ZP60014
         BALR  R14,R15                 GET SYSOUTTRAP VALUE     ZP60014
         LR    R1,SAVEREG1             RESTORE PARM REG         ZP60014
         L     R14,ECTPTR(,R1)         --> ECT                  ZP60014
         LTR   R15,R15                 POSITIVE VALUE?          ZP60014
         BP    TRAPLINE                YES                      ZP60014
         SR    R0,R0                   NO                       ZP60014
         ST    R0,44(,R14)             RESET ECTNUM             ZP60014
         B     CHEKGRND                GO OUTPUT DISPLAY LINE   ZP60014
TRAPLINE L     R0,44(,R14)             GET LATEST OUTLINE       ZP60014
         CR    R0,R15                  TRAPPING THIS LINE?      ZP60014
         BNL   CHEKGRND                NO, GO DISPLAY IT        ZP60014
         A     R0,FW1                  YES, INCREMENT COUNT     ZP60014
         ST    R0,44(,R14)             UPDATE ECTNUM            ZP60014
         CVD   R0,DECDBL               GET NEW COUNT IN DECIMAL ZP60014
         OI    DECDBL+7,X'0F'          PREPARE FOR UNPACK       ZP60014
         MVC   LINENAME(10),SOUTLINE   LOAD NAME BASE           ZP60014
         UNPK  LINENAME+10(10),DECDBL  ADD NUMERIC PART         ZP60014
         LA    R0,20                   GET NAME LENGTH          ZP60014
NAME0LP  CLI   LINENAME+10,C'0'        LEADING ZERO?            ZP60014
         BNE   NAMERDY                 NO, FINISHED NAME EDIT   ZP60014
         MVC   LINENAME+10(9),LINENAME+11                       ZP60014
         BCT   R0,NAME0LP              SUPPRESS LEADING ZERO    ZP60014
NAMERDY  ST    R0,LCVALLEN             SET NAME LENGTH          ZP60014
         LA    R1,LINENAME             POINT TO NAME            ZP60014
         ST    R1,LCVALPTR             SET NAME ADDRESS         ZP60014
         L     R0,LENGTH               GET DATA LENGTH          ZP60014
         ST    R0,UPVALLEN             SET DATA LENGTH          ZP60014
         L     R1,TPUTPARM             GET DATA ADDRESS         ZP60014
         LA    R1,0(,R1)               CLEAR FLAG BYTE          ZP60014
         ST    R1,UPVALPTR             SET DATA ADDRESS         ZP60014
         LA    R1,@AL00001             POINT TO PLIST           ZP60014
         L     R15,IKJINIT                                      ZP60014
         BALR  R14,R15                 CREATE SYSOUTLINE####    ZP60014
         LR    R1,SAVEREG1             RESTORE PARM REG         ZP60014
         LTR   R15,R15                 SUCCESS?                 ZP60014
         BNZ   CHEKGRND                NO, BETTER SHOW LINE     ZP60014
         L     R14,LCVALLEN            GET NAME LENGTH          ZP60014
         LA    R0,10                                            ZP60014
         SR    R14,R0                  GET LENGTH OF NUMBER     ZP60014
         ST    R14,UPVALLEN            SET NEW DATA LENGTH      ZP60014
         ST    R0,LCVALLEN             SET NAME LENGTH          ZP60014
         LA    R1,LINENAME+10          POINT TO NUMBER          ZP60014
         ST    R1,UPVALPTR             SET NEW DATA ADDRESS     ZP60014
         LA    R1,@AL00001             POINT TO PLIST           ZP60014
         L     R15,IKJUPDT                                      ZP60014
         BALR  R14,R15                 UPDATE SYSOUTLINE        ZP60014
         LR    R1,SAVEREG1             RESTORE PARM REG         ZP60014
         LTR   R15,R15                 SUCCESS?                 ZP60014
         BZ    @RF00080                YES, LINE PROCESSED OK   ZP60014
CHEKGRND EQU   *                                                ZP60014
*   IF INSOTDD='1'B THEN            /* IF IN BACKGROUND MODE         */
         L     R14,ECTPTR(,R1)                                     0071
         L     R10,ECTIOWA-ECT(,R14)                               0071
         L     R10,IOSTELM(,R10)                                   0071
         TM    INSOTDD(R10),B'00010000'                            0071
         BNO   @RF00071                                            0071
*     CALL IKJRBBMC(TBUFADR,LENGTH,ECT,1);                         0072
         LA    R10,TBUFADR                                         0072
         ST    R10,@AL00001                                        0072
         LA    R10,LENGTH                                          0072
         ST    R10,@AL00001+4                                      0072
         ST    R14,@AL00001+8                                      0072
         LA    R14,FW1                                             0072
         ST    R14,@AL00001+12                                     0072
         L     R15,IKJRBBMC                                        0072
         LA    R1,@AL00001                                         0072
         BALR  R14,R15                                             0072
*   ELSE                                                           0073
*     DO;                                                          0073
         B     @RC00071                                            0073
@RF00071 DS    0H                                                  0074
*       R0=LENGTH;                  /* FILL IN PARM REGISTERS        */
         L     R0,LENGTH                                           0074
*       R1=TPUTPARM;                                               0075
         L     R1,TPUTPARM                                         0075
*       GEN(TPUT (1),(0),R);        /* TPUT LINE TO TERMINAL         */
         TPUT (1),(0),R
*     END;                                                         0077
*   TPUTCODE=R15;                   /* SAVE RETURN CODE              */
@RC00071 LR    TPUTCODE,R15                                        0078
*   R1=SAVEREG1;                    /* RESTORE PARM REG              */
         LR    R1,SAVEREG1                                         0079
*   IF TPUTCODE^=0                  /* IF ERROR FROM TPUT      Y02996*/
*     THEN                                                         0080
         LTR   TPUTCODE,TPUTCODE                                   0080
         BZ    @RF00080                                            0080
*     DO;                                                          0081
*       IF TPUTCODE=8               /* ATTN INTERRUPT          Y02996*/
*         THEN                                                     0082
         CH    TPUTCODE,HW8                                        0082
         BNE   @RF00082                                            0082
*         DO;                                                      0083
*           RETURNCD=4;             /* SET ATTN RETURNCD       Y02996*/
         LA    RETURNCD,4                                          0084
*           GO TO EXIT;             /* END                     Y02996*/
         B     EXIT                                                0085
*         END;                                                     0086
*       IF TPUTCODE=4 THEN          /* NO WAIT ERROR                 */
@RF00082 CH    TPUTCODE,HW4                                        0087
         BNE   @RF00087                                            0087
*         DO;                                                      0088
*           RETURNCD=8;             /* INDICATE NOWAIT ERROR         */
         LA    RETURNCD,8                                          0089
*           GOTO EXIT;                                             0090
         B     EXIT                                                0090
*         END;                                                     0091
*       IF TPUTCODE=20              /* IF LINEDROP SET         Y02996*/
*         THEN                                                     0092
@RF00087 LA    R14,20                                              0092
         CR    TPUTCODE,R14                                        0092
         BNE   @RF00092                                            0092
*         RETURNCD=20;              /* LINEDROP RC             Y02996*/
         LR    RETURNCD,R14                                        0093
*       ELSE                        /* ELSE SET INVAL          Y02996*/
*INVALID:                                                          0094
*         RETURNCD=12;              /* PARMS RC                Y02996*/
         B     EXIT                                                0094
@RF00092 DS    0H                                                  0094
INVALID  LA    RETURNCD,12                                         0094
*       GOTO EXIT;                  /* END                     Y02996*/
         B     EXIT                                                0095
*     END;                                                         0096
*   IF APOINTER^=0 THEN             /* END OF MULTI-LINE CHAIN       */
@RF00080 ICM   R14,7,APOINTER                                      0097
         BZ    @RF00097                                            0097
*     DO;                                                          0098
*       PARMAOUT=APOINTR;           /* POINT TO NEXT LINE            */
         MVC   PARMAOUT(4,PTPBPTR),APOINTR                         0099
*       GOTO MULTLINE;                                             0100
         B     MULTLINE                                            0100
*     END;                                                         0101
*   RETURNCD=0;                     /* INDICATE NORMAL END           */
@RF00097 SR    RETURNCD,RETURNCD                                   0102
*EXIT:                                                             0103
*   RETURN CODE(RETURNCD);                                         0103
EXIT     L     R13,4(,R13)                                         0103
         L     R0,@SIZDATD                                         0103
         LR    R1,R11                                              0103
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,RETURNCD                                        0103
         L     R14,12(,R13)                                        0103
         LM    R0,R12,20(R13)                                      0103
         BR    R14                                                 0103
*   END IKJEFT56                                                   0104
@DATA    DS    0H
HW4      DC    H'4'
HW8      DC    H'8'
         DS    0F
FW1      DC    F'1'
HW1      EQU   FW1+2
SOUTLINE DC    CL10'SYSOUTLINE'                                 ZP60014
SOUTTRAP DC    CL10'SYSOUTTRAP'                                 ZP60014
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
IKJRBBMC DC    V(IKJRBBMC)
IKJUPDT  DC    V(IKJUPDT)                                       ZP60014
IKJINIT  DC    V(IKJINIT)                                       ZP60014
IKJGET#  DC    V(IKJGET#)                                       ZP60014
PATCH    DC    5D'0'
*                                                                  0104
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJUPT  )                                       */
         IKJUPT
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
         IKJECT
*                                                                  0104
*       ;                                                          0104
@DATD    DSECT
@SA00001 DS    18F
@PC00001 DS    4F
@AL00001 DS    4A
         DS    0D
TPUTPARM DS    AL4
         ORG   TPUTPARM
TPUTOPTN DS    AL1
TBUFADR  DS    AL3
         ORG   TPUTPARM+4
APOINTR  DS    AL4
         ORG   APOINTR
@NM00007 DS    AL1
APOINTER DS    AL3
         ORG   APOINTR+4
LENGTH   DS    F
UPLIST   EQU   *                                                ZP60014
LCVALPTR DS    A                                                ZP60014
LCVALLEN DS    F                                                ZP60014
UPVALPTR DS    A                                                ZP60014
UPVALLEN DS    F                                                ZP60014
LINENAME DS    CL20                                             ZP60014
DECDBL   DS    D                                                ZP60014
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RETURNCD EQU   R2
SAVEREG1 EQU   R5
MSGIDLEN EQU   R3
MSGLEN   EQU   R4
TPUTCODE EQU   R3
PTPBPTR  EQU   R2
XPRMLIST EQU   0
UPTPTR   EQU   XPRMLIST
ECTPTR   EQU   XPRMLIST+4
ECBPTR   EQU   XPRMLIST+8
PTPBPTRX EQU   XPRMLIST+12
PTPB     EQU   0
PARMCNTL EQU   PTPB
PARMDTMS EQU   PARMCNTL
PARMMLIN EQU   PARMCNTL
PARMTPUT EQU   PTPB+2
PARMOPTN EQU   PARMTPUT
TPUTTGET EQU   PARMOPTN
PARMAOUT EQU   PTPB+4
CHAIN    EQU   0
CHAINPTR EQU   CHAIN
CHAINLL  EQU   CHAIN+4
CHAINTXT EQU   CHAIN+8
MESSAGE  EQU   0
MSGLL    EQU   MESSAGE
MSGTEXT  EQU   MESSAGE+4
IOSRL    EQU   0
IOSTELM  EQU   IOSRL
INSTACK  EQU   0
INSCODE  EQU   INSTACK
INSOTDD  EQU   INSCODE
UPTX     EQU   0
ECTX     EQU   0
ECB      EQU   0
ECBCBIT  EQU   ECB
PTPBX    EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
ECBCOMPC EQU   ECB
ECBWBIT  EQU   ECB
INSADLSD EQU   INSTACK+1
INSLIST  EQU   INSCODE
INSPROC  EQU   INSCODE
INSPROM  EQU   INSCODE
INSRSVD  EQU   INSCODE
INSINDD  EQU   INSCODE
INSSTOR  EQU   INSCODE
INSTERM  EQU   INSCODE
IOSUNUSD EQU   IOSRL+12
IOSNELM  EQU   IOSRL+10
IOSTLEN  EQU   IOSRL+8
IOSBELM  EQU   IOSRL+4
MSGOO    EQU   MESSAGE+2
CHAINOO  EQU   CHAIN+6
@NM00006 EQU   PARMTPUT+1
PARMFORM EQU   PARMCNTL+1
PARMDMND EQU   PARMCNTL+1
PARMMODE EQU   PARMCNTL+1
PARMPRMT EQU   PARMCNTL
PARMIFOR EQU   PARMCNTL
PARMMLEV EQU   PARMCNTL
PARMSNGL EQU   PARMCNTL
PARMPUT  EQU   PARMCNTL
PARMPBT0 EQU   PARMCNTL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IKJEFT56
/*
//*
//STEP07  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKJEFT56('ZP60014')
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//*
//STEP08  EXEC SMPREC,WORK='SYSALLDA'
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE
          SELECT(ZP60014)
          .
/*
//*
//STEP09CK  EXEC SMPAPP,WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60014)
        CHECK
        .
/*
//*
//STEP09  EXEC SMPAPP,COND=(0,NE),WORK='SYSALLDA'
//SMPCNTL  DD  *
  APPLY
        SELECT(ZP60014)
        DIS(WRITE)
        COMPRESS(ALL)
        .
/*
//
